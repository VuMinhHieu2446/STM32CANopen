
loop_back.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015148  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c84  080153e8  080153e8  000253e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0801606c  0801606c  0002606c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08016070  08016070  00026070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000534  24000000  08016074  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00001e20  24000534  080165a8  00030534  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24002354  080165a8  00032354  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00030534  2**0
                  CONTENTS, READONLY
  9 .debug_info   00041175  00000000  00000000  00030562  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00007656  00000000  00000000  000716d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000020d0  00000000  00000000  00078d30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 00001f10  00000000  00000000  0007ae00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  00041106  00000000  00000000  0007cd10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00037aba  00000000  00000000  000bde16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0016f3bc  00000000  00000000  000f58d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  00264c8c  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00009428  00000000  00000000  00264cdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000534 	.word	0x24000534
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080153d0 	.word	0x080153d0

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000538 	.word	0x24000538
 80002dc:	080153d0 	.word	0x080153d0

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <CO_getUint8>:
 *
 * @param buf Memory buffer to get value from.
 *
 * @return Value
 */
static inline uint8_t CO_getUint8(const void *buf) {
 80003b0:	b480      	push	{r7}
 80003b2:	b085      	sub	sp, #20
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	781b      	ldrb	r3, [r3, #0]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 80003bc:	73fb      	strb	r3, [r7, #15]
 80003be:	7bfb      	ldrb	r3, [r7, #15]
}
 80003c0:	4618      	mov	r0, r3
 80003c2:	3714      	adds	r7, #20
 80003c4:	46bd      	mov	sp, r7
 80003c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ca:	4770      	bx	lr

080003cc <CO_setUint8>:
 * @param buf Memory buffer.
 * @param value Value to be written into buf.
 *
 * @return number of bytes written.
 */
static inline uint8_t CO_setUint8(void *buf, uint8_t value) {
 80003cc:	b480      	push	{r7}
 80003ce:	b083      	sub	sp, #12
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
 80003d4:	460b      	mov	r3, r1
 80003d6:	70fb      	strb	r3, [r7, #3]
 80003d8:	78fa      	ldrb	r2, [r7, #3]
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 80003da:	687b      	ldr	r3, [r7, #4]
 80003dc:	701a      	strb	r2, [r3, #0]
 80003de:	2301      	movs	r3, #1
}
 80003e0:	4618      	mov	r0, r3
 80003e2:	370c      	adds	r7, #12
 80003e4:	46bd      	mov	sp, r7
 80003e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003ea:	4770      	bx	lr

080003ec <CO_setUint32>:
/** Write uint16_t value into memory buffer, see @ref CO_setUint8 */
static inline uint8_t CO_setUint16(void *buf, uint16_t value) {
    memmove(buf, &value, sizeof(value)); return sizeof(value);
}
/** Write uint32_t value into memory buffer, see @ref CO_setUint8 */
static inline uint8_t CO_setUint32(void *buf, uint32_t value) {
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	6078      	str	r0, [r7, #4]
 80003f4:	6039      	str	r1, [r7, #0]
 80003f6:	683a      	ldr	r2, [r7, #0]
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	601a      	str	r2, [r3, #0]
 80003fc:	2304      	movs	r3, #4
}
 80003fe:	4618      	mov	r0, r3
 8000400:	370c      	adds	r7, #12
 8000402:	46bd      	mov	sp, r7
 8000404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000408:	4770      	bx	lr

0800040a <OD_getIndex>:
 *
 * @param entry OD entry returned by @ref OD_find().
 *
 * @return OD index
 */
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 800040a:	b480      	push	{r7}
 800040c:	b083      	sub	sp, #12
 800040e:	af00      	add	r7, sp, #0
 8000410:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d002      	beq.n	800041e <OD_getIndex+0x14>
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	881b      	ldrh	r3, [r3, #0]
 800041c:	e000      	b.n	8000420 <OD_getIndex+0x16>
 800041e:	2300      	movs	r3, #0
}
 8000420:	4618      	mov	r0, r3
 8000422:	370c      	adds	r7, #12
 8000424:	46bd      	mov	sp, r7
 8000426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800042a:	4770      	bx	lr

0800042c <OD_extension_init>:
 *
 * @return "ODR_OK" on success, "ODR_IDX_NOT_EXIST" if OD object doesn't exist.
 */
static inline ODR_t OD_extension_init(OD_entry_t *entry,
                                      OD_extension_t *extension)
{
 800042c:	b480      	push	{r7}
 800042e:	b083      	sub	sp, #12
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
 8000434:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	2b00      	cmp	r3, #0
 800043a:	d101      	bne.n	8000440 <OD_extension_init+0x14>
 800043c:	2305      	movs	r3, #5
 800043e:	e003      	b.n	8000448 <OD_extension_init+0x1c>
    entry->extension = extension;
 8000440:	687b      	ldr	r3, [r7, #4]
 8000442:	683a      	ldr	r2, [r7, #0]
 8000444:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8000446:	2300      	movs	r3, #0
}
 8000448:	4618      	mov	r0, r3
 800044a:	370c      	adds	r7, #12
 800044c:	46bd      	mov	sp, r7
 800044e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000452:	4770      	bx	lr

08000454 <OD_get_u32>:
}

/** Get uint32_t variable from Object Dictionary, see @ref OD_get_value */
static inline ODR_t OD_get_u32(const OD_entry_t *entry, uint8_t subIndex,
                               uint32_t *val, bool_t odOrig)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b086      	sub	sp, #24
 8000458:	af02      	add	r7, sp, #8
 800045a:	60f8      	str	r0, [r7, #12]
 800045c:	607a      	str	r2, [r7, #4]
 800045e:	603b      	str	r3, [r7, #0]
 8000460:	460b      	mov	r3, r1
 8000462:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8000464:	7af9      	ldrb	r1, [r7, #11]
 8000466:	683b      	ldr	r3, [r7, #0]
 8000468:	9300      	str	r3, [sp, #0]
 800046a:	2304      	movs	r3, #4
 800046c:	687a      	ldr	r2, [r7, #4]
 800046e:	68f8      	ldr	r0, [r7, #12]
 8000470:	f001 fba4 	bl	8001bbc <OD_get_value>
 8000474:	4603      	mov	r3, r0
}
 8000476:	4618      	mov	r0, r3
 8000478:	3710      	adds	r7, #16
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}

0800047e <OD_read_1014_default>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_1014_default(OD_stream_t *stream, void *buf,
                                  OD_size_t count, OD_size_t *countRead)
{
 800047e:	b580      	push	{r7, lr}
 8000480:	b086      	sub	sp, #24
 8000482:	af00      	add	r7, sp, #0
 8000484:	60f8      	str	r0, [r7, #12]
 8000486:	60b9      	str	r1, [r7, #8]
 8000488:	607a      	str	r2, [r7, #4]
 800048a:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 800048c:	68fb      	ldr	r3, [r7, #12]
 800048e:	2b00      	cmp	r3, #0
 8000490:	d00c      	beq.n	80004ac <OD_read_1014_default+0x2e>
 8000492:	68fb      	ldr	r3, [r7, #12]
 8000494:	7c5b      	ldrb	r3, [r3, #17]
 8000496:	2b00      	cmp	r3, #0
 8000498:	d108      	bne.n	80004ac <OD_read_1014_default+0x2e>
 800049a:	68bb      	ldr	r3, [r7, #8]
 800049c:	2b00      	cmp	r3, #0
 800049e:	d005      	beq.n	80004ac <OD_read_1014_default+0x2e>
        || count < sizeof(uint32_t) || countRead == NULL
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	2b03      	cmp	r3, #3
 80004a4:	d902      	bls.n	80004ac <OD_read_1014_default+0x2e>
 80004a6:	683b      	ldr	r3, [r7, #0]
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d101      	bne.n	80004b0 <OD_read_1014_default+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 80004ac:	2309      	movs	r3, #9
 80004ae:	e01b      	b.n	80004e8 <OD_read_1014_default+0x6a>
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 80004b0:	68fb      	ldr	r3, [r7, #12]
 80004b2:	685b      	ldr	r3, [r3, #4]
 80004b4:	617b      	str	r3, [r7, #20]

    uint32_t COB_IDEmergency32 = em->producerEnabled ? 0 : 0x80000000;
 80004b6:	697b      	ldr	r3, [r7, #20]
 80004b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <OD_read_1014_default+0x44>
 80004be:	2300      	movs	r3, #0
 80004c0:	e001      	b.n	80004c6 <OD_read_1014_default+0x48>
 80004c2:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80004c6:	613b      	str	r3, [r7, #16]
    COB_IDEmergency32 |= CO_CAN_ID_EMERGENCY + em->nodeId;
 80004c8:	697b      	ldr	r3, [r7, #20]
 80004ca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80004ce:	3380      	adds	r3, #128	; 0x80
 80004d0:	461a      	mov	r2, r3
 80004d2:	693b      	ldr	r3, [r7, #16]
 80004d4:	4313      	orrs	r3, r2
 80004d6:	613b      	str	r3, [r7, #16]
    CO_setUint32(buf, COB_IDEmergency32);
 80004d8:	6939      	ldr	r1, [r7, #16]
 80004da:	68b8      	ldr	r0, [r7, #8]
 80004dc:	f7ff ff86 	bl	80003ec <CO_setUint32>

    *countRead = sizeof(uint32_t);
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	2204      	movs	r2, #4
 80004e4:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 80004e6:	2300      	movs	r3, #0
}
 80004e8:	4618      	mov	r0, r3
 80004ea:	3718      	adds	r7, #24
 80004ec:	46bd      	mov	sp, r7
 80004ee:	bd80      	pop	{r7, pc}

080004f0 <OD_read_1003>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_1003(OD_stream_t *stream, void *buf,
                          OD_size_t count, OD_size_t *countRead)
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	b086      	sub	sp, #24
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	60f8      	str	r0, [r7, #12]
 80004f8:	60b9      	str	r1, [r7, #8]
 80004fa:	607a      	str	r2, [r7, #4]
 80004fc:	603b      	str	r3, [r7, #0]
    if (stream == NULL || buf == NULL || countRead == NULL
 80004fe:	68fb      	ldr	r3, [r7, #12]
 8000500:	2b00      	cmp	r3, #0
 8000502:	d00f      	beq.n	8000524 <OD_read_1003+0x34>
 8000504:	68bb      	ldr	r3, [r7, #8]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d00c      	beq.n	8000524 <OD_read_1003+0x34>
 800050a:	683b      	ldr	r3, [r7, #0]
 800050c:	2b00      	cmp	r3, #0
 800050e:	d009      	beq.n	8000524 <OD_read_1003+0x34>
        || (count < 4 && stream->subIndex > 0) || count < 1
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	2b03      	cmp	r3, #3
 8000514:	d803      	bhi.n	800051e <OD_read_1003+0x2e>
 8000516:	68fb      	ldr	r3, [r7, #12]
 8000518:	7c5b      	ldrb	r3, [r3, #17]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d102      	bne.n	8000524 <OD_read_1003+0x34>
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	2b00      	cmp	r3, #0
 8000522:	d101      	bne.n	8000528 <OD_read_1003+0x38>
    ) {
        return ODR_DEV_INCOMPAT;
 8000524:	2309      	movs	r3, #9
 8000526:	e04d      	b.n	80005c4 <OD_read_1003+0xd4>
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	685b      	ldr	r3, [r3, #4]
 800052c:	613b      	str	r3, [r7, #16]

    if (em->fifoSize < 2) {
 800052e:	693b      	ldr	r3, [r7, #16]
 8000530:	7f1b      	ldrb	r3, [r3, #28]
 8000532:	2b01      	cmp	r3, #1
 8000534:	d801      	bhi.n	800053a <OD_read_1003+0x4a>
        return ODR_DEV_INCOMPAT;
 8000536:	2309      	movs	r3, #9
 8000538:	e044      	b.n	80005c4 <OD_read_1003+0xd4>
    }
    if (stream->subIndex == 0) {
 800053a:	68fb      	ldr	r3, [r7, #12]
 800053c:	7c5b      	ldrb	r3, [r3, #17]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d10b      	bne.n	800055a <OD_read_1003+0x6a>
        CO_setUint8(buf, em->fifoCount);
 8000542:	693b      	ldr	r3, [r7, #16]
 8000544:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000548:	4619      	mov	r1, r3
 800054a:	68b8      	ldr	r0, [r7, #8]
 800054c:	f7ff ff3e 	bl	80003cc <CO_setUint8>

        *countRead = sizeof(uint8_t);
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	2201      	movs	r2, #1
 8000554:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 8000556:	2300      	movs	r3, #0
 8000558:	e034      	b.n	80005c4 <OD_read_1003+0xd4>
    }
    else if (stream->subIndex <= em->fifoCount) {
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	7c5a      	ldrb	r2, [r3, #17]
 800055e:	693b      	ldr	r3, [r7, #16]
 8000560:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000564:	429a      	cmp	r2, r3
 8000566:	d82c      	bhi.n	80005c2 <OD_read_1003+0xd2>
        /* newest error is reported on subIndex 1 and is stored just behind
         * fifoWrPtr. Get correct index in FIFO buffer. */
        int16_t index = (int16_t)em->fifoWrPtr - stream->subIndex;
 8000568:	693b      	ldr	r3, [r7, #16]
 800056a:	7f5b      	ldrb	r3, [r3, #29]
 800056c:	b29a      	uxth	r2, r3
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	7c5b      	ldrb	r3, [r3, #17]
 8000572:	b29b      	uxth	r3, r3
 8000574:	1ad3      	subs	r3, r2, r3
 8000576:	b29b      	uxth	r3, r3
 8000578:	82fb      	strh	r3, [r7, #22]
        if (index < 0) {
 800057a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800057e:	2b00      	cmp	r3, #0
 8000580:	da07      	bge.n	8000592 <OD_read_1003+0xa2>
            index += em->fifoSize;
 8000582:	693b      	ldr	r3, [r7, #16]
 8000584:	7f1b      	ldrb	r3, [r3, #28]
 8000586:	b29a      	uxth	r2, r3
 8000588:	8afb      	ldrh	r3, [r7, #22]
 800058a:	4413      	add	r3, r2
 800058c:	b29b      	uxth	r3, r3
 800058e:	82fb      	strh	r3, [r7, #22]
 8000590:	e007      	b.n	80005a2 <OD_read_1003+0xb2>
        }
        else if (index >= (em->fifoSize)) {
 8000592:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000596:	693a      	ldr	r2, [r7, #16]
 8000598:	7f12      	ldrb	r2, [r2, #28]
 800059a:	4293      	cmp	r3, r2
 800059c:	db01      	blt.n	80005a2 <OD_read_1003+0xb2>
            return ODR_DEV_INCOMPAT;
 800059e:	2309      	movs	r3, #9
 80005a0:	e010      	b.n	80005c4 <OD_read_1003+0xd4>
        }
        CO_setUint32(buf, em->fifo[index].msg);
 80005a2:	693b      	ldr	r3, [r7, #16]
 80005a4:	699a      	ldr	r2, [r3, #24]
 80005a6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80005aa:	00db      	lsls	r3, r3, #3
 80005ac:	4413      	add	r3, r2
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	4619      	mov	r1, r3
 80005b2:	68b8      	ldr	r0, [r7, #8]
 80005b4:	f7ff ff1a 	bl	80003ec <CO_setUint32>

        *countRead = sizeof(uint32_t);
 80005b8:	683b      	ldr	r3, [r7, #0]
 80005ba:	2204      	movs	r2, #4
 80005bc:	601a      	str	r2, [r3, #0]
        return ODR_OK;
 80005be:	2300      	movs	r3, #0
 80005c0:	e000      	b.n	80005c4 <OD_read_1003+0xd4>
    }
    else {
        return ODR_NO_DATA;
 80005c2:	2319      	movs	r3, #25
    }
}
 80005c4:	4618      	mov	r0, r3
 80005c6:	3718      	adds	r7, #24
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <OD_write_1003>:

static ODR_t OD_write_1003(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	60f8      	str	r0, [r7, #12]
 80005d4:	60b9      	str	r1, [r7, #8]
 80005d6:	607a      	str	r2, [r7, #4]
 80005d8:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL || count != 1
 80005da:	68fb      	ldr	r3, [r7, #12]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d00c      	beq.n	80005fa <OD_write_1003+0x2e>
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	7c5b      	ldrb	r3, [r3, #17]
 80005e4:	2b00      	cmp	r3, #0
 80005e6:	d108      	bne.n	80005fa <OD_write_1003+0x2e>
 80005e8:	68bb      	ldr	r3, [r7, #8]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d005      	beq.n	80005fa <OD_write_1003+0x2e>
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	2b01      	cmp	r3, #1
 80005f2:	d102      	bne.n	80005fa <OD_write_1003+0x2e>
        || countWritten == NULL)
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d101      	bne.n	80005fe <OD_write_1003+0x32>
    {
        return ODR_DEV_INCOMPAT;
 80005fa:	2309      	movs	r3, #9
 80005fc:	e012      	b.n	8000624 <OD_write_1003+0x58>
    }

    if (CO_getUint8(buf) != 0) {
 80005fe:	68b8      	ldr	r0, [r7, #8]
 8000600:	f7ff fed6 	bl	80003b0 <CO_getUint8>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <OD_write_1003+0x42>
        return ODR_INVALID_VALUE;
 800060a:	230f      	movs	r3, #15
 800060c:	e00a      	b.n	8000624 <OD_write_1003+0x58>
    }

    CO_EM_t *em = (CO_EM_t *)stream->object;
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	685b      	ldr	r3, [r3, #4]
 8000612:	617b      	str	r3, [r7, #20]

    /* clear error history */
    em->fifoCount = 0;
 8000614:	697b      	ldr	r3, [r7, #20]
 8000616:	2200      	movs	r2, #0
 8000618:	f883 2020 	strb.w	r2, [r3, #32]

    *countWritten = sizeof(uint8_t);
 800061c:	683b      	ldr	r3, [r7, #0]
 800061e:	2201      	movs	r2, #1
 8000620:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8000622:	2300      	movs	r3, #0
}
 8000624:	4618      	mov	r0, r3
 8000626:	3718      	adds	r7, #24
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}

0800062c <CO_EM_init>:
                            CO_CANmodule_t *CANdevRx,
                            uint16_t CANdevRxIdx,
#endif
                            const uint8_t nodeId,
                            uint32_t *errInfo)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b088      	sub	sp, #32
 8000630:	af02      	add	r7, sp, #8
 8000632:	60f8      	str	r0, [r7, #12]
 8000634:	60b9      	str	r1, [r7, #8]
 8000636:	607a      	str	r2, [r7, #4]
 8000638:	603b      	str	r3, [r7, #0]
    (void) nodeId; /* may be unused */
    CO_ReturnError_t ret = CO_ERROR_NO;
 800063a:	2300      	movs	r3, #0
 800063c:	75fb      	strb	r3, [r7, #23]
    ODR_t odRet;

    /* verify arguments */
    if (em == NULL || OD_1001_errReg == NULL
 800063e:	68fb      	ldr	r3, [r7, #12]
 8000640:	2b00      	cmp	r3, #0
 8000642:	d01a      	beq.n	800067a <CO_EM_init+0x4e>
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	2b00      	cmp	r3, #0
 8000648:	d017      	beq.n	800067a <CO_EM_init+0x4e>
#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
        || (fifo == NULL && fifoSize >= 2)
 800064a:	683b      	ldr	r3, [r7, #0]
 800064c:	2b00      	cmp	r3, #0
 800064e:	d103      	bne.n	8000658 <CO_EM_init+0x2c>
 8000650:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000654:	2b01      	cmp	r3, #1
 8000656:	d810      	bhi.n	800067a <CO_EM_init+0x4e>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
        || OD_1014_cobIdEm == NULL || CANdevTx == NULL
 8000658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800065a:	2b00      	cmp	r3, #0
 800065c:	d00d      	beq.n	800067a <CO_EM_init+0x4e>
 800065e:	68bb      	ldr	r3, [r7, #8]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d00a      	beq.n	800067a <CO_EM_init+0x4e>
        || nodeId < 1 || nodeId > 127
 8000664:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000668:	2b00      	cmp	r3, #0
 800066a:	d006      	beq.n	800067a <CO_EM_init+0x4e>
 800066c:	f997 3030 	ldrsb.w	r3, [r7, #48]	; 0x30
 8000670:	2b00      	cmp	r3, #0
 8000672:	db02      	blt.n	800067a <CO_EM_init+0x4e>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
       || OD_1003_preDefErr == NULL
 8000674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000676:	2b00      	cmp	r3, #0
 8000678:	d102      	bne.n	8000680 <CO_EM_init+0x54>
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER
       || CANdevRx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800067a:	f04f 33ff 	mov.w	r3, #4294967295
 800067e:	e0a7      	b.n	80007d0 <CO_EM_init+0x1a4>
    }

    /* clear the object */
    memset(em, 0, sizeof(CO_EM_t));
 8000680:	2250      	movs	r2, #80	; 0x50
 8000682:	2100      	movs	r1, #0
 8000684:	68f8      	ldr	r0, [r7, #12]
 8000686:	f013 fd23 	bl	80140d0 <memset>

    /* set object variables */
    em->CANdevTx = CANdevTx;
 800068a:	68fb      	ldr	r3, [r7, #12]
 800068c:	68ba      	ldr	r2, [r7, #8]
 800068e:	615a      	str	r2, [r3, #20]

    /* get and verify "Error register" from Object Dictionary */
    em->errorRegister = OD_getPtr(OD_1001_errReg, 0, sizeof(uint8_t), NULL);
 8000690:	2300      	movs	r3, #0
 8000692:	2201      	movs	r2, #1
 8000694:	2100      	movs	r1, #0
 8000696:	6878      	ldr	r0, [r7, #4]
 8000698:	f001 faf7 	bl	8001c8a <OD_getPtr>
 800069c:	4602      	mov	r2, r0
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	60da      	str	r2, [r3, #12]
    if (em->errorRegister == NULL) {
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	68db      	ldr	r3, [r3, #12]
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d10c      	bne.n	80006c4 <CO_EM_init+0x98>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1001_errReg);
 80006aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d006      	beq.n	80006be <CO_EM_init+0x92>
 80006b0:	6878      	ldr	r0, [r7, #4]
 80006b2:	f7ff feaa 	bl	800040a <OD_getIndex>
 80006b6:	4603      	mov	r3, r0
 80006b8:	461a      	mov	r2, r3
 80006ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80006bc:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 80006be:	f06f 030b 	mvn.w	r3, #11
 80006c2:	e085      	b.n	80007d0 <CO_EM_init+0x1a4>
    }
    *em->errorRegister = 0;
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	68db      	ldr	r3, [r3, #12]
 80006c8:	2200      	movs	r2, #0
 80006ca:	701a      	strb	r2, [r3, #0]

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    em->fifo = fifo;
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	683a      	ldr	r2, [r7, #0]
 80006d0:	619a      	str	r2, [r3, #24]
    em->fifoSize = fifoSize;
 80006d2:	68fb      	ldr	r3, [r7, #12]
 80006d4:	f897 2020 	ldrb.w	r2, [r7, #32]
 80006d8:	771a      	strb	r2, [r3, #28]
#endif
#if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
    /* get initial and verify "COB-ID EMCY" from Object Dictionary */
    uint32_t COB_IDEmergency32;
    odRet = OD_get_u32(OD_1014_cobIdEm, 0, &COB_IDEmergency32, true);
 80006da:	f107 0210 	add.w	r2, r7, #16
 80006de:	2301      	movs	r3, #1
 80006e0:	2100      	movs	r1, #0
 80006e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80006e4:	f7ff feb6 	bl	8000454 <OD_get_u32>
 80006e8:	4603      	mov	r3, r0
 80006ea:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK || (COB_IDEmergency32 & 0x7FFFF800) != 0) {
 80006ec:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d104      	bne.n	80006fe <CO_EM_init+0xd2>
 80006f4:	693a      	ldr	r2, [r7, #16]
 80006f6:	4b38      	ldr	r3, [pc, #224]	; (80007d8 <CO_EM_init+0x1ac>)
 80006f8:	4013      	ands	r3, r2
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d010      	beq.n	8000720 <CO_EM_init+0xf4>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1014_cobIdEm);
 80006fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000700:	2b00      	cmp	r3, #0
 8000702:	d006      	beq.n	8000712 <CO_EM_init+0xe6>
 8000704:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000706:	f7ff fe80 	bl	800040a <OD_getIndex>
 800070a:	4603      	mov	r3, r0
 800070c:	461a      	mov	r2, r3
 800070e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000710:	601a      	str	r2, [r3, #0]
         /* don't break a program, if only value of a parameter is wrong */
        if (odRet != ODR_OK)
 8000712:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8000716:	2b00      	cmp	r3, #0
 8000718:	d002      	beq.n	8000720 <CO_EM_init+0xf4>
            return CO_ERROR_OD_PARAMETERS;
 800071a:	f06f 030b 	mvn.w	r3, #11
 800071e:	e057      	b.n	80007d0 <CO_EM_init+0x1a4>
    /* if default producerCanId is used, then value of CO_CAN_ID_EMERGENCY
     * (0x80) is stored into non-volatile memory. In that case it is necessary
     * to add nodeId of this node to the stored value. */
    if (producerCanId == CO_CAN_ID_EMERGENCY) producerCanId += nodeId;
 #else
    uint16_t producerCanId = CO_CAN_ID_EMERGENCY + nodeId;
 8000720:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8000724:	b29b      	uxth	r3, r3
 8000726:	3380      	adds	r3, #128	; 0x80
 8000728:	82bb      	strh	r3, [r7, #20]
    em->producerEnabled = (COB_IDEmergency32 & 0x80000000) == 0;
 800072a:	693b      	ldr	r3, [r7, #16]
 800072c:	43db      	mvns	r3, r3
 800072e:	0fdb      	lsrs	r3, r3, #31
 8000730:	b2db      	uxtb	r3, r3
 8000732:	461a      	mov	r2, r3
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	625a      	str	r2, [r3, #36]	; 0x24

    em->OD_1014_extension.object = em;
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	68fa      	ldr	r2, [r7, #12]
 800073c:	631a      	str	r2, [r3, #48]	; 0x30
    em->OD_1014_extension.read = OD_read_1014_default;
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	4a26      	ldr	r2, [pc, #152]	; (80007dc <CO_EM_init+0x1b0>)
 8000742:	635a      	str	r2, [r3, #52]	; 0x34
    em->OD_1014_extension.write = OD_writeOriginal;
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	4a26      	ldr	r2, [pc, #152]	; (80007e0 <CO_EM_init+0x1b4>)
 8000748:	639a      	str	r2, [r3, #56]	; 0x38
    odRet = OD_extension_init(OD_1014_cobIdEm, &em->OD_1014_extension);
 800074a:	68fb      	ldr	r3, [r7, #12]
 800074c:	3330      	adds	r3, #48	; 0x30
 800074e:	4619      	mov	r1, r3
 8000750:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000752:	f7ff fe6b 	bl	800042c <OD_extension_init>
 8000756:	4603      	mov	r3, r0
 8000758:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 800075a:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800075e:	2b00      	cmp	r3, #0
 8000760:	d00c      	beq.n	800077c <CO_EM_init+0x150>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1014_cobIdEm);
 8000762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000764:	2b00      	cmp	r3, #0
 8000766:	d006      	beq.n	8000776 <CO_EM_init+0x14a>
 8000768:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800076a:	f7ff fe4e 	bl	800040a <OD_getIndex>
 800076e:	4603      	mov	r3, r0
 8000770:	461a      	mov	r2, r3
 8000772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000774:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8000776:	f06f 030b 	mvn.w	r3, #11
 800077a:	e029      	b.n	80007d0 <CO_EM_init+0x1a4>
    }
 #endif

    /* configure parameters and emergency message CAN transmission */
    em->nodeId = nodeId;
 800077c:	68fb      	ldr	r3, [r7, #12]
 800077e:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8000782:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

    em->CANtxBuff = CO_CANtxBufferInit(
 8000786:	8aba      	ldrh	r2, [r7, #20]
 8000788:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800078a:	2300      	movs	r3, #0
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2308      	movs	r3, #8
 8000790:	9300      	str	r3, [sp, #0]
 8000792:	2300      	movs	r3, #0
 8000794:	68b8      	ldr	r0, [r7, #8]
 8000796:	f007 fc25 	bl	8007fe4 <CO_CANtxBufferInit>
 800079a:	4602      	mov	r2, r0
 800079c:	68fb      	ldr	r3, [r7, #12]
 800079e:	62da      	str	r2, [r3, #44]	; 0x2c
            producerCanId,      /* CAN identifier */
            0,                  /* rtr */
            8U,                 /* number of data bytes */
            0);                 /* synchronous message flag bit */

    if (em->CANtxBuff == NULL) {
 80007a0:	68fb      	ldr	r3, [r7, #12]
 80007a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d102      	bne.n	80007ae <CO_EM_init+0x182>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80007a8:	f04f 33ff 	mov.w	r3, #4294967295
 80007ac:	e010      	b.n	80007d0 <CO_EM_init+0x1a4>
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER */


#if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
    /* If OD entry available, make access to em->preDefErr */
    em->OD_1003_extension.object = em;
 80007ae:	68fb      	ldr	r3, [r7, #12]
 80007b0:	68fa      	ldr	r2, [r7, #12]
 80007b2:	641a      	str	r2, [r3, #64]	; 0x40
    em->OD_1003_extension.read = OD_read_1003;
 80007b4:	68fb      	ldr	r3, [r7, #12]
 80007b6:	4a0b      	ldr	r2, [pc, #44]	; (80007e4 <CO_EM_init+0x1b8>)
 80007b8:	645a      	str	r2, [r3, #68]	; 0x44
    em->OD_1003_extension.write = OD_write_1003;
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	4a0a      	ldr	r2, [pc, #40]	; (80007e8 <CO_EM_init+0x1bc>)
 80007be:	649a      	str	r2, [r3, #72]	; 0x48
    OD_extension_init(OD_1003_preDefErr, &em->OD_1003_extension);
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	3340      	adds	r3, #64	; 0x40
 80007c4:	4619      	mov	r1, r3
 80007c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80007c8:	f7ff fe30 	bl	800042c <OD_extension_init>
        0,                      /* rtr */
        (void*)em,              /* object passed to receive function */
        CO_EM_receive);         /* this function will process received message*/
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_CONSUMER */

    return ret;
 80007cc:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80007d0:	4618      	mov	r0, r3
 80007d2:	3718      	adds	r7, #24
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	7ffff800 	.word	0x7ffff800
 80007dc:	0800047f 	.word	0x0800047f
 80007e0:	080017f1 	.word	0x080017f1
 80007e4:	080004f1 	.word	0x080004f1
 80007e8:	080005cd 	.word	0x080005cd

080007ec <CO_EM_process>:
/******************************************************************************/
void CO_EM_process(CO_EM_t *em,
                   bool_t NMTisPreOrOperational,
                   uint32_t timeDifference_us,
                   uint32_t *timerNext_us)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b088      	sub	sp, #32
 80007f0:	af02      	add	r7, sp, #8
 80007f2:	60f8      	str	r0, [r7, #12]
 80007f4:	60b9      	str	r1, [r7, #8]
 80007f6:	607a      	str	r2, [r7, #4]
 80007f8:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    /* verify errors from driver */
    uint16_t CANerrSt = em->CANdevTx->CANerrorStatus;
 80007fa:	68fb      	ldr	r3, [r7, #12]
 80007fc:	695b      	ldr	r3, [r3, #20]
 80007fe:	8a5b      	ldrh	r3, [r3, #18]
 8000800:	82bb      	strh	r3, [r7, #20]
    if (CANerrSt != em->CANerrorStatusOld) {
 8000802:	68fb      	ldr	r3, [r7, #12]
 8000804:	8a1b      	ldrh	r3, [r3, #16]
 8000806:	8aba      	ldrh	r2, [r7, #20]
 8000808:	429a      	cmp	r2, r3
 800080a:	f000 80a2 	beq.w	8000952 <CO_EM_process+0x166>
        uint16_t CANerrStChanged = CANerrSt ^ em->CANerrorStatusOld;
 800080e:	68fb      	ldr	r3, [r7, #12]
 8000810:	8a1a      	ldrh	r2, [r3, #16]
 8000812:	8abb      	ldrh	r3, [r7, #20]
 8000814:	4053      	eors	r3, r2
 8000816:	827b      	strh	r3, [r7, #18]
        em->CANerrorStatusOld = CANerrSt;
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	8aba      	ldrh	r2, [r7, #20]
 800081c:	821a      	strh	r2, [r3, #16]

        if (CANerrStChanged & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING))
 800081e:	8a7a      	ldrh	r2, [r7, #18]
 8000820:	f240 1301 	movw	r3, #257	; 0x101
 8000824:	4013      	ands	r3, r2
 8000826:	2b00      	cmp	r3, #0
 8000828:	d010      	beq.n	800084c <CO_EM_process+0x60>
            CO_error(em,
                (CANerrSt & (CO_CAN_ERRTX_WARNING | CO_CAN_ERRRX_WARNING)) != 0,
 800082a:	8aba      	ldrh	r2, [r7, #20]
 800082c:	f240 1301 	movw	r3, #257	; 0x101
 8000830:	4013      	ands	r3, r2
            CO_error(em,
 8000832:	2b00      	cmp	r3, #0
 8000834:	bf14      	ite	ne
 8000836:	2301      	movne	r3, #1
 8000838:	2300      	moveq	r3, #0
 800083a:	b2db      	uxtb	r3, r3
 800083c:	4619      	mov	r1, r3
 800083e:	2300      	movs	r3, #0
 8000840:	9300      	str	r3, [sp, #0]
 8000842:	2300      	movs	r3, #0
 8000844:	2201      	movs	r2, #1
 8000846:	68f8      	ldr	r0, [r7, #12]
 8000848:	f000 f91a 	bl	8000a80 <CO_error>
                CO_EM_CAN_BUS_WARNING, CO_EMC_NO_ERROR, 0);

        if (CANerrStChanged & CO_CAN_ERRTX_PASSIVE)
 800084c:	8a7b      	ldrh	r3, [r7, #18]
 800084e:	f003 0302 	and.w	r3, r3, #2
 8000852:	2b00      	cmp	r3, #0
 8000854:	d010      	beq.n	8000878 <CO_EM_process+0x8c>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PASSIVE) != 0,
 8000856:	8abb      	ldrh	r3, [r7, #20]
 8000858:	f003 0302 	and.w	r3, r3, #2
 800085c:	2b00      	cmp	r3, #0
 800085e:	bf14      	ite	ne
 8000860:	2301      	movne	r3, #1
 8000862:	2300      	moveq	r3, #0
 8000864:	b2db      	uxtb	r3, r3
 8000866:	4619      	mov	r1, r3
 8000868:	2300      	movs	r3, #0
 800086a:	9300      	str	r3, [sp, #0]
 800086c:	f248 1320 	movw	r3, #33056	; 0x8120
 8000870:	2207      	movs	r2, #7
 8000872:	68f8      	ldr	r0, [r7, #12]
 8000874:	f000 f904 	bl	8000a80 <CO_error>
                     CO_EM_CAN_TX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);

        if (CANerrStChanged & CO_CAN_ERRTX_BUS_OFF)
 8000878:	8a7b      	ldrh	r3, [r7, #18]
 800087a:	f003 0304 	and.w	r3, r3, #4
 800087e:	2b00      	cmp	r3, #0
 8000880:	d010      	beq.n	80008a4 <CO_EM_process+0xb8>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_BUS_OFF) != 0,
 8000882:	8abb      	ldrh	r3, [r7, #20]
 8000884:	f003 0304 	and.w	r3, r3, #4
 8000888:	2b00      	cmp	r3, #0
 800088a:	bf14      	ite	ne
 800088c:	2301      	movne	r3, #1
 800088e:	2300      	moveq	r3, #0
 8000890:	b2db      	uxtb	r3, r3
 8000892:	4619      	mov	r1, r3
 8000894:	2300      	movs	r3, #0
 8000896:	9300      	str	r3, [sp, #0]
 8000898:	f248 1340 	movw	r3, #33088	; 0x8140
 800089c:	2212      	movs	r2, #18
 800089e:	68f8      	ldr	r0, [r7, #12]
 80008a0:	f000 f8ee 	bl	8000a80 <CO_error>
                     CO_EM_CAN_TX_BUS_OFF, CO_EMC_BUS_OFF_RECOVERED, 0);

        if (CANerrStChanged & CO_CAN_ERRTX_OVERFLOW)
 80008a4:	8a7b      	ldrh	r3, [r7, #18]
 80008a6:	f003 0308 	and.w	r3, r3, #8
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d010      	beq.n	80008d0 <CO_EM_process+0xe4>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_OVERFLOW) != 0,
 80008ae:	8abb      	ldrh	r3, [r7, #20]
 80008b0:	f003 0308 	and.w	r3, r3, #8
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	bf14      	ite	ne
 80008b8:	2301      	movne	r3, #1
 80008ba:	2300      	moveq	r3, #0
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	4619      	mov	r1, r3
 80008c0:	2300      	movs	r3, #0
 80008c2:	9300      	str	r3, [sp, #0]
 80008c4:	f248 1310 	movw	r3, #33040	; 0x8110
 80008c8:	2214      	movs	r2, #20
 80008ca:	68f8      	ldr	r0, [r7, #12]
 80008cc:	f000 f8d8 	bl	8000a80 <CO_error>
                     CO_EM_CAN_TX_OVERFLOW, CO_EMC_CAN_OVERRUN, 0);

        if (CANerrStChanged & CO_CAN_ERRTX_PDO_LATE)
 80008d0:	8a7b      	ldrh	r3, [r7, #18]
 80008d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d010      	beq.n	80008fc <CO_EM_process+0x110>
            CO_error(em, (CANerrSt & CO_CAN_ERRTX_PDO_LATE) != 0,
 80008da:	8abb      	ldrh	r3, [r7, #20]
 80008dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	bf14      	ite	ne
 80008e4:	2301      	movne	r3, #1
 80008e6:	2300      	moveq	r3, #0
 80008e8:	b2db      	uxtb	r3, r3
 80008ea:	4619      	mov	r1, r3
 80008ec:	2300      	movs	r3, #0
 80008ee:	9300      	str	r3, [sp, #0]
 80008f0:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80008f4:	2215      	movs	r2, #21
 80008f6:	68f8      	ldr	r0, [r7, #12]
 80008f8:	f000 f8c2 	bl	8000a80 <CO_error>
                     CO_EM_TPDO_OUTSIDE_WINDOW, CO_EMC_COMMUNICATION, 0);

        if (CANerrStChanged & CO_CAN_ERRRX_PASSIVE)
 80008fc:	8a7b      	ldrh	r3, [r7, #18]
 80008fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000902:	2b00      	cmp	r3, #0
 8000904:	d010      	beq.n	8000928 <CO_EM_process+0x13c>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_PASSIVE) != 0,
 8000906:	8abb      	ldrh	r3, [r7, #20]
 8000908:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800090c:	2b00      	cmp	r3, #0
 800090e:	bf14      	ite	ne
 8000910:	2301      	movne	r3, #1
 8000912:	2300      	moveq	r3, #0
 8000914:	b2db      	uxtb	r3, r3
 8000916:	4619      	mov	r1, r3
 8000918:	2300      	movs	r3, #0
 800091a:	9300      	str	r3, [sp, #0]
 800091c:	f248 1320 	movw	r3, #33056	; 0x8120
 8000920:	2206      	movs	r2, #6
 8000922:	68f8      	ldr	r0, [r7, #12]
 8000924:	f000 f8ac 	bl	8000a80 <CO_error>
                     CO_EM_CAN_RX_BUS_PASSIVE, CO_EMC_CAN_PASSIVE, 0);

        if (CANerrStChanged & CO_CAN_ERRRX_OVERFLOW)
 8000928:	8a7b      	ldrh	r3, [r7, #18]
 800092a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800092e:	2b00      	cmp	r3, #0
 8000930:	d00f      	beq.n	8000952 <CO_EM_process+0x166>
            CO_error(em, (CANerrSt & CO_CAN_ERRRX_OVERFLOW) != 0,
 8000932:	8abb      	ldrh	r3, [r7, #20]
 8000934:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000938:	2b00      	cmp	r3, #0
 800093a:	bf14      	ite	ne
 800093c:	2301      	movne	r3, #1
 800093e:	2300      	moveq	r3, #0
 8000940:	b2db      	uxtb	r3, r3
 8000942:	4619      	mov	r1, r3
 8000944:	2300      	movs	r3, #0
 8000946:	9300      	str	r3, [sp, #0]
 8000948:	2313      	movs	r3, #19
 800094a:	2213      	movs	r2, #19
 800094c:	68f8      	ldr	r0, [r7, #12]
 800094e:	f000 f897 	bl	8000a80 <CO_error>
                     CO_EM_CAN_RXB_OVERFLOW, CO_EM_CAN_RXB_OVERFLOW, 0);
    }

    /* calculate Error register */
    uint8_t errorRegister = 0U;
 8000952:	2300      	movs	r3, #0
 8000954:	75fb      	strb	r3, [r7, #23]
    if (CO_CONFIG_ERR_CONDITION_GENERIC)
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	795b      	ldrb	r3, [r3, #5]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d003      	beq.n	8000966 <CO_EM_process+0x17a>
        errorRegister |= CO_ERR_REG_GENERIC_ERR;
 800095e:	7dfb      	ldrb	r3, [r7, #23]
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	75fb      	strb	r3, [r7, #23]
#endif
#ifdef CO_CONFIG_ERR_CONDITION_TEMPERATURE
    if (CO_CONFIG_ERR_CONDITION_TEMPERATURE)
        errorRegister |= CO_ERR_REG_TEMPERATURE;
#endif
    if (CO_CONFIG_ERR_CONDITION_COMMUNICATION)
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	789b      	ldrb	r3, [r3, #2]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d103      	bne.n	8000976 <CO_EM_process+0x18a>
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	78db      	ldrb	r3, [r3, #3]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d003      	beq.n	800097e <CO_EM_process+0x192>
        errorRegister |= CO_ERR_REG_COMMUNICATION;
 8000976:	7dfb      	ldrb	r3, [r7, #23]
 8000978:	f043 0310 	orr.w	r3, r3, #16
 800097c:	75fb      	strb	r3, [r7, #23]
#ifdef CO_CONFIG_ERR_CONDITION_DEV_PROFILE
    if (CO_CONFIG_ERR_CONDITION_DEV_PROFILE)
        errorRegister |= CO_ERR_REG_DEV_PROFILE;
#endif
    if (CO_CONFIG_ERR_CONDITION_MANUFACTURER)
 800097e:	68fb      	ldr	r3, [r7, #12]
 8000980:	7a1b      	ldrb	r3, [r3, #8]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d103      	bne.n	800098e <CO_EM_process+0x1a2>
 8000986:	68fb      	ldr	r3, [r7, #12]
 8000988:	7a5b      	ldrb	r3, [r3, #9]
 800098a:	2b00      	cmp	r3, #0
 800098c:	d003      	beq.n	8000996 <CO_EM_process+0x1aa>
        errorRegister |= CO_ERR_REG_MANUFACTURER;
 800098e:	7dfb      	ldrb	r3, [r7, #23]
 8000990:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000994:	75fb      	strb	r3, [r7, #23]
    *em->errorRegister = errorRegister;
 8000996:	68fb      	ldr	r3, [r7, #12]
 8000998:	68db      	ldr	r3, [r3, #12]
 800099a:	7dfa      	ldrb	r2, [r7, #23]
 800099c:	701a      	strb	r2, [r3, #0]

    if (!NMTisPreOrOperational) {
 800099e:	68bb      	ldr	r3, [r7, #8]
 80009a0:	2b00      	cmp	r3, #0
 80009a2:	d067      	beq.n	8000a74 <CO_EM_process+0x288>
        return;
    }

    /* post-process Emergency message in fifo buffer. */
#if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
    if (em->fifoSize >= 2) {
 80009a4:	68fb      	ldr	r3, [r7, #12]
 80009a6:	7f1b      	ldrb	r3, [r3, #28]
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d965      	bls.n	8000a78 <CO_EM_process+0x28c>
        uint8_t fifoPpPtr = em->fifoPpPtr;
 80009ac:	68fb      	ldr	r3, [r7, #12]
 80009ae:	7f9b      	ldrb	r3, [r3, #30]
 80009b0:	747b      	strb	r3, [r7, #17]
        if (fifoPpPtr != em->fifoWrPtr && !em->CANtxBuff->bufferFull
            && em->inhibitEmTimer >= em->inhibitEmTime_us
        ) {
            em->inhibitEmTimer = 0;
 #else
        if (fifoPpPtr != em->fifoWrPtr && !em->CANtxBuff->bufferFull) {
 80009b2:	68fb      	ldr	r3, [r7, #12]
 80009b4:	7f5b      	ldrb	r3, [r3, #29]
 80009b6:	7c7a      	ldrb	r2, [r7, #17]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d05d      	beq.n	8000a78 <CO_EM_process+0x28c>
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009c0:	691b      	ldr	r3, [r3, #16]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d158      	bne.n	8000a78 <CO_EM_process+0x28c>
 #endif
            /* add error register to emergency message */
            em->fifo[fifoPpPtr].msg |= (uint32_t) errorRegister << 16;
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	699a      	ldr	r2, [r3, #24]
 80009ca:	7c7b      	ldrb	r3, [r7, #17]
 80009cc:	00db      	lsls	r3, r3, #3
 80009ce:	4413      	add	r3, r2
 80009d0:	6819      	ldr	r1, [r3, #0]
 80009d2:	7dfb      	ldrb	r3, [r7, #23]
 80009d4:	041a      	lsls	r2, r3, #16
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	6998      	ldr	r0, [r3, #24]
 80009da:	7c7b      	ldrb	r3, [r7, #17]
 80009dc:	00db      	lsls	r3, r3, #3
 80009de:	4403      	add	r3, r0
 80009e0:	430a      	orrs	r2, r1
 80009e2:	601a      	str	r2, [r3, #0]

            /* send emergency message */
            memcpy(em->CANtxBuff->data, &em->fifo[fifoPpPtr].msg,
 80009e4:	68fb      	ldr	r3, [r7, #12]
 80009e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80009e8:	1d58      	adds	r0, r3, #5
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	699a      	ldr	r2, [r3, #24]
 80009ee:	7c7b      	ldrb	r3, [r7, #17]
 80009f0:	00db      	lsls	r3, r3, #3
 80009f2:	4413      	add	r3, r2
 80009f4:	2208      	movs	r2, #8
 80009f6:	4619      	mov	r1, r3
 80009f8:	f013 fb42 	bl	8014080 <memcpy>
                sizeof(em->CANtxBuff->data));
            CO_CANsend(em->CANdevTx, em->CANtxBuff);
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	695a      	ldr	r2, [r3, #20]
 8000a00:	68fb      	ldr	r3, [r7, #12]
 8000a02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a04:	4619      	mov	r1, r3
 8000a06:	4610      	mov	r0, r2
 8000a08:	f007 fbb2 	bl	8008170 <CO_CANsend>
                                   CO_SWAP_32(em->fifo[fifoPpPtr].info));
            }
 #endif

            /* increment pointer */
            em->fifoPpPtr = (++fifoPpPtr < em->fifoSize) ? fifoPpPtr : 0;
 8000a0c:	7c7b      	ldrb	r3, [r7, #17]
 8000a0e:	3301      	adds	r3, #1
 8000a10:	747b      	strb	r3, [r7, #17]
 8000a12:	68fb      	ldr	r3, [r7, #12]
 8000a14:	7f1b      	ldrb	r3, [r3, #28]
 8000a16:	7c7a      	ldrb	r2, [r7, #17]
 8000a18:	429a      	cmp	r2, r3
 8000a1a:	d201      	bcs.n	8000a20 <CO_EM_process+0x234>
 8000a1c:	7c7a      	ldrb	r2, [r7, #17]
 8000a1e:	e000      	b.n	8000a22 <CO_EM_process+0x236>
 8000a20:	2200      	movs	r2, #0
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	779a      	strb	r2, [r3, #30]

            /* verify message buffer overflow. Clear error condition if all
             * messages from fifo buffer are processed */
            if (em->fifoOverflow == 1) {
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	7fdb      	ldrb	r3, [r3, #31]
 8000a2a:	2b01      	cmp	r3, #1
 8000a2c:	d10c      	bne.n	8000a48 <CO_EM_process+0x25c>
                em->fifoOverflow = 2;
 8000a2e:	68fb      	ldr	r3, [r7, #12]
 8000a30:	2202      	movs	r2, #2
 8000a32:	77da      	strb	r2, [r3, #31]
                CO_errorReport(em, CO_EM_EMERGENCY_BUFFER_FULL,
 8000a34:	2300      	movs	r3, #0
 8000a36:	9300      	str	r3, [sp, #0]
 8000a38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a3c:	2220      	movs	r2, #32
 8000a3e:	2101      	movs	r1, #1
 8000a40:	68f8      	ldr	r0, [r7, #12]
 8000a42:	f000 f81d 	bl	8000a80 <CO_error>
        }
        em->fifoPpPtr = fifoPpPtr;
    }
#endif /* (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER, #elif CO_CONFIG_EM_HISTORY */

    return;
 8000a46:	e017      	b.n	8000a78 <CO_EM_process+0x28c>
            else if (em->fifoOverflow == 2 && em->fifoPpPtr == em->fifoWrPtr) {
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	7fdb      	ldrb	r3, [r3, #31]
 8000a4c:	2b02      	cmp	r3, #2
 8000a4e:	d113      	bne.n	8000a78 <CO_EM_process+0x28c>
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	7f9a      	ldrb	r2, [r3, #30]
 8000a54:	68fb      	ldr	r3, [r7, #12]
 8000a56:	7f5b      	ldrb	r3, [r3, #29]
 8000a58:	429a      	cmp	r2, r3
 8000a5a:	d10d      	bne.n	8000a78 <CO_EM_process+0x28c>
                em->fifoOverflow = 0;
 8000a5c:	68fb      	ldr	r3, [r7, #12]
 8000a5e:	2200      	movs	r2, #0
 8000a60:	77da      	strb	r2, [r3, #31]
                CO_errorReset(em, CO_EM_EMERGENCY_BUFFER_FULL, 0);
 8000a62:	2300      	movs	r3, #0
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	2300      	movs	r3, #0
 8000a68:	2220      	movs	r2, #32
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	68f8      	ldr	r0, [r7, #12]
 8000a6e:	f000 f807 	bl	8000a80 <CO_error>
    return;
 8000a72:	e001      	b.n	8000a78 <CO_EM_process+0x28c>
        return;
 8000a74:	bf00      	nop
 8000a76:	e000      	b.n	8000a7a <CO_EM_process+0x28e>
    return;
 8000a78:	bf00      	nop
}
 8000a7a:	3718      	adds	r7, #24
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <CO_error>:


/******************************************************************************/
void CO_error(CO_EM_t *em, bool_t setError, const uint8_t errorBit,
              uint16_t errorCode, uint32_t infoCode)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b08d      	sub	sp, #52	; 0x34
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	60b9      	str	r1, [r7, #8]
 8000a8a:	4611      	mov	r1, r2
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	460b      	mov	r3, r1
 8000a90:	71fb      	strb	r3, [r7, #7]
 8000a92:	4613      	mov	r3, r2
 8000a94:	80bb      	strh	r3, [r7, #4]
    if (em == NULL) return;
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	f000 80a6 	beq.w	8000bea <CO_error+0x16a>

    uint8_t index = errorBit >> 3;
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	08db      	lsrs	r3, r3, #3
 8000aa2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    uint8_t bitmask = 1 << (errorBit & 0x7);
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	f003 0307 	and.w	r3, r3, #7
 8000aac:	2201      	movs	r2, #1
 8000aae:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

    /* if unsupported errorBit, change to 'CO_EM_WRONG_ERROR_REPORT' */
    if (index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)) {
 8000ab6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000aba:	2b09      	cmp	r3, #9
 8000abc:	d90a      	bls.n	8000ad4 <CO_error+0x54>
        index = CO_EM_WRONG_ERROR_REPORT >> 3;
 8000abe:	2305      	movs	r3, #5
 8000ac0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
        bitmask = 1 << (CO_EM_WRONG_ERROR_REPORT & 0x7);
 8000ac4:	2301      	movs	r3, #1
 8000ac6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
        errorCode = CO_EMC_SOFTWARE_INTERNAL;
 8000aca:	f44f 43c2 	mov.w	r3, #24832	; 0x6100
 8000ace:	80bb      	strh	r3, [r7, #4]
        infoCode = errorBit;
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	63bb      	str	r3, [r7, #56]	; 0x38
    }

    uint8_t *errorStatusBits = &em->errorStatusBits[index];
 8000ad4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000ad8:	68fa      	ldr	r2, [r7, #12]
 8000ada:	4413      	add	r3, r2
 8000adc:	62bb      	str	r3, [r7, #40]	; 0x28
    uint8_t errorStatusBitMasked = *errorStatusBits & bitmask;
 8000ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ae0:	781a      	ldrb	r2, [r3, #0]
 8000ae2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000ae6:	4013      	ands	r3, r2
 8000ae8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* If error is already set (or unset), return without further actions,
     * otherwise toggle bit and continue with error indication. */
    if (setError) {
 8000aec:	68bb      	ldr	r3, [r7, #8]
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d004      	beq.n	8000afc <CO_error+0x7c>
        if (errorStatusBitMasked != 0) {
 8000af2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	d006      	beq.n	8000b08 <CO_error+0x88>
            return;
 8000afa:	e079      	b.n	8000bf0 <CO_error+0x170>
        }
    }
    else {
        if (errorStatusBitMasked == 0) {
 8000afc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d074      	beq.n	8000bee <CO_error+0x16e>
            return;
        }
        errorCode = CO_EMC_NO_ERROR;
 8000b04:	2300      	movs	r3, #0
 8000b06:	80bb      	strh	r3, [r7, #4]
    }

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    /* prepare emergency message. Error register will be added in post-process*/
    uint32_t errMsg = (uint32_t)errorBit << 24 | CO_SWAP_16(errorCode);
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	061a      	lsls	r2, r3, #24
 8000b0c:	88bb      	ldrh	r3, [r7, #4]
 8000b0e:	4313      	orrs	r3, r2
 8000b10:	623b      	str	r3, [r7, #32]
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
    uint32_t infoCodeSwapped = CO_SWAP_32(infoCode);
 8000b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000b14:	61fb      	str	r3, [r7, #28]
 #endif
#endif

    /* safely write data, and increment pointers */
    CO_LOCK_EMCY(em->CANdevTx);
 8000b16:	68fb      	ldr	r3, [r7, #12]
 8000b18:	695b      	ldr	r3, [r3, #20]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8000b1a:	f3ef 8210 	mrs	r2, PRIMASK
 8000b1e:	617a      	str	r2, [r7, #20]
  return(result);
 8000b20:	697a      	ldr	r2, [r7, #20]
 8000b22:	631a      	str	r2, [r3, #48]	; 0x30
  __ASM volatile ("cpsid i" : : : "memory");
 8000b24:	b672      	cpsid	i
}
 8000b26:	bf00      	nop
    if (setError) *errorStatusBits |= bitmask;
 8000b28:	68bb      	ldr	r3, [r7, #8]
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d008      	beq.n	8000b40 <CO_error+0xc0>
 8000b2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b30:	781a      	ldrb	r2, [r3, #0]
 8000b32:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8000b36:	4313      	orrs	r3, r2
 8000b38:	b2da      	uxtb	r2, r3
 8000b3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b3c:	701a      	strb	r2, [r3, #0]
 8000b3e:	e00b      	b.n	8000b58 <CO_error+0xd8>
    else          *errorStatusBits &= ~bitmask;
 8000b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	b25a      	sxtb	r2, r3
 8000b46:	f997 302e 	ldrsb.w	r3, [r7, #46]	; 0x2e
 8000b4a:	43db      	mvns	r3, r3
 8000b4c:	b25b      	sxtb	r3, r3
 8000b4e:	4013      	ands	r3, r2
 8000b50:	b25b      	sxtb	r3, r3
 8000b52:	b2da      	uxtb	r2, r3
 8000b54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b56:	701a      	strb	r2, [r3, #0]

#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    if (em->fifoSize >= 2) {
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	7f1b      	ldrb	r3, [r3, #28]
 8000b5c:	2b01      	cmp	r3, #1
 8000b5e:	d93c      	bls.n	8000bda <CO_error+0x15a>
        uint8_t fifoWrPtr = em->fifoWrPtr;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	7f5b      	ldrb	r3, [r3, #29]
 8000b64:	76fb      	strb	r3, [r7, #27]
        uint8_t fifoWrPtrNext = fifoWrPtr + 1;
 8000b66:	7efb      	ldrb	r3, [r7, #27]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        if (fifoWrPtrNext >= em->fifoSize) {
 8000b6e:	68fb      	ldr	r3, [r7, #12]
 8000b70:	7f1b      	ldrb	r3, [r3, #28]
 8000b72:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000b76:	429a      	cmp	r2, r3
 8000b78:	d302      	bcc.n	8000b80 <CO_error+0x100>
            fifoWrPtrNext = 0;
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
        }

        if (fifoWrPtrNext == em->fifoPpPtr) {
 8000b80:	68fb      	ldr	r3, [r7, #12]
 8000b82:	7f9b      	ldrb	r3, [r3, #30]
 8000b84:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000b88:	429a      	cmp	r2, r3
 8000b8a:	d103      	bne.n	8000b94 <CO_error+0x114>
            em->fifoOverflow = 1;
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	2201      	movs	r2, #1
 8000b90:	77da      	strb	r2, [r3, #31]
 8000b92:	e022      	b.n	8000bda <CO_error+0x15a>
        }
        else {
            em->fifo[fifoWrPtr].msg = errMsg;
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	699a      	ldr	r2, [r3, #24]
 8000b98:	7efb      	ldrb	r3, [r7, #27]
 8000b9a:	00db      	lsls	r3, r3, #3
 8000b9c:	4413      	add	r3, r2
 8000b9e:	6a3a      	ldr	r2, [r7, #32]
 8000ba0:	601a      	str	r2, [r3, #0]
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
            em->fifo[fifoWrPtr].info = infoCodeSwapped;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	699a      	ldr	r2, [r3, #24]
 8000ba6:	7efb      	ldrb	r3, [r7, #27]
 8000ba8:	00db      	lsls	r3, r3, #3
 8000baa:	4413      	add	r3, r2
 8000bac:	69fa      	ldr	r2, [r7, #28]
 8000bae:	605a      	str	r2, [r3, #4]
 #endif
            em->fifoWrPtr = fifoWrPtrNext;
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8000bb6:	775a      	strb	r2, [r3, #29]
            if (em->fifoCount < (em->fifoSize - 1)) em->fifoCount++;
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bbe:	461a      	mov	r2, r3
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	7f1b      	ldrb	r3, [r3, #28]
 8000bc4:	3b01      	subs	r3, #1
 8000bc6:	429a      	cmp	r2, r3
 8000bc8:	da07      	bge.n	8000bda <CO_error+0x15a>
 8000bca:	68fb      	ldr	r3, [r7, #12]
 8000bcc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000bd0:	3301      	adds	r3, #1
 8000bd2:	b2da      	uxtb	r2, r3
 8000bd4:	68fb      	ldr	r3, [r7, #12]
 8000bd6:	f883 2020 	strb.w	r2, [r3, #32]
        }
    }
#endif /* (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY) */

    CO_UNLOCK_EMCY(em->CANdevTx);
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	695b      	ldr	r3, [r3, #20]
 8000bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be0:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8000be2:	693b      	ldr	r3, [r7, #16]
 8000be4:	f383 8810 	msr	PRIMASK, r3
}
 8000be8:	e002      	b.n	8000bf0 <CO_error+0x170>
    if (em == NULL) return;
 8000bea:	bf00      	nop
 8000bec:	e000      	b.n	8000bf0 <CO_error+0x170>
            return;
 8000bee:	bf00      	nop
    if (em->pFunctSignalPre != NULL && em->producerEnabled) {
        em->pFunctSignalPre(em->functSignalObjectPre);
    }
 #endif
#endif
}
 8000bf0:	3734      	adds	r7, #52	; 0x34
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 8000bfa:	b480      	push	{r7}
 8000bfc:	b085      	sub	sp, #20
 8000bfe:	af00      	add	r7, sp, #0
 8000c00:	6078      	str	r0, [r7, #4]
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	681b      	ldr	r3, [r3, #0]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
}
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	3714      	adds	r7, #20
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c14:	4770      	bx	lr

08000c16 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8000c16:	b480      	push	{r7}
 8000c18:	b083      	sub	sp, #12
 8000c1a:	af00      	add	r7, sp, #0
 8000c1c:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d002      	beq.n	8000c2a <OD_getIndex+0x14>
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	881b      	ldrh	r3, [r3, #0]
 8000c28:	e000      	b.n	8000c2c <OD_getIndex+0x16>
 8000c2a:	2300      	movs	r3, #0
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <OD_extension_init>:
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
 8000c40:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d101      	bne.n	8000c4c <OD_extension_init+0x14>
 8000c48:	2305      	movs	r3, #5
 8000c4a:	e003      	b.n	8000c54 <OD_extension_init+0x1c>
    entry->extension = extension;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	683a      	ldr	r2, [r7, #0]
 8000c50:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8000c52:	2300      	movs	r3, #0
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	370c      	adds	r7, #12
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5e:	4770      	bx	lr

08000c60 <OD_get_u32>:
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af02      	add	r7, sp, #8
 8000c66:	60f8      	str	r0, [r7, #12]
 8000c68:	607a      	str	r2, [r7, #4]
 8000c6a:	603b      	str	r3, [r7, #0]
 8000c6c:	460b      	mov	r3, r1
 8000c6e:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8000c70:	7af9      	ldrb	r1, [r7, #11]
 8000c72:	683b      	ldr	r3, [r7, #0]
 8000c74:	9300      	str	r3, [sp, #0]
 8000c76:	2304      	movs	r3, #4
 8000c78:	687a      	ldr	r2, [r7, #4]
 8000c7a:	68f8      	ldr	r0, [r7, #12]
 8000c7c:	f000 ff9e 	bl	8001bbc <OD_get_value>
 8000c80:	4603      	mov	r3, r0
}
 8000c82:	4618      	mov	r0, r3
 8000c84:	3710      	adds	r7, #16
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}

08000c8a <CO_HBcons_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_HBcons_receive(void *object, void *msg) {
 8000c8a:	b480      	push	{r7}
 8000c8c:	b087      	sub	sp, #28
 8000c8e:	af00      	add	r7, sp, #0
 8000c90:	6078      	str	r0, [r7, #4]
 8000c92:	6039      	str	r1, [r7, #0]
    CO_HBconsNode_t *HBconsNode = object;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8000c98:	683b      	ldr	r3, [r7, #0]
 8000c9a:	791b      	ldrb	r3, [r3, #4]
 8000c9c:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	3305      	adds	r3, #5
 8000ca2:	60fb      	str	r3, [r7, #12]

    if (DLC == 1) {
 8000ca4:	7cfb      	ldrb	r3, [r7, #19]
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d107      	bne.n	8000cba <CO_HBcons_receive+0x30>
        /* copy data and set 'new message' flag. */
        HBconsNode->NMTstate = (CO_NMT_internalState_t)data[0];
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	781b      	ldrb	r3, [r3, #0]
 8000cae:	b25a      	sxtb	r2, r3
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	705a      	strb	r2, [r3, #1]
        CO_FLAG_SET(HBconsNode->CANrxNew);
 8000cb4:	697b      	ldr	r3, [r7, #20]
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	60da      	str	r2, [r3, #12]
        if (HBconsNode->pFunctSignalPre != NULL) {
            HBconsNode->pFunctSignalPre(HBconsNode->functSignalObjectPre);
        }
#endif
    }
}
 8000cba:	bf00      	nop
 8000cbc:	371c      	adds	r7, #28
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc4:	4770      	bx	lr

08000cc6 <OD_write_1016>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1016(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8000cc6:	b580      	push	{r7, lr}
 8000cc8:	b088      	sub	sp, #32
 8000cca:	af00      	add	r7, sp, #0
 8000ccc:	60f8      	str	r0, [r7, #12]
 8000cce:	60b9      	str	r1, [r7, #8]
 8000cd0:	607a      	str	r2, [r7, #4]
 8000cd2:	603b      	str	r3, [r7, #0]
    CO_HBconsumer_t *HBcons = stream->object;
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	685b      	ldr	r3, [r3, #4]
 8000cd8:	61fb      	str	r3, [r7, #28]

    if (stream == NULL || buf == NULL
 8000cda:	68fb      	ldr	r3, [r7, #12]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d012      	beq.n	8000d06 <OD_write_1016+0x40>
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d00f      	beq.n	8000d06 <OD_write_1016+0x40>
        || stream->subIndex < 1
 8000ce6:	68fb      	ldr	r3, [r7, #12]
 8000ce8:	7c5b      	ldrb	r3, [r3, #17]
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d00b      	beq.n	8000d06 <OD_write_1016+0x40>
        || stream->subIndex > HBcons->numberOfMonitoredNodes
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	7c5a      	ldrb	r2, [r3, #17]
 8000cf2:	69fb      	ldr	r3, [r7, #28]
 8000cf4:	7a1b      	ldrb	r3, [r3, #8]
 8000cf6:	429a      	cmp	r2, r3
 8000cf8:	d805      	bhi.n	8000d06 <OD_write_1016+0x40>
        || count != sizeof(uint32_t) || countWritten == NULL
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	2b04      	cmp	r3, #4
 8000cfe:	d102      	bne.n	8000d06 <OD_write_1016+0x40>
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d101      	bne.n	8000d0a <OD_write_1016+0x44>
    ) {
        return ODR_DEV_INCOMPAT;
 8000d06:	2309      	movs	r3, #9
 8000d08:	e020      	b.n	8000d4c <OD_write_1016+0x86>
    }

    uint32_t val = CO_getUint32(buf);
 8000d0a:	68b8      	ldr	r0, [r7, #8]
 8000d0c:	f7ff ff75 	bl	8000bfa <CO_getUint32>
 8000d10:	61b8      	str	r0, [r7, #24]
    uint8_t nodeId = (val >> 16) & 0xFF;
 8000d12:	69bb      	ldr	r3, [r7, #24]
 8000d14:	0c1b      	lsrs	r3, r3, #16
 8000d16:	75fb      	strb	r3, [r7, #23]
    uint16_t time = val & 0xFFFF;
 8000d18:	69bb      	ldr	r3, [r7, #24]
 8000d1a:	82bb      	strh	r3, [r7, #20]
    CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, stream->subIndex - 1,
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	7c5b      	ldrb	r3, [r3, #17]
 8000d20:	3b01      	subs	r3, #1
 8000d22:	b2d9      	uxtb	r1, r3
 8000d24:	8abb      	ldrh	r3, [r7, #20]
 8000d26:	7dfa      	ldrb	r2, [r7, #23]
 8000d28:	69f8      	ldr	r0, [r7, #28]
 8000d2a:	f000 f8bf 	bl	8000eac <CO_HBconsumer_initEntry>
 8000d2e:	4603      	mov	r3, r0
 8000d30:	74fb      	strb	r3, [r7, #19]
                                                   nodeId, time);
    if (ret != CO_ERROR_NO) {
 8000d32:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d001      	beq.n	8000d3e <OD_write_1016+0x78>
        return ODR_PAR_INCOMPAT;
 8000d3a:	2308      	movs	r3, #8
 8000d3c:	e006      	b.n	8000d4c <OD_write_1016+0x86>
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	687a      	ldr	r2, [r7, #4]
 8000d42:	68b9      	ldr	r1, [r7, #8]
 8000d44:	68f8      	ldr	r0, [r7, #12]
 8000d46:	f000 fd53 	bl	80017f0 <OD_writeOriginal>
 8000d4a:	4603      	mov	r3, r0
}
 8000d4c:	4618      	mov	r0, r3
 8000d4e:	3720      	adds	r7, #32
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <CO_HBconsumer_init>:
                                    uint8_t monitoredNodesCount,
                                    OD_entry_t *OD_1016_HBcons,
                                    CO_CANmodule_t *CANdevRx,
                                    uint16_t CANdevRxIdxStart,
                                    uint32_t *errInfo)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b088      	sub	sp, #32
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
 8000d60:	70fb      	strb	r3, [r7, #3]
    ODR_t odRet;

    /* verify arguments */
    if (HBcons == NULL || em == NULL || monitoredNodes == NULL
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d00b      	beq.n	8000d80 <CO_HBconsumer_init+0x2c>
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d008      	beq.n	8000d80 <CO_HBconsumer_init+0x2c>
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d005      	beq.n	8000d80 <CO_HBconsumer_init+0x2c>
        || OD_1016_HBcons == NULL || CANdevRx == NULL
 8000d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d002      	beq.n	8000d80 <CO_HBconsumer_init+0x2c>
 8000d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d102      	bne.n	8000d86 <CO_HBconsumer_init+0x32>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8000d80:	f04f 33ff 	mov.w	r3, #4294967295
 8000d84:	e08a      	b.n	8000e9c <CO_HBconsumer_init+0x148>
    }

    /* Configure object variables */
    memset(HBcons, 0, sizeof(CO_HBconsumer_t));
 8000d86:	2230      	movs	r2, #48	; 0x30
 8000d88:	2100      	movs	r1, #0
 8000d8a:	68f8      	ldr	r0, [r7, #12]
 8000d8c:	f013 f9a0 	bl	80140d0 <memset>
    HBcons->em = em;
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	68ba      	ldr	r2, [r7, #8]
 8000d94:	601a      	str	r2, [r3, #0]
    HBcons->monitoredNodes = monitoredNodes;
 8000d96:	68fb      	ldr	r3, [r7, #12]
 8000d98:	687a      	ldr	r2, [r7, #4]
 8000d9a:	605a      	str	r2, [r3, #4]
    HBcons->CANdevRx = CANdevRx;
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000da0:	619a      	str	r2, [r3, #24]
    HBcons->CANdevRxIdxStart = CANdevRxIdxStart;
 8000da2:	68fb      	ldr	r3, [r7, #12]
 8000da4:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 8000da6:	839a      	strh	r2, [r3, #28]

    /* get actual number of monitored nodes */
    HBcons->numberOfMonitoredNodes =
        OD_1016_HBcons->subEntriesCount-1 < monitoredNodesCount ?
 8000da8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000daa:	789b      	ldrb	r3, [r3, #2]
    HBcons->numberOfMonitoredNodes =
 8000dac:	78fa      	ldrb	r2, [r7, #3]
 8000dae:	429a      	cmp	r2, r3
 8000db0:	d304      	bcc.n	8000dbc <CO_HBconsumer_init+0x68>
        OD_1016_HBcons->subEntriesCount-1 : monitoredNodesCount;
 8000db2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000db4:	789b      	ldrb	r3, [r3, #2]
    HBcons->numberOfMonitoredNodes =
 8000db6:	3b01      	subs	r3, #1
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	e000      	b.n	8000dbe <CO_HBconsumer_init+0x6a>
 8000dbc:	78fb      	ldrb	r3, [r7, #3]
 8000dbe:	68fa      	ldr	r2, [r7, #12]
 8000dc0:	7213      	strb	r3, [r2, #8]

    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	77fb      	strb	r3, [r7, #31]
 8000dc6:	e041      	b.n	8000e4c <CO_HBconsumer_init+0xf8>
        uint32_t val;
        odRet = OD_get_u32(OD_1016_HBcons, i + 1, &val, true);
 8000dc8:	7ffb      	ldrb	r3, [r7, #31]
 8000dca:	3301      	adds	r3, #1
 8000dcc:	b2d9      	uxtb	r1, r3
 8000dce:	f107 0214 	add.w	r2, r7, #20
 8000dd2:	2301      	movs	r3, #1
 8000dd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000dd6:	f7ff ff43 	bl	8000c60 <OD_get_u32>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	77bb      	strb	r3, [r7, #30]
        if (odRet != ODR_OK) {
 8000dde:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d00c      	beq.n	8000e00 <CO_HBconsumer_init+0xac>
            if (errInfo != NULL) *errInfo = OD_getIndex(OD_1016_HBcons);
 8000de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d006      	beq.n	8000dfa <CO_HBconsumer_init+0xa6>
 8000dec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000dee:	f7ff ff12 	bl	8000c16 <OD_getIndex>
 8000df2:	4603      	mov	r3, r0
 8000df4:	461a      	mov	r2, r3
 8000df6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000df8:	601a      	str	r2, [r3, #0]
            return CO_ERROR_OD_PARAMETERS;
 8000dfa:	f06f 030b 	mvn.w	r3, #11
 8000dfe:	e04d      	b.n	8000e9c <CO_HBconsumer_init+0x148>
        }

        uint8_t nodeId = (val >> 16) & 0xFF;
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	0c1b      	lsrs	r3, r3, #16
 8000e04:	777b      	strb	r3, [r7, #29]
        uint16_t time = val & 0xFFFF;
 8000e06:	697b      	ldr	r3, [r7, #20]
 8000e08:	837b      	strh	r3, [r7, #26]
        CO_ReturnError_t ret = CO_HBconsumer_initEntry(HBcons, i, nodeId, time);
 8000e0a:	8b7b      	ldrh	r3, [r7, #26]
 8000e0c:	7f7a      	ldrb	r2, [r7, #29]
 8000e0e:	7ff9      	ldrb	r1, [r7, #31]
 8000e10:	68f8      	ldr	r0, [r7, #12]
 8000e12:	f000 f84b 	bl	8000eac <CO_HBconsumer_initEntry>
 8000e16:	4603      	mov	r3, r0
 8000e18:	767b      	strb	r3, [r7, #25]
        if (ret != CO_ERROR_NO) {
 8000e1a:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d011      	beq.n	8000e46 <CO_HBconsumer_init+0xf2>
            if (errInfo != NULL) *errInfo = OD_getIndex(OD_1016_HBcons);
 8000e22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e24:	2b00      	cmp	r3, #0
 8000e26:	d006      	beq.n	8000e36 <CO_HBconsumer_init+0xe2>
 8000e28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e2a:	f7ff fef4 	bl	8000c16 <OD_getIndex>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	461a      	mov	r2, r3
 8000e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e34:	601a      	str	r2, [r3, #0]
            /* don't break a program, if only value of a parameter is wrong */
            if (ret != CO_ERROR_OD_PARAMETERS)
 8000e36:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8000e3a:	f113 0f0c 	cmn.w	r3, #12
 8000e3e:	d002      	beq.n	8000e46 <CO_HBconsumer_init+0xf2>
                return ret;
 8000e40:	f997 3019 	ldrsb.w	r3, [r7, #25]
 8000e44:	e02a      	b.n	8000e9c <CO_HBconsumer_init+0x148>
    for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000e46:	7ffb      	ldrb	r3, [r7, #31]
 8000e48:	3301      	adds	r3, #1
 8000e4a:	77fb      	strb	r3, [r7, #31]
 8000e4c:	68fb      	ldr	r3, [r7, #12]
 8000e4e:	7a1b      	ldrb	r3, [r3, #8]
 8000e50:	7ffa      	ldrb	r2, [r7, #31]
 8000e52:	429a      	cmp	r2, r3
 8000e54:	d3b8      	bcc.n	8000dc8 <CO_HBconsumer_init+0x74>
        }
    }

    /* configure extension for OD */
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_FLAG_OD_DYNAMIC
    HBcons->OD_1016_extension.object = HBcons;
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	68fa      	ldr	r2, [r7, #12]
 8000e5a:	621a      	str	r2, [r3, #32]
    HBcons->OD_1016_extension.read = OD_readOriginal;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	4a11      	ldr	r2, [pc, #68]	; (8000ea4 <CO_HBconsumer_init+0x150>)
 8000e60:	625a      	str	r2, [r3, #36]	; 0x24
    HBcons->OD_1016_extension.write = OD_write_1016;
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	4a10      	ldr	r2, [pc, #64]	; (8000ea8 <CO_HBconsumer_init+0x154>)
 8000e66:	629a      	str	r2, [r3, #40]	; 0x28
    odRet = OD_extension_init(OD_1016_HBcons, &HBcons->OD_1016_extension);
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	3320      	adds	r3, #32
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e70:	f7ff fee2 	bl	8000c38 <OD_extension_init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	77bb      	strb	r3, [r7, #30]
    if (odRet != ODR_OK) {
 8000e78:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d00c      	beq.n	8000e9a <CO_HBconsumer_init+0x146>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1016_HBcons);
 8000e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d006      	beq.n	8000e94 <CO_HBconsumer_init+0x140>
 8000e86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000e88:	f7ff fec5 	bl	8000c16 <OD_getIndex>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	461a      	mov	r2, r3
 8000e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e92:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8000e94:	f06f 030b 	mvn.w	r3, #11
 8000e98:	e000      	b.n	8000e9c <CO_HBconsumer_init+0x148>
    }
#endif

    return CO_ERROR_NO;
 8000e9a:	2300      	movs	r3, #0
}
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	3720      	adds	r7, #32
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	08001741 	.word	0x08001741
 8000ea8:	08000cc7 	.word	0x08000cc7

08000eac <CO_HBconsumer_initEntry>:
/******************************************************************************/
static CO_ReturnError_t CO_HBconsumer_initEntry(CO_HBconsumer_t *HBcons,
                                                uint8_t idx,
                                                uint8_t nodeId,
                                                uint16_t consumerTime_ms)
{
 8000eac:	b590      	push	{r4, r7, lr}
 8000eae:	b08d      	sub	sp, #52	; 0x34
 8000eb0:	af04      	add	r7, sp, #16
 8000eb2:	6078      	str	r0, [r7, #4]
 8000eb4:	4608      	mov	r0, r1
 8000eb6:	4611      	mov	r1, r2
 8000eb8:	461a      	mov	r2, r3
 8000eba:	4603      	mov	r3, r0
 8000ebc:	70fb      	strb	r3, [r7, #3]
 8000ebe:	460b      	mov	r3, r1
 8000ec0:	70bb      	strb	r3, [r7, #2]
 8000ec2:	4613      	mov	r3, r2
 8000ec4:	803b      	strh	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	77fb      	strb	r3, [r7, #31]

    /* verify arguments */
    if (HBcons == NULL || idx >= HBcons->numberOfMonitoredNodes) {
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d004      	beq.n	8000eda <CO_HBconsumer_initEntry+0x2e>
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	7a1b      	ldrb	r3, [r3, #8]
 8000ed4:	78fa      	ldrb	r2, [r7, #3]
 8000ed6:	429a      	cmp	r2, r3
 8000ed8:	d302      	bcc.n	8000ee0 <CO_HBconsumer_initEntry+0x34>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8000eda:	f04f 33ff 	mov.w	r3, #4294967295
 8000ede:	e077      	b.n	8000fd0 <CO_HBconsumer_initEntry+0x124>
    }

    /* verify for duplicate entries */
    if(consumerTime_ms != 0 && nodeId != 0) {
 8000ee0:	883b      	ldrh	r3, [r7, #0]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	d024      	beq.n	8000f30 <CO_HBconsumer_initEntry+0x84>
 8000ee6:	78bb      	ldrb	r3, [r7, #2]
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d021      	beq.n	8000f30 <CO_HBconsumer_initEntry+0x84>
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000eec:	2300      	movs	r3, #0
 8000eee:	77bb      	strb	r3, [r7, #30]
 8000ef0:	e019      	b.n	8000f26 <CO_HBconsumer_initEntry+0x7a>
            CO_HBconsNode_t node = HBcons->monitoredNodes[i];
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	685a      	ldr	r2, [r3, #4]
 8000ef6:	7fbb      	ldrb	r3, [r7, #30]
 8000ef8:	011b      	lsls	r3, r3, #4
 8000efa:	4413      	add	r3, r2
 8000efc:	f107 0408 	add.w	r4, r7, #8
 8000f00:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000f02:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
            if(idx != i && node.time_us != 0 && node.nodeId == nodeId) {
 8000f06:	78fa      	ldrb	r2, [r7, #3]
 8000f08:	7fbb      	ldrb	r3, [r7, #30]
 8000f0a:	429a      	cmp	r2, r3
 8000f0c:	d008      	beq.n	8000f20 <CO_HBconsumer_initEntry+0x74>
 8000f0e:	693b      	ldr	r3, [r7, #16]
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d005      	beq.n	8000f20 <CO_HBconsumer_initEntry+0x74>
 8000f14:	7a3b      	ldrb	r3, [r7, #8]
 8000f16:	78ba      	ldrb	r2, [r7, #2]
 8000f18:	429a      	cmp	r2, r3
 8000f1a:	d101      	bne.n	8000f20 <CO_HBconsumer_initEntry+0x74>
                ret = CO_ERROR_OD_PARAMETERS;
 8000f1c:	23f4      	movs	r3, #244	; 0xf4
 8000f1e:	77fb      	strb	r3, [r7, #31]
        for (uint8_t i = 0; i < HBcons->numberOfMonitoredNodes; i++) {
 8000f20:	7fbb      	ldrb	r3, [r7, #30]
 8000f22:	3301      	adds	r3, #1
 8000f24:	77bb      	strb	r3, [r7, #30]
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	7a1b      	ldrb	r3, [r3, #8]
 8000f2a:	7fba      	ldrb	r2, [r7, #30]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d3e0      	bcc.n	8000ef2 <CO_HBconsumer_initEntry+0x46>
            }
        }
    }

    /* Configure one monitored node */
    if (ret == CO_ERROR_NO) {
 8000f30:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d149      	bne.n	8000fcc <CO_HBconsumer_initEntry+0x120>
        uint16_t COB_ID;

        CO_HBconsNode_t * monitoredNode = &HBcons->monitoredNodes[idx];
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	685a      	ldr	r2, [r3, #4]
 8000f3c:	78fb      	ldrb	r3, [r7, #3]
 8000f3e:	011b      	lsls	r3, r3, #4
 8000f40:	4413      	add	r3, r2
 8000f42:	61bb      	str	r3, [r7, #24]
        monitoredNode->nodeId = nodeId;
 8000f44:	69bb      	ldr	r3, [r7, #24]
 8000f46:	78ba      	ldrb	r2, [r7, #2]
 8000f48:	701a      	strb	r2, [r3, #0]
        monitoredNode->time_us = (int32_t)consumerTime_ms * 1000;
 8000f4a:	883b      	ldrh	r3, [r7, #0]
 8000f4c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000f50:	fb02 f303 	mul.w	r3, r2, r3
 8000f54:	461a      	mov	r2, r3
 8000f56:	69bb      	ldr	r3, [r7, #24]
 8000f58:	609a      	str	r2, [r3, #8]
        monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8000f5a:	69bb      	ldr	r3, [r7, #24]
 8000f5c:	22ff      	movs	r2, #255	; 0xff
 8000f5e:	705a      	strb	r2, [r3, #1]
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE \
    || (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
        monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
        CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 8000f60:	69bb      	ldr	r3, [r7, #24]
 8000f62:	2200      	movs	r2, #0
 8000f64:	60da      	str	r2, [r3, #12]

        /* is channel used */
        if (monitoredNode->nodeId != 0 && monitoredNode->time_us != 0) {
 8000f66:	69bb      	ldr	r3, [r7, #24]
 8000f68:	781b      	ldrb	r3, [r3, #0]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d00d      	beq.n	8000f8a <CO_HBconsumer_initEntry+0xde>
 8000f6e:	69bb      	ldr	r3, [r7, #24]
 8000f70:	689b      	ldr	r3, [r3, #8]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d009      	beq.n	8000f8a <CO_HBconsumer_initEntry+0xde>
            COB_ID = monitoredNode->nodeId + CO_CAN_ID_HEARTBEAT;
 8000f76:	69bb      	ldr	r3, [r7, #24]
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	b29b      	uxth	r3, r3
 8000f7c:	f503 63e0 	add.w	r3, r3, #1792	; 0x700
 8000f80:	83bb      	strh	r3, [r7, #28]
            monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8000f82:	69bb      	ldr	r3, [r7, #24]
 8000f84:	2201      	movs	r2, #1
 8000f86:	709a      	strb	r2, [r3, #2]
 8000f88:	e007      	b.n	8000f9a <CO_HBconsumer_initEntry+0xee>
        }
        else {
            COB_ID = 0;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	83bb      	strh	r3, [r7, #28]
            monitoredNode->time_us = 0;
 8000f8e:	69bb      	ldr	r3, [r7, #24]
 8000f90:	2200      	movs	r2, #0
 8000f92:	609a      	str	r2, [r3, #8]
            monitoredNode->HBstate = CO_HBconsumer_UNCONFIGURED;
 8000f94:	69bb      	ldr	r3, [r7, #24]
 8000f96:	2200      	movs	r2, #0
 8000f98:	709a      	strb	r2, [r3, #2]
        }

        /* configure Heartbeat consumer (or disable) CAN reception */
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6998      	ldr	r0, [r3, #24]
                                 HBcons->CANdevRxIdxStart + idx,
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	8b9a      	ldrh	r2, [r3, #28]
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 8000fa2:	78fb      	ldrb	r3, [r7, #3]
 8000fa4:	b29b      	uxth	r3, r3
 8000fa6:	4413      	add	r3, r2
 8000fa8:	b299      	uxth	r1, r3
                                 COB_ID,
                                 0x7FF,
                                 0,
                                 (void*)&HBcons->monitoredNodes[idx],
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	685a      	ldr	r2, [r3, #4]
 8000fae:	78fb      	ldrb	r3, [r7, #3]
 8000fb0:	011b      	lsls	r3, r3, #4
 8000fb2:	4413      	add	r3, r2
        ret = CO_CANrxBufferInit(HBcons->CANdevRx,
 8000fb4:	8bba      	ldrh	r2, [r7, #28]
 8000fb6:	4c08      	ldr	r4, [pc, #32]	; (8000fd8 <CO_HBconsumer_initEntry+0x12c>)
 8000fb8:	9402      	str	r4, [sp, #8]
 8000fba:	9301      	str	r3, [sp, #4]
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000fc4:	f006 ffb2 	bl	8007f2c <CO_CANrxBufferInit>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	77fb      	strb	r3, [r7, #31]
                                 CO_HBcons_receive);
    }
    return ret;
 8000fcc:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	3724      	adds	r7, #36	; 0x24
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	bd90      	pop	{r4, r7, pc}
 8000fd8:	08000c8b 	.word	0x08000c8b

08000fdc <CO_HBconsumer_process>:
void CO_HBconsumer_process(
        CO_HBconsumer_t        *HBcons,
        bool_t                  NMTisPreOrOperational,
        uint32_t                timeDifference_us,
        uint32_t               *timerNext_us)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b08e      	sub	sp, #56	; 0x38
 8000fe0:	af02      	add	r7, sp, #8
 8000fe2:	60f8      	str	r0, [r7, #12]
 8000fe4:	60b9      	str	r1, [r7, #8]
 8000fe6:	607a      	str	r2, [r7, #4]
 8000fe8:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    bool_t allMonitoredActiveCurrent = true;
 8000fea:	2301      	movs	r3, #1
 8000fec:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t allMonitoredOperationalCurrent = true;
 8000fee:	2301      	movs	r3, #1
 8000ff0:	62bb      	str	r3, [r7, #40]	; 0x28

    if (NMTisPreOrOperational && HBcons->NMTisPreOrOperationalPrev) {
 8000ff2:	68bb      	ldr	r3, [r7, #8]
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d077      	beq.n	80010e8 <CO_HBconsumer_process+0x10c>
 8000ff8:	68fb      	ldr	r3, [r7, #12]
 8000ffa:	695b      	ldr	r3, [r3, #20]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d073      	beq.n	80010e8 <CO_HBconsumer_process+0x10c>
        for (uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 8001000:	2300      	movs	r3, #0
 8001002:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8001006:	e068      	b.n	80010da <CO_HBconsumer_process+0xfe>
            uint32_t timeDifference_us_copy = timeDifference_us;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	623b      	str	r3, [r7, #32]
            CO_HBconsNode_t * const monitoredNode = &HBcons->monitoredNodes[i];
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	685a      	ldr	r2, [r3, #4]
 8001010:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001014:	011b      	lsls	r3, r3, #4
 8001016:	4413      	add	r3, r2
 8001018:	61bb      	str	r3, [r7, #24]

            if (monitoredNode->HBstate == CO_HBconsumer_UNCONFIGURED) {
 800101a:	69bb      	ldr	r3, [r7, #24]
 800101c:	789b      	ldrb	r3, [r3, #2]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d055      	beq.n	80010ce <CO_HBconsumer_process+0xf2>
                /* continue, if node is not monitored */
                continue;
            }
            /* Verify if received message is heartbeat or bootup */
            if (CO_FLAG_READ(monitoredNode->CANrxNew)) {
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	68db      	ldr	r3, [r3, #12]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d022      	beq.n	8001070 <CO_HBconsumer_process+0x94>
                if (monitoredNode->NMTstate == CO_NMT_INITIALIZING) {
 800102a:	69bb      	ldr	r3, [r7, #24]
 800102c:	f993 3001 	ldrsb.w	r3, [r3, #1]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d112      	bne.n	800105a <CO_HBconsumer_process+0x7e>
                        monitoredNode->pFunctSignalRemoteReset(
                            monitoredNode->nodeId, i,
                            monitoredNode->functSignalObjectRemoteReset);
                    }
#endif
                    if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	789b      	ldrb	r3, [r3, #2]
 8001038:	2b02      	cmp	r3, #2
 800103a:	d10a      	bne.n	8001052 <CO_HBconsumer_process+0x76>
                        CO_errorReport(HBcons->em,
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	6818      	ldr	r0, [r3, #0]
 8001040:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	f248 1330 	movw	r3, #33072	; 0x8130
 800104a:	221c      	movs	r2, #28
 800104c:	2101      	movs	r1, #1
 800104e:	f7ff fd17 	bl	8000a80 <CO_error>
                                       CO_EM_HB_CONSUMER_REMOTE_RESET,
                                       CO_EMC_HEARTBEAT, i);
                    }
                    monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 8001052:	69bb      	ldr	r3, [r7, #24]
 8001054:	2201      	movs	r2, #1
 8001056:	709a      	strb	r2, [r3, #2]
 8001058:	e007      	b.n	800106a <CO_HBconsumer_process+0x8e>
                        monitoredNode->pFunctSignalHbStarted(
                            monitoredNode->nodeId, i,
                            monitoredNode->functSignalObjectHbStarted);
                    }
#endif
                    monitoredNode->HBstate = CO_HBconsumer_ACTIVE;
 800105a:	69bb      	ldr	r3, [r7, #24]
 800105c:	2202      	movs	r2, #2
 800105e:	709a      	strb	r2, [r3, #2]
                    /* reset timer */
                    monitoredNode->timeoutTimer = 0;
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	2200      	movs	r2, #0
 8001064:	605a      	str	r2, [r3, #4]
                    timeDifference_us_copy = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	623b      	str	r3, [r7, #32]
                }
                CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 800106a:	69bb      	ldr	r3, [r7, #24]
 800106c:	2200      	movs	r2, #0
 800106e:	60da      	str	r2, [r3, #12]
            }

            /* Verify timeout */
            if (monitoredNode->HBstate == CO_HBconsumer_ACTIVE) {
 8001070:	69bb      	ldr	r3, [r7, #24]
 8001072:	789b      	ldrb	r3, [r3, #2]
 8001074:	2b02      	cmp	r3, #2
 8001076:	d11c      	bne.n	80010b2 <CO_HBconsumer_process+0xd6>
                monitoredNode->timeoutTimer += timeDifference_us_copy;
 8001078:	69bb      	ldr	r3, [r7, #24]
 800107a:	685a      	ldr	r2, [r3, #4]
 800107c:	6a3b      	ldr	r3, [r7, #32]
 800107e:	441a      	add	r2, r3
 8001080:	69bb      	ldr	r3, [r7, #24]
 8001082:	605a      	str	r2, [r3, #4]

                if (monitoredNode->timeoutTimer >= monitoredNode->time_us) {
 8001084:	69bb      	ldr	r3, [r7, #24]
 8001086:	685a      	ldr	r2, [r3, #4]
 8001088:	69bb      	ldr	r3, [r7, #24]
 800108a:	689b      	ldr	r3, [r3, #8]
 800108c:	429a      	cmp	r2, r3
 800108e:	d310      	bcc.n	80010b2 <CO_HBconsumer_process+0xd6>
                        monitoredNode->pFunctSignalTimeout(
                            monitoredNode->nodeId, i,
                            monitoredNode->functSignalObjectTimeout);
                    }
#endif
                    CO_errorReport(HBcons->em, CO_EM_HEARTBEAT_CONSUMER,
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	6818      	ldr	r0, [r3, #0]
 8001094:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8001098:	9300      	str	r3, [sp, #0]
 800109a:	f248 1330 	movw	r3, #33072	; 0x8130
 800109e:	221b      	movs	r2, #27
 80010a0:	2101      	movs	r1, #1
 80010a2:	f7ff fced 	bl	8000a80 <CO_error>
                                   CO_EMC_HEARTBEAT, i);
                    monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 80010a6:	69bb      	ldr	r3, [r7, #24]
 80010a8:	22ff      	movs	r2, #255	; 0xff
 80010aa:	705a      	strb	r2, [r3, #1]
                    monitoredNode->HBstate = CO_HBconsumer_TIMEOUT;
 80010ac:	69bb      	ldr	r3, [r7, #24]
 80010ae:	2203      	movs	r2, #3
 80010b0:	709a      	strb	r2, [r3, #2]
                    }
                }
#endif
            }

            if(monitoredNode->HBstate != CO_HBconsumer_ACTIVE) {
 80010b2:	69bb      	ldr	r3, [r7, #24]
 80010b4:	789b      	ldrb	r3, [r3, #2]
 80010b6:	2b02      	cmp	r3, #2
 80010b8:	d001      	beq.n	80010be <CO_HBconsumer_process+0xe2>
                allMonitoredActiveCurrent = false;
 80010ba:	2300      	movs	r3, #0
 80010bc:	62fb      	str	r3, [r7, #44]	; 0x2c
            }
            if (monitoredNode->NMTstate != CO_NMT_OPERATIONAL) {
 80010be:	69bb      	ldr	r3, [r7, #24]
 80010c0:	f993 3001 	ldrsb.w	r3, [r3, #1]
 80010c4:	2b05      	cmp	r3, #5
 80010c6:	d003      	beq.n	80010d0 <CO_HBconsumer_process+0xf4>
                allMonitoredOperationalCurrent = false;
 80010c8:	2300      	movs	r3, #0
 80010ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80010cc:	e000      	b.n	80010d0 <CO_HBconsumer_process+0xf4>
                continue;
 80010ce:	bf00      	nop
        for (uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 80010d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80010d4:	3301      	adds	r3, #1
 80010d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	7a1b      	ldrb	r3, [r3, #8]
 80010de:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 80010e2:	429a      	cmp	r2, r3
 80010e4:	d390      	bcc.n	8001008 <CO_HBconsumer_process+0x2c>
 80010e6:	e028      	b.n	800113a <CO_HBconsumer_process+0x15e>
                monitoredNode->NMTstatePrev = monitoredNode->NMTstate;
            }
#endif
        }
    }
    else if (NMTisPreOrOperational || HBcons->NMTisPreOrOperationalPrev) {
 80010e8:	68bb      	ldr	r3, [r7, #8]
 80010ea:	2b00      	cmp	r3, #0
 80010ec:	d103      	bne.n	80010f6 <CO_HBconsumer_process+0x11a>
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	695b      	ldr	r3, [r3, #20]
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d021      	beq.n	800113a <CO_HBconsumer_process+0x15e>
        /* (pre)operational state changed, clear variables */
        for(uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 80010f6:	2300      	movs	r3, #0
 80010f8:	77fb      	strb	r3, [r7, #31]
 80010fa:	e015      	b.n	8001128 <CO_HBconsumer_process+0x14c>
            CO_HBconsNode_t * const monitoredNode = &HBcons->monitoredNodes[i];
 80010fc:	68fb      	ldr	r3, [r7, #12]
 80010fe:	685a      	ldr	r2, [r3, #4]
 8001100:	7ffb      	ldrb	r3, [r7, #31]
 8001102:	011b      	lsls	r3, r3, #4
 8001104:	4413      	add	r3, r2
 8001106:	617b      	str	r3, [r7, #20]
            monitoredNode->NMTstate = CO_NMT_UNKNOWN;
 8001108:	697b      	ldr	r3, [r7, #20]
 800110a:	22ff      	movs	r2, #255	; 0xff
 800110c:	705a      	strb	r2, [r3, #1]
#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_CHANGE \
    || (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_CALLBACK_MULTI
            monitoredNode->NMTstatePrev = CO_NMT_UNKNOWN;
#endif
            CO_FLAG_CLEAR(monitoredNode->CANrxNew);
 800110e:	697b      	ldr	r3, [r7, #20]
 8001110:	2200      	movs	r2, #0
 8001112:	60da      	str	r2, [r3, #12]
            if (monitoredNode->HBstate != CO_HBconsumer_UNCONFIGURED) {
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	789b      	ldrb	r3, [r3, #2]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d002      	beq.n	8001122 <CO_HBconsumer_process+0x146>
                monitoredNode->HBstate = CO_HBconsumer_UNKNOWN;
 800111c:	697b      	ldr	r3, [r7, #20]
 800111e:	2201      	movs	r2, #1
 8001120:	709a      	strb	r2, [r3, #2]
        for(uint8_t i=0; i<HBcons->numberOfMonitoredNodes; i++) {
 8001122:	7ffb      	ldrb	r3, [r7, #31]
 8001124:	3301      	adds	r3, #1
 8001126:	77fb      	strb	r3, [r7, #31]
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	7a1b      	ldrb	r3, [r3, #8]
 800112c:	7ffa      	ldrb	r2, [r7, #31]
 800112e:	429a      	cmp	r2, r3
 8001130:	d3e4      	bcc.n	80010fc <CO_HBconsumer_process+0x120>
            }
        }
        allMonitoredActiveCurrent = false;
 8001132:	2300      	movs	r3, #0
 8001134:	62fb      	str	r3, [r7, #44]	; 0x2c
        allMonitoredOperationalCurrent = false;
 8001136:	2300      	movs	r3, #0
 8001138:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Clear emergencies when all monitored nodes becomes active.
     * We only have one emergency index for all monitored nodes! */
    if (!HBcons->allMonitoredActive && allMonitoredActiveCurrent) {
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	68db      	ldr	r3, [r3, #12]
 800113e:	2b00      	cmp	r3, #0
 8001140:	d114      	bne.n	800116c <CO_HBconsumer_process+0x190>
 8001142:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001144:	2b00      	cmp	r3, #0
 8001146:	d011      	beq.n	800116c <CO_HBconsumer_process+0x190>
        CO_errorReset(HBcons->em, CO_EM_HEARTBEAT_CONSUMER, 0);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	6818      	ldr	r0, [r3, #0]
 800114c:	2300      	movs	r3, #0
 800114e:	9300      	str	r3, [sp, #0]
 8001150:	2300      	movs	r3, #0
 8001152:	221b      	movs	r2, #27
 8001154:	2100      	movs	r1, #0
 8001156:	f7ff fc93 	bl	8000a80 <CO_error>
        CO_errorReset(HBcons->em, CO_EM_HB_CONSUMER_REMOTE_RESET, 0);
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	6818      	ldr	r0, [r3, #0]
 800115e:	2300      	movs	r3, #0
 8001160:	9300      	str	r3, [sp, #0]
 8001162:	2300      	movs	r3, #0
 8001164:	221c      	movs	r2, #28
 8001166:	2100      	movs	r1, #0
 8001168:	f7ff fc8a 	bl	8000a80 <CO_error>
    }

    HBcons->allMonitoredActive = allMonitoredActiveCurrent;
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001170:	60da      	str	r2, [r3, #12]
    HBcons->allMonitoredOperational = allMonitoredOperationalCurrent;
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001176:	611a      	str	r2, [r3, #16]
    HBcons->NMTisPreOrOperationalPrev = NMTisPreOrOperational;
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	68ba      	ldr	r2, [r7, #8]
 800117c:	615a      	str	r2, [r3, #20]
}
 800117e:	bf00      	nop
 8001180:	3730      	adds	r7, #48	; 0x30
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}

08001186 <CO_getUint16>:
static inline uint16_t CO_getUint16(const void *buf) {
 8001186:	b480      	push	{r7}
 8001188:	b085      	sub	sp, #20
 800118a:	af00      	add	r7, sp, #0
 800118c:	6078      	str	r0, [r7, #4]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	881b      	ldrh	r3, [r3, #0]
 8001192:	b29b      	uxth	r3, r3
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
 8001194:	81fb      	strh	r3, [r7, #14]
 8001196:	89fb      	ldrh	r3, [r7, #14]
}
 8001198:	4618      	mov	r0, r3
 800119a:	3714      	adds	r7, #20
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 80011a4:	b480      	push	{r7}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d002      	beq.n	80011b8 <OD_getIndex+0x14>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	881b      	ldrh	r3, [r3, #0]
 80011b6:	e000      	b.n	80011ba <OD_getIndex+0x16>
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	370c      	adds	r7, #12
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr

080011c6 <OD_extension_init>:
{
 80011c6:	b480      	push	{r7}
 80011c8:	b083      	sub	sp, #12
 80011ca:	af00      	add	r7, sp, #0
 80011cc:	6078      	str	r0, [r7, #4]
 80011ce:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d101      	bne.n	80011da <OD_extension_init+0x14>
 80011d6:	2305      	movs	r3, #5
 80011d8:	e003      	b.n	80011e2 <OD_extension_init+0x1c>
    entry->extension = extension;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	683a      	ldr	r2, [r7, #0]
 80011de:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 80011e0:	2300      	movs	r3, #0
}
 80011e2:	4618      	mov	r0, r3
 80011e4:	370c      	adds	r7, #12
 80011e6:	46bd      	mov	sp, r7
 80011e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ec:	4770      	bx	lr

080011ee <OD_get_u16>:
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b086      	sub	sp, #24
 80011f2:	af02      	add	r7, sp, #8
 80011f4:	60f8      	str	r0, [r7, #12]
 80011f6:	607a      	str	r2, [r7, #4]
 80011f8:	603b      	str	r3, [r7, #0]
 80011fa:	460b      	mov	r3, r1
 80011fc:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80011fe:	7af9      	ldrb	r1, [r7, #11]
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	9300      	str	r3, [sp, #0]
 8001204:	2302      	movs	r3, #2
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	68f8      	ldr	r0, [r7, #12]
 800120a:	f000 fcd7 	bl	8001bbc <OD_get_value>
 800120e:	4603      	mov	r3, r0
}
 8001210:	4618      	mov	r0, r3
 8001212:	3710      	adds	r7, #16
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <CO_isError>:
 * @param em Emergency object.
 * @param errorBit from @ref CO_EM_errorStatusBits_t.
 *
 * @return true if Error is present.
 */
static inline bool_t CO_isError(CO_EM_t *em, const uint8_t errorBit) {
 8001218:	b480      	push	{r7}
 800121a:	b085      	sub	sp, #20
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
 8001220:	460b      	mov	r3, r1
 8001222:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 8001224:	78fb      	ldrb	r3, [r7, #3]
 8001226:	08db      	lsrs	r3, r3, #3
 8001228:	73fb      	strb	r3, [r7, #15]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 800122a:	78fb      	ldrb	r3, [r7, #3]
 800122c:	f003 0307 	and.w	r3, r3, #7
 8001230:	2201      	movs	r2, #1
 8001232:	fa02 f303 	lsl.w	r3, r2, r3
 8001236:	73bb      	strb	r3, [r7, #14]

    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d00a      	beq.n	8001254 <CO_isError+0x3c>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)
 800123e:	7bfb      	ldrb	r3, [r7, #15]
 8001240:	2b09      	cmp	r3, #9
 8001242:	d807      	bhi.n	8001254 <CO_isError+0x3c>
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 8001244:	7bfb      	ldrb	r3, [r7, #15]
 8001246:	687a      	ldr	r2, [r7, #4]
 8001248:	5cd2      	ldrb	r2, [r2, r3]
 800124a:	7bbb      	ldrb	r3, [r7, #14]
 800124c:	4013      	ands	r3, r2
 800124e:	b2db      	uxtb	r3, r3
 8001250:	2b00      	cmp	r3, #0
 8001252:	d001      	beq.n	8001258 <CO_isError+0x40>
 8001254:	2301      	movs	r3, #1
 8001256:	e000      	b.n	800125a <CO_isError+0x42>
 8001258:	2300      	movs	r3, #0
}
 800125a:	4618      	mov	r0, r3
 800125c:	3714      	adds	r7, #20
 800125e:	46bd      	mov	sp, r7
 8001260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001264:	4770      	bx	lr

08001266 <CO_getErrorRegister>:
 *
 * @param em Emergency object.
 *
 * @return Error register or 0 if doesn't exist.
 */
static inline uint8_t CO_getErrorRegister(CO_EM_t *em) {
 8001266:	b480      	push	{r7}
 8001268:	b083      	sub	sp, #12
 800126a:	af00      	add	r7, sp, #0
 800126c:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d007      	beq.n	8001284 <CO_getErrorRegister+0x1e>
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	68db      	ldr	r3, [r3, #12]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d003      	beq.n	8001284 <CO_getErrorRegister+0x1e>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	781b      	ldrb	r3, [r3, #0]
 8001282:	e000      	b.n	8001286 <CO_getErrorRegister+0x20>
 8001284:	2300      	movs	r3, #0
}
 8001286:	4618      	mov	r0, r3
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <CO_NMT_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_NMT_receive(void *object, void *msg) {
 8001292:	b480      	push	{r7}
 8001294:	b087      	sub	sp, #28
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
 800129a:	6039      	str	r1, [r7, #0]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	791b      	ldrb	r3, [r3, #4]
 80012a0:	75fb      	strb	r3, [r7, #23]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	3305      	adds	r3, #5
 80012a6:	613b      	str	r3, [r7, #16]
    CO_NMT_command_t command = (CO_NMT_command_t)data[0];
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	73fb      	strb	r3, [r7, #15]
    uint8_t nodeId = data[1];
 80012ae:	693b      	ldr	r3, [r7, #16]
 80012b0:	785b      	ldrb	r3, [r3, #1]
 80012b2:	73bb      	strb	r3, [r7, #14]

    CO_NMT_t *NMT = (CO_NMT_t*)object;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	60bb      	str	r3, [r7, #8]

    if (DLC == 2 && (nodeId == 0 || nodeId == NMT->nodeId)) {
 80012b8:	7dfb      	ldrb	r3, [r7, #23]
 80012ba:	2b02      	cmp	r3, #2
 80012bc:	d10a      	bne.n	80012d4 <CO_NMT_receive+0x42>
 80012be:	7bbb      	ldrb	r3, [r7, #14]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d004      	beq.n	80012ce <CO_NMT_receive+0x3c>
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	78db      	ldrb	r3, [r3, #3]
 80012c8:	7bba      	ldrb	r2, [r7, #14]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d102      	bne.n	80012d4 <CO_NMT_receive+0x42>
        NMT->internalCommand = command;
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	7bfa      	ldrb	r2, [r7, #15]
 80012d2:	709a      	strb	r2, [r3, #2]
        if (NMT->pFunctSignalPre != NULL) {
            NMT->pFunctSignalPre(NMT->functSignalObjectPre);
        }
#endif
    }
}
 80012d4:	bf00      	nop
 80012d6:	371c      	adds	r7, #28
 80012d8:	46bd      	mov	sp, r7
 80012da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012de:	4770      	bx	lr

080012e0 <OD_write_1017>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1017(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b086      	sub	sp, #24
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
 80012ec:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d00c      	beq.n	800130e <OD_write_1017+0x2e>
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	7c5b      	ldrb	r3, [r3, #17]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d108      	bne.n	800130e <OD_write_1017+0x2e>
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d005      	beq.n	800130e <OD_write_1017+0x2e>
        || count != sizeof(uint16_t) || countWritten == NULL
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2b02      	cmp	r3, #2
 8001306:	d102      	bne.n	800130e <OD_write_1017+0x2e>
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d101      	bne.n	8001312 <OD_write_1017+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 800130e:	2309      	movs	r3, #9
 8001310:	e017      	b.n	8001342 <OD_write_1017+0x62>
    }

    CO_NMT_t *NMT = (CO_NMT_t *)stream->object;
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	617b      	str	r3, [r7, #20]

    /* update object, send Heartbeat immediately */
    NMT->HBproducerTime_us = (uint32_t)CO_getUint16(buf) * 1000;
 8001318:	68b8      	ldr	r0, [r7, #8]
 800131a:	f7ff ff34 	bl	8001186 <CO_getUint16>
 800131e:	4603      	mov	r3, r0
 8001320:	461a      	mov	r2, r3
 8001322:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001326:	fb03 f202 	mul.w	r2, r3, r2
 800132a:	697b      	ldr	r3, [r7, #20]
 800132c:	609a      	str	r2, [r3, #8]
    NMT->HBproducerTimer = 0;
 800132e:	697b      	ldr	r3, [r7, #20]
 8001330:	2200      	movs	r2, #0
 8001332:	60da      	str	r2, [r3, #12]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	687a      	ldr	r2, [r7, #4]
 8001338:	68b9      	ldr	r1, [r7, #8]
 800133a:	68f8      	ldr	r0, [r7, #12]
 800133c:	f000 fa58 	bl	80017f0 <OD_writeOriginal>
 8001340:	4603      	mov	r3, r0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3718      	adds	r7, #24
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <CO_NMT_init>:
#endif
                             CO_CANmodule_t *HB_CANdevTx,
                             uint16_t HB_txIdx,
                             uint16_t CANidTxHB,
                             uint32_t *errInfo)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	; 0x28
 8001350:	af04      	add	r7, sp, #16
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	60b9      	str	r1, [r7, #8]
 8001356:	607a      	str	r2, [r7, #4]
 8001358:	70fb      	strb	r3, [r7, #3]
    CO_ReturnError_t ret = CO_ERROR_NO;
 800135a:	2300      	movs	r3, #0
 800135c:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if (NMT == NULL || OD_1017_ProducerHbTime == NULL || em == NULL
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	2b00      	cmp	r3, #0
 8001362:	d00e      	beq.n	8001382 <CO_NMT_init+0x36>
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d00b      	beq.n	8001382 <CO_NMT_init+0x36>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2b00      	cmp	r3, #0
 800136e:	d008      	beq.n	8001382 <CO_NMT_init+0x36>
        || NMT_CANdevRx == NULL || HB_CANdevTx == NULL
 8001370:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001372:	2b00      	cmp	r3, #0
 8001374:	d005      	beq.n	8001382 <CO_NMT_init+0x36>
 8001376:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001378:	2b00      	cmp	r3, #0
 800137a:	d002      	beq.n	8001382 <CO_NMT_init+0x36>
#if (CO_CONFIG_NMT) & CO_CONFIG_NMT_MASTER
        || NMT_CANdevTx == NULL
 800137c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800137e:	2b00      	cmp	r3, #0
 8001380:	d102      	bne.n	8001388 <CO_NMT_init+0x3c>
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8001382:	f04f 33ff 	mov.w	r3, #4294967295
 8001386:	e0b1      	b.n	80014ec <CO_NMT_init+0x1a0>
    }

    /* clear the object */
    memset(NMT, 0, sizeof(CO_NMT_t));
 8001388:	2234      	movs	r2, #52	; 0x34
 800138a:	2100      	movs	r1, #0
 800138c:	68f8      	ldr	r0, [r7, #12]
 800138e:	f012 fe9f 	bl	80140d0 <memset>

    /* Configure object variables */
    NMT->operatingState = CO_NMT_INITIALIZING;
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	2200      	movs	r2, #0
 8001396:	701a      	strb	r2, [r3, #0]
    NMT->operatingStatePrev = CO_NMT_INITIALIZING;
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	2200      	movs	r2, #0
 800139c:	705a      	strb	r2, [r3, #1]
    NMT->nodeId = nodeId;
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	78fa      	ldrb	r2, [r7, #3]
 80013a2:	70da      	strb	r2, [r3, #3]
    NMT->NMTcontrol = NMTcontrol;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	8c3a      	ldrh	r2, [r7, #32]
 80013a8:	809a      	strh	r2, [r3, #4]
    NMT->em = em;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	687a      	ldr	r2, [r7, #4]
 80013ae:	621a      	str	r2, [r3, #32]
    NMT->HBproducerTimer = (int32_t)firstHBTime_ms * 1000;
 80013b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80013b6:	fb02 f303 	mul.w	r3, r2, r3
 80013ba:	461a      	mov	r2, r3
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	60da      	str	r2, [r3, #12]

    /* get and verify required "Producer heartbeat time" from Object Dict. */
    uint16_t HBprodTime_ms;
    ODR_t odRet = OD_get_u16(OD_1017_ProducerHbTime, 0, &HBprodTime_ms, true);
 80013c0:	f107 0214 	add.w	r2, r7, #20
 80013c4:	2301      	movs	r3, #1
 80013c6:	2100      	movs	r1, #0
 80013c8:	68b8      	ldr	r0, [r7, #8]
 80013ca:	f7ff ff10 	bl	80011ee <OD_get_u16>
 80013ce:	4603      	mov	r3, r0
 80013d0:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 80013d2:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d00c      	beq.n	80013f4 <CO_NMT_init+0xa8>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 80013da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d006      	beq.n	80013ee <CO_NMT_init+0xa2>
 80013e0:	68b8      	ldr	r0, [r7, #8]
 80013e2:	f7ff fedf 	bl	80011a4 <OD_getIndex>
 80013e6:	4603      	mov	r3, r0
 80013e8:	461a      	mov	r2, r3
 80013ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80013ec:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 80013ee:	f06f 030b 	mvn.w	r3, #11
 80013f2:	e07b      	b.n	80014ec <CO_NMT_init+0x1a0>
    }
    NMT->HBproducerTime_us = (uint32_t)HBprodTime_ms * 1000;
 80013f4:	8abb      	ldrh	r3, [r7, #20]
 80013f6:	461a      	mov	r2, r3
 80013f8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013fc:	fb03 f202 	mul.w	r2, r3, r2
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	609a      	str	r2, [r3, #8]

    NMT->OD_1017_extension.object = NMT;
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	68fa      	ldr	r2, [r7, #12]
 8001408:	611a      	str	r2, [r3, #16]
    NMT->OD_1017_extension.read = OD_readOriginal;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	4a39      	ldr	r2, [pc, #228]	; (80014f4 <CO_NMT_init+0x1a8>)
 800140e:	615a      	str	r2, [r3, #20]
    NMT->OD_1017_extension.write = OD_write_1017;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4a39      	ldr	r2, [pc, #228]	; (80014f8 <CO_NMT_init+0x1ac>)
 8001414:	619a      	str	r2, [r3, #24]
    odRet = OD_extension_init(OD_1017_ProducerHbTime, &NMT->OD_1017_extension);
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	3310      	adds	r3, #16
 800141a:	4619      	mov	r1, r3
 800141c:	68b8      	ldr	r0, [r7, #8]
 800141e:	f7ff fed2 	bl	80011c6 <OD_extension_init>
 8001422:	4603      	mov	r3, r0
 8001424:	75bb      	strb	r3, [r7, #22]
    if (odRet != ODR_OK) {
 8001426:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d00c      	beq.n	8001448 <CO_NMT_init+0xfc>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1017_ProducerHbTime);
 800142e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001430:	2b00      	cmp	r3, #0
 8001432:	d006      	beq.n	8001442 <CO_NMT_init+0xf6>
 8001434:	68b8      	ldr	r0, [r7, #8]
 8001436:	f7ff feb5 	bl	80011a4 <OD_getIndex>
 800143a:	4603      	mov	r3, r0
 800143c:	461a      	mov	r2, r3
 800143e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001440:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8001442:	f06f 030b 	mvn.w	r3, #11
 8001446:	e051      	b.n	80014ec <CO_NMT_init+0x1a0>
    }

    if (NMT->HBproducerTimer > NMT->HBproducerTime_us) {
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	68da      	ldr	r2, [r3, #12]
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	429a      	cmp	r2, r3
 8001452:	d903      	bls.n	800145c <CO_NMT_init+0x110>
        NMT->HBproducerTimer = NMT->HBproducerTime_us;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	689a      	ldr	r2, [r3, #8]
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	60da      	str	r2, [r3, #12]
    }

    /* configure NMT CAN reception */
    ret = CO_CANrxBufferInit(
 800145c:	8e3a      	ldrh	r2, [r7, #48]	; 0x30
 800145e:	8db9      	ldrh	r1, [r7, #44]	; 0x2c
 8001460:	4b26      	ldr	r3, [pc, #152]	; (80014fc <CO_NMT_init+0x1b0>)
 8001462:	9302      	str	r3, [sp, #8]
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	9301      	str	r3, [sp, #4]
 8001468:	2300      	movs	r3, #0
 800146a:	9300      	str	r3, [sp, #0]
 800146c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8001470:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8001472:	f006 fd5b 	bl	8007f2c <CO_CANrxBufferInit>
 8001476:	4603      	mov	r3, r0
 8001478:	75fb      	strb	r3, [r7, #23]
            CANidRxNMT,         /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)NMT,         /* object passed to receive function */
            CO_NMT_receive);    /* this function will process received message*/
    if (ret != CO_ERROR_NO) {
 800147a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d002      	beq.n	8001488 <CO_NMT_init+0x13c>
        return ret;
 8001482:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001486:	e031      	b.n	80014ec <CO_NMT_init+0x1a0>
    }

#if (CO_CONFIG_NMT) & CO_CONFIG_NMT_MASTER
    /* configure NMT CAN transmission */
    NMT->NMT_CANdevTx = NMT_CANdevTx;
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800148c:	625a      	str	r2, [r3, #36]	; 0x24
    NMT->NMT_TXbuff = CO_CANtxBufferInit(
 800148e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 8001490:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8001492:	2300      	movs	r3, #0
 8001494:	9301      	str	r3, [sp, #4]
 8001496:	2302      	movs	r3, #2
 8001498:	9300      	str	r3, [sp, #0]
 800149a:	2300      	movs	r3, #0
 800149c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800149e:	f006 fda1 	bl	8007fe4 <CO_CANtxBufferInit>
 80014a2:	4602      	mov	r2, r0
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	629a      	str	r2, [r3, #40]	; 0x28
            NMT_txIdx,          /* index of specific buffer inside CAN module */
            CANidTxNMT,         /* CAN identifier */
            0,                  /* rtr */
            2,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */
    if (NMT->NMT_TXbuff == NULL) {
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d102      	bne.n	80014b6 <CO_NMT_init+0x16a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80014b0:	f04f 33ff 	mov.w	r3, #4294967295
 80014b4:	e01a      	b.n	80014ec <CO_NMT_init+0x1a0>
    }
#endif

    /* configure HB CAN transmission */
    NMT->HB_CANdevTx = HB_CANdevTx;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80014ba:	62da      	str	r2, [r3, #44]	; 0x2c
    NMT->HB_TXbuff = CO_CANtxBufferInit(
 80014bc:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 80014c0:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 80014c4:	2300      	movs	r3, #0
 80014c6:	9301      	str	r3, [sp, #4]
 80014c8:	2301      	movs	r3, #1
 80014ca:	9300      	str	r3, [sp, #0]
 80014cc:	2300      	movs	r3, #0
 80014ce:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80014d0:	f006 fd88 	bl	8007fe4 <CO_CANtxBufferInit>
 80014d4:	4602      	mov	r2, r0
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	631a      	str	r2, [r3, #48]	; 0x30
            HB_txIdx,           /* index of specific buffer inside CAN module */
            CANidTxHB,          /* CAN identifier */
            0,                  /* rtr */
            1,                  /* number of data bytes */
            0);                 /* synchronous message flag bit */
    if (NMT->HB_TXbuff == NULL) {
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d102      	bne.n	80014e8 <CO_NMT_init+0x19c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80014e2:	f04f 33ff 	mov.w	r3, #4294967295
 80014e6:	e001      	b.n	80014ec <CO_NMT_init+0x1a0>
    }

    return ret;
 80014e8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3718      	adds	r7, #24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	08001741 	.word	0x08001741
 80014f8:	080012e1 	.word	0x080012e1
 80014fc:	08001293 	.word	0x08001293

08001500 <CO_NMT_process>:
/******************************************************************************/
CO_NMT_reset_cmd_t CO_NMT_process(CO_NMT_t *NMT,
                                  CO_NMT_internalState_t *NMTstate,
                                  uint32_t timeDifference_us,
                                  uint32_t *timerNext_us)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b088      	sub	sp, #32
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
 800150c:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */
    CO_NMT_internalState_t NMTstateCpy = NMT->operatingState;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	77fb      	strb	r3, [r7, #31]
    CO_NMT_reset_cmd_t resetCommand = CO_RESET_NOT;
 8001514:	2300      	movs	r3, #0
 8001516:	77bb      	strb	r3, [r7, #30]
    bool_t NNTinit = NMTstateCpy == CO_NMT_INITIALIZING;
 8001518:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800151c:	2b00      	cmp	r3, #0
 800151e:	bf0c      	ite	eq
 8001520:	2301      	moveq	r3, #1
 8001522:	2300      	movne	r3, #0
 8001524:	b2db      	uxtb	r3, r3
 8001526:	61bb      	str	r3, [r7, #24]

    NMT->HBproducerTimer = (NMT->HBproducerTimer > timeDifference_us )
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	68db      	ldr	r3, [r3, #12]
                         ? (NMT->HBproducerTimer - timeDifference_us) : 0;
 800152c:	687a      	ldr	r2, [r7, #4]
 800152e:	429a      	cmp	r2, r3
 8001530:	d204      	bcs.n	800153c <CO_NMT_process+0x3c>
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	68da      	ldr	r2, [r3, #12]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	1ad3      	subs	r3, r2, r3
 800153a:	e000      	b.n	800153e <CO_NMT_process+0x3e>
 800153c:	2300      	movs	r3, #0
    NMT->HBproducerTimer = (NMT->HBproducerTimer > timeDifference_us )
 800153e:	68fa      	ldr	r2, [r7, #12]
 8001540:	60d3      	str	r3, [r2, #12]

    /* Send heartbeat producer message if:
     * - First start, send bootup message or
     * - HB producer enabled and: Timer expired or NMT->operatingState changed*/
    if (NNTinit || (NMT->HBproducerTime_us != 0
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d10e      	bne.n	8001566 <CO_NMT_process+0x66>
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d029      	beq.n	80015a4 <CO_NMT_process+0xa4>
                    && (NMT->HBproducerTimer == 0
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d006      	beq.n	8001566 <CO_NMT_process+0x66>
                        || NMTstateCpy != NMT->operatingStatePrev)
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f993 3001 	ldrsb.w	r3, [r3, #1]
 800155e:	f997 201f 	ldrsb.w	r2, [r7, #31]
 8001562:	429a      	cmp	r2, r3
 8001564:	d01e      	beq.n	80015a4 <CO_NMT_process+0xa4>
    )) {
        NMT->HB_TXbuff->data[0] = (uint8_t) NMTstateCpy;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	7ffa      	ldrb	r2, [r7, #31]
 800156c:	715a      	strb	r2, [r3, #5]
        CO_CANsend(NMT->HB_CANdevTx, NMT->HB_TXbuff);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001576:	4619      	mov	r1, r3
 8001578:	4610      	mov	r0, r2
 800157a:	f006 fdf9 	bl	8008170 <CO_CANsend>

        if (NMTstateCpy == CO_NMT_INITIALIZING) {
 800157e:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001582:	2b00      	cmp	r3, #0
 8001584:	d10a      	bne.n	800159c <CO_NMT_process+0x9c>
            /* NMT slave self starting */
            NMTstateCpy = (NMT->NMTcontrol & CO_NMT_STARTUP_TO_OPERATIONAL) != 0
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	889b      	ldrh	r3, [r3, #4]
 800158a:	f403 7380 	and.w	r3, r3, #256	; 0x100
                          ? CO_NMT_OPERATIONAL : CO_NMT_PRE_OPERATIONAL;
 800158e:	2b00      	cmp	r3, #0
 8001590:	d001      	beq.n	8001596 <CO_NMT_process+0x96>
 8001592:	2305      	movs	r3, #5
 8001594:	e000      	b.n	8001598 <CO_NMT_process+0x98>
 8001596:	237f      	movs	r3, #127	; 0x7f
            NMTstateCpy = (NMT->NMTcontrol & CO_NMT_STARTUP_TO_OPERATIONAL) != 0
 8001598:	77fb      	strb	r3, [r7, #31]
 800159a:	e003      	b.n	80015a4 <CO_NMT_process+0xa4>
        else {
            /* Start timer from the beginning. If OS is slow, time sliding may
             * occur. However, heartbeat is not for synchronization, it is for
             * health report. In case of initializing, timer is set in the
             * CO_NMT_init() function with pre-defined value. */
            NMT->HBproducerTimer = NMT->HBproducerTime_us;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	689a      	ldr	r2, [r3, #8]
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	60da      	str	r2, [r3, #12]
        }
    }
    NMT->operatingStatePrev = NMTstateCpy;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	7ffa      	ldrb	r2, [r7, #31]
 80015a8:	705a      	strb	r2, [r3, #1]

    /* process internal NMT commands, received from CO_NMT_receive() or
     * CO_NMT_sendCommand() */
    if (NMT->internalCommand != CO_NMT_NO_COMMAND) {
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	789b      	ldrb	r3, [r3, #2]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d025      	beq.n	80015fe <CO_NMT_process+0xfe>
        switch (NMT->internalCommand) {
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	789b      	ldrb	r3, [r3, #2]
 80015b6:	2b82      	cmp	r3, #130	; 0x82
 80015b8:	d01a      	beq.n	80015f0 <CO_NMT_process+0xf0>
 80015ba:	2b82      	cmp	r3, #130	; 0x82
 80015bc:	dc1b      	bgt.n	80015f6 <CO_NMT_process+0xf6>
 80015be:	2b81      	cmp	r3, #129	; 0x81
 80015c0:	d013      	beq.n	80015ea <CO_NMT_process+0xea>
 80015c2:	2b81      	cmp	r3, #129	; 0x81
 80015c4:	dc17      	bgt.n	80015f6 <CO_NMT_process+0xf6>
 80015c6:	2b80      	cmp	r3, #128	; 0x80
 80015c8:	d00c      	beq.n	80015e4 <CO_NMT_process+0xe4>
 80015ca:	2b80      	cmp	r3, #128	; 0x80
 80015cc:	dc13      	bgt.n	80015f6 <CO_NMT_process+0xf6>
 80015ce:	2b01      	cmp	r3, #1
 80015d0:	d002      	beq.n	80015d8 <CO_NMT_process+0xd8>
 80015d2:	2b02      	cmp	r3, #2
 80015d4:	d003      	beq.n	80015de <CO_NMT_process+0xde>
                break;
            case CO_NMT_RESET_COMMUNICATION:
                resetCommand = CO_RESET_COMM;
                break;
            default:
                break;
 80015d6:	e00e      	b.n	80015f6 <CO_NMT_process+0xf6>
                NMTstateCpy = CO_NMT_OPERATIONAL;
 80015d8:	2305      	movs	r3, #5
 80015da:	77fb      	strb	r3, [r7, #31]
                break;
 80015dc:	e00c      	b.n	80015f8 <CO_NMT_process+0xf8>
                NMTstateCpy = CO_NMT_STOPPED;
 80015de:	2304      	movs	r3, #4
 80015e0:	77fb      	strb	r3, [r7, #31]
                break;
 80015e2:	e009      	b.n	80015f8 <CO_NMT_process+0xf8>
                NMTstateCpy = CO_NMT_PRE_OPERATIONAL;
 80015e4:	237f      	movs	r3, #127	; 0x7f
 80015e6:	77fb      	strb	r3, [r7, #31]
                break;
 80015e8:	e006      	b.n	80015f8 <CO_NMT_process+0xf8>
                resetCommand = CO_RESET_APP;
 80015ea:	2302      	movs	r3, #2
 80015ec:	77bb      	strb	r3, [r7, #30]
                break;
 80015ee:	e003      	b.n	80015f8 <CO_NMT_process+0xf8>
                resetCommand = CO_RESET_COMM;
 80015f0:	2301      	movs	r3, #1
 80015f2:	77bb      	strb	r3, [r7, #30]
                break;
 80015f4:	e000      	b.n	80015f8 <CO_NMT_process+0xf8>
                break;
 80015f6:	bf00      	nop
        }
        NMT->internalCommand = CO_NMT_NO_COMMAND;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2200      	movs	r2, #0
 80015fc:	709a      	strb	r2, [r3, #2]
    }

    /* verify NMT transitions based on error register */
    bool_t busOff_HB = (NMT->NMTcontrol & CO_NMT_ERR_ON_BUSOFF_HB) != 0
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	889b      	ldrh	r3, [r3, #4]
 8001602:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
                    && (CO_isError(NMT->em, CO_EM_CAN_TX_BUS_OFF)
 8001606:	2b00      	cmp	r3, #0
 8001608:	d01c      	beq.n	8001644 <CO_NMT_process+0x144>
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	6a1b      	ldr	r3, [r3, #32]
 800160e:	2112      	movs	r1, #18
 8001610:	4618      	mov	r0, r3
 8001612:	f7ff fe01 	bl	8001218 <CO_isError>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d111      	bne.n	8001640 <CO_NMT_process+0x140>
                        || CO_isError(NMT->em, CO_EM_HEARTBEAT_CONSUMER)
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	6a1b      	ldr	r3, [r3, #32]
 8001620:	211b      	movs	r1, #27
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff fdf8 	bl	8001218 <CO_isError>
 8001628:	4603      	mov	r3, r0
 800162a:	2b00      	cmp	r3, #0
 800162c:	d108      	bne.n	8001640 <CO_NMT_process+0x140>
                        || CO_isError(NMT->em, CO_EM_HB_CONSUMER_REMOTE_RESET));
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	6a1b      	ldr	r3, [r3, #32]
 8001632:	211c      	movs	r1, #28
 8001634:	4618      	mov	r0, r3
 8001636:	f7ff fdef 	bl	8001218 <CO_isError>
 800163a:	4603      	mov	r3, r0
 800163c:	2b00      	cmp	r3, #0
 800163e:	d001      	beq.n	8001644 <CO_NMT_process+0x144>
                    && (CO_isError(NMT->em, CO_EM_CAN_TX_BUS_OFF)
 8001640:	2301      	movs	r3, #1
 8001642:	e000      	b.n	8001646 <CO_NMT_process+0x146>
 8001644:	2300      	movs	r3, #0
    bool_t busOff_HB = (NMT->NMTcontrol & CO_NMT_ERR_ON_BUSOFF_HB) != 0
 8001646:	617b      	str	r3, [r7, #20]
    bool_t errRegMasked = (NMT->NMTcontrol & CO_NMT_ERR_ON_ERR_REG) != 0
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	889b      	ldrh	r3, [r3, #4]
 800164c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
                    && (CO_getErrorRegister(NMT->em) & NMT->NMTcontrol) != 0;
 8001650:	2b00      	cmp	r3, #0
 8001652:	d00d      	beq.n	8001670 <CO_NMT_process+0x170>
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	6a1b      	ldr	r3, [r3, #32]
 8001658:	4618      	mov	r0, r3
 800165a:	f7ff fe04 	bl	8001266 <CO_getErrorRegister>
 800165e:	4603      	mov	r3, r0
 8001660:	461a      	mov	r2, r3
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	889b      	ldrh	r3, [r3, #4]
 8001666:	4013      	ands	r3, r2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d001      	beq.n	8001670 <CO_NMT_process+0x170>
 800166c:	2301      	movs	r3, #1
 800166e:	e000      	b.n	8001672 <CO_NMT_process+0x172>
 8001670:	2300      	movs	r3, #0
    bool_t errRegMasked = (NMT->NMTcontrol & CO_NMT_ERR_ON_ERR_REG) != 0
 8001672:	613b      	str	r3, [r7, #16]

    if (NMTstateCpy == CO_NMT_OPERATIONAL && (busOff_HB || errRegMasked)) {
 8001674:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001678:	2b05      	cmp	r3, #5
 800167a:	d110      	bne.n	800169e <CO_NMT_process+0x19e>
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d102      	bne.n	8001688 <CO_NMT_process+0x188>
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d00a      	beq.n	800169e <CO_NMT_process+0x19e>
        NMTstateCpy = (NMT->NMTcontrol & CO_NMT_ERR_TO_STOPPED) != 0
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	889b      	ldrh	r3, [r3, #4]
 800168c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
                    ? CO_NMT_STOPPED : CO_NMT_PRE_OPERATIONAL;
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <CO_NMT_process+0x198>
 8001694:	2304      	movs	r3, #4
 8001696:	e000      	b.n	800169a <CO_NMT_process+0x19a>
 8001698:	237f      	movs	r3, #127	; 0x7f
        NMTstateCpy = (NMT->NMTcontrol & CO_NMT_ERR_TO_STOPPED) != 0
 800169a:	77fb      	strb	r3, [r7, #31]
 800169c:	e010      	b.n	80016c0 <CO_NMT_process+0x1c0>
    }
    else if ((NMT->NMTcontrol & CO_NMT_ERR_FREE_TO_OPERATIONAL) != 0
 800169e:	68fb      	ldr	r3, [r7, #12]
 80016a0:	889b      	ldrh	r3, [r3, #4]
 80016a2:	b21b      	sxth	r3, r3
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	da0b      	bge.n	80016c0 <CO_NMT_process+0x1c0>
        && NMTstateCpy == CO_NMT_PRE_OPERATIONAL && !busOff_HB && !errRegMasked
 80016a8:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80016ac:	2b7f      	cmp	r3, #127	; 0x7f
 80016ae:	d107      	bne.n	80016c0 <CO_NMT_process+0x1c0>
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d104      	bne.n	80016c0 <CO_NMT_process+0x1c0>
 80016b6:	693b      	ldr	r3, [r7, #16]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d101      	bne.n	80016c0 <CO_NMT_process+0x1c0>
    ) {
        NMTstateCpy = CO_NMT_OPERATIONAL;
 80016bc:	2305      	movs	r3, #5
 80016be:	77fb      	strb	r3, [r7, #31]
            *timerNext_us = NMT->HBproducerTimer;
        }
    }
#endif

    NMT->operatingState = NMTstateCpy;
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	7ffa      	ldrb	r2, [r7, #31]
 80016c4:	701a      	strb	r2, [r3, #0]
    if (NMTstate != NULL) *NMTstate = NMTstateCpy;
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d002      	beq.n	80016d2 <CO_NMT_process+0x1d2>
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	7ffa      	ldrb	r2, [r7, #31]
 80016d0:	701a      	strb	r2, [r3, #0]

    return resetCommand;
 80016d2:	7fbb      	ldrb	r3, [r7, #30]
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3720      	adds	r7, #32
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}

080016dc <CO_NMT_sendCommand>:
#if (CO_CONFIG_NMT) & CO_CONFIG_NMT_MASTER
/******************************************************************************/
CO_ReturnError_t CO_NMT_sendCommand(CO_NMT_t *NMT,
                                    CO_NMT_command_t command,
                                    uint8_t nodeID)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	460b      	mov	r3, r1
 80016e6:	70fb      	strb	r3, [r7, #3]
 80016e8:	4613      	mov	r3, r2
 80016ea:	70bb      	strb	r3, [r7, #2]
    /* verify arguments */
    if (NMT == NULL) {
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d102      	bne.n	80016f8 <CO_NMT_sendCommand+0x1c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80016f2:	f04f 33ff 	mov.w	r3, #4294967295
 80016f6:	e01f      	b.n	8001738 <CO_NMT_sendCommand+0x5c>
    }

    /* Apply NMT command also to this node, if set so. */
    if (nodeID == 0 || nodeID == NMT->nodeId) {
 80016f8:	78bb      	ldrb	r3, [r7, #2]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d004      	beq.n	8001708 <CO_NMT_sendCommand+0x2c>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	78db      	ldrb	r3, [r3, #3]
 8001702:	78ba      	ldrb	r2, [r7, #2]
 8001704:	429a      	cmp	r2, r3
 8001706:	d102      	bne.n	800170e <CO_NMT_sendCommand+0x32>
        NMT->internalCommand = command;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	78fa      	ldrb	r2, [r7, #3]
 800170c:	709a      	strb	r2, [r3, #2]
    }

    /* Send NMT master message. */
    NMT->NMT_TXbuff->ident = 0; 		//tự config
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
    NMT->NMT_TXbuff->data[0] = command;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800171a:	78fa      	ldrb	r2, [r7, #3]
 800171c:	715a      	strb	r2, [r3, #5]
    NMT->NMT_TXbuff->data[1] = nodeID;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001722:	78ba      	ldrb	r2, [r7, #2]
 8001724:	719a      	strb	r2, [r3, #6]
    return CO_CANsend(NMT->NMT_CANdevTx, NMT->NMT_TXbuff);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800172e:	4619      	mov	r1, r3
 8001730:	4610      	mov	r0, r2
 8001732:	f006 fd1d 	bl	8008170 <CO_CANsend>
 8001736:	4603      	mov	r3, r0
}
 8001738:	4618      	mov	r0, r3
 800173a:	3708      	adds	r7, #8
 800173c:	46bd      	mov	sp, r7
 800173e:	bd80      	pop	{r7, pc}

08001740 <OD_readOriginal>:


/******************************************************************************/
ODR_t OD_readOriginal(OD_stream_t *stream, void *buf,
                      OD_size_t count, OD_size_t *countRead)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b088      	sub	sp, #32
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
 800174c:	603b      	str	r3, [r7, #0]
    if (stream == NULL || buf == NULL || countRead == NULL) {
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d005      	beq.n	8001760 <OD_readOriginal+0x20>
 8001754:	68bb      	ldr	r3, [r7, #8]
 8001756:	2b00      	cmp	r3, #0
 8001758:	d002      	beq.n	8001760 <OD_readOriginal+0x20>
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <OD_readOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 8001760:	2309      	movs	r3, #9
 8001762:	e041      	b.n	80017e8 <OD_readOriginal+0xa8>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	61fb      	str	r3, [r7, #28]
    const uint8_t *dataOrig = stream->dataOrig;
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	61bb      	str	r3, [r7, #24]

    if (dataOrig == NULL) {
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d101      	bne.n	800177a <OD_readOriginal+0x3a>
        return ODR_SUB_NOT_EXIST;
 8001776:	230e      	movs	r3, #14
 8001778:	e036      	b.n	80017e8 <OD_readOriginal+0xa8>
    }

    ODR_t returnCode = ODR_OK;
 800177a:	2300      	movs	r3, #0
 800177c:	75fb      	strb	r3, [r7, #23]

    /* If previous read was partial or OD variable length is larger than
     * current buffer size, then data was (will be) read in several segments */
    if (stream->dataOffset > 0 || dataLenToCopy > count) {
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d103      	bne.n	800178e <OD_readOriginal+0x4e>
 8001786:	69fa      	ldr	r2, [r7, #28]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	429a      	cmp	r2, r3
 800178c:	d922      	bls.n	80017d4 <OD_readOriginal+0x94>
        if (stream->dataOffset >= dataLenToCopy) {
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	68db      	ldr	r3, [r3, #12]
 8001792:	69fa      	ldr	r2, [r7, #28]
 8001794:	429a      	cmp	r2, r3
 8001796:	d801      	bhi.n	800179c <OD_readOriginal+0x5c>
            return ODR_DEV_INCOMPAT;
 8001798:	2309      	movs	r3, #9
 800179a:	e025      	b.n	80017e8 <OD_readOriginal+0xa8>
        }
        /* Reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	69fa      	ldr	r2, [r7, #28]
 80017a2:	1ad3      	subs	r3, r2, r3
 80017a4:	61fb      	str	r3, [r7, #28]
        dataOrig += stream->dataOffset;
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	68db      	ldr	r3, [r3, #12]
 80017aa:	69ba      	ldr	r2, [r7, #24]
 80017ac:	4413      	add	r3, r2
 80017ae:	61bb      	str	r3, [r7, #24]

        if (dataLenToCopy > count) {
 80017b0:	69fa      	ldr	r2, [r7, #28]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d90a      	bls.n	80017ce <OD_readOriginal+0x8e>
            /* Not enough space in destination buffer */
            dataLenToCopy = count;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	68da      	ldr	r2, [r3, #12]
 80017c0:	69fb      	ldr	r3, [r7, #28]
 80017c2:	441a      	add	r2, r3
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 80017c8:	23ff      	movs	r3, #255	; 0xff
 80017ca:	75fb      	strb	r3, [r7, #23]
 80017cc:	e002      	b.n	80017d4 <OD_readOriginal+0x94>
        }
        else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	2200      	movs	r2, #0
 80017d2:	60da      	str	r2, [r3, #12]
        }
    }

    memcpy(buf, dataOrig, dataLenToCopy);
 80017d4:	69fa      	ldr	r2, [r7, #28]
 80017d6:	69b9      	ldr	r1, [r7, #24]
 80017d8:	68b8      	ldr	r0, [r7, #8]
 80017da:	f012 fc51 	bl	8014080 <memcpy>

    *countRead = dataLenToCopy;
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	69fa      	ldr	r2, [r7, #28]
 80017e2:	601a      	str	r2, [r3, #0]
    return returnCode;
 80017e4:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80017e8:	4618      	mov	r0, r3
 80017ea:	3720      	adds	r7, #32
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}

080017f0 <OD_writeOriginal>:

/******************************************************************************/
ODR_t OD_writeOriginal(OD_stream_t *stream, const void *buf,
                       OD_size_t count, OD_size_t *countWritten)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b088      	sub	sp, #32
 80017f4:	af00      	add	r7, sp, #0
 80017f6:	60f8      	str	r0, [r7, #12]
 80017f8:	60b9      	str	r1, [r7, #8]
 80017fa:	607a      	str	r2, [r7, #4]
 80017fc:	603b      	str	r3, [r7, #0]
    if (stream == NULL || buf == NULL || countWritten == NULL) {
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d005      	beq.n	8001810 <OD_writeOriginal+0x20>
 8001804:	68bb      	ldr	r3, [r7, #8]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d002      	beq.n	8001810 <OD_writeOriginal+0x20>
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d101      	bne.n	8001814 <OD_writeOriginal+0x24>
        return ODR_DEV_INCOMPAT;
 8001810:	2309      	movs	r3, #9
 8001812:	e047      	b.n	80018a4 <OD_writeOriginal+0xb4>
    }

    OD_size_t dataLenToCopy = stream->dataLength; /* length of OD variable */
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	61fb      	str	r3, [r7, #28]
    uint8_t *dataOrig = stream->dataOrig;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	61bb      	str	r3, [r7, #24]

    if (dataOrig == NULL) {
 8001820:	69bb      	ldr	r3, [r7, #24]
 8001822:	2b00      	cmp	r3, #0
 8001824:	d101      	bne.n	800182a <OD_writeOriginal+0x3a>
        return ODR_SUB_NOT_EXIST;
 8001826:	230e      	movs	r3, #14
 8001828:	e03c      	b.n	80018a4 <OD_writeOriginal+0xb4>
    }

    ODR_t returnCode = ODR_OK;
 800182a:	2300      	movs	r3, #0
 800182c:	75fb      	strb	r3, [r7, #23]

    /* If previous write was partial or OD variable length is larger than
     * current buffer size, then data was (will be) written in several
     * segments */
    if (stream->dataOffset > 0 || dataLenToCopy > count) {
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	68db      	ldr	r3, [r3, #12]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d103      	bne.n	800183e <OD_writeOriginal+0x4e>
 8001836:	69fa      	ldr	r2, [r7, #28]
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	429a      	cmp	r2, r3
 800183c:	d922      	bls.n	8001884 <OD_writeOriginal+0x94>
        if (stream->dataOffset >= dataLenToCopy) {
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	68db      	ldr	r3, [r3, #12]
 8001842:	69fa      	ldr	r2, [r7, #28]
 8001844:	429a      	cmp	r2, r3
 8001846:	d801      	bhi.n	800184c <OD_writeOriginal+0x5c>
            return ODR_DEV_INCOMPAT;
 8001848:	2309      	movs	r3, #9
 800184a:	e02b      	b.n	80018a4 <OD_writeOriginal+0xb4>
        }
        /* reduce for already copied data */
        dataLenToCopy -= stream->dataOffset;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	69fa      	ldr	r2, [r7, #28]
 8001852:	1ad3      	subs	r3, r2, r3
 8001854:	61fb      	str	r3, [r7, #28]
        dataOrig += stream->dataOffset;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	69ba      	ldr	r2, [r7, #24]
 800185c:	4413      	add	r3, r2
 800185e:	61bb      	str	r3, [r7, #24]

        if (dataLenToCopy > count) {
 8001860:	69fa      	ldr	r2, [r7, #28]
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	429a      	cmp	r2, r3
 8001866:	d90a      	bls.n	800187e <OD_writeOriginal+0x8e>
            /* Remaining data space in OD variable is larger than current count
             * of data, so only current count of data will be copied */
            dataLenToCopy = count;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	61fb      	str	r3, [r7, #28]
            stream->dataOffset += dataLenToCopy;
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	68da      	ldr	r2, [r3, #12]
 8001870:	69fb      	ldr	r3, [r7, #28]
 8001872:	441a      	add	r2, r3
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	60da      	str	r2, [r3, #12]
            returnCode = ODR_PARTIAL;
 8001878:	23ff      	movs	r3, #255	; 0xff
 800187a:	75fb      	strb	r3, [r7, #23]
 800187c:	e002      	b.n	8001884 <OD_writeOriginal+0x94>
        }
        else {
            stream->dataOffset = 0; /* copy finished, reset offset */
 800187e:	68fb      	ldr	r3, [r7, #12]
 8001880:	2200      	movs	r2, #0
 8001882:	60da      	str	r2, [r3, #12]
        }
    }

    if (dataLenToCopy < count) {
 8001884:	69fa      	ldr	r2, [r7, #28]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	429a      	cmp	r2, r3
 800188a:	d201      	bcs.n	8001890 <OD_writeOriginal+0xa0>
        /* OD variable is smaller than current amount of data */
        return ODR_DATA_LONG;
 800188c:	230c      	movs	r3, #12
 800188e:	e009      	b.n	80018a4 <OD_writeOriginal+0xb4>
    }

    memcpy(dataOrig, buf, dataLenToCopy);
 8001890:	69fa      	ldr	r2, [r7, #28]
 8001892:	68b9      	ldr	r1, [r7, #8]
 8001894:	69b8      	ldr	r0, [r7, #24]
 8001896:	f012 fbf3 	bl	8014080 <memcpy>

    *countWritten = dataLenToCopy;
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	69fa      	ldr	r2, [r7, #28]
 800189e:	601a      	str	r2, [r3, #0]
    return returnCode;
 80018a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3720      	adds	r7, #32
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}

080018ac <OD_readDisabled>:

/* Read value from variable from Object Dictionary disabled, see OD_IO_t*/
static ODR_t OD_readDisabled(OD_stream_t *stream, void *buf,
                             OD_size_t count, OD_size_t *countRead)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b085      	sub	sp, #20
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
 80018b8:	603b      	str	r3, [r7, #0]
    (void) stream; (void) buf; (void) count; (void) countRead;
    return ODR_UNSUPP_ACCESS;
 80018ba:	2302      	movs	r3, #2
}
 80018bc:	4618      	mov	r0, r3
 80018be:	3714      	adds	r7, #20
 80018c0:	46bd      	mov	sp, r7
 80018c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c6:	4770      	bx	lr

080018c8 <OD_writeDisabled>:

/* Write value to variable from Object Dictionary disabled, see OD_IO_t */
static ODR_t OD_writeDisabled(OD_stream_t *stream, const void *buf,
                              OD_size_t count, OD_size_t *countWritten)
{
 80018c8:	b480      	push	{r7}
 80018ca:	b085      	sub	sp, #20
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
 80018d4:	603b      	str	r3, [r7, #0]
    (void) stream; (void) buf; (void) count; (void) countWritten;
    return ODR_UNSUPP_ACCESS;
 80018d6:	2302      	movs	r3, #2
}
 80018d8:	4618      	mov	r0, r3
 80018da:	3714      	adds	r7, #20
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr

080018e4 <OD_find>:


/******************************************************************************/
OD_entry_t *OD_find(OD_t *od, uint16_t index) {
 80018e4:	b480      	push	{r7}
 80018e6:	b087      	sub	sp, #28
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	6078      	str	r0, [r7, #4]
 80018ec:	460b      	mov	r3, r1
 80018ee:	807b      	strh	r3, [r7, #2]
    if (od == NULL || od->size == 0) {
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d003      	beq.n	80018fe <OD_find+0x1a>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	881b      	ldrh	r3, [r3, #0]
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d101      	bne.n	8001902 <OD_find+0x1e>
        return NULL;
 80018fe:	2300      	movs	r3, #0
 8001900:	e046      	b.n	8001990 <OD_find+0xac>
    }

    uint16_t min = 0;
 8001902:	2300      	movs	r3, #0
 8001904:	82fb      	strh	r3, [r7, #22]
    uint16_t max = od->size - 1;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	881b      	ldrh	r3, [r3, #0]
 800190a:	3b01      	subs	r3, #1
 800190c:	82bb      	strh	r3, [r7, #20]

    /* Fast search in ordered Object Dictionary. If indexes are mixed,
     * this won't work. If Object Dictionary has up to N entries, then the
     * max number of loop passes is log2(N) */
    while (min < max) {
 800190e:	e026      	b.n	800195e <OD_find+0x7a>
        /* get entry between min and max */
        uint16_t cur = (min + max) >> 1;
 8001910:	8afa      	ldrh	r2, [r7, #22]
 8001912:	8abb      	ldrh	r3, [r7, #20]
 8001914:	4413      	add	r3, r2
 8001916:	105b      	asrs	r3, r3, #1
 8001918:	81fb      	strh	r3, [r7, #14]
        OD_entry_t* entry = &od->list[cur];
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6859      	ldr	r1, [r3, #4]
 800191e:	89fa      	ldrh	r2, [r7, #14]
 8001920:	4613      	mov	r3, r2
 8001922:	005b      	lsls	r3, r3, #1
 8001924:	4413      	add	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	440b      	add	r3, r1
 800192a:	60bb      	str	r3, [r7, #8]

        if (index == entry->index) {
 800192c:	68bb      	ldr	r3, [r7, #8]
 800192e:	881b      	ldrh	r3, [r3, #0]
 8001930:	887a      	ldrh	r2, [r7, #2]
 8001932:	429a      	cmp	r2, r3
 8001934:	d101      	bne.n	800193a <OD_find+0x56>
            return entry;
 8001936:	68bb      	ldr	r3, [r7, #8]
 8001938:	e02a      	b.n	8001990 <OD_find+0xac>
        }

        if (index < entry->index) {
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	881b      	ldrh	r3, [r3, #0]
 800193e:	887a      	ldrh	r2, [r7, #2]
 8001940:	429a      	cmp	r2, r3
 8001942:	d209      	bcs.n	8001958 <OD_find+0x74>
            max = (cur > 0) ? (cur - 1) : cur;
 8001944:	89fb      	ldrh	r3, [r7, #14]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d003      	beq.n	8001952 <OD_find+0x6e>
 800194a:	89fb      	ldrh	r3, [r7, #14]
 800194c:	3b01      	subs	r3, #1
 800194e:	b29b      	uxth	r3, r3
 8001950:	e000      	b.n	8001954 <OD_find+0x70>
 8001952:	89fb      	ldrh	r3, [r7, #14]
 8001954:	82bb      	strh	r3, [r7, #20]
 8001956:	e002      	b.n	800195e <OD_find+0x7a>
        }
        else {
            min = cur + 1;
 8001958:	89fb      	ldrh	r3, [r7, #14]
 800195a:	3301      	adds	r3, #1
 800195c:	82fb      	strh	r3, [r7, #22]
    while (min < max) {
 800195e:	8afa      	ldrh	r2, [r7, #22]
 8001960:	8abb      	ldrh	r3, [r7, #20]
 8001962:	429a      	cmp	r2, r3
 8001964:	d3d4      	bcc.n	8001910 <OD_find+0x2c>
        }
    }

    if (min == max) {
 8001966:	8afa      	ldrh	r2, [r7, #22]
 8001968:	8abb      	ldrh	r3, [r7, #20]
 800196a:	429a      	cmp	r2, r3
 800196c:	d10f      	bne.n	800198e <OD_find+0xaa>
        OD_entry_t* entry = &od->list[min];
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6859      	ldr	r1, [r3, #4]
 8001972:	8afa      	ldrh	r2, [r7, #22]
 8001974:	4613      	mov	r3, r2
 8001976:	005b      	lsls	r3, r3, #1
 8001978:	4413      	add	r3, r2
 800197a:	009b      	lsls	r3, r3, #2
 800197c:	440b      	add	r3, r1
 800197e:	613b      	str	r3, [r7, #16]
        if (index == entry->index) {
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	881b      	ldrh	r3, [r3, #0]
 8001984:	887a      	ldrh	r2, [r7, #2]
 8001986:	429a      	cmp	r2, r3
 8001988:	d101      	bne.n	800198e <OD_find+0xaa>
            return entry;
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	e000      	b.n	8001990 <OD_find+0xac>
        }
    }

    return NULL;  /* entry does not exist in OD */
 800198e:	2300      	movs	r3, #0
}
 8001990:	4618      	mov	r0, r3
 8001992:	371c      	adds	r7, #28
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <OD_getSub>:

/******************************************************************************/
ODR_t OD_getSub(const OD_entry_t *entry, uint8_t subIndex,
                OD_IO_t *io, bool_t odOrig)
{
 800199c:	b480      	push	{r7}
 800199e:	b08d      	sub	sp, #52	; 0x34
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	607a      	str	r2, [r7, #4]
 80019a6:	603b      	str	r3, [r7, #0]
 80019a8:	460b      	mov	r3, r1
 80019aa:	72fb      	strb	r3, [r7, #11]
    if (entry == NULL || entry->odObject == NULL) return ODR_IDX_NOT_EXIST;
 80019ac:	68fb      	ldr	r3, [r7, #12]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d003      	beq.n	80019ba <OD_getSub+0x1e>
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <OD_getSub+0x22>
 80019ba:	2305      	movs	r3, #5
 80019bc:	e0d2      	b.n	8001b64 <OD_getSub+0x1c8>
    if (io == NULL) return ODR_DEV_INCOMPAT;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d101      	bne.n	80019c8 <OD_getSub+0x2c>
 80019c4:	2309      	movs	r3, #9
 80019c6:	e0cd      	b.n	8001b64 <OD_getSub+0x1c8>

    OD_stream_t *stream = &io->stream;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	627b      	str	r3, [r7, #36]	; 0x24

    /* attribute, dataOrig and dataLength, depends on object type */
    switch (entry->odObjectType & ODT_TYPE_MASK) {
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	78db      	ldrb	r3, [r3, #3]
 80019d0:	f003 030f 	and.w	r3, r3, #15
 80019d4:	2b03      	cmp	r3, #3
 80019d6:	d050      	beq.n	8001a7a <OD_getSub+0xde>
 80019d8:	2b03      	cmp	r3, #3
 80019da:	f300 808c 	bgt.w	8001af6 <OD_getSub+0x15a>
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d002      	beq.n	80019e8 <OD_getSub+0x4c>
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d015      	beq.n	8001a12 <OD_getSub+0x76>
 80019e6:	e086      	b.n	8001af6 <OD_getSub+0x15a>
    case ODT_VAR: {
        if (subIndex > 0) return ODR_SUB_NOT_EXIST;
 80019e8:	7afb      	ldrb	r3, [r7, #11]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d001      	beq.n	80019f2 <OD_getSub+0x56>
 80019ee:	230e      	movs	r3, #14
 80019f0:	e0b8      	b.n	8001b64 <OD_getSub+0x1c8>
        CO_PROGMEM OD_obj_var_t *odo = entry->odObject;
 80019f2:	68fb      	ldr	r3, [r7, #12]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	617b      	str	r3, [r7, #20]


        stream->attribute = odo->attribute;
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	791a      	ldrb	r2, [r3, #4]
 80019fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019fe:	741a      	strb	r2, [r3, #16]
        stream->dataOrig = odo->dataOrig;
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	681a      	ldr	r2, [r3, #0]
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	601a      	str	r2, [r3, #0]
        stream->dataLength = odo->dataLength;
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0e:	609a      	str	r2, [r3, #8]
        break;
 8001a10:	e073      	b.n	8001afa <OD_getSub+0x15e>
    }
    case ODT_ARR: {
        if (subIndex >= entry->subEntriesCount) return ODR_SUB_NOT_EXIST;
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	789b      	ldrb	r3, [r3, #2]
 8001a16:	7afa      	ldrb	r2, [r7, #11]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	d301      	bcc.n	8001a20 <OD_getSub+0x84>
 8001a1c:	230e      	movs	r3, #14
 8001a1e:	e0a1      	b.n	8001b64 <OD_getSub+0x1c8>
        CO_PROGMEM OD_obj_array_t *odo = entry->odObject;
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	61fb      	str	r3, [r7, #28]

        if (subIndex == 0) {
 8001a26:	7afb      	ldrb	r3, [r7, #11]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d10b      	bne.n	8001a44 <OD_getSub+0xa8>
            stream->attribute = odo->attribute0;
 8001a2c:	69fb      	ldr	r3, [r7, #28]
 8001a2e:	7a1a      	ldrb	r2, [r3, #8]
 8001a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a32:	741a      	strb	r2, [r3, #16]
            stream->dataOrig = odo->dataOrig0;
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3a:	601a      	str	r2, [r3, #0]
            stream->dataLength = 1;
 8001a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3e:	2201      	movs	r2, #1
 8001a40:	609a      	str	r2, [r3, #8]
            uint8_t *ptr = odo->dataOrig;
            stream->dataOrig = ptr == NULL ? ptr
                             : ptr + odo->dataElementSizeof * (subIndex - 1);
            stream->dataLength = odo->dataElementLength;
        }
        break;
 8001a42:	e05a      	b.n	8001afa <OD_getSub+0x15e>
            stream->attribute = odo->attribute;
 8001a44:	69fb      	ldr	r3, [r7, #28]
 8001a46:	7a5a      	ldrb	r2, [r3, #9]
 8001a48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a4a:	741a      	strb	r2, [r3, #16]
            uint8_t *ptr = odo->dataOrig;
 8001a4c:	69fb      	ldr	r3, [r7, #28]
 8001a4e:	685b      	ldr	r3, [r3, #4]
 8001a50:	61bb      	str	r3, [r7, #24]
            stream->dataOrig = ptr == NULL ? ptr
 8001a52:	69bb      	ldr	r3, [r7, #24]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d008      	beq.n	8001a6a <OD_getSub+0xce>
                             : ptr + odo->dataElementSizeof * (subIndex - 1);
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	691b      	ldr	r3, [r3, #16]
 8001a5c:	7afa      	ldrb	r2, [r7, #11]
 8001a5e:	3a01      	subs	r2, #1
 8001a60:	fb02 f303 	mul.w	r3, r2, r3
            stream->dataOrig = ptr == NULL ? ptr
 8001a64:	69ba      	ldr	r2, [r7, #24]
 8001a66:	4413      	add	r3, r2
 8001a68:	e000      	b.n	8001a6c <OD_getSub+0xd0>
 8001a6a:	69bb      	ldr	r3, [r7, #24]
 8001a6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a6e:	6013      	str	r3, [r2, #0]
            stream->dataLength = odo->dataElementLength;
 8001a70:	69fb      	ldr	r3, [r7, #28]
 8001a72:	68da      	ldr	r2, [r3, #12]
 8001a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a76:	609a      	str	r2, [r3, #8]
        break;
 8001a78:	e03f      	b.n	8001afa <OD_getSub+0x15e>
    }
    case ODT_REC: {
        CO_PROGMEM OD_obj_record_t *odoArr = entry->odObject;
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	685b      	ldr	r3, [r3, #4]
 8001a7e:	623b      	str	r3, [r7, #32]
        CO_PROGMEM OD_obj_record_t *odo = NULL;
 8001a80:	2300      	movs	r3, #0
 8001a82:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 8001a84:	2300      	movs	r3, #0
 8001a86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001a8a:	e01c      	b.n	8001ac6 <OD_getSub+0x12a>
            if (odoArr[i].subIndex == subIndex) {
 8001a8c:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001a90:	4613      	mov	r3, r2
 8001a92:	005b      	lsls	r3, r3, #1
 8001a94:	4413      	add	r3, r2
 8001a96:	009b      	lsls	r3, r3, #2
 8001a98:	461a      	mov	r2, r3
 8001a9a:	6a3b      	ldr	r3, [r7, #32]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	791b      	ldrb	r3, [r3, #4]
 8001aa0:	7afa      	ldrb	r2, [r7, #11]
 8001aa2:	429a      	cmp	r2, r3
 8001aa4:	d10a      	bne.n	8001abc <OD_getSub+0x120>
                odo = &odoArr[i];
 8001aa6:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001aaa:	4613      	mov	r3, r2
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	4413      	add	r3, r2
 8001ab0:	009b      	lsls	r3, r3, #2
 8001ab2:	461a      	mov	r2, r3
 8001ab4:	6a3b      	ldr	r3, [r7, #32]
 8001ab6:	4413      	add	r3, r2
 8001ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
                break;
 8001aba:	e00a      	b.n	8001ad2 <OD_getSub+0x136>
        for (uint8_t i = 0; i < entry->subEntriesCount; i++) {
 8001abc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001ac0:	3301      	adds	r3, #1
 8001ac2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	789b      	ldrb	r3, [r3, #2]
 8001aca:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	d3dc      	bcc.n	8001a8c <OD_getSub+0xf0>
            }
        }
        if (odo == NULL) return ODR_SUB_NOT_EXIST;
 8001ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d101      	bne.n	8001adc <OD_getSub+0x140>
 8001ad8:	230e      	movs	r3, #14
 8001ada:	e043      	b.n	8001b64 <OD_getSub+0x1c8>

        stream->attribute = odo->attribute;
 8001adc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ade:	795a      	ldrb	r2, [r3, #5]
 8001ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae2:	741a      	strb	r2, [r3, #16]
        stream->dataOrig = odo->dataOrig;
 8001ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ae6:	681a      	ldr	r2, [r3, #0]
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aea:	601a      	str	r2, [r3, #0]
        stream->dataLength = odo->dataLength;
 8001aec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af2:	609a      	str	r2, [r3, #8]
        break;
 8001af4:	e001      	b.n	8001afa <OD_getSub+0x15e>
    }
    default: {
        return ODR_DEV_INCOMPAT;
 8001af6:	2309      	movs	r3, #9
 8001af8:	e034      	b.n	8001b64 <OD_getSub+0x1c8>
    }
    }

    /* Access data from the original OD location */
    if (entry->extension == NULL || odOrig) {
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d002      	beq.n	8001b08 <OD_getSub+0x16c>
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d009      	beq.n	8001b1c <OD_getSub+0x180>
        io->read = OD_readOriginal;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	4a19      	ldr	r2, [pc, #100]	; (8001b70 <OD_getSub+0x1d4>)
 8001b0c:	615a      	str	r2, [r3, #20]
        io->write = OD_writeOriginal;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a18      	ldr	r2, [pc, #96]	; (8001b74 <OD_getSub+0x1d8>)
 8001b12:	619a      	str	r2, [r3, #24]
        stream->object = NULL;
 8001b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b16:	2200      	movs	r2, #0
 8001b18:	605a      	str	r2, [r3, #4]
 8001b1a:	e01c      	b.n	8001b56 <OD_getSub+0x1ba>
    }
    /* Access data from extension specified by application */
    else {
        io->read = entry->extension->read != NULL ?
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	685b      	ldr	r3, [r3, #4]
                   entry->extension->read : OD_readDisabled;
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d003      	beq.n	8001b2e <OD_getSub+0x192>
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	e000      	b.n	8001b30 <OD_getSub+0x194>
 8001b2e:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <OD_getSub+0x1dc>)
        io->read = entry->extension->read != NULL ?
 8001b30:	687a      	ldr	r2, [r7, #4]
 8001b32:	6153      	str	r3, [r2, #20]
        io->write = entry->extension->write != NULL ?
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	689b      	ldr	r3, [r3, #8]
                    entry->extension->write : OD_writeDisabled;
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d003      	beq.n	8001b46 <OD_getSub+0x1aa>
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	e000      	b.n	8001b48 <OD_getSub+0x1ac>
 8001b46:	4b0d      	ldr	r3, [pc, #52]	; (8001b7c <OD_getSub+0x1e0>)
        io->write = entry->extension->write != NULL ?
 8001b48:	687a      	ldr	r2, [r7, #4]
 8001b4a:	6193      	str	r3, [r2, #24]
        stream->object = entry->extension->object;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	689b      	ldr	r3, [r3, #8]
 8001b50:	681a      	ldr	r2, [r3, #0]
 8001b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b54:	605a      	str	r2, [r3, #4]
    }

    /* Reset stream data offset */
    stream->dataOffset = 0;
 8001b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b58:	2200      	movs	r2, #0
 8001b5a:	60da      	str	r2, [r3, #12]
    stream->subIndex = subIndex;
 8001b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5e:	7afa      	ldrb	r2, [r7, #11]
 8001b60:	745a      	strb	r2, [r3, #17]

    return ODR_OK;
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	3734      	adds	r7, #52	; 0x34
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr
 8001b70:	08001741 	.word	0x08001741
 8001b74:	080017f1 	.word	0x080017f1
 8001b78:	080018ad 	.word	0x080018ad
 8001b7c:	080018c9 	.word	0x080018c9

08001b80 <OD_getSDOabCode>:

/******************************************************************************/
uint32_t OD_getSDOabCode(ODR_t returnCode) {
 8001b80:	b480      	push	{r7}
 8001b82:	b083      	sub	sp, #12
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	4603      	mov	r3, r0
 8001b88:	71fb      	strb	r3, [r7, #7]
        0x08000023UL, /* Object dict. not present or dynamic generation fails */
        0x08000024UL  /* No data available */
    };

    return (returnCode < 0 || returnCode >= ODR_COUNT) ?
        abortCodes[ODR_DEV_INCOMPAT] : abortCodes[returnCode];
 8001b8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	db03      	blt.n	8001b9a <OD_getSDOabCode+0x1a>
    return (returnCode < 0 || returnCode >= ODR_COUNT) ?
 8001b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b96:	2b19      	cmp	r3, #25
 8001b98:	dd02      	ble.n	8001ba0 <OD_getSDOabCode+0x20>
        abortCodes[ODR_DEV_INCOMPAT] : abortCodes[returnCode];
 8001b9a:	4b07      	ldr	r3, [pc, #28]	; (8001bb8 <OD_getSDOabCode+0x38>)
 8001b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b9e:	e004      	b.n	8001baa <OD_getSDOabCode+0x2a>
 8001ba0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ba4:	4a04      	ldr	r2, [pc, #16]	; (8001bb8 <OD_getSDOabCode+0x38>)
 8001ba6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	080156d8 	.word	0x080156d8

08001bbc <OD_get_value>:


/******************************************************************************/
ODR_t OD_get_value(const OD_entry_t *entry, uint8_t subIndex,
                   void *val, OD_size_t len, bool_t odOrig)
{
 8001bbc:	b590      	push	{r4, r7, lr}
 8001bbe:	b08f      	sub	sp, #60	; 0x3c
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	607a      	str	r2, [r7, #4]
 8001bc6:	603b      	str	r3, [r7, #0]
 8001bc8:	460b      	mov	r3, r1
 8001bca:	72fb      	strb	r3, [r7, #11]
    if (val == NULL) return ODR_DEV_INCOMPAT;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d101      	bne.n	8001bd6 <OD_get_value+0x1a>
 8001bd2:	2309      	movs	r3, #9
 8001bd4:	e024      	b.n	8001c20 <OD_get_value+0x64>

    OD_IO_t io;
    OD_stream_t *stream = (OD_stream_t *)&io;
 8001bd6:	f107 0314 	add.w	r3, r7, #20
 8001bda:	637b      	str	r3, [r7, #52]	; 0x34
    OD_size_t countRd = 0;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	613b      	str	r3, [r7, #16]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 8001be0:	f107 0214 	add.w	r2, r7, #20
 8001be4:	7af9      	ldrb	r1, [r7, #11]
 8001be6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001be8:	68f8      	ldr	r0, [r7, #12]
 8001bea:	f7ff fed7 	bl	800199c <OD_getSub>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if (ret != ODR_OK) return ret;
 8001bf4:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d002      	beq.n	8001c02 <OD_get_value+0x46>
 8001bfc:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001c00:	e00e      	b.n	8001c20 <OD_get_value+0x64>
    if (stream->dataLength != len) return ODR_TYPE_MISMATCH;
 8001c02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	683a      	ldr	r2, [r7, #0]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d001      	beq.n	8001c10 <OD_get_value+0x54>
 8001c0c:	230b      	movs	r3, #11
 8001c0e:	e007      	b.n	8001c20 <OD_get_value+0x64>

    return io.read(stream, val, len, &countRd);
 8001c10:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8001c12:	f107 0310 	add.w	r3, r7, #16
 8001c16:	683a      	ldr	r2, [r7, #0]
 8001c18:	6879      	ldr	r1, [r7, #4]
 8001c1a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001c1c:	47a0      	blx	r4
 8001c1e:	4603      	mov	r3, r0
}
 8001c20:	4618      	mov	r0, r3
 8001c22:	373c      	adds	r7, #60	; 0x3c
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd90      	pop	{r4, r7, pc}

08001c28 <OD_set_value>:

ODR_t OD_set_value(const OD_entry_t *entry, uint8_t subIndex, void *val,
                   OD_size_t len, bool_t odOrig)
{
 8001c28:	b590      	push	{r4, r7, lr}
 8001c2a:	b08f      	sub	sp, #60	; 0x3c
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	607a      	str	r2, [r7, #4]
 8001c32:	603b      	str	r3, [r7, #0]
 8001c34:	460b      	mov	r3, r1
 8001c36:	72fb      	strb	r3, [r7, #11]
    OD_IO_t io;
    OD_stream_t *stream = &io.stream;
 8001c38:	f107 0314 	add.w	r3, r7, #20
 8001c3c:	637b      	str	r3, [r7, #52]	; 0x34
    OD_size_t countWritten = 0;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	613b      	str	r3, [r7, #16]

    ODR_t ret = OD_getSub(entry, subIndex, &io, odOrig);
 8001c42:	f107 0214 	add.w	r2, r7, #20
 8001c46:	7af9      	ldrb	r1, [r7, #11]
 8001c48:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001c4a:	68f8      	ldr	r0, [r7, #12]
 8001c4c:	f7ff fea6 	bl	800199c <OD_getSub>
 8001c50:	4603      	mov	r3, r0
 8001c52:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if (ret != ODR_OK) return ret;
 8001c56:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d002      	beq.n	8001c64 <OD_set_value+0x3c>
 8001c5e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001c62:	e00e      	b.n	8001c82 <OD_set_value+0x5a>
    if (stream->dataLength != len) return ODR_TYPE_MISMATCH;
 8001c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d001      	beq.n	8001c72 <OD_set_value+0x4a>
 8001c6e:	230b      	movs	r3, #11
 8001c70:	e007      	b.n	8001c82 <OD_set_value+0x5a>

    return io.write(stream, val, len, &countWritten);
 8001c72:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8001c74:	f107 0310 	add.w	r3, r7, #16
 8001c78:	683a      	ldr	r2, [r7, #0]
 8001c7a:	6879      	ldr	r1, [r7, #4]
 8001c7c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001c7e:	47a0      	blx	r4
 8001c80:	4603      	mov	r3, r0
}
 8001c82:	4618      	mov	r0, r3
 8001c84:	373c      	adds	r7, #60	; 0x3c
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bd90      	pop	{r4, r7, pc}

08001c8a <OD_getPtr>:

void *OD_getPtr(const OD_entry_t *entry, uint8_t subIndex, OD_size_t len,
                ODR_t *err)
{
 8001c8a:	b580      	push	{r7, lr}
 8001c8c:	b08e      	sub	sp, #56	; 0x38
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	60f8      	str	r0, [r7, #12]
 8001c92:	607a      	str	r2, [r7, #4]
 8001c94:	603b      	str	r3, [r7, #0]
 8001c96:	460b      	mov	r3, r1
 8001c98:	72fb      	strb	r3, [r7, #11]
    ODR_t errCopy;
    OD_IO_t io;
    OD_stream_t *stream = &io.stream;
 8001c9a:	f107 0314 	add.w	r3, r7, #20
 8001c9e:	633b      	str	r3, [r7, #48]	; 0x30

    errCopy = OD_getSub(entry, subIndex, &io, true);
 8001ca0:	f107 0214 	add.w	r2, r7, #20
 8001ca4:	7af9      	ldrb	r1, [r7, #11]
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	68f8      	ldr	r0, [r7, #12]
 8001caa:	f7ff fe77 	bl	800199c <OD_getSub>
 8001cae:	4603      	mov	r3, r0
 8001cb0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

    if (errCopy == ODR_OK) {
 8001cb4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d116      	bne.n	8001cea <OD_getPtr+0x60>
        if (stream->dataOrig == NULL || stream->dataLength == 0) {
 8001cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <OD_getPtr+0x42>
 8001cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cc6:	689b      	ldr	r3, [r3, #8]
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d103      	bne.n	8001cd4 <OD_getPtr+0x4a>
            errCopy = ODR_DEV_INCOMPAT;
 8001ccc:	2309      	movs	r3, #9
 8001cce:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8001cd2:	e00a      	b.n	8001cea <OD_getPtr+0x60>
        }
        else if (len != 0 && len != stream->dataLength) {
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d007      	beq.n	8001cea <OD_getPtr+0x60>
 8001cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d002      	beq.n	8001cea <OD_getPtr+0x60>
            errCopy = ODR_TYPE_MISMATCH;
 8001ce4:	230b      	movs	r3, #11
 8001ce6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }

    if (err != NULL) *err = errCopy;
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d003      	beq.n	8001cf8 <OD_getPtr+0x6e>
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001cf6:	701a      	strb	r2, [r3, #0]

    return errCopy == ODR_OK ? stream->dataOrig : NULL;
 8001cf8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8001cfc:	2b00      	cmp	r3, #0
 8001cfe:	d102      	bne.n	8001d06 <OD_getPtr+0x7c>
 8001d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	e000      	b.n	8001d08 <OD_getPtr+0x7e>
 8001d06:	2300      	movs	r3, #0
}
 8001d08:	4618      	mov	r0, r3
 8001d0a:	3738      	adds	r7, #56	; 0x38
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <CO_getUint8>:
static inline uint8_t CO_getUint8(const void *buf) {
 8001d10:	b480      	push	{r7}
 8001d12:	b085      	sub	sp, #20
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	781b      	ldrb	r3, [r3, #0]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 8001d1c:	73fb      	strb	r3, [r7, #15]
 8001d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3714      	adds	r7, #20
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <CO_getUint16>:
static inline uint16_t CO_getUint16(const void *buf) {
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	881b      	ldrh	r3, [r3, #0]
 8001d38:	b29b      	uxth	r3, r3
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
 8001d3a:	81fb      	strh	r3, [r7, #14]
 8001d3c:	89fb      	ldrh	r3, [r7, #14]
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3714      	adds	r7, #20
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr

08001d4a <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 8001d4a:	b480      	push	{r7}
 8001d4c:	b085      	sub	sp, #20
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	6078      	str	r0, [r7, #4]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8001d56:	60fb      	str	r3, [r7, #12]
 8001d58:	68fb      	ldr	r3, [r7, #12]
}
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	3714      	adds	r7, #20
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d64:	4770      	bx	lr

08001d66 <CO_setUint32>:
static inline uint8_t CO_setUint32(void *buf, uint32_t value) {
 8001d66:	b480      	push	{r7}
 8001d68:	b083      	sub	sp, #12
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
 8001d6e:	6039      	str	r1, [r7, #0]
 8001d70:	683a      	ldr	r2, [r7, #0]
    memmove(buf, &value, sizeof(value)); return sizeof(value);
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	2304      	movs	r3, #4
}
 8001d78:	4618      	mov	r0, r3
 8001d7a:	370c      	adds	r7, #12
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d82:	4770      	bx	lr

08001d84 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8001d84:	b480      	push	{r7}
 8001d86:	b083      	sub	sp, #12
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d002      	beq.n	8001d98 <OD_getIndex+0x14>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	e000      	b.n	8001d9a <OD_getIndex+0x16>
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	370c      	adds	r7, #12
 8001d9e:	46bd      	mov	sp, r7
 8001da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da4:	4770      	bx	lr

08001da6 <OD_extension_init>:
{
 8001da6:	b480      	push	{r7}
 8001da8:	b083      	sub	sp, #12
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
 8001dae:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d101      	bne.n	8001dba <OD_extension_init+0x14>
 8001db6:	2305      	movs	r3, #5
 8001db8:	e003      	b.n	8001dc2 <OD_extension_init+0x1c>
    entry->extension = extension;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	683a      	ldr	r2, [r7, #0]
 8001dbe:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8001dc0:	2300      	movs	r3, #0
}
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	370c      	adds	r7, #12
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr

08001dce <OD_get_u8>:
{
 8001dce:	b580      	push	{r7, lr}
 8001dd0:	b086      	sub	sp, #24
 8001dd2:	af02      	add	r7, sp, #8
 8001dd4:	60f8      	str	r0, [r7, #12]
 8001dd6:	607a      	str	r2, [r7, #4]
 8001dd8:	603b      	str	r3, [r7, #0]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001dde:	7af9      	ldrb	r1, [r7, #11]
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	9300      	str	r3, [sp, #0]
 8001de4:	2301      	movs	r3, #1
 8001de6:	687a      	ldr	r2, [r7, #4]
 8001de8:	68f8      	ldr	r0, [r7, #12]
 8001dea:	f7ff fee7 	bl	8001bbc <OD_get_value>
 8001dee:	4603      	mov	r3, r0
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3710      	adds	r7, #16
 8001df4:	46bd      	mov	sp, r7
 8001df6:	bd80      	pop	{r7, pc}

08001df8 <OD_get_u16>:
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af02      	add	r7, sp, #8
 8001dfe:	60f8      	str	r0, [r7, #12]
 8001e00:	607a      	str	r2, [r7, #4]
 8001e02:	603b      	str	r3, [r7, #0]
 8001e04:	460b      	mov	r3, r1
 8001e06:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001e08:	7af9      	ldrb	r1, [r7, #11]
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	9300      	str	r3, [sp, #0]
 8001e0e:	2302      	movs	r3, #2
 8001e10:	687a      	ldr	r2, [r7, #4]
 8001e12:	68f8      	ldr	r0, [r7, #12]
 8001e14:	f7ff fed2 	bl	8001bbc <OD_get_value>
 8001e18:	4603      	mov	r3, r0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	3710      	adds	r7, #16
 8001e1e:	46bd      	mov	sp, r7
 8001e20:	bd80      	pop	{r7, pc}

08001e22 <OD_get_u32>:
{
 8001e22:	b580      	push	{r7, lr}
 8001e24:	b086      	sub	sp, #24
 8001e26:	af02      	add	r7, sp, #8
 8001e28:	60f8      	str	r0, [r7, #12]
 8001e2a:	607a      	str	r2, [r7, #4]
 8001e2c:	603b      	str	r3, [r7, #0]
 8001e2e:	460b      	mov	r3, r1
 8001e30:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8001e32:	7af9      	ldrb	r1, [r7, #11]
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	2304      	movs	r3, #4
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	68f8      	ldr	r0, [r7, #12]
 8001e3e:	f7ff febd 	bl	8001bbc <OD_get_value>
 8001e42:	4603      	mov	r3, r0
}
 8001e44:	4618      	mov	r0, r3
 8001e46:	3710      	adds	r7, #16
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bd80      	pop	{r7, pc}

08001e4c <OD_write_dummy>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_dummy(OD_stream_t *stream, const void *buf,
                            OD_size_t count, OD_size_t *countWritten)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b085      	sub	sp, #20
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	60f8      	str	r0, [r7, #12]
 8001e54:	60b9      	str	r1, [r7, #8]
 8001e56:	607a      	str	r2, [r7, #4]
 8001e58:	603b      	str	r3, [r7, #0]
    (void) stream; (void) buf;
    if (countWritten != NULL) *countWritten = count;
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d002      	beq.n	8001e66 <OD_write_dummy+0x1a>
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8001e66:	2300      	movs	r3, #0
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <OD_read_dummy>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_dummy(OD_stream_t *stream, void *buf,
                           OD_size_t count, OD_size_t *countRead)
{
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
 8001e80:	603b      	str	r3, [r7, #0]
    if (buf == NULL || stream == NULL || countRead == NULL) {
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d005      	beq.n	8001e94 <OD_read_dummy+0x20>
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d002      	beq.n	8001e94 <OD_read_dummy+0x20>
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d101      	bne.n	8001e98 <OD_read_dummy+0x24>
        return ODR_DEV_INCOMPAT;
 8001e94:	2309      	movs	r3, #9
 8001e96:	e010      	b.n	8001eba <OD_read_dummy+0x46>
    }

    if (count > stream->dataLength) {
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	689b      	ldr	r3, [r3, #8]
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d902      	bls.n	8001ea8 <OD_read_dummy+0x34>
        count = stream->dataLength;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	607b      	str	r3, [r7, #4]
    }

    memset(buf, 0, count);
 8001ea8:	687a      	ldr	r2, [r7, #4]
 8001eaa:	2100      	movs	r1, #0
 8001eac:	68b8      	ldr	r0, [r7, #8]
 8001eae:	f012 f90f 	bl	80140d0 <memset>

    *countRead = count;
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	687a      	ldr	r2, [r7, #4]
 8001eb6:	601a      	str	r2, [r3, #0]
    return ODR_OK;
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
	...

08001ec4 <PDOconfigMap>:
static ODR_t PDOconfigMap(CO_PDO_common_t *PDO,
                          uint32_t map,
                          uint8_t mapIndex,
                          bool_t isRPDO,
                          OD_t *OD)
{
 8001ec4:	b5b0      	push	{r4, r5, r7, lr}
 8001ec6:	b092      	sub	sp, #72	; 0x48
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	603b      	str	r3, [r7, #0]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	71fb      	strb	r3, [r7, #7]
    uint16_t index = (uint16_t) (map >> 16);
 8001ed4:	68bb      	ldr	r3, [r7, #8]
 8001ed6:	0c1b      	lsrs	r3, r3, #16
 8001ed8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
    uint8_t subIndex = (uint8_t) (map >> 8);
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	0a1b      	lsrs	r3, r3, #8
 8001ee0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
    uint8_t mappedLengthBits = (uint8_t) map;
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
    uint8_t mappedLength = mappedLengthBits >> 3;
 8001eea:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001eee:	08db      	lsrs	r3, r3, #3
 8001ef0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
    OD_IO_t *OD_IO = &PDO->OD_IO[mapIndex];
 8001ef4:	79fa      	ldrb	r2, [r7, #7]
 8001ef6:	4613      	mov	r3, r2
 8001ef8:	00db      	lsls	r3, r3, #3
 8001efa:	1a9b      	subs	r3, r3, r2
 8001efc:	009b      	lsls	r3, r3, #2
 8001efe:	3310      	adds	r3, #16
 8001f00:	68fa      	ldr	r2, [r7, #12]
 8001f02:	4413      	add	r3, r2
 8001f04:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* total PDO length can not be more than CO_PDO_MAX_SIZE bytes */
    if (mappedLength > CO_PDO_MAX_SIZE) {
 8001f06:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001f0a:	2b08      	cmp	r3, #8
 8001f0c:	d901      	bls.n	8001f12 <PDOconfigMap+0x4e>
        return ODR_MAP_LEN; /* PDO length exceeded */
 8001f0e:	2307      	movs	r3, #7
 8001f10:	e090      	b.n	8002034 <PDOconfigMap+0x170>
    }

    /* is there a reference to the dummy entry */
    if (index < 0x20 && subIndex == 0) {
 8001f12:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001f16:	2b1f      	cmp	r3, #31
 8001f18:	d81a      	bhi.n	8001f50 <PDOconfigMap+0x8c>
 8001f1a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d116      	bne.n	8001f50 <PDOconfigMap+0x8c>
        OD_stream_t *stream = &OD_IO->stream;
 8001f22:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f24:	63bb      	str	r3, [r7, #56]	; 0x38
        memset(stream, 0, sizeof(OD_stream_t));
 8001f26:	2214      	movs	r2, #20
 8001f28:	2100      	movs	r1, #0
 8001f2a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001f2c:	f012 f8d0 	bl	80140d0 <memset>
        stream->dataLength = stream->dataOffset = mappedLength;
 8001f30:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8001f34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f36:	60da      	str	r2, [r3, #12]
 8001f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f3a:	68da      	ldr	r2, [r3, #12]
 8001f3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f3e:	609a      	str	r2, [r3, #8]
        OD_IO->read = OD_read_dummy;
 8001f40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f42:	4a3e      	ldr	r2, [pc, #248]	; (800203c <PDOconfigMap+0x178>)
 8001f44:	615a      	str	r2, [r3, #20]
        OD_IO->write = OD_write_dummy;
 8001f46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001f48:	4a3d      	ldr	r2, [pc, #244]	; (8002040 <PDOconfigMap+0x17c>)
 8001f4a:	619a      	str	r2, [r3, #24]
        return ODR_OK;
 8001f4c:	2300      	movs	r3, #0
 8001f4e:	e071      	b.n	8002034 <PDOconfigMap+0x170>
    }

    /* find entry in the Object Dictionary */
    OD_IO_t OD_IOcopy;
    OD_entry_t *entry = OD_find(OD, index);
 8001f50:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001f54:	4619      	mov	r1, r3
 8001f56:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8001f58:	f7ff fcc4 	bl	80018e4 <OD_find>
 8001f5c:	6378      	str	r0, [r7, #52]	; 0x34
    ODR_t odRet = OD_getSub(entry, subIndex, &OD_IOcopy, false);
 8001f5e:	f107 0214 	add.w	r2, r7, #20
 8001f62:	f897 1045 	ldrb.w	r1, [r7, #69]	; 0x45
 8001f66:	2300      	movs	r3, #0
 8001f68:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001f6a:	f7ff fd17 	bl	800199c <OD_getSub>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (odRet != ODR_OK) {
 8001f74:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d002      	beq.n	8001f82 <PDOconfigMap+0xbe>
        return odRet;
 8001f7c:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8001f80:	e058      	b.n	8002034 <PDOconfigMap+0x170>
    }

    /* verify access attributes, byte alignment and length */
    OD_attr_t testAttribute = isRPDO ? ODA_RPDO : ODA_TPDO;
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <PDOconfigMap+0xc8>
 8001f88:	2308      	movs	r3, #8
 8001f8a:	e000      	b.n	8001f8e <PDOconfigMap+0xca>
 8001f8c:	2304      	movs	r3, #4
 8001f8e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    if ((OD_IOcopy.stream.attribute & testAttribute) == 0
 8001f92:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001f96:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8001f9a:	4013      	ands	r3, r2
 8001f9c:	b2db      	uxtb	r3, r3
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00a      	beq.n	8001fb8 <PDOconfigMap+0xf4>
        || (mappedLengthBits & 0x07) != 0
 8001fa2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001fa6:	f003 0307 	and.w	r3, r3, #7
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d104      	bne.n	8001fb8 <PDOconfigMap+0xf4>
        || OD_IOcopy.stream.dataLength < mappedLength
 8001fae:	69fa      	ldr	r2, [r7, #28]
 8001fb0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d201      	bcs.n	8001fbc <PDOconfigMap+0xf8>
    ) {
        return ODR_NO_MAP; /* Object cannot be mapped to the PDO. */
 8001fb8:	2306      	movs	r3, #6
 8001fba:	e03b      	b.n	8002034 <PDOconfigMap+0x170>
    }

    /* Copy values and store mappedLength temporary. */
    *OD_IO = OD_IOcopy;
 8001fbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fbe:	461d      	mov	r5, r3
 8001fc0:	f107 0414 	add.w	r4, r7, #20
 8001fc4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fc8:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 8001fcc:	e885 0007 	stmia.w	r5, {r0, r1, r2}
    OD_IO->stream.dataOffset = mappedLength;
 8001fd0:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8001fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001fd6:	60da      	str	r2, [r3, #12]

    /* get TPDO request flag byte from extension */
#if OD_FLAGS_PDO_SIZE > 0
    if (!isRPDO) {
 8001fd8:	683b      	ldr	r3, [r7, #0]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d129      	bne.n	8002032 <PDOconfigMap+0x16e>
        if (subIndex < (OD_FLAGS_PDO_SIZE * 8) && entry->extension != NULL) {
 8001fde:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001fe2:	2b1f      	cmp	r3, #31
 8001fe4:	d81f      	bhi.n	8002026 <PDOconfigMap+0x162>
 8001fe6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fe8:	689b      	ldr	r3, [r3, #8]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d01b      	beq.n	8002026 <PDOconfigMap+0x162>
            PDO->flagPDObyte[mapIndex] =
                    &entry->extension->flagsPDO[subIndex >> 3];
 8001fee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ff0:	6899      	ldr	r1, [r3, #8]
 8001ff2:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8001ff6:	08db      	lsrs	r3, r3, #3
 8001ff8:	b2db      	uxtb	r3, r3
            PDO->flagPDObyte[mapIndex] =
 8001ffa:	79fa      	ldrb	r2, [r7, #7]
                    &entry->extension->flagsPDO[subIndex >> 3];
 8001ffc:	3308      	adds	r3, #8
 8001ffe:	440b      	add	r3, r1
 8002000:	1d19      	adds	r1, r3, #4
            PDO->flagPDObyte[mapIndex] =
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	323c      	adds	r2, #60	; 0x3c
 8002006:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            PDO->flagPDObitmask[mapIndex] = 1 << (subIndex & 0x07);
 800200a:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 800200e:	f003 0307 	and.w	r3, r3, #7
 8002012:	2201      	movs	r2, #1
 8002014:	409a      	lsls	r2, r3
 8002016:	79fb      	ldrb	r3, [r7, #7]
 8002018:	b2d1      	uxtb	r1, r2
 800201a:	68fa      	ldr	r2, [r7, #12]
 800201c:	4413      	add	r3, r2
 800201e:	460a      	mov	r2, r1
 8002020:	f883 2110 	strb.w	r2, [r3, #272]	; 0x110
 8002024:	e005      	b.n	8002032 <PDOconfigMap+0x16e>
        }
        else {
            PDO->flagPDObyte[mapIndex] = NULL;
 8002026:	79fa      	ldrb	r2, [r7, #7]
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	323c      	adds	r2, #60	; 0x3c
 800202c:	2100      	movs	r1, #0
 800202e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        }
    }
#endif

    return ODR_OK;
 8002032:	2300      	movs	r3, #0
}
 8002034:	4618      	mov	r0, r3
 8002036:	3748      	adds	r7, #72	; 0x48
 8002038:	46bd      	mov	sp, r7
 800203a:	bdb0      	pop	{r4, r5, r7, pc}
 800203c:	08001e75 	.word	0x08001e75
 8002040:	08001e4d 	.word	0x08001e4d

08002044 <PDO_initMapping>:
                                        OD_t *OD,
                                        OD_entry_t *OD_PDOMapPar,
                                        bool_t isRPDO,
                                        uint32_t *errInfo,
                                        uint32_t *erroneousMap)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08c      	sub	sp, #48	; 0x30
 8002048:	af02      	add	r7, sp, #8
 800204a:	60f8      	str	r0, [r7, #12]
 800204c:	60b9      	str	r1, [r7, #8]
 800204e:	607a      	str	r2, [r7, #4]
 8002050:	603b      	str	r3, [r7, #0]
    ODR_t odRet;
    size_t pdoDataLength = 0;
 8002052:	2300      	movs	r3, #0
 8002054:	627b      	str	r3, [r7, #36]	; 0x24
    uint8_t mappedObjectsCount = 0;
 8002056:	2300      	movs	r3, #0
 8002058:	76fb      	strb	r3, [r7, #27]

    /* number of mapped application objects in PDO */
    odRet = OD_get_u8(OD_PDOMapPar, 0, &mappedObjectsCount, true);
 800205a:	f107 021b 	add.w	r2, r7, #27
 800205e:	2301      	movs	r3, #1
 8002060:	2100      	movs	r1, #0
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7ff feb3 	bl	8001dce <OD_get_u8>
 8002068:	4603      	mov	r3, r0
 800206a:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 800206e:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00c      	beq.n	8002090 <PDO_initMapping+0x4c>
        if (errInfo != NULL) {
 8002076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002078:	2b00      	cmp	r3, #0
 800207a:	d006      	beq.n	800208a <PDO_initMapping+0x46>
            *errInfo = ((uint32_t)OD_getIndex(OD_PDOMapPar)) << 8;
 800207c:	6878      	ldr	r0, [r7, #4]
 800207e:	f7ff fe81 	bl	8001d84 <OD_getIndex>
 8002082:	4603      	mov	r3, r0
 8002084:	021a      	lsls	r2, r3, #8
 8002086:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002088:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800208a:	f06f 030b 	mvn.w	r3, #11
 800208e:	e082      	b.n	8002196 <PDO_initMapping+0x152>
    }

    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 8002090:	2300      	movs	r3, #0
 8002092:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002096:	e05e      	b.n	8002156 <PDO_initMapping+0x112>
        OD_IO_t *OD_IO = &PDO->OD_IO[i];
 8002098:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800209c:	4613      	mov	r3, r2
 800209e:	00db      	lsls	r3, r3, #3
 80020a0:	1a9b      	subs	r3, r3, r2
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	3310      	adds	r3, #16
 80020a6:	68fa      	ldr	r2, [r7, #12]
 80020a8:	4413      	add	r3, r2
 80020aa:	61fb      	str	r3, [r7, #28]
        uint32_t map = 0;
 80020ac:	2300      	movs	r3, #0
 80020ae:	617b      	str	r3, [r7, #20]

        odRet = OD_get_u32(OD_PDOMapPar, i + 1, &map, true);
 80020b0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80020b4:	3301      	adds	r3, #1
 80020b6:	b2d9      	uxtb	r1, r3
 80020b8:	f107 0214 	add.w	r2, r7, #20
 80020bc:	2301      	movs	r3, #1
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7ff feaf 	bl	8001e22 <OD_get_u32>
 80020c4:	4603      	mov	r3, r0
 80020c6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        if (odRet == ODR_SUB_NOT_EXIST) {
 80020ca:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80020ce:	2b0e      	cmp	r3, #14
 80020d0:	d03b      	beq.n	800214a <PDO_initMapping+0x106>
            continue;
        }
        if (odRet != ODR_OK) {
 80020d2:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d00f      	beq.n	80020fa <PDO_initMapping+0xb6>
            if (errInfo != NULL) {
 80020da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d009      	beq.n	80020f4 <PDO_initMapping+0xb0>
                *errInfo = (((uint32_t)OD_getIndex(OD_PDOMapPar))<<8) | i;
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f7ff fe4f 	bl	8001d84 <OD_getIndex>
 80020e6:	4603      	mov	r3, r0
 80020e8:	021a      	lsls	r2, r3, #8
 80020ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80020ee:	431a      	orrs	r2, r3
 80020f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80020f2:	601a      	str	r2, [r3, #0]
            }
            return CO_ERROR_OD_PARAMETERS;
 80020f4:	f06f 030b 	mvn.w	r3, #11
 80020f8:	e04d      	b.n	8002196 <PDO_initMapping+0x152>
        }

        odRet = PDOconfigMap(PDO, map, i, isRPDO, OD);
 80020fa:	6979      	ldr	r1, [r7, #20]
 80020fc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	9300      	str	r3, [sp, #0]
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	68f8      	ldr	r0, [r7, #12]
 8002108:	f7ff fedc 	bl	8001ec4 <PDOconfigMap>
 800210c:	4603      	mov	r3, r0
 800210e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        if (odRet != ODR_OK) {
 8002112:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8002116:	2b00      	cmp	r3, #0
 8002118:	d00c      	beq.n	8002134 <PDO_initMapping+0xf0>
            /* indicate erroneous mapping in initialization phase */
            OD_IO->stream.dataLength = 0;
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	2200      	movs	r2, #0
 800211e:	609a      	str	r2, [r3, #8]
            OD_IO->stream.dataOffset = 0xFF;
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	22ff      	movs	r2, #255	; 0xff
 8002124:	60da      	str	r2, [r3, #12]
            if (*erroneousMap == 0) *erroneousMap = map;
 8002126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d102      	bne.n	8002134 <PDO_initMapping+0xf0>
 800212e:	697a      	ldr	r2, [r7, #20]
 8002130:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002132:	601a      	str	r2, [r3, #0]
        }

        if (i < mappedObjectsCount) {
 8002134:	7efb      	ldrb	r3, [r7, #27]
 8002136:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800213a:	429a      	cmp	r2, r3
 800213c:	d206      	bcs.n	800214c <PDO_initMapping+0x108>
            pdoDataLength += OD_IO->stream.dataOffset;
 800213e:	69fb      	ldr	r3, [r7, #28]
 8002140:	68db      	ldr	r3, [r3, #12]
 8002142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002144:	4413      	add	r3, r2
 8002146:	627b      	str	r3, [r7, #36]	; 0x24
 8002148:	e000      	b.n	800214c <PDO_initMapping+0x108>
            continue;
 800214a:	bf00      	nop
    for (uint8_t i = 0; i < CO_PDO_MAX_MAPPED_ENTRIES; i++) {
 800214c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002150:	3301      	adds	r3, #1
 8002152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002156:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800215a:	2b07      	cmp	r3, #7
 800215c:	d99c      	bls.n	8002098 <PDO_initMapping+0x54>
        }
    }
    if (pdoDataLength > CO_PDO_MAX_SIZE
 800215e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002160:	2b08      	cmp	r3, #8
 8002162:	d805      	bhi.n	8002170 <PDO_initMapping+0x12c>
        || (pdoDataLength == 0 && mappedObjectsCount > 0)
 8002164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002166:	2b00      	cmp	r3, #0
 8002168:	d109      	bne.n	800217e <PDO_initMapping+0x13a>
 800216a:	7efb      	ldrb	r3, [r7, #27]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d006      	beq.n	800217e <PDO_initMapping+0x13a>
    ) {
        if (*erroneousMap == 0) *erroneousMap = 1;
 8002170:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d102      	bne.n	800217e <PDO_initMapping+0x13a>
 8002178:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800217a:	2201      	movs	r2, #1
 800217c:	601a      	str	r2, [r3, #0]
    }

    if (*erroneousMap == 0) {
 800217e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	2b00      	cmp	r3, #0
 8002184:	d106      	bne.n	8002194 <PDO_initMapping+0x150>
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	b2da      	uxtb	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 800218e:	7efa      	ldrb	r2, [r7, #27]
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	735a      	strb	r2, [r3, #13]
    }

    return CO_ERROR_NO;
 8002194:	2300      	movs	r3, #0
}
 8002196:	4618      	mov	r0, r3
 8002198:	3728      	adds	r7, #40	; 0x28
 800219a:	46bd      	mov	sp, r7
 800219c:	bd80      	pop	{r7, pc}

0800219e <OD_write_PDO_mapping>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_PDO_mapping(OD_stream_t *stream, const void *buf,
                                  OD_size_t count, OD_size_t *countWritten)
{
 800219e:	b580      	push	{r7, lr}
 80021a0:	b08e      	sub	sp, #56	; 0x38
 80021a2:	af02      	add	r7, sp, #8
 80021a4:	60f8      	str	r0, [r7, #12]
 80021a6:	60b9      	str	r1, [r7, #8]
 80021a8:	607a      	str	r2, [r7, #4]
 80021aa:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL
 80021ac:	68fb      	ldr	r3, [r7, #12]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d009      	beq.n	80021c6 <OD_write_PDO_mapping+0x28>
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d006      	beq.n	80021c6 <OD_write_PDO_mapping+0x28>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d003      	beq.n	80021c6 <OD_write_PDO_mapping+0x28>
        || stream->subIndex > CO_PDO_MAX_MAPPED_ENTRIES
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	7c5b      	ldrb	r3, [r3, #17]
 80021c2:	2b08      	cmp	r3, #8
 80021c4:	d901      	bls.n	80021ca <OD_write_PDO_mapping+0x2c>
    ) {
        return ODR_DEV_INCOMPAT;
 80021c6:	2309      	movs	r3, #9
 80021c8:	e081      	b.n	80022ce <OD_write_PDO_mapping+0x130>
    }

    /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
    CO_PDO_common_t *PDO = stream->object;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24

    /* PDO must be disabled before mapping configuration */
    if (PDO->valid || (PDO->mappedObjectsCount != 0 && stream->subIndex > 0)) {
 80021d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d2:	689b      	ldr	r3, [r3, #8]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d107      	bne.n	80021e8 <OD_write_PDO_mapping+0x4a>
 80021d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021da:	7b5b      	ldrb	r3, [r3, #13]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d005      	beq.n	80021ec <OD_write_PDO_mapping+0x4e>
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	7c5b      	ldrb	r3, [r3, #17]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d001      	beq.n	80021ec <OD_write_PDO_mapping+0x4e>
        return ODR_UNSUPP_ACCESS;
 80021e8:	2302      	movs	r3, #2
 80021ea:	e070      	b.n	80022ce <OD_write_PDO_mapping+0x130>
    }

    if (stream->subIndex == 0) {
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	7c5b      	ldrb	r3, [r3, #17]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d148      	bne.n	8002286 <OD_write_PDO_mapping+0xe8>
        uint8_t mappedObjectsCount = CO_getUint8(buf);
 80021f4:	68b8      	ldr	r0, [r7, #8]
 80021f6:	f7ff fd8b 	bl	8001d10 <CO_getUint8>
 80021fa:	4603      	mov	r3, r0
 80021fc:	77bb      	strb	r3, [r7, #30]
        size_t pdoDataLength = 0;
 80021fe:	2300      	movs	r3, #0
 8002200:	62fb      	str	r3, [r7, #44]	; 0x2c

        if (mappedObjectsCount > CO_PDO_MAX_MAPPED_ENTRIES) {
 8002202:	7fbb      	ldrb	r3, [r7, #30]
 8002204:	2b08      	cmp	r3, #8
 8002206:	d901      	bls.n	800220c <OD_write_PDO_mapping+0x6e>
            return ODR_MAP_LEN;
 8002208:	2307      	movs	r3, #7
 800220a:	e060      	b.n	80022ce <OD_write_PDO_mapping+0x130>
        }

        /* validate enabled mapping parameters */
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 800220c:	2300      	movs	r3, #0
 800220e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002212:	e01e      	b.n	8002252 <OD_write_PDO_mapping+0xb4>
            OD_IO_t *OD_IO = &PDO->OD_IO[i];
 8002214:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8002218:	4613      	mov	r3, r2
 800221a:	00db      	lsls	r3, r3, #3
 800221c:	1a9b      	subs	r3, r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	3310      	adds	r3, #16
 8002222:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002224:	4413      	add	r3, r2
 8002226:	61bb      	str	r3, [r7, #24]
            size_t dataLength = (size_t) OD_IO->stream.dataLength;
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	689b      	ldr	r3, [r3, #8]
 800222c:	617b      	str	r3, [r7, #20]
            size_t mappedLength = (size_t) OD_IO->stream.dataOffset;
 800222e:	69bb      	ldr	r3, [r7, #24]
 8002230:	68db      	ldr	r3, [r3, #12]
 8002232:	613b      	str	r3, [r7, #16]

            if (mappedLength > dataLength) {
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	429a      	cmp	r2, r3
 800223a:	d901      	bls.n	8002240 <OD_write_PDO_mapping+0xa2>
                /* erroneous map since device initial values */
                return ODR_NO_MAP;
 800223c:	2306      	movs	r3, #6
 800223e:	e046      	b.n	80022ce <OD_write_PDO_mapping+0x130>
            }
            pdoDataLength += mappedLength;
 8002240:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	4413      	add	r3, r2
 8002246:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (uint8_t i = 0; i < mappedObjectsCount; i++) {
 8002248:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800224c:	3301      	adds	r3, #1
 800224e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8002252:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8002256:	7fbb      	ldrb	r3, [r7, #30]
 8002258:	429a      	cmp	r2, r3
 800225a:	d3db      	bcc.n	8002214 <OD_write_PDO_mapping+0x76>
        }

        if (pdoDataLength > CO_PDO_MAX_SIZE) {
 800225c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800225e:	2b08      	cmp	r3, #8
 8002260:	d901      	bls.n	8002266 <OD_write_PDO_mapping+0xc8>
            return ODR_MAP_LEN;
 8002262:	2307      	movs	r3, #7
 8002264:	e033      	b.n	80022ce <OD_write_PDO_mapping+0x130>
        }
        if (pdoDataLength == 0 && mappedObjectsCount > 0) {
 8002266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002268:	2b00      	cmp	r3, #0
 800226a:	d104      	bne.n	8002276 <OD_write_PDO_mapping+0xd8>
 800226c:	7fbb      	ldrb	r3, [r7, #30]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <OD_write_PDO_mapping+0xd8>
            return ODR_INVALID_VALUE;
 8002272:	230f      	movs	r3, #15
 8002274:	e02b      	b.n	80022ce <OD_write_PDO_mapping+0x130>
        }

        /* success, update PDO */
        PDO->dataLength = (CO_PDO_size_t)pdoDataLength;
 8002276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002278:	b2da      	uxtb	r2, r3
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	731a      	strb	r2, [r3, #12]
        PDO->mappedObjectsCount = mappedObjectsCount;
 800227e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002280:	7fba      	ldrb	r2, [r7, #30]
 8002282:	735a      	strb	r2, [r3, #13]
 8002284:	e01c      	b.n	80022c0 <OD_write_PDO_mapping+0x122>
    }
    else {
        uint32_t val = CO_getUint32(buf);
 8002286:	68b8      	ldr	r0, [r7, #8]
 8002288:	f7ff fd5f 	bl	8001d4a <CO_getUint32>
 800228c:	6238      	str	r0, [r7, #32]
        ODR_t odRet = PDOconfigMap(PDO, val, stream->subIndex-1,
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	7c5b      	ldrb	r3, [r3, #17]
 8002292:	3b01      	subs	r3, #1
 8002294:	b2da      	uxtb	r2, r3
 8002296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002298:	f8d3 1118 	ldr.w	r1, [r3, #280]	; 0x118
 800229c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229e:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 80022a2:	9300      	str	r3, [sp, #0]
 80022a4:	460b      	mov	r3, r1
 80022a6:	6a39      	ldr	r1, [r7, #32]
 80022a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80022aa:	f7ff fe0b 	bl	8001ec4 <PDOconfigMap>
 80022ae:	4603      	mov	r3, r0
 80022b0:	77fb      	strb	r3, [r7, #31]
                                   PDO->isRPDO, PDO->OD);
        if (odRet != ODR_OK) {
 80022b2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d002      	beq.n	80022c0 <OD_write_PDO_mapping+0x122>
            return odRet;
 80022ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80022be:	e006      	b.n	80022ce <OD_write_PDO_mapping+0x130>
        }
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	687a      	ldr	r2, [r7, #4]
 80022c4:	68b9      	ldr	r1, [r7, #8]
 80022c6:	68f8      	ldr	r0, [r7, #12]
 80022c8:	f7ff fa92 	bl	80017f0 <OD_writeOriginal>
 80022cc:	4603      	mov	r3, r0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3730      	adds	r7, #48	; 0x30
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
	...

080022d8 <OD_read_PDO_commParam>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_read_PDO_commParam(OD_stream_t *stream, void *buf,
                                   OD_size_t count, OD_size_t *countRead)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b088      	sub	sp, #32
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
 80022e4:	603b      	str	r3, [r7, #0]
    ODR_t returnCode = OD_readOriginal(stream, buf, count, countRead);
 80022e6:	683b      	ldr	r3, [r7, #0]
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	68b9      	ldr	r1, [r7, #8]
 80022ec:	68f8      	ldr	r0, [r7, #12]
 80022ee:	f7ff fa27 	bl	8001740 <OD_readOriginal>
 80022f2:	4603      	mov	r3, r0
 80022f4:	76fb      	strb	r3, [r7, #27]

    /* When reading COB_ID, add Node-Id to the read value, if necessary */
    if (returnCode == ODR_OK && stream->subIndex == 1 && *countRead == 4) {
 80022f6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d134      	bne.n	8002368 <OD_read_PDO_commParam+0x90>
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	7c5b      	ldrb	r3, [r3, #17]
 8002302:	2b01      	cmp	r3, #1
 8002304:	d130      	bne.n	8002368 <OD_read_PDO_commParam+0x90>
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	2b04      	cmp	r3, #4
 800230c:	d12c      	bne.n	8002368 <OD_read_PDO_commParam+0x90>
        /* Only common part of the CO_RPDO_t or CO_TPDO_t will be used */
        CO_PDO_common_t *PDO = stream->object;
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	617b      	str	r3, [r7, #20]
        uint32_t COB_ID = CO_getUint32(buf);
 8002314:	68b8      	ldr	r0, [r7, #8]
 8002316:	f7ff fd18 	bl	8001d4a <CO_getUint32>
 800231a:	61f8      	str	r0, [r7, #28]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	b29b      	uxth	r3, r3
 8002320:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002324:	827b      	strh	r3, [r7, #18]

        /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
        if (CAN_ID != 0 && CAN_ID == (PDO->preDefinedCanId & 0xFF80)) {
 8002326:	8a7b      	ldrh	r3, [r7, #18]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d011      	beq.n	8002350 <OD_read_PDO_commParam+0x78>
 800232c:	8a7a      	ldrh	r2, [r7, #18]
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	f8b3 3122 	ldrh.w	r3, [r3, #290]	; 0x122
 8002334:	4619      	mov	r1, r3
 8002336:	f64f 7380 	movw	r3, #65408	; 0xff80
 800233a:	400b      	ands	r3, r1
 800233c:	429a      	cmp	r2, r3
 800233e:	d107      	bne.n	8002350 <OD_read_PDO_commParam+0x78>
            COB_ID = (COB_ID & 0xFFFF0000) | PDO->preDefinedCanId;
 8002340:	69fa      	ldr	r2, [r7, #28]
 8002342:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <OD_read_PDO_commParam+0x9c>)
 8002344:	4013      	ands	r3, r2
 8002346:	697a      	ldr	r2, [r7, #20]
 8002348:	f8b2 2122 	ldrh.w	r2, [r2, #290]	; 0x122
 800234c:	4313      	orrs	r3, r2
 800234e:	61fb      	str	r3, [r7, #28]
        }

        /* If PDO is not valid, set bit 31 */
        if (!PDO->valid) COB_ID |= 0x80000000;
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d103      	bne.n	8002360 <OD_read_PDO_commParam+0x88>
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800235e:	61fb      	str	r3, [r7, #28]

        CO_setUint32(buf, COB_ID);
 8002360:	69f9      	ldr	r1, [r7, #28]
 8002362:	68b8      	ldr	r0, [r7, #8]
 8002364:	f7ff fcff 	bl	8001d66 <CO_setUint32>
    }

    return returnCode;
 8002368:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 800236c:	4618      	mov	r0, r3
 800236e:	3720      	adds	r7, #32
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}
 8002374:	ffff0000 	.word	0xffff0000

08002378 <CO_PDO_receive>:
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 * If new message arrives and previous message wasn't processed yet, then
 * previous message will be lost and overwritten by the new message.
 */
static void CO_PDO_receive(void *object, void *msg) {
 8002378:	b580      	push	{r7, lr}
 800237a:	b088      	sub	sp, #32
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
    CO_RPDO_t *RPDO = object;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	61bb      	str	r3, [r7, #24]
    CO_PDO_common_t *PDO = &RPDO->PDO_common;
 8002386:	69bb      	ldr	r3, [r7, #24]
 8002388:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	791b      	ldrb	r3, [r3, #4]
 800238e:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	3305      	adds	r3, #5
 8002394:	60fb      	str	r3, [r7, #12]
    uint8_t err = RPDO->receiveError;
 8002396:	69bb      	ldr	r3, [r7, #24]
 8002398:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 800239c:	77fb      	strb	r3, [r7, #31]

    if (PDO->valid) {
 800239e:	697b      	ldr	r3, [r7, #20]
 80023a0:	689b      	ldr	r3, [r3, #8]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d03e      	beq.n	8002424 <CO_PDO_receive+0xac>
        if (DLC >= PDO->dataLength) {
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	7b1b      	ldrb	r3, [r3, #12]
 80023aa:	7cfa      	ldrb	r2, [r7, #19]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d334      	bcc.n	800241a <CO_PDO_receive+0xa2>
            /* indicate errors in PDO length */
            if (DLC == PDO->dataLength) {
 80023b0:	697b      	ldr	r3, [r7, #20]
 80023b2:	7b1b      	ldrb	r3, [r3, #12]
 80023b4:	7cfa      	ldrb	r2, [r7, #19]
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d105      	bne.n	80023c6 <CO_PDO_receive+0x4e>
                if (err == CO_RPDO_RX_ACK_ERROR) err = CO_RPDO_RX_OK;
 80023ba:	7ffb      	ldrb	r3, [r7, #31]
 80023bc:	2b01      	cmp	r3, #1
 80023be:	d107      	bne.n	80023d0 <CO_PDO_receive+0x58>
 80023c0:	230b      	movs	r3, #11
 80023c2:	77fb      	strb	r3, [r7, #31]
 80023c4:	e004      	b.n	80023d0 <CO_PDO_receive+0x58>
            }
            else {
                if (err == CO_RPDO_RX_ACK_NO_ERROR) err = CO_RPDO_RX_LONG;
 80023c6:	7ffb      	ldrb	r3, [r7, #31]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d101      	bne.n	80023d0 <CO_PDO_receive+0x58>
 80023cc:	230d      	movs	r3, #13
 80023ce:	77fb      	strb	r3, [r7, #31]
            }

            /* Determine, to which of the two rx buffers copy the message. */
            uint8_t bufNo = 0;
 80023d0:	2300      	movs	r3, #0
 80023d2:	77bb      	strb	r3, [r7, #30]
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
            if (RPDO->synchronous && RPDO->SYNC != NULL
 80023d4:	69bb      	ldr	r3, [r7, #24]
 80023d6:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d00c      	beq.n	80023f8 <CO_PDO_receive+0x80>
 80023de:	69bb      	ldr	r3, [r7, #24]
 80023e0:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d007      	beq.n	80023f8 <CO_PDO_receive+0x80>
                && RPDO->SYNC->CANrxToggle
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d001      	beq.n	80023f8 <CO_PDO_receive+0x80>
            ) {
                bufNo = 1;
 80023f4:	2301      	movs	r3, #1
 80023f6:	77bb      	strb	r3, [r7, #30]
            }
#endif

            /* copy data into appropriate buffer and set 'new message' flag */
            memcpy(RPDO->CANrxData[bufNo], data,sizeof(RPDO->CANrxData[bufNo]));
 80023f8:	7fbb      	ldrb	r3, [r7, #30]
 80023fa:	332a      	adds	r3, #42	; 0x2a
 80023fc:	00db      	lsls	r3, r3, #3
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	4413      	add	r3, r2
 8002402:	2208      	movs	r2, #8
 8002404:	68f9      	ldr	r1, [r7, #12]
 8002406:	4618      	mov	r0, r3
 8002408:	f011 fe3a 	bl	8014080 <memcpy>
            CO_FLAG_SET(RPDO->CANrxNew[bufNo]);
 800240c:	7fba      	ldrb	r2, [r7, #30]
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	3252      	adds	r2, #82	; 0x52
 8002412:	2101      	movs	r1, #1
 8002414:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8002418:	e004      	b.n	8002424 <CO_PDO_receive+0xac>
            if (RPDO->pFunctSignalPre != NULL) {
                RPDO->pFunctSignalPre(RPDO->functSignalObjectPre);
            }
#endif
        }
        else if (err == CO_RPDO_RX_ACK_NO_ERROR) {
 800241a:	7ffb      	ldrb	r3, [r7, #31]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d101      	bne.n	8002424 <CO_PDO_receive+0xac>
            err = CO_RPDO_RX_SHORT;
 8002420:	230c      	movs	r3, #12
 8002422:	77fb      	strb	r3, [r7, #31]
        }
    }

    RPDO->receiveError = err;
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	7ffa      	ldrb	r2, [r7, #31]
 8002428:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
}
 800242c:	bf00      	nop
 800242e:	3720      	adds	r7, #32
 8002430:	46bd      	mov	sp, r7
 8002432:	bd80      	pop	{r7, pc}

08002434 <OD_write_14xx>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_14xx(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b092      	sub	sp, #72	; 0x48
 8002438:	af04      	add	r7, sp, #16
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
 8002440:	603b      	str	r3, [r7, #0]
    /* "count" is also verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL || count > 4) {
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d008      	beq.n	800245a <OD_write_14xx+0x26>
 8002448:	68bb      	ldr	r3, [r7, #8]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d005      	beq.n	800245a <OD_write_14xx+0x26>
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d002      	beq.n	800245a <OD_write_14xx+0x26>
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2b04      	cmp	r3, #4
 8002458:	d901      	bls.n	800245e <OD_write_14xx+0x2a>
        return ODR_DEV_INCOMPAT;
 800245a:	2309      	movs	r3, #9
 800245c:	e0ff      	b.n	800265e <OD_write_14xx+0x22a>
    }

    CO_RPDO_t *RPDO = stream->object;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	685b      	ldr	r3, [r3, #4]
 8002462:	633b      	str	r3, [r7, #48]	; 0x30
    CO_PDO_common_t *PDO = &RPDO->PDO_common;
 8002464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002466:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t bufCopy[4];
    memcpy(bufCopy, buf, count);
 8002468:	f107 0310 	add.w	r3, r7, #16
 800246c:	687a      	ldr	r2, [r7, #4]
 800246e:	68b9      	ldr	r1, [r7, #8]
 8002470:	4618      	mov	r0, r3
 8002472:	f011 fe05 	bl	8014080 <memcpy>

    switch (stream->subIndex) {
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	7c5b      	ldrb	r3, [r3, #17]
 800247a:	2b05      	cmp	r3, #5
 800247c:	f000 80d4 	beq.w	8002628 <OD_write_14xx+0x1f4>
 8002480:	2b05      	cmp	r3, #5
 8002482:	f300 80e4 	bgt.w	800264e <OD_write_14xx+0x21a>
 8002486:	2b01      	cmp	r3, #1
 8002488:	d003      	beq.n	8002492 <OD_write_14xx+0x5e>
 800248a:	2b02      	cmp	r3, #2
 800248c:	f000 80a5 	beq.w	80025da <OD_write_14xx+0x1a6>
 8002490:	e0dd      	b.n	800264e <OD_write_14xx+0x21a>
    case 1: { /* COB-ID used by PDO */
        uint32_t COB_ID = CO_getUint32(buf);
 8002492:	68b8      	ldr	r0, [r7, #8]
 8002494:	f7ff fc59 	bl	8001d4a <CO_getUint32>
 8002498:	61f8      	str	r0, [r7, #28]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	b29b      	uxth	r3, r3
 800249e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024a2:	86fb      	strh	r3, [r7, #54]	; 0x36
        bool_t valid = (COB_ID & 0x80000000) == 0;
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	43db      	mvns	r3, r3
 80024a8:	0fdb      	lsrs	r3, r3, #31
 80024aa:	b2db      	uxtb	r3, r3
 80024ac:	61bb      	str	r3, [r7, #24]

        /* bits 11...29 must be zero, PDO must be disabled on change,
         * CAN_ID == 0 is not allowed, mapping must be configured before
         * enabling the PDO */
        if ((COB_ID & 0x3FFFF800) != 0
 80024ae:	69fa      	ldr	r2, [r7, #28]
 80024b0:	4b6d      	ldr	r3, [pc, #436]	; (8002668 <OD_write_14xx+0x234>)
 80024b2:	4013      	ands	r3, r2
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d13d      	bne.n	8002534 <OD_write_14xx+0x100>
            || (valid && PDO->valid && CAN_ID != PDO->configuredCanId)
 80024b8:	69bb      	ldr	r3, [r7, #24]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d009      	beq.n	80024d2 <OD_write_14xx+0x9e>
 80024be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c0:	689b      	ldr	r3, [r3, #8]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d005      	beq.n	80024d2 <OD_write_14xx+0x9e>
 80024c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80024c8:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 80024cc:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d130      	bne.n	8002534 <OD_write_14xx+0x100>
            || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 80024d2:	69bb      	ldr	r3, [r7, #24]
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d026      	beq.n	8002526 <OD_write_14xx+0xf2>
 80024d8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024da:	2b7f      	cmp	r3, #127	; 0x7f
 80024dc:	d92a      	bls.n	8002534 <OD_write_14xx+0x100>
 80024de:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80024e4:	d903      	bls.n	80024ee <OD_write_14xx+0xba>
 80024e6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024e8:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 80024ec:	d922      	bls.n	8002534 <OD_write_14xx+0x100>
 80024ee:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024f0:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 80024f4:	d903      	bls.n	80024fe <OD_write_14xx+0xca>
 80024f6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80024f8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80024fc:	d31a      	bcc.n	8002534 <OD_write_14xx+0x100>
 80024fe:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002500:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002504:	d903      	bls.n	800250e <OD_write_14xx+0xda>
 8002506:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002508:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 800250c:	d312      	bcc.n	8002534 <OD_write_14xx+0x100>
 800250e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002510:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8002514:	d303      	bcc.n	800251e <OD_write_14xx+0xea>
 8002516:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002518:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800251c:	d30a      	bcc.n	8002534 <OD_write_14xx+0x100>
 800251e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8002520:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002524:	d806      	bhi.n	8002534 <OD_write_14xx+0x100>
            || (valid && PDO->mappedObjectsCount == 0)
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	2b00      	cmp	r3, #0
 800252a:	d005      	beq.n	8002538 <OD_write_14xx+0x104>
 800252c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800252e:	7b5b      	ldrb	r3, [r3, #13]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d101      	bne.n	8002538 <OD_write_14xx+0x104>
        ) {
            return ODR_INVALID_VALUE;
 8002534:	230f      	movs	r3, #15
 8002536:	e092      	b.n	800265e <OD_write_14xx+0x22a>
        }

        /* parameter changed? */
        if (valid != PDO->valid || CAN_ID != PDO->configuredCanId) {
 8002538:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	69ba      	ldr	r2, [r7, #24]
 800253e:	429a      	cmp	r2, r3
 8002540:	d105      	bne.n	800254e <OD_write_14xx+0x11a>
 8002542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002544:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 8002548:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800254a:	429a      	cmp	r2, r3
 800254c:	d07e      	beq.n	800264c <OD_write_14xx+0x218>
            /* if default CAN-ID is written, store to OD without Node-ID */
            if (CAN_ID == PDO->preDefinedCanId) {
 800254e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002550:	f8b3 3122 	ldrh.w	r3, [r3, #290]	; 0x122
 8002554:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002556:	429a      	cmp	r2, r3
 8002558:	d108      	bne.n	800256c <OD_write_14xx+0x138>
                CO_setUint32(bufCopy, COB_ID & 0xFFFFFF80);
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8002560:	f107 0310 	add.w	r3, r7, #16
 8002564:	4611      	mov	r1, r2
 8002566:	4618      	mov	r0, r3
 8002568:	f7ff fbfd 	bl	8001d66 <CO_setUint32>
            }
            if (!valid) {
 800256c:	69bb      	ldr	r3, [r7, #24]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <OD_write_14xx+0x142>
                CAN_ID = 0;
 8002572:	2300      	movs	r3, #0
 8002574:	86fb      	strh	r3, [r7, #54]	; 0x36
            }

            CO_ReturnError_t ret = CO_CANrxBufferInit(
 8002576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002578:	6858      	ldr	r0, [r3, #4]
 800257a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800257c:	f8b3 1120 	ldrh.w	r1, [r3, #288]	; 0x120
 8002580:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8002582:	4b3a      	ldr	r3, [pc, #232]	; (800266c <OD_write_14xx+0x238>)
 8002584:	9302      	str	r3, [sp, #8]
 8002586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002588:	9301      	str	r3, [sp, #4]
 800258a:	2300      	movs	r3, #0
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8002592:	f005 fccb 	bl	8007f2c <CO_CANrxBufferInit>
 8002596:	4603      	mov	r3, r0
 8002598:	75fb      	strb	r3, [r7, #23]
                    0x7FF,              /* mask */
                    0,                  /* rtr */
                    (void*)RPDO,        /* object passed to receive function */
                    CO_PDO_receive);    /* this function will process rx msg */

            if (valid && ret == CO_ERROR_NO) {
 800259a:	69bb      	ldr	r3, [r7, #24]
 800259c:	2b00      	cmp	r3, #0
 800259e:	d00b      	beq.n	80025b8 <OD_write_14xx+0x184>
 80025a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d107      	bne.n	80025b8 <OD_write_14xx+0x184>
                PDO->valid = true;
 80025a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025aa:	2201      	movs	r2, #1
 80025ac:	609a      	str	r2, [r3, #8]
                PDO->configuredCanId = CAN_ID;
 80025ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025b0:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80025b2:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
                if (ret != CO_ERROR_NO) {
                    return ODR_DEV_INCOMPAT;
                }
            }
        }
        break;
 80025b6:	e049      	b.n	800264c <OD_write_14xx+0x218>
                PDO->valid = false;
 80025b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025ba:	2200      	movs	r2, #0
 80025bc:	609a      	str	r2, [r3, #8]
                CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 80025be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c0:	2200      	movs	r2, #0
 80025c2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
                CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 80025c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025c8:	2200      	movs	r2, #0
 80025ca:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
                if (ret != CO_ERROR_NO) {
 80025ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d03a      	beq.n	800264c <OD_write_14xx+0x218>
                    return ODR_DEV_INCOMPAT;
 80025d6:	2309      	movs	r3, #9
 80025d8:	e041      	b.n	800265e <OD_write_14xx+0x22a>
    }

    case 2: { /* transmission type */
        uint8_t transmissionType = CO_getUint8(buf);
 80025da:	68b8      	ldr	r0, [r7, #8]
 80025dc:	f7ff fb98 	bl	8001d10 <CO_getUint8>
 80025e0:	4603      	mov	r3, r0
 80025e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (transmissionType > CO_PDO_TRANSM_TYPE_SYNC_240
 80025e6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025ea:	2bf0      	cmp	r3, #240	; 0xf0
 80025ec:	d905      	bls.n	80025fa <OD_write_14xx+0x1c6>
            && transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 80025ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025f2:	2bfd      	cmp	r3, #253	; 0xfd
 80025f4:	d801      	bhi.n	80025fa <OD_write_14xx+0x1c6>
        ) {
            return ODR_INVALID_VALUE;
 80025f6:	230f      	movs	r3, #15
 80025f8:	e031      	b.n	800265e <OD_write_14xx+0x22a>
        }

        bool_t synchronous = transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240;
 80025fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80025fe:	2bf0      	cmp	r3, #240	; 0xf0
 8002600:	bf94      	ite	ls
 8002602:	2301      	movls	r3, #1
 8002604:	2300      	movhi	r3, #0
 8002606:	b2db      	uxtb	r3, r3
 8002608:	623b      	str	r3, [r7, #32]
        /* Remove old message from the second buffer. */
        if (RPDO->synchronous != synchronous) {
 800260a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260c:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 8002610:	6a3a      	ldr	r2, [r7, #32]
 8002612:	429a      	cmp	r2, r3
 8002614:	d003      	beq.n	800261e <OD_write_14xx+0x1ea>
            CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 8002616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002618:	2200      	movs	r2, #0
 800261a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
        }

        RPDO->synchronous = synchronous;
 800261e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002620:	6a3a      	ldr	r2, [r7, #32]
 8002622:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
#else
        if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
            return ODR_INVALID_VALUE;
        }
#endif
        break;
 8002626:	e012      	b.n	800264e <OD_write_14xx+0x21a>
    }

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
    case 5: { /* event-timer */
        uint32_t eventTime = CO_getUint16(buf);
 8002628:	68b8      	ldr	r0, [r7, #8]
 800262a:	f7ff fb7f 	bl	8001d2c <CO_getUint16>
 800262e:	4603      	mov	r3, r0
 8002630:	62bb      	str	r3, [r7, #40]	; 0x28
        RPDO->timeoutTime_us = eventTime * 1000;
 8002632:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002634:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002638:	fb03 f202 	mul.w	r2, r3, r2
 800263c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800263e:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
        RPDO->timeoutTimer = 0;
 8002642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002644:	2200      	movs	r2, #0
 8002646:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
        break;
 800264a:	e000      	b.n	800264e <OD_write_14xx+0x21a>
        break;
 800264c:	bf00      	nop
    }
#endif
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, bufCopy, count, countWritten);
 800264e:	f107 0110 	add.w	r1, r7, #16
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	687a      	ldr	r2, [r7, #4]
 8002656:	68f8      	ldr	r0, [r7, #12]
 8002658:	f7ff f8ca 	bl	80017f0 <OD_writeOriginal>
 800265c:	4603      	mov	r3, r0
}
 800265e:	4618      	mov	r0, r3
 8002660:	3738      	adds	r7, #56	; 0x38
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}
 8002666:	bf00      	nop
 8002668:	3ffff800 	.word	0x3ffff800
 800266c:	08002379 	.word	0x08002379

08002670 <CO_RPDO_init>:
                              OD_entry_t *OD_14xx_RPDOCommPar,
                              OD_entry_t *OD_16xx_RPDOMapPar,
                              CO_CANmodule_t *CANdevRx,
                              uint16_t CANdevRxIdx,
                              uint32_t *errInfo)
{
 8002670:	b580      	push	{r7, lr}
 8002672:	b090      	sub	sp, #64	; 0x40
 8002674:	af04      	add	r7, sp, #16
 8002676:	60f8      	str	r0, [r7, #12]
 8002678:	60b9      	str	r1, [r7, #8]
 800267a:	607a      	str	r2, [r7, #4]
 800267c:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t *PDO = &RPDO->PDO_common;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	627b      	str	r3, [r7, #36]	; 0x24
    CO_ReturnError_t ret;
    ODR_t odRet;

    /* verify arguments */
    if (RPDO == NULL || OD == NULL || em == NULL || OD_14xx_RPDOCommPar == NULL
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d00e      	beq.n	80026a6 <CO_RPDO_init+0x36>
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d00b      	beq.n	80026a6 <CO_RPDO_init+0x36>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d008      	beq.n	80026a6 <CO_RPDO_init+0x36>
 8002694:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002696:	2b00      	cmp	r3, #0
 8002698:	d005      	beq.n	80026a6 <CO_RPDO_init+0x36>
        || OD_16xx_RPDOMapPar == NULL || CANdevRx == NULL
 800269a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800269c:	2b00      	cmp	r3, #0
 800269e:	d002      	beq.n	80026a6 <CO_RPDO_init+0x36>
 80026a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d102      	bne.n	80026ac <CO_RPDO_init+0x3c>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80026a6:	f04f 33ff 	mov.w	r3, #4294967295
 80026aa:	e118      	b.n	80028de <CO_RPDO_init+0x26e>
    }

    /* clear object */
    memset(RPDO, 0, sizeof(CO_RPDO_t));
 80026ac:	f44f 72ba 	mov.w	r2, #372	; 0x174
 80026b0:	2100      	movs	r1, #0
 80026b2:	68f8      	ldr	r0, [r7, #12]
 80026b4:	f011 fd0c 	bl	80140d0 <memset>

    /* Configure object variables */
    PDO->em = em;
 80026b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ba:	687a      	ldr	r2, [r7, #4]
 80026bc:	601a      	str	r2, [r3, #0]
    PDO->CANdev = CANdevRx;
 80026be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80026c2:	605a      	str	r2, [r3, #4]

    /* Configure mapping parameters */
    uint32_t erroneousMap = 0;
 80026c4:	2300      	movs	r3, #0
 80026c6:	61fb      	str	r3, [r7, #28]
    ret = PDO_initMapping(PDO,
 80026c8:	f107 031c 	add.w	r3, r7, #28
 80026cc:	9301      	str	r3, [sp, #4]
 80026ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80026d0:	9300      	str	r3, [sp, #0]
 80026d2:	2301      	movs	r3, #1
 80026d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80026d6:	68b9      	ldr	r1, [r7, #8]
 80026d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80026da:	f7ff fcb3 	bl	8002044 <PDO_initMapping>
 80026de:	4603      	mov	r3, r0
 80026e0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                          OD,
                          OD_16xx_RPDOMapPar,
                          true,
                          errInfo,
                          &erroneousMap);
    if (ret != CO_ERROR_NO) {
 80026e4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d002      	beq.n	80026f2 <CO_RPDO_init+0x82>
        return ret;
 80026ec:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80026f0:	e0f5      	b.n	80028de <CO_RPDO_init+0x26e>
    }


    /* Configure communication parameter - COB-ID */
    uint32_t COB_ID = 0;
 80026f2:	2300      	movs	r3, #0
 80026f4:	61bb      	str	r3, [r7, #24]
    odRet = OD_get_u32(OD_14xx_RPDOCommPar, 1, &COB_ID, true);
 80026f6:	f107 0218 	add.w	r2, r7, #24
 80026fa:	2301      	movs	r3, #1
 80026fc:	2101      	movs	r1, #1
 80026fe:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002700:	f7ff fb8f 	bl	8001e22 <OD_get_u32>
 8002704:	4603      	mov	r3, r0
 8002706:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 800270a:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 800270e:	2b00      	cmp	r3, #0
 8002710:	d00e      	beq.n	8002730 <CO_RPDO_init+0xc0>
        if (errInfo != NULL) {
 8002712:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002714:	2b00      	cmp	r3, #0
 8002716:	d008      	beq.n	800272a <CO_RPDO_init+0xba>
            *errInfo = (((uint32_t)OD_getIndex(OD_14xx_RPDOCommPar)) << 8) | 1;
 8002718:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800271a:	f7ff fb33 	bl	8001d84 <OD_getIndex>
 800271e:	4603      	mov	r3, r0
 8002720:	021b      	lsls	r3, r3, #8
 8002722:	f043 0201 	orr.w	r2, r3, #1
 8002726:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002728:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800272a:	f06f 030b 	mvn.w	r3, #11
 800272e:	e0d6      	b.n	80028de <CO_RPDO_init+0x26e>
    }

    bool_t valid = (COB_ID & 0x80000000) == 0;
 8002730:	69bb      	ldr	r3, [r7, #24]
 8002732:	43db      	mvns	r3, r3
 8002734:	0fdb      	lsrs	r3, r3, #31
 8002736:	b2db      	uxtb	r3, r3
 8002738:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 800273a:	69bb      	ldr	r3, [r7, #24]
 800273c:	b29b      	uxth	r3, r3
 800273e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002742:	857b      	strh	r3, [r7, #42]	; 0x2a
    if (valid && (PDO->mappedObjectsCount == 0 || CAN_ID == 0)) {
 8002744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002746:	2b00      	cmp	r3, #0
 8002748:	d00d      	beq.n	8002766 <CO_RPDO_init+0xf6>
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	7b5b      	ldrb	r3, [r3, #13]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d002      	beq.n	8002758 <CO_RPDO_init+0xe8>
 8002752:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002754:	2b00      	cmp	r3, #0
 8002756:	d106      	bne.n	8002766 <CO_RPDO_init+0xf6>
        valid = false;
 8002758:	2300      	movs	r3, #0
 800275a:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (erroneousMap == 0) erroneousMap = 1;
 800275c:	69fb      	ldr	r3, [r7, #28]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d101      	bne.n	8002766 <CO_RPDO_init+0xf6>
 8002762:	2301      	movs	r3, #1
 8002764:	61fb      	str	r3, [r7, #28]
    }

    if (erroneousMap != 0) {
 8002766:	69fb      	ldr	r3, [r7, #28]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d00e      	beq.n	800278a <CO_RPDO_init+0x11a>
        CO_errorReport(PDO->em,
 800276c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276e:	6818      	ldr	r0, [r3, #0]
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d001      	beq.n	800277a <CO_RPDO_init+0x10a>
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	e000      	b.n	800277c <CO_RPDO_init+0x10c>
 800277a:	69bb      	ldr	r3, [r7, #24]
 800277c:	9300      	str	r3, [sp, #0]
 800277e:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 8002782:	221a      	movs	r2, #26
 8002784:	2101      	movs	r1, #1
 8002786:	f7fe f97b 	bl	8000a80 <CO_error>
                       CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR,
                       erroneousMap != 1 ? erroneousMap : COB_ID);
    }
    if (!valid) {
 800278a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800278c:	2b00      	cmp	r3, #0
 800278e:	d101      	bne.n	8002794 <CO_RPDO_init+0x124>
        CAN_ID = 0;
 8002790:	2300      	movs	r3, #0
 8002792:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
    if (CAN_ID != 0 && CAN_ID == (preDefinedCanId & 0xFF80)) {
 8002794:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002796:	2b00      	cmp	r3, #0
 8002798:	d008      	beq.n	80027ac <CO_RPDO_init+0x13c>
 800279a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800279c:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 800279e:	f64f 7380 	movw	r3, #65408	; 0xff80
 80027a2:	400b      	ands	r3, r1
 80027a4:	429a      	cmp	r2, r3
 80027a6:	d101      	bne.n	80027ac <CO_RPDO_init+0x13c>
        CAN_ID = preDefinedCanId;
 80027a8:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80027aa:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    ret = CO_CANrxBufferInit(
 80027ac:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 80027ae:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 80027b2:	4b4d      	ldr	r3, [pc, #308]	; (80028e8 <CO_RPDO_init+0x278>)
 80027b4:	9302      	str	r3, [sp, #8]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	9301      	str	r3, [sp, #4]
 80027ba:	2300      	movs	r3, #0
 80027bc:	9300      	str	r3, [sp, #0]
 80027be:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80027c2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80027c4:	f005 fbb2 	bl	8007f2c <CO_CANrxBufferInit>
 80027c8:	4603      	mov	r3, r0
 80027ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
            CAN_ID,             /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)RPDO,        /* object passed to receive function */
            CO_PDO_receive);    /* this function will process received message*/
    if (ret != CO_ERROR_NO) {
 80027ce:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d002      	beq.n	80027dc <CO_RPDO_init+0x16c>
        return ret;
 80027d6:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 80027da:	e080      	b.n	80028de <CO_RPDO_init+0x26e>
    }

    PDO->valid = valid;
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80027e0:	609a      	str	r2, [r3, #8]


    /* Configure communication parameter - transmission type */
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    uint8_t transmissionType = CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO;
 80027e2:	23fe      	movs	r3, #254	; 0xfe
 80027e4:	75fb      	strb	r3, [r7, #23]
    odRet = OD_get_u8(OD_14xx_RPDOCommPar, 2, &transmissionType, true);
 80027e6:	f107 0217 	add.w	r2, r7, #23
 80027ea:	2301      	movs	r3, #1
 80027ec:	2102      	movs	r1, #2
 80027ee:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80027f0:	f7ff faed 	bl	8001dce <OD_get_u8>
 80027f4:	4603      	mov	r3, r0
 80027f6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 80027fa:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d00e      	beq.n	8002820 <CO_RPDO_init+0x1b0>
        if (errInfo != NULL) {
 8002802:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002804:	2b00      	cmp	r3, #0
 8002806:	d008      	beq.n	800281a <CO_RPDO_init+0x1aa>
            *errInfo = (((uint32_t)OD_getIndex(OD_14xx_RPDOCommPar)) << 8) | 2;
 8002808:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800280a:	f7ff fabb 	bl	8001d84 <OD_getIndex>
 800280e:	4603      	mov	r3, r0
 8002810:	021b      	lsls	r3, r3, #8
 8002812:	f043 0202 	orr.w	r2, r3, #2
 8002816:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002818:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 800281a:	f06f 030b 	mvn.w	r3, #11
 800281e:	e05e      	b.n	80028de <CO_RPDO_init+0x26e>
    }

    RPDO->SYNC = SYNC;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	683a      	ldr	r2, [r7, #0]
 8002824:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    RPDO->synchronous = transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240;
 8002828:	7dfb      	ldrb	r3, [r7, #23]
 800282a:	2bf0      	cmp	r3, #240	; 0xf0
 800282c:	bf94      	ite	ls
 800282e:	2301      	movls	r3, #1
 8002830:	2300      	movhi	r3, #0
 8002832:	b2db      	uxtb	r3, r3
 8002834:	461a      	mov	r2, r3
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
#endif


    /* Configure communication parameter - event-timer (optional) */
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
    uint16_t eventTime = 0;
 800283c:	2300      	movs	r3, #0
 800283e:	82bb      	strh	r3, [r7, #20]
    odRet = OD_get_u16(OD_14xx_RPDOCommPar, 5, &eventTime, true);
 8002840:	f107 0214 	add.w	r2, r7, #20
 8002844:	2301      	movs	r3, #1
 8002846:	2105      	movs	r1, #5
 8002848:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800284a:	f7ff fad5 	bl	8001df8 <OD_get_u16>
 800284e:	4603      	mov	r3, r0
 8002850:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    RPDO->timeoutTime_us = (uint32_t)eventTime * 1000;
 8002854:	8abb      	ldrh	r3, [r7, #20]
 8002856:	461a      	mov	r2, r3
 8002858:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800285c:	fb03 f202 	mul.w	r2, r3, r2
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
#endif


    /* Configure OD extensions */
#if (CO_CONFIG_PDO) & CO_CONFIG_FLAG_OD_DYNAMIC
    PDO->isRPDO = true;
 8002866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002868:	2201      	movs	r2, #1
 800286a:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    PDO->OD = OD;
 800286e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002870:	68ba      	ldr	r2, [r7, #8]
 8002872:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    PDO->CANdevIdx = CANdevRxIdx;
 8002876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002878:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800287c:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
    PDO->preDefinedCanId = preDefinedCanId;
 8002880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002882:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8002884:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
    PDO->configuredCanId = CAN_ID;
 8002888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288a:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800288c:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
    PDO->OD_communicationParam_ext.object = RPDO;
 8002890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    PDO->OD_communicationParam_ext.read = OD_read_PDO_commParam;
 8002898:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800289a:	4a14      	ldr	r2, [pc, #80]	; (80028ec <CO_RPDO_init+0x27c>)
 800289c:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    PDO->OD_communicationParam_ext.write = OD_write_14xx;
 80028a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028a2:	4a13      	ldr	r2, [pc, #76]	; (80028f0 <CO_RPDO_init+0x280>)
 80028a4:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    PDO->OD_mappingParam_extension.object = RPDO;
 80028a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028aa:	68fa      	ldr	r2, [r7, #12]
 80028ac:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    PDO->OD_mappingParam_extension.read = OD_readOriginal;
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	4a10      	ldr	r2, [pc, #64]	; (80028f4 <CO_RPDO_init+0x284>)
 80028b4:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    PDO->OD_mappingParam_extension.write = OD_write_PDO_mapping;
 80028b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ba:	4a0f      	ldr	r2, [pc, #60]	; (80028f8 <CO_RPDO_init+0x288>)
 80028bc:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    OD_extension_init(OD_14xx_RPDOCommPar, &PDO->OD_communicationParam_ext);
 80028c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c2:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80028c6:	4619      	mov	r1, r3
 80028c8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80028ca:	f7ff fa6c 	bl	8001da6 <OD_extension_init>
    OD_extension_init(OD_16xx_RPDOMapPar, &PDO->OD_mappingParam_extension);
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80028d4:	4619      	mov	r1, r3
 80028d6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80028d8:	f7ff fa65 	bl	8001da6 <OD_extension_init>
#endif

    return CO_ERROR_NO;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3730      	adds	r7, #48	; 0x30
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	08002379 	.word	0x08002379
 80028ec:	080022d9 	.word	0x080022d9
 80028f0:	08002435 	.word	0x08002435
 80028f4:	08001741 	.word	0x08001741
 80028f8:	0800219f 	.word	0x0800219f

080028fc <CO_RPDO_process>:
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us,
#endif
                     bool_t NMTisOperational,
                     bool_t syncWas)
{
 80028fc:	b590      	push	{r4, r7, lr}
 80028fe:	b097      	sub	sp, #92	; 0x5c
 8002900:	af02      	add	r7, sp, #8
 8002902:	60f8      	str	r0, [r7, #12]
 8002904:	60b9      	str	r1, [r7, #8]
 8002906:	607a      	str	r2, [r7, #4]
 8002908:	603b      	str	r3, [r7, #0]
    (void) syncWas;
    CO_PDO_common_t *PDO = &RPDO->PDO_common;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	637b      	str	r3, [r7, #52]	; 0x34

    if (PDO->valid && NMTisOperational
 800290e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	2b00      	cmp	r3, #0
 8002914:	f000 810c 	beq.w	8002b30 <CO_RPDO_process+0x234>
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	f000 8108 	beq.w	8002b30 <CO_RPDO_process+0x234>
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        && (syncWas || !RPDO->synchronous)
 8002920:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002922:	2b00      	cmp	r3, #0
 8002924:	d105      	bne.n	8002932 <CO_RPDO_process+0x36>
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800292c:	2b00      	cmp	r3, #0
 800292e:	f040 80ff 	bne.w	8002b30 <CO_RPDO_process+0x234>
#endif
    ) {
        /* Verify errors in length of received RPDO CAN message */
        if (RPDO->receiveError > CO_RPDO_RX_ACK) {
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8002938:	2b0a      	cmp	r3, #10
 800293a:	d928      	bls.n	800298e <CO_RPDO_process+0x92>
            bool_t setError = RPDO->receiveError != CO_RPDO_RX_OK;
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8002942:	2b0b      	cmp	r3, #11
 8002944:	bf14      	ite	ne
 8002946:	2301      	movne	r3, #1
 8002948:	2300      	moveq	r3, #0
 800294a:	b2db      	uxtb	r3, r3
 800294c:	633b      	str	r3, [r7, #48]	; 0x30
            uint16_t code = RPDO->receiveError == CO_RPDO_RX_SHORT
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	f893 3160 	ldrb.w	r3, [r3, #352]	; 0x160
 8002954:	2b0c      	cmp	r3, #12
 8002956:	d102      	bne.n	800295e <CO_RPDO_process+0x62>
 8002958:	f248 2310 	movw	r3, #33296	; 0x8210
 800295c:	e001      	b.n	8002962 <CO_RPDO_process+0x66>
 800295e:	f248 2320 	movw	r3, #33312	; 0x8220
 8002962:	85fb      	strh	r3, [r7, #46]	; 0x2e
                          ? CO_EMC_PDO_LENGTH : CO_EMC_PDO_LENGTH_EXC;
            CO_error(PDO->em, setError, CO_EM_RPDO_WRONG_LENGTH,
 8002964:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002966:	6818      	ldr	r0, [r3, #0]
                     code, PDO->dataLength);
 8002968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800296a:	7b1b      	ldrb	r3, [r3, #12]
            CO_error(PDO->em, setError, CO_EM_RPDO_WRONG_LENGTH,
 800296c:	461a      	mov	r2, r3
 800296e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8002970:	9200      	str	r2, [sp, #0]
 8002972:	2204      	movs	r2, #4
 8002974:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002976:	f7fe f883 	bl	8000a80 <CO_error>
            RPDO->receiveError = setError
                              ? CO_RPDO_RX_ACK_ERROR : CO_RPDO_RX_ACK_NO_ERROR;
 800297a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297c:	2b00      	cmp	r3, #0
 800297e:	bf14      	ite	ne
 8002980:	2301      	movne	r3, #1
 8002982:	2300      	moveq	r3, #0
 8002984:	b2db      	uxtb	r3, r3
 8002986:	461a      	mov	r2, r3
            RPDO->receiveError = setError
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
        }

        /* Determine, which of the two rx buffers contains relevant message. */
        uint8_t bufNo = 0;
 800298e:	2300      	movs	r3, #0
 8002990:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (RPDO->synchronous && RPDO->SYNC != NULL && !RPDO->SYNC->CANrxToggle)
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 800299a:	2b00      	cmp	r3, #0
 800299c:	d00d      	beq.n	80029ba <CO_RPDO_process+0xbe>
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d008      	beq.n	80029ba <CO_RPDO_process+0xbe>
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 80029ae:	68db      	ldr	r3, [r3, #12]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d102      	bne.n	80029ba <CO_RPDO_process+0xbe>
            bufNo = 1;
 80029b4:	2301      	movs	r3, #1
 80029b6:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif

        /* copy RPDO into OD variables according to mappings */
        bool_t rpdoReceived = false;
 80029ba:	2300      	movs	r3, #0
 80029bc:	64bb      	str	r3, [r7, #72]	; 0x48
        while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) {
 80029be:	e065      	b.n	8002a8c <CO_RPDO_process+0x190>
            rpdoReceived = true;
 80029c0:	2301      	movs	r3, #1
 80029c2:	64bb      	str	r3, [r7, #72]	; 0x48
            uint8_t *dataRPDO = RPDO->CANrxData[bufNo];
 80029c4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80029c8:	332a      	adds	r3, #42	; 0x2a
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	68fa      	ldr	r2, [r7, #12]
 80029ce:	4413      	add	r3, r2
 80029d0:	647b      	str	r3, [r7, #68]	; 0x44

            /* Clear the flag. If between the copy operation CANrxNew is set
             * by receive thread, then copy the latest data again. */
            CO_FLAG_CLEAR(RPDO->CANrxNew[bufNo]);
 80029d2:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	3252      	adds	r2, #82	; 0x52
 80029da:	2100      	movs	r1, #0
 80029dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS
            for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 80029e0:	2300      	movs	r3, #0
 80029e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80029e6:	e04b      	b.n	8002a80 <CO_RPDO_process+0x184>
                OD_IO_t *OD_IO = &PDO->OD_IO[i];
 80029e8:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 80029ec:	4613      	mov	r3, r2
 80029ee:	00db      	lsls	r3, r3, #3
 80029f0:	1a9b      	subs	r3, r3, r2
 80029f2:	009b      	lsls	r3, r3, #2
 80029f4:	3310      	adds	r3, #16
 80029f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80029f8:	4413      	add	r3, r2
 80029fa:	62bb      	str	r3, [r7, #40]	; 0x28

                /* get mappedLength from temporary storage */
                OD_size_t *dataOffset = &OD_IO->stream.dataOffset;
 80029fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fe:	330c      	adds	r3, #12
 8002a00:	627b      	str	r3, [r7, #36]	; 0x24
                uint8_t mappedLength = (uint8_t) (*dataOffset);
 8002a02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

                /* length of OD variable may be larger than mappedLength */
                OD_size_t ODdataLength = OD_IO->stream.dataLength;
 8002a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a0c:	689b      	ldr	r3, [r3, #8]
 8002a0e:	63fb      	str	r3, [r7, #60]	; 0x3c
                if (ODdataLength > CO_PDO_MAX_SIZE)
 8002a10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002a12:	2b08      	cmp	r3, #8
 8002a14:	d901      	bls.n	8002a1a <CO_RPDO_process+0x11e>
                    ODdataLength = CO_PDO_MAX_SIZE;
 8002a16:	2308      	movs	r3, #8
 8002a18:	63fb      	str	r3, [r7, #60]	; 0x3c

                /* Prepare data for writing into OD variable. If mappedLength
                 * is smaller than ODdataLength, then use auxiliary buffer */
                uint8_t buf[CO_PDO_MAX_SIZE];
                uint8_t *dataOD;
                if (ODdataLength > mappedLength) {
 8002a1a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a20:	429a      	cmp	r2, r3
 8002a22:	d912      	bls.n	8002a4a <CO_RPDO_process+0x14e>
                    memset(buf, 0, sizeof(buf));
 8002a24:	f107 0318 	add.w	r3, r7, #24
 8002a28:	2208      	movs	r2, #8
 8002a2a:	2100      	movs	r1, #0
 8002a2c:	4618      	mov	r0, r3
 8002a2e:	f011 fb4f 	bl	80140d0 <memset>
                    memcpy(buf, dataRPDO, mappedLength);
 8002a32:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002a36:	f107 0318 	add.w	r3, r7, #24
 8002a3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	f011 fb1f 	bl	8014080 <memcpy>
                    dataOD = buf;
 8002a42:	f107 0318 	add.w	r3, r7, #24
 8002a46:	63bb      	str	r3, [r7, #56]	; 0x38
 8002a48:	e001      	b.n	8002a4e <CO_RPDO_process+0x152>
                }
                else {
                    dataOD = dataRPDO;
 8002a4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a4c:	63bb      	str	r3, [r7, #56]	; 0x38
                }
 #endif

                /* Set stream.dataOffset to zero, perform OD_IO.write()
                 * and store mappedLength back to stream.dataOffset */
                *dataOffset = 0;
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	2200      	movs	r2, #0
 8002a52:	601a      	str	r2, [r3, #0]
                OD_size_t countWritten;
                OD_IO->write(&OD_IO->stream, dataOD,
 8002a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a56:	699c      	ldr	r4, [r3, #24]
 8002a58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002a5a:	f107 0314 	add.w	r3, r7, #20
 8002a5e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002a60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002a62:	47a0      	blx	r4
                             ODdataLength, &countWritten);
                *dataOffset = mappedLength;
 8002a64:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6a:	601a      	str	r2, [r3, #0]

                dataRPDO += mappedLength;
 8002a6c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002a72:	4413      	add	r3, r2
 8002a74:	647b      	str	r3, [r7, #68]	; 0x44
            for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 8002a76:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002a7a:	3301      	adds	r3, #1
 8002a7c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8002a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a82:	7b5b      	ldrb	r3, [r3, #13]
 8002a84:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8002a88:	429a      	cmp	r2, r3
 8002a8a:	d3ad      	bcc.n	80029e8 <CO_RPDO_process+0xec>
        while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) {
 8002a8c:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	3252      	adds	r2, #82	; 0x52
 8002a94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d191      	bne.n	80029c0 <CO_RPDO_process+0xc4>
        } /* while (CO_FLAG_READ(RPDO->CANrxNew[bufNo])) */

        /* verify RPDO timeout */
        (void) rpdoReceived;
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
        if (RPDO->timeoutTime_us > 0) {
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d058      	beq.n	8002b58 <CO_RPDO_process+0x25c>
            if (rpdoReceived) {
 8002aa6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d017      	beq.n	8002adc <CO_RPDO_process+0x1e0>
                if (RPDO->timeoutTimer > RPDO->timeoutTime_us) {
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	d90a      	bls.n	8002ad2 <CO_RPDO_process+0x1d6>
                    CO_errorReset(PDO->em, CO_EM_RPDO_TIME_OUT,
 8002abc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002abe:	6818      	ldr	r0, [r3, #0]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8002ac6:	9300      	str	r3, [sp, #0]
 8002ac8:	2300      	movs	r3, #0
 8002aca:	2217      	movs	r2, #23
 8002acc:	2100      	movs	r1, #0
 8002ace:	f7fd ffd7 	bl	8000a80 <CO_error>
                                RPDO->timeoutTimer);
                }
                /* enable monitoring */
                RPDO->timeoutTimer = 1;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
    ) {
 8002ada:	e03d      	b.n	8002b58 <CO_RPDO_process+0x25c>
            }
            else if (RPDO->timeoutTimer > 0
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d038      	beq.n	8002b58 <CO_RPDO_process+0x25c>
                    && RPDO->timeoutTimer < RPDO->timeoutTime_us
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d230      	bcs.n	8002b58 <CO_RPDO_process+0x25c>
            ) {
                RPDO->timeoutTimer += timeDifference_us;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	441a      	add	r2, r3
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170

                if (RPDO->timeoutTimer > RPDO->timeoutTime_us) {
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	f8d3 2170 	ldr.w	r2, [r3, #368]	; 0x170
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d920      	bls.n	8002b58 <CO_RPDO_process+0x25c>
                    CO_errorReport(PDO->em, CO_EM_RPDO_TIME_OUT,
 8002b16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b18:	6818      	ldr	r0, [r3, #0]
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	f8d3 3170 	ldr.w	r3, [r3, #368]	; 0x170
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	f248 2350 	movw	r3, #33360	; 0x8250
 8002b26:	2217      	movs	r2, #23
 8002b28:	2101      	movs	r1, #1
 8002b2a:	f7fd ffa9 	bl	8000a80 <CO_error>
    ) {
 8002b2e:	e013      	b.n	8002b58 <CO_RPDO_process+0x25c>
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE */
    } /* if (PDO->valid && NMTisOperational) */
    else {
        /* not valid and operational, clear CAN receive flags and timeoutTimer*/
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (!PDO->valid || !NMTisOperational) {
 8002b30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d002      	beq.n	8002b3e <CO_RPDO_process+0x242>
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d10d      	bne.n	8002b5a <CO_RPDO_process+0x25e>
            CO_FLAG_CLEAR(RPDO->CANrxNew[0]);
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2200      	movs	r2, #0
 8002b42:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
            CO_FLAG_CLEAR(RPDO->CANrxNew[1]);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	2200      	movs	r2, #0
 8002b4a:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
 #if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
            RPDO->timeoutTimer = 0;
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
 #if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_TIMERS_ENABLE
        RPDO->timeoutTimer = 0;
 #endif
#endif
    }
}
 8002b56:	e000      	b.n	8002b5a <CO_RPDO_process+0x25e>
    ) {
 8002b58:	bf00      	nop
}
 8002b5a:	bf00      	nop
 8002b5c:	3754      	adds	r7, #84	; 0x54
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	bd90      	pop	{r4, r7, pc}
	...

08002b64 <OD_write_18xx>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_18xx(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8002b64:	b590      	push	{r4, r7, lr}
 8002b66:	b093      	sub	sp, #76	; 0x4c
 8002b68:	af02      	add	r7, sp, #8
 8002b6a:	60f8      	str	r0, [r7, #12]
 8002b6c:	60b9      	str	r1, [r7, #8]
 8002b6e:	607a      	str	r2, [r7, #4]
 8002b70:	603b      	str	r3, [r7, #0]
    /* "count" is also verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL || count > 4) {
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d008      	beq.n	8002b8a <OD_write_18xx+0x26>
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d005      	beq.n	8002b8a <OD_write_18xx+0x26>
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d002      	beq.n	8002b8a <OD_write_18xx+0x26>
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	d901      	bls.n	8002b8e <OD_write_18xx+0x2a>
        return ODR_DEV_INCOMPAT;
 8002b8a:	2309      	movs	r3, #9
 8002b8c:	e136      	b.n	8002dfc <OD_write_18xx+0x298>
    }

    CO_TPDO_t *TPDO = stream->object;
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	685b      	ldr	r3, [r3, #4]
 8002b92:	63bb      	str	r3, [r7, #56]	; 0x38
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 8002b94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b96:	637b      	str	r3, [r7, #52]	; 0x34
    uint8_t bufCopy[4];
    memcpy(bufCopy, buf, count);
 8002b98:	f107 0314 	add.w	r3, r7, #20
 8002b9c:	687a      	ldr	r2, [r7, #4]
 8002b9e:	68b9      	ldr	r1, [r7, #8]
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	f011 fa6d 	bl	8014080 <memcpy>

    switch (stream->subIndex) {
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	7c5b      	ldrb	r3, [r3, #17]
 8002baa:	3b01      	subs	r3, #1
 8002bac:	2b05      	cmp	r3, #5
 8002bae:	f200 811d 	bhi.w	8002dec <OD_write_18xx+0x288>
 8002bb2:	a201      	add	r2, pc, #4	; (adr r2, 8002bb8 <OD_write_18xx+0x54>)
 8002bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bb8:	08002bd1 	.word	0x08002bd1
 8002bbc:	08002d07 	.word	0x08002d07
 8002bc0:	08002d6d 	.word	0x08002d6d
 8002bc4:	08002ded 	.word	0x08002ded
 8002bc8:	08002d9b 	.word	0x08002d9b
 8002bcc:	08002dbf 	.word	0x08002dbf
    case 1: { /* COB-ID used by PDO */
        uint32_t COB_ID = CO_getUint32(buf);
 8002bd0:	68b8      	ldr	r0, [r7, #8]
 8002bd2:	f7ff f8ba 	bl	8001d4a <CO_getUint32>
 8002bd6:	6238      	str	r0, [r7, #32]
        uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8002bd8:	6a3b      	ldr	r3, [r7, #32]
 8002bda:	b29b      	uxth	r3, r3
 8002bdc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002be0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        bool_t valid = (COB_ID & 0x80000000) == 0;
 8002be2:	6a3b      	ldr	r3, [r7, #32]
 8002be4:	43db      	mvns	r3, r3
 8002be6:	0fdb      	lsrs	r3, r3, #31
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	61fb      	str	r3, [r7, #28]

        /* bits 11...29 must be zero, PDO must be disabled on change,
         * CAN_ID == 0 is not allowed, mapping must be configured before
         * enabling the PDO */
        if ((COB_ID & 0x3FFFF800) != 0
 8002bec:	6a3a      	ldr	r2, [r7, #32]
 8002bee:	4b85      	ldr	r3, [pc, #532]	; (8002e04 <OD_write_18xx+0x2a0>)
 8002bf0:	4013      	ands	r3, r2
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d13d      	bne.n	8002c72 <OD_write_18xx+0x10e>
            || (valid && PDO->valid && CAN_ID != PDO->configuredCanId)
 8002bf6:	69fb      	ldr	r3, [r7, #28]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d009      	beq.n	8002c10 <OD_write_18xx+0xac>
 8002bfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d005      	beq.n	8002c10 <OD_write_18xx+0xac>
 8002c04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c06:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 8002c0a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002c0c:	429a      	cmp	r2, r3
 8002c0e:	d130      	bne.n	8002c72 <OD_write_18xx+0x10e>
            || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d026      	beq.n	8002c64 <OD_write_18xx+0x100>
 8002c16:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002c18:	2b7f      	cmp	r3, #127	; 0x7f
 8002c1a:	d92a      	bls.n	8002c72 <OD_write_18xx+0x10e>
 8002c1c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002c1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c22:	d903      	bls.n	8002c2c <OD_write_18xx+0xc8>
 8002c24:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002c26:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8002c2a:	d922      	bls.n	8002c72 <OD_write_18xx+0x10e>
 8002c2c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002c2e:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8002c32:	d903      	bls.n	8002c3c <OD_write_18xx+0xd8>
 8002c34:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002c36:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002c3a:	d31a      	bcc.n	8002c72 <OD_write_18xx+0x10e>
 8002c3c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002c3e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002c42:	d903      	bls.n	8002c4c <OD_write_18xx+0xe8>
 8002c44:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002c46:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8002c4a:	d312      	bcc.n	8002c72 <OD_write_18xx+0x10e>
 8002c4c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002c4e:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8002c52:	d303      	bcc.n	8002c5c <OD_write_18xx+0xf8>
 8002c54:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002c56:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c5a:	d30a      	bcc.n	8002c72 <OD_write_18xx+0x10e>
 8002c5c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002c5e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002c62:	d806      	bhi.n	8002c72 <OD_write_18xx+0x10e>
            || (valid && PDO->mappedObjectsCount == 0)
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d005      	beq.n	8002c76 <OD_write_18xx+0x112>
 8002c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c6c:	7b5b      	ldrb	r3, [r3, #13]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d101      	bne.n	8002c76 <OD_write_18xx+0x112>
        ) {
            return ODR_INVALID_VALUE;
 8002c72:	230f      	movs	r3, #15
 8002c74:	e0c2      	b.n	8002dfc <OD_write_18xx+0x298>
        }

        /* parameter changed? */
        if (valid != PDO->valid || CAN_ID != PDO->configuredCanId) {
 8002c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	69fa      	ldr	r2, [r7, #28]
 8002c7c:	429a      	cmp	r2, r3
 8002c7e:	d106      	bne.n	8002c8e <OD_write_18xx+0x12a>
 8002c80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c82:	f8b3 3124 	ldrh.w	r3, [r3, #292]	; 0x124
 8002c86:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	f000 80ae 	beq.w	8002dea <OD_write_18xx+0x286>
            /* if default CAN-ID is written, store to OD without Node-ID */
            if (CAN_ID == PDO->preDefinedCanId) {
 8002c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c90:	f8b3 3122 	ldrh.w	r3, [r3, #290]	; 0x122
 8002c94:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002c96:	429a      	cmp	r2, r3
 8002c98:	d108      	bne.n	8002cac <OD_write_18xx+0x148>
                CO_setUint32(bufCopy, COB_ID & 0xFFFFFF80);
 8002c9a:	6a3b      	ldr	r3, [r7, #32]
 8002c9c:	f023 027f 	bic.w	r2, r3, #127	; 0x7f
 8002ca0:	f107 0314 	add.w	r3, r7, #20
 8002ca4:	4611      	mov	r1, r2
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7ff f85d 	bl	8001d66 <CO_setUint32>
            }
            if (!valid) {
 8002cac:	69fb      	ldr	r3, [r7, #28]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <OD_write_18xx+0x152>
                CAN_ID = 0;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	87fb      	strh	r3, [r7, #62]	; 0x3e
            }

            CO_CANtx_t *CANtxBuff = CO_CANtxBufferInit(
 8002cb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cb8:	6858      	ldr	r0, [r3, #4]
 8002cba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cbc:	f8b3 1120 	ldrh.w	r1, [r3, #288]	; 0x120
 8002cc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cc2:	7b1b      	ldrb	r3, [r3, #12]
                PDO->CANdev,      /* CAN device */
                PDO->CANdevIdx,   /* index of specific buffer inside CAN mod. */
                CAN_ID,           /* CAN identifier */
                0,                /* rtr */
                PDO->dataLength,  /* number of data bytes */
                TPDO->transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240);
 8002cc4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002cc6:	f892 214c 	ldrb.w	r2, [r2, #332]	; 0x14c
            CO_CANtx_t *CANtxBuff = CO_CANtxBufferInit(
 8002cca:	2af0      	cmp	r2, #240	; 0xf0
 8002ccc:	bf94      	ite	ls
 8002cce:	2201      	movls	r2, #1
 8002cd0:	2200      	movhi	r2, #0
 8002cd2:	b2d2      	uxtb	r2, r2
 8002cd4:	4614      	mov	r4, r2
 8002cd6:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002cd8:	9401      	str	r4, [sp, #4]
 8002cda:	9300      	str	r3, [sp, #0]
 8002cdc:	2300      	movs	r3, #0
 8002cde:	f005 f981 	bl	8007fe4 <CO_CANtxBufferInit>
 8002ce2:	61b8      	str	r0, [r7, #24]
                                  /* synchronous message flag */

            if (CANtxBuff == NULL) {
 8002ce4:	69bb      	ldr	r3, [r7, #24]
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d101      	bne.n	8002cee <OD_write_18xx+0x18a>
                return ODR_DEV_INCOMPAT;
 8002cea:	2309      	movs	r3, #9
 8002cec:	e086      	b.n	8002dfc <OD_write_18xx+0x298>
            }

            TPDO->CANtxBuff = CANtxBuff;
 8002cee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cf0:	69ba      	ldr	r2, [r7, #24]
 8002cf2:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
            PDO->valid = valid;
 8002cf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cf8:	69fa      	ldr	r2, [r7, #28]
 8002cfa:	609a      	str	r2, [r3, #8]
            PDO->configuredCanId = CAN_ID;
 8002cfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002cfe:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8002d00:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
        }
        break;
 8002d04:	e071      	b.n	8002dea <OD_write_18xx+0x286>
    }

    case 2: { /* transmission type */
        uint8_t transmissionType = CO_getUint8(buf);
 8002d06:	68b8      	ldr	r0, [r7, #8]
 8002d08:	f7ff f802 	bl	8001d10 <CO_getUint8>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        if (transmissionType > CO_PDO_TRANSM_TYPE_SYNC_240
 8002d12:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d16:	2bf0      	cmp	r3, #240	; 0xf0
 8002d18:	d905      	bls.n	8002d26 <OD_write_18xx+0x1c2>
            && transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 8002d1a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d1e:	2bfd      	cmp	r3, #253	; 0xfd
 8002d20:	d801      	bhi.n	8002d26 <OD_write_18xx+0x1c2>
        ) {
            return ODR_INVALID_VALUE;
 8002d22:	230f      	movs	r3, #15
 8002d24:	e06a      	b.n	8002dfc <OD_write_18xx+0x298>
        }
        TPDO->CANtxBuff->syncFlag =
            transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240;
 8002d26:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002d2a:	2bf0      	cmp	r3, #240	; 0xf0
 8002d2c:	bf94      	ite	ls
 8002d2e:	2301      	movls	r3, #1
 8002d30:	2300      	movhi	r3, #0
 8002d32:	b2da      	uxtb	r2, r3
        TPDO->CANtxBuff->syncFlag =
 8002d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d36:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002d3a:	615a      	str	r2, [r3, #20]
        TPDO->syncCounter = 255;
 8002d3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d3e:	22ff      	movs	r2, #255	; 0xff
 8002d40:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
#else
        if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
            return ODR_INVALID_VALUE;
        }
#endif
        TPDO->transmissionType = transmissionType;
 8002d44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d46:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8002d4a:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
        TPDO->sendRequest = true;
 8002d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d50:	2201      	movs	r2, #1
 8002d52:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
        TPDO->inhibitTimer = TPDO->eventTimer = 0;
 8002d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d58:	2200      	movs	r2, #0
 8002d5a:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 8002d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d60:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 8002d64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d66:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
#endif
        break;
 8002d6a:	e03f      	b.n	8002dec <OD_write_18xx+0x288>
    }

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
    case 3: { /* inhibit time */
        if (PDO->valid) {
 8002d6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d001      	beq.n	8002d78 <OD_write_18xx+0x214>
            return ODR_INVALID_VALUE;
 8002d74:	230f      	movs	r3, #15
 8002d76:	e041      	b.n	8002dfc <OD_write_18xx+0x298>
        }
        uint32_t inhibitTime = CO_getUint16(buf);
 8002d78:	68b8      	ldr	r0, [r7, #8]
 8002d7a:	f7fe ffd7 	bl	8001d2c <CO_getUint16>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	62bb      	str	r3, [r7, #40]	; 0x28
        TPDO->inhibitTime_us = inhibitTime * 100;
 8002d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d84:	2264      	movs	r2, #100	; 0x64
 8002d86:	fb03 f202 	mul.w	r2, r3, r2
 8002d8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d8c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
        TPDO->inhibitTimer = 0;
 8002d90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d92:	2200      	movs	r2, #0
 8002d94:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
        break;
 8002d98:	e028      	b.n	8002dec <OD_write_18xx+0x288>
    }

    case 5: { /* event-timer */
        uint32_t eventTime = CO_getUint16(buf);
 8002d9a:	68b8      	ldr	r0, [r7, #8]
 8002d9c:	f7fe ffc6 	bl	8001d2c <CO_getUint16>
 8002da0:	4603      	mov	r3, r0
 8002da2:	62fb      	str	r3, [r7, #44]	; 0x2c
        TPDO->eventTime_us = eventTime * 1000;
 8002da4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002da6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002daa:	fb03 f202 	mul.w	r2, r3, r2
 8002dae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
        TPDO->eventTimer = 0;
 8002db4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002db6:	2200      	movs	r2, #0
 8002db8:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
        break;
 8002dbc:	e016      	b.n	8002dec <OD_write_18xx+0x288>
    }
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    case 6: { /* SYNC start value */
        uint8_t syncStartValue = CO_getUint8(buf);
 8002dbe:	68b8      	ldr	r0, [r7, #8]
 8002dc0:	f7fe ffa6 	bl	8001d10 <CO_getUint8>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

        if (PDO->valid || syncStartValue > 240) {
 8002dca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d103      	bne.n	8002dda <OD_write_18xx+0x276>
 8002dd2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002dd6:	2bf0      	cmp	r3, #240	; 0xf0
 8002dd8:	d901      	bls.n	8002dde <OD_write_18xx+0x27a>
            return ODR_INVALID_VALUE;
 8002dda:	230f      	movs	r3, #15
 8002ddc:	e00e      	b.n	8002dfc <OD_write_18xx+0x298>
        }
        TPDO->syncStartValue = syncStartValue;
 8002dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002de0:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8002de4:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
        break;
 8002de8:	e000      	b.n	8002dec <OD_write_18xx+0x288>
        break;
 8002dea:	bf00      	nop
    }
#endif
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, bufCopy, count, countWritten);
 8002dec:	f107 0114 	add.w	r1, r7, #20
 8002df0:	683b      	ldr	r3, [r7, #0]
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f7fe fcfb 	bl	80017f0 <OD_writeOriginal>
 8002dfa:	4603      	mov	r3, r0
}
 8002dfc:	4618      	mov	r0, r3
 8002dfe:	3744      	adds	r7, #68	; 0x44
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd90      	pop	{r4, r7, pc}
 8002e04:	3ffff800 	.word	0x3ffff800

08002e08 <CO_TPDO_init>:
                              OD_entry_t *OD_18xx_TPDOCommPar,
                              OD_entry_t *OD_1Axx_TPDOMapPar,
                              CO_CANmodule_t *CANdevTx,
                              uint16_t CANdevTxIdx,
                              uint32_t *errInfo)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b08e      	sub	sp, #56	; 0x38
 8002e0c:	af02      	add	r7, sp, #8
 8002e0e:	60f8      	str	r0, [r7, #12]
 8002e10:	60b9      	str	r1, [r7, #8]
 8002e12:	607a      	str	r2, [r7, #4]
 8002e14:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	627b      	str	r3, [r7, #36]	; 0x24
    ODR_t odRet;

    /* verify arguments */
    if (TPDO == NULL || OD == NULL || em == NULL || OD_18xx_TPDOCommPar == NULL
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d00e      	beq.n	8002e3e <CO_TPDO_init+0x36>
 8002e20:	68bb      	ldr	r3, [r7, #8]
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00b      	beq.n	8002e3e <CO_TPDO_init+0x36>
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d008      	beq.n	8002e3e <CO_TPDO_init+0x36>
 8002e2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d005      	beq.n	8002e3e <CO_TPDO_init+0x36>
        || OD_1Axx_TPDOMapPar == NULL || CANdevTx == NULL
 8002e32:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d002      	beq.n	8002e3e <CO_TPDO_init+0x36>
 8002e38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d102      	bne.n	8002e44 <CO_TPDO_init+0x3c>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8002e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8002e42:	e14d      	b.n	80030e0 <CO_TPDO_init+0x2d8>
    }

    /* clear object */
    memset(TPDO, 0, sizeof(CO_TPDO_t));
 8002e44:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8002e48:	2100      	movs	r1, #0
 8002e4a:	68f8      	ldr	r0, [r7, #12]
 8002e4c:	f011 f940 	bl	80140d0 <memset>

    /* Configure object variables */
    PDO->em = em;
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	687a      	ldr	r2, [r7, #4]
 8002e54:	601a      	str	r2, [r3, #0]
    PDO->CANdev = CANdevTx;
 8002e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e5a:	605a      	str	r2, [r3, #4]

    /* Configure mapping parameters */
    uint32_t erroneousMap = 0;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	61fb      	str	r3, [r7, #28]
    CO_ReturnError_t ret = PDO_initMapping(PDO,
 8002e60:	f107 031c 	add.w	r3, r7, #28
 8002e64:	9301      	str	r3, [sp, #4]
 8002e66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e68:	9300      	str	r3, [sp, #0]
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002e6e:	68b9      	ldr	r1, [r7, #8]
 8002e70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e72:	f7ff f8e7 	bl	8002044 <PDO_initMapping>
 8002e76:	4603      	mov	r3, r0
 8002e78:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
                                           OD,
                                           OD_1Axx_TPDOMapPar,
                                           false,
                                           errInfo,
                                           &erroneousMap);
    if (ret != CO_ERROR_NO) {
 8002e7c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d002      	beq.n	8002e8a <CO_TPDO_init+0x82>
        return ret;
 8002e84:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8002e88:	e12a      	b.n	80030e0 <CO_TPDO_init+0x2d8>
    }


    /* Configure communication parameter - transmission type */
    uint8_t transmissionType = CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO;
 8002e8a:	23fe      	movs	r3, #254	; 0xfe
 8002e8c:	76fb      	strb	r3, [r7, #27]
    odRet = OD_get_u8(OD_18xx_TPDOCommPar, 2, &transmissionType, true);
 8002e8e:	f107 021b 	add.w	r2, r7, #27
 8002e92:	2301      	movs	r3, #1
 8002e94:	2102      	movs	r1, #2
 8002e96:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002e98:	f7fe ff99 	bl	8001dce <OD_get_u8>
 8002e9c:	4603      	mov	r3, r0
 8002e9e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 8002ea2:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d00e      	beq.n	8002ec8 <CO_TPDO_init+0xc0>
        if (errInfo != NULL) {
 8002eaa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d008      	beq.n	8002ec2 <CO_TPDO_init+0xba>
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 2;
 8002eb0:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002eb2:	f7fe ff67 	bl	8001d84 <OD_getIndex>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	021b      	lsls	r3, r3, #8
 8002eba:	f043 0202 	orr.w	r2, r3, #2
 8002ebe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ec0:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8002ec2:	f06f 030b 	mvn.w	r3, #11
 8002ec6:	e10b      	b.n	80030e0 <CO_TPDO_init+0x2d8>
    }
    if (transmissionType < CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 8002ec8:	7efb      	ldrb	r3, [r7, #27]
 8002eca:	2bfd      	cmp	r3, #253	; 0xfd
 8002ecc:	d804      	bhi.n	8002ed8 <CO_TPDO_init+0xd0>
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        && transmissionType > CO_PDO_TRANSM_TYPE_SYNC_240
 8002ece:	7efb      	ldrb	r3, [r7, #27]
 8002ed0:	2bf0      	cmp	r3, #240	; 0xf0
 8002ed2:	d901      	bls.n	8002ed8 <CO_TPDO_init+0xd0>
#endif
    ) {
        transmissionType = CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO;
 8002ed4:	23fe      	movs	r3, #254	; 0xfe
 8002ed6:	76fb      	strb	r3, [r7, #27]
    }
    TPDO->transmissionType = transmissionType;
 8002ed8:	7efa      	ldrb	r2, [r7, #27]
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	f883 214c 	strb.w	r2, [r3, #332]	; 0x14c
    TPDO->sendRequest = true;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2201      	movs	r2, #1
 8002ee4:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

    /* Configure communication parameter - COB-ID */
    uint32_t COB_ID = 0;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	617b      	str	r3, [r7, #20]
    odRet = OD_get_u32(OD_18xx_TPDOCommPar, 1, &COB_ID, true);
 8002eec:	f107 0214 	add.w	r2, r7, #20
 8002ef0:	2301      	movs	r3, #1
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002ef6:	f7fe ff94 	bl	8001e22 <OD_get_u32>
 8002efa:	4603      	mov	r3, r0
 8002efc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (odRet != ODR_OK) {
 8002f00:	f997 3022 	ldrsb.w	r3, [r7, #34]	; 0x22
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d00e      	beq.n	8002f26 <CO_TPDO_init+0x11e>
        if (errInfo != NULL) {
 8002f08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d008      	beq.n	8002f20 <CO_TPDO_init+0x118>
            *errInfo = (((uint32_t)OD_getIndex(OD_18xx_TPDOCommPar)) << 8) | 1;
 8002f0e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002f10:	f7fe ff38 	bl	8001d84 <OD_getIndex>
 8002f14:	4603      	mov	r3, r0
 8002f16:	021b      	lsls	r3, r3, #8
 8002f18:	f043 0201 	orr.w	r2, r3, #1
 8002f1c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f1e:	601a      	str	r2, [r3, #0]
        }
        return CO_ERROR_OD_PARAMETERS;
 8002f20:	f06f 030b 	mvn.w	r3, #11
 8002f24:	e0dc      	b.n	80030e0 <CO_TPDO_init+0x2d8>
    }

    bool_t valid = (COB_ID & 0x80000000) == 0;
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	43db      	mvns	r3, r3
 8002f2a:	0fdb      	lsrs	r3, r3, #31
 8002f2c:	b2db      	uxtb	r3, r3
 8002f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8002f30:	697b      	ldr	r3, [r7, #20]
 8002f32:	b29b      	uxth	r3, r3
 8002f34:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002f38:	857b      	strh	r3, [r7, #42]	; 0x2a
    if (valid && (PDO->mappedObjectsCount == 0 || CAN_ID == 0)) {
 8002f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d00d      	beq.n	8002f5c <CO_TPDO_init+0x154>
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	7b5b      	ldrb	r3, [r3, #13]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d002      	beq.n	8002f4e <CO_TPDO_init+0x146>
 8002f48:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d106      	bne.n	8002f5c <CO_TPDO_init+0x154>
        valid = false;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (erroneousMap == 0) erroneousMap = 1;
 8002f52:	69fb      	ldr	r3, [r7, #28]
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d101      	bne.n	8002f5c <CO_TPDO_init+0x154>
 8002f58:	2301      	movs	r3, #1
 8002f5a:	61fb      	str	r3, [r7, #28]
    }

    if (erroneousMap != 0) {
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d00e      	beq.n	8002f80 <CO_TPDO_init+0x178>
        CO_errorReport(PDO->em,
 8002f62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f64:	6818      	ldr	r0, [r3, #0]
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d001      	beq.n	8002f70 <CO_TPDO_init+0x168>
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	e000      	b.n	8002f72 <CO_TPDO_init+0x16a>
 8002f70:	697b      	ldr	r3, [r7, #20]
 8002f72:	9300      	str	r3, [sp, #0]
 8002f74:	f44f 4302 	mov.w	r3, #33280	; 0x8200
 8002f78:	221a      	movs	r2, #26
 8002f7a:	2101      	movs	r1, #1
 8002f7c:	f7fd fd80 	bl	8000a80 <CO_error>
                       CO_EM_PDO_WRONG_MAPPING, CO_EMC_PROTOCOL_ERROR,
                       erroneousMap != 1 ? erroneousMap : COB_ID);
    }
    if (!valid) {
 8002f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <CO_TPDO_init+0x182>
        CAN_ID = 0;
 8002f86:	2300      	movs	r3, #0
 8002f88:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    /* If default CAN-ID is stored in OD (without Node-ID), add Node-ID */
    if (CAN_ID != 0 && CAN_ID == (preDefinedCanId & 0xFF80)) {
 8002f8a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d008      	beq.n	8002fa2 <CO_TPDO_init+0x19a>
 8002f90:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002f92:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 8002f94:	f64f 7380 	movw	r3, #65408	; 0xff80
 8002f98:	400b      	ands	r3, r1
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d101      	bne.n	8002fa2 <CO_TPDO_init+0x19a>
        CAN_ID = preDefinedCanId;
 8002f9e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8002fa0:	857b      	strh	r3, [r7, #42]	; 0x2a
    }

    TPDO->CANtxBuff = CO_CANtxBufferInit(
 8002fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa4:	7b1b      	ldrb	r3, [r3, #12]
            CANdevTx,           /* CAN device */
            CANdevTxIdx,        /* index of specific buffer inside CAN module */
            CAN_ID,             /* CAN identifier */
            0,                  /* rtr */
            PDO->dataLength,    /* number of data bytes */
            TPDO->transmissionType <= CO_PDO_TRANSM_TYPE_SYNC_240);
 8002fa6:	68fa      	ldr	r2, [r7, #12]
 8002fa8:	f892 214c 	ldrb.w	r2, [r2, #332]	; 0x14c
    TPDO->CANtxBuff = CO_CANtxBufferInit(
 8002fac:	2af0      	cmp	r2, #240	; 0xf0
 8002fae:	bf94      	ite	ls
 8002fb0:	2201      	movls	r2, #1
 8002fb2:	2200      	movhi	r2, #0
 8002fb4:	b2d2      	uxtb	r2, r2
 8002fb6:	4610      	mov	r0, r2
 8002fb8:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8002fba:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 8002fbe:	9001      	str	r0, [sp, #4]
 8002fc0:	9300      	str	r3, [sp, #0]
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8002fc6:	f005 f80d 	bl	8007fe4 <CO_CANtxBufferInit>
 8002fca:	4602      	mov	r2, r0
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
                                /* synchronous message flag bit */
    if (TPDO->CANtxBuff == NULL) {
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d102      	bne.n	8002fe2 <CO_TPDO_init+0x1da>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8002fdc:	f04f 33ff 	mov.w	r3, #4294967295
 8002fe0:	e07e      	b.n	80030e0 <CO_TPDO_init+0x2d8>
    }

    PDO->valid = valid;
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fe4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fe6:	609a      	str	r2, [r3, #8]


    /* Configure communication parameter - inhibit time and event-timer (opt) */
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
    uint16_t inhibitTime = 0;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	827b      	strh	r3, [r7, #18]
    uint16_t eventTime = 0;
 8002fec:	2300      	movs	r3, #0
 8002fee:	823b      	strh	r3, [r7, #16]
    odRet = OD_get_u16(OD_18xx_TPDOCommPar, 3, &inhibitTime, true);
 8002ff0:	f107 0212 	add.w	r2, r7, #18
 8002ff4:	2301      	movs	r3, #1
 8002ff6:	2103      	movs	r1, #3
 8002ff8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8002ffa:	f7fe fefd 	bl	8001df8 <OD_get_u16>
 8002ffe:	4603      	mov	r3, r0
 8003000:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    odRet = OD_get_u16(OD_18xx_TPDOCommPar, 5, &eventTime, true);
 8003004:	f107 0210 	add.w	r2, r7, #16
 8003008:	2301      	movs	r3, #1
 800300a:	2105      	movs	r1, #5
 800300c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800300e:	f7fe fef3 	bl	8001df8 <OD_get_u16>
 8003012:	4603      	mov	r3, r0
 8003014:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    TPDO->inhibitTime_us = (uint32_t)inhibitTime * 100;
 8003018:	8a7b      	ldrh	r3, [r7, #18]
 800301a:	461a      	mov	r2, r3
 800301c:	2364      	movs	r3, #100	; 0x64
 800301e:	fb03 f202 	mul.w	r2, r3, r2
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
    TPDO->eventTime_us = (uint32_t)eventTime * 1000;
 8003028:	8a3b      	ldrh	r3, [r7, #16]
 800302a:	461a      	mov	r2, r3
 800302c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003030:	fb03 f202 	mul.w	r2, r3, r2
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160
#endif


    /* Configure communication parameter - SYNC start value (optional) */
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
    TPDO->syncStartValue = 0;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2200      	movs	r2, #0
 800303e:	f883 2158 	strb.w	r2, [r3, #344]	; 0x158
    odRet = OD_get_u8(OD_18xx_TPDOCommPar, 6, &TPDO->syncStartValue, true);
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	f503 72ac 	add.w	r2, r3, #344	; 0x158
 8003048:	2301      	movs	r3, #1
 800304a:	2106      	movs	r1, #6
 800304c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800304e:	f7fe febe 	bl	8001dce <OD_get_u8>
 8003052:	4603      	mov	r3, r0
 8003054:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    TPDO->SYNC = SYNC;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	683a      	ldr	r2, [r7, #0]
 800305c:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
    TPDO->syncCounter = 255;
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	22ff      	movs	r2, #255	; 0xff
 8003064:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
#endif


    /* Configure OD extensions */
#if (CO_CONFIG_PDO) & CO_CONFIG_FLAG_OD_DYNAMIC
    PDO->isRPDO = false;
 8003068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800306a:	2200      	movs	r2, #0
 800306c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    PDO->OD = OD;
 8003070:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003072:	68ba      	ldr	r2, [r7, #8]
 8003074:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    PDO->CANdevIdx = CANdevTxIdx;
 8003078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800307a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800307e:	f8a3 2120 	strh.w	r2, [r3, #288]	; 0x120
    PDO->preDefinedCanId = preDefinedCanId;
 8003082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003084:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8003086:	f8a3 2122 	strh.w	r2, [r3, #290]	; 0x122
    PDO->configuredCanId = CAN_ID;
 800308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800308c:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 800308e:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
    PDO->OD_communicationParam_ext.object = TPDO;
 8003092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003094:	68fa      	ldr	r2, [r7, #12]
 8003096:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    PDO->OD_communicationParam_ext.read = OD_read_PDO_commParam;
 800309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800309c:	4a12      	ldr	r2, [pc, #72]	; (80030e8 <CO_TPDO_init+0x2e0>)
 800309e:	f8c3 212c 	str.w	r2, [r3, #300]	; 0x12c
    PDO->OD_communicationParam_ext.write = OD_write_18xx;
 80030a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a4:	4a11      	ldr	r2, [pc, #68]	; (80030ec <CO_TPDO_init+0x2e4>)
 80030a6:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130
    PDO->OD_mappingParam_extension.object = TPDO;
 80030aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
    PDO->OD_mappingParam_extension.read = OD_readOriginal;
 80030b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b4:	4a0e      	ldr	r2, [pc, #56]	; (80030f0 <CO_TPDO_init+0x2e8>)
 80030b6:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
    PDO->OD_mappingParam_extension.write = OD_write_PDO_mapping;
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	4a0d      	ldr	r2, [pc, #52]	; (80030f4 <CO_TPDO_init+0x2ec>)
 80030be:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    OD_extension_init(OD_18xx_TPDOCommPar, &PDO->OD_communicationParam_ext);
 80030c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c4:	f503 7394 	add.w	r3, r3, #296	; 0x128
 80030c8:	4619      	mov	r1, r3
 80030ca:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80030cc:	f7fe fe6b 	bl	8001da6 <OD_extension_init>
    OD_extension_init(OD_1Axx_TPDOMapPar, &PDO->OD_mappingParam_extension);
 80030d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030d2:	f503 739c 	add.w	r3, r3, #312	; 0x138
 80030d6:	4619      	mov	r1, r3
 80030d8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80030da:	f7fe fe64 	bl	8001da6 <OD_extension_init>
#endif

    return CO_ERROR_NO;
 80030de:	2300      	movs	r3, #0
}
 80030e0:	4618      	mov	r0, r3
 80030e2:	3730      	adds	r7, #48	; 0x30
 80030e4:	46bd      	mov	sp, r7
 80030e6:	bd80      	pop	{r7, pc}
 80030e8:	080022d9 	.word	0x080022d9
 80030ec:	08002b65 	.word	0x08002b65
 80030f0:	08001741 	.word	0x08001741
 80030f4:	0800219f 	.word	0x0800219f

080030f8 <CO_TPDOsend>:
 *
 * @param TPDO TPDO object.
 *
 * @return Same as CO_CANsend().
 */
static CO_ReturnError_t CO_TPDOsend(CO_TPDO_t *TPDO) {
 80030f8:	b590      	push	{r4, r7, lr}
 80030fa:	b091      	sub	sp, #68	; 0x44
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint8_t *dataTPDO = &TPDO->CANtxBuff->data[0];
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800310a:	3305      	adds	r3, #5
 800310c:	63fb      	str	r3, [r7, #60]	; 0x3c
#if OD_FLAGS_PDO_SIZE > 0
    bool_t eventDriven =
            (TPDO->transmissionType == CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
            || TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO);
 8003114:	2b00      	cmp	r3, #0
 8003116:	d004      	beq.n	8003122 <CO_TPDOsend+0x2a>
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 800311e:	2bfd      	cmp	r3, #253	; 0xfd
 8003120:	d901      	bls.n	8003126 <CO_TPDOsend+0x2e>
 8003122:	2301      	movs	r3, #1
 8003124:	e000      	b.n	8003128 <CO_TPDOsend+0x30>
 8003126:	2300      	movs	r3, #0
    bool_t eventDriven =
 8003128:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 800312a:	2300      	movs	r3, #0
 800312c:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 8003130:	e062      	b.n	80031f8 <CO_TPDOsend+0x100>
        OD_IO_t *OD_IO = &PDO->OD_IO[i];
 8003132:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8003136:	4613      	mov	r3, r2
 8003138:	00db      	lsls	r3, r3, #3
 800313a:	1a9b      	subs	r3, r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	3310      	adds	r3, #16
 8003140:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003142:	4413      	add	r3, r2
 8003144:	627b      	str	r3, [r7, #36]	; 0x24
        OD_stream_t *stream = &OD_IO->stream;
 8003146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003148:	623b      	str	r3, [r7, #32]

        /* get mappedLength from temporary storage */
        uint8_t mappedLength = (uint8_t) stream->dataOffset;
 800314a:	6a3b      	ldr	r3, [r7, #32]
 800314c:	68db      	ldr	r3, [r3, #12]
 800314e:	77fb      	strb	r3, [r7, #31]

        /* length of OD variable may be larger than mappedLength */
        OD_size_t ODdataLength = stream->dataLength;
 8003150:	6a3b      	ldr	r3, [r7, #32]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	637b      	str	r3, [r7, #52]	; 0x34
        if (ODdataLength > CO_PDO_MAX_SIZE)
 8003156:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003158:	2b08      	cmp	r3, #8
 800315a:	d901      	bls.n	8003160 <CO_TPDOsend+0x68>
            ODdataLength = CO_PDO_MAX_SIZE;
 800315c:	2308      	movs	r3, #8
 800315e:	637b      	str	r3, [r7, #52]	; 0x34

        /* If mappedLength is smaller than ODdataLength, use auxiliary buffer */
        uint8_t buf[CO_PDO_MAX_SIZE];
        uint8_t *dataTPDOCopy;
        if (ODdataLength > mappedLength) {
 8003160:	7ffb      	ldrb	r3, [r7, #31]
 8003162:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003164:	429a      	cmp	r2, r3
 8003166:	d90a      	bls.n	800317e <CO_TPDOsend+0x86>
            memset(buf, 0, sizeof(buf));
 8003168:	f107 0310 	add.w	r3, r7, #16
 800316c:	2208      	movs	r2, #8
 800316e:	2100      	movs	r1, #0
 8003170:	4618      	mov	r0, r3
 8003172:	f010 ffad 	bl	80140d0 <memset>
            dataTPDOCopy = buf;
 8003176:	f107 0310 	add.w	r3, r7, #16
 800317a:	633b      	str	r3, [r7, #48]	; 0x30
 800317c:	e001      	b.n	8003182 <CO_TPDOsend+0x8a>
        }
        else {
            dataTPDOCopy = dataTPDO;
 800317e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003180:	633b      	str	r3, [r7, #48]	; 0x30
        }

        /* Set stream.dataOffset to zero, perform OD_IO.read()
         * and store mappedLength back to stream.dataOffset */
        stream->dataOffset= 0;
 8003182:	6a3b      	ldr	r3, [r7, #32]
 8003184:	2200      	movs	r2, #0
 8003186:	60da      	str	r2, [r3, #12]
        OD_size_t countRd;
        OD_IO->read(stream, dataTPDOCopy, ODdataLength, &countRd);
 8003188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318a:	695c      	ldr	r4, [r3, #20]
 800318c:	f107 030c 	add.w	r3, r7, #12
 8003190:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003192:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003194:	6a38      	ldr	r0, [r7, #32]
 8003196:	47a0      	blx	r4
        stream->dataOffset = mappedLength;
 8003198:	7ffa      	ldrb	r2, [r7, #31]
 800319a:	6a3b      	ldr	r3, [r7, #32]
 800319c:	60da      	str	r2, [r3, #12]
            }
        }
 #endif

        /* If auxiliary buffer, copy it to the TPDO */
        if (ODdataLength > mappedLength) {
 800319e:	7ffb      	ldrb	r3, [r7, #31]
 80031a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031a2:	429a      	cmp	r2, r3
 80031a4:	d906      	bls.n	80031b4 <CO_TPDOsend+0xbc>
            memcpy(dataTPDO, buf, mappedLength);
 80031a6:	7ffa      	ldrb	r2, [r7, #31]
 80031a8:	f107 0310 	add.w	r3, r7, #16
 80031ac:	4619      	mov	r1, r3
 80031ae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80031b0:	f010 ff66 	bl	8014080 <memcpy>
        }

        /* In event driven TPDO indicate transmission of OD variable */
 #if OD_FLAGS_PDO_SIZE > 0
        uint8_t *flagPDObyte = PDO->flagPDObyte[i];
 80031b4:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 80031b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ba:	323c      	adds	r2, #60	; 0x3c
 80031bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031c0:	61bb      	str	r3, [r7, #24]
        if (flagPDObyte != NULL && eventDriven) {
 80031c2:	69bb      	ldr	r3, [r7, #24]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d00e      	beq.n	80031e6 <CO_TPDOsend+0xee>
 80031c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d00b      	beq.n	80031e6 <CO_TPDOsend+0xee>
           *flagPDObyte |= PDO->flagPDObitmask[i];
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	781a      	ldrb	r2, [r3, #0]
 80031d2:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80031d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80031d8:	440b      	add	r3, r1
 80031da:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80031de:	4313      	orrs	r3, r2
 80031e0:	b2da      	uxtb	r2, r3
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	701a      	strb	r2, [r3, #0]
        }
 #endif

        dataTPDO += mappedLength;
 80031e6:	7ffb      	ldrb	r3, [r7, #31]
 80031e8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80031ea:	4413      	add	r3, r2
 80031ec:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 80031ee:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 80031f2:	3301      	adds	r3, #1
 80031f4:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
 80031f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031fa:	7b5b      	ldrb	r3, [r3, #13]
 80031fc:	f897 203b 	ldrb.w	r2, [r7, #59]	; 0x3b
 8003200:	429a      	cmp	r2, r3
 8003202:	d396      	bcc.n	8003132 <CO_TPDOsend+0x3a>
        }
 #endif
    }
#endif /* (CO_CONFIG_PDO) & CO_CONFIG_PDO_OD_IO_ACCESS */

    TPDO->sendRequest = false;
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2200      	movs	r2, #0
 8003208:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
    TPDO->eventTimer = TPDO->eventTime_us;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	f8d3 2160 	ldr.w	r2, [r3, #352]	; 0x160
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    TPDO->inhibitTimer = TPDO->inhibitTime_us;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	f8d3 215c 	ldr.w	r2, [r3, #348]	; 0x15c
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
#endif
    return CO_CANsend(PDO->CANdev, TPDO->CANtxBuff);
 8003224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800322e:	4619      	mov	r1, r3
 8003230:	4610      	mov	r0, r2
 8003232:	f004 ff9d 	bl	8008170 <CO_CANsend>
 8003236:	4603      	mov	r3, r0
}
 8003238:	4618      	mov	r0, r3
 800323a:	3744      	adds	r7, #68	; 0x44
 800323c:	46bd      	mov	sp, r7
 800323e:	bd90      	pop	{r4, r7, pc}

08003240 <CO_TPDO_process>:
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us,
#endif
                     bool_t NMTisOperational,
                     bool_t syncWas)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b088      	sub	sp, #32
 8003244:	af00      	add	r7, sp, #0
 8003246:	60f8      	str	r0, [r7, #12]
 8003248:	60b9      	str	r1, [r7, #8]
 800324a:	607a      	str	r2, [r7, #4]
 800324c:	603b      	str	r3, [r7, #0]
    CO_PDO_common_t *PDO = &TPDO->PDO_common;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	61bb      	str	r3, [r7, #24]
#if ((CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE)
    (void) timerNext_us;
#endif
    (void) syncWas;

    if (PDO->valid && NMTisOperational) {
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	2b00      	cmp	r3, #0
 8003258:	f000 80dc 	beq.w	8003414 <CO_TPDO_process+0x1d4>
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	f000 80d8 	beq.w	8003414 <CO_TPDO_process+0x1d4>

        /* check for event timer or application event */
#if ((CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE) || (OD_FLAGS_PDO_SIZE > 0)
        if (TPDO->transmissionType == CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 800326a:	2b00      	cmp	r3, #0
 800326c:	d004      	beq.n	8003278 <CO_TPDO_process+0x38>
            || TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8003274:	2bfd      	cmp	r3, #253	; 0xfd
 8003276:	d946      	bls.n	8003306 <CO_TPDO_process+0xc6>
        ) {
            /* event timer */
 #if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
            if (TPDO->eventTime_us != 0) {
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800327e:	2b00      	cmp	r3, #0
 8003280:	d018      	beq.n	80032b4 <CO_TPDO_process+0x74>
                TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
                                ? (TPDO->eventTimer - timeDifference_us) : 0;
 8003288:	68ba      	ldr	r2, [r7, #8]
 800328a:	429a      	cmp	r2, r3
 800328c:	d205      	bcs.n	800329a <CO_TPDO_process+0x5a>
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 8003294:	68bb      	ldr	r3, [r7, #8]
 8003296:	1ad3      	subs	r3, r2, r3
 8003298:	e000      	b.n	800329c <CO_TPDO_process+0x5c>
 800329a:	2300      	movs	r3, #0
                TPDO->eventTimer = (TPDO->eventTimer > timeDifference_us)
 800329c:	68fa      	ldr	r2, [r7, #12]
 800329e:	f8c2 3168 	str.w	r3, [r2, #360]	; 0x168
                if (TPDO->eventTimer == 0) {
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	f8d3 3168 	ldr.w	r3, [r3, #360]	; 0x168
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d103      	bne.n	80032b4 <CO_TPDO_process+0x74>
                    TPDO->sendRequest = true;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2201      	movs	r2, #1
 80032b0:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
   #endif
            }
 #endif
            /* check for any OD_requestTPDO() */
 #if OD_FLAGS_PDO_SIZE > 0
            if (!TPDO->sendRequest) {
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d123      	bne.n	8003306 <CO_TPDO_process+0xc6>
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 80032be:	2300      	movs	r3, #0
 80032c0:	77fb      	strb	r3, [r7, #31]
 80032c2:	e01b      	b.n	80032fc <CO_TPDO_process+0xbc>
                    uint8_t *flagPDObyte = PDO->flagPDObyte[i];
 80032c4:	7ffa      	ldrb	r2, [r7, #31]
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	323c      	adds	r2, #60	; 0x3c
 80032ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032ce:	617b      	str	r3, [r7, #20]
                    if (flagPDObyte != NULL) {
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00f      	beq.n	80032f6 <CO_TPDO_process+0xb6>
                        if ((*flagPDObyte & PDO->flagPDObitmask[i]) == 0) {
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	781a      	ldrb	r2, [r3, #0]
 80032da:	7ffb      	ldrb	r3, [r7, #31]
 80032dc:	69b9      	ldr	r1, [r7, #24]
 80032de:	440b      	add	r3, r1
 80032e0:	f893 3110 	ldrb.w	r3, [r3, #272]	; 0x110
 80032e4:	4013      	ands	r3, r2
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d104      	bne.n	80032f6 <CO_TPDO_process+0xb6>
                            TPDO->sendRequest = true;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	2201      	movs	r2, #1
 80032f0:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
                            break;
 80032f4:	e007      	b.n	8003306 <CO_TPDO_process+0xc6>
                for (uint8_t i = 0; i < PDO->mappedObjectsCount; i++) {
 80032f6:	7ffb      	ldrb	r3, [r7, #31]
 80032f8:	3301      	adds	r3, #1
 80032fa:	77fb      	strb	r3, [r7, #31]
 80032fc:	69bb      	ldr	r3, [r7, #24]
 80032fe:	7b5b      	ldrb	r3, [r3, #13]
 8003300:	7ffa      	ldrb	r2, [r7, #31]
 8003302:	429a      	cmp	r2, r3
 8003304:	d3de      	bcc.n	80032c4 <CO_TPDO_process+0x84>
        }
#endif /*((CO_CONFIG_PDO)&CO_CONFIG_TPDO_TIMERS_ENABLE)||(OD_FLAGS_PDO_SIZE>0)*/


        /* Send PDO by application request or by Event timer */
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 800330c:	2bfd      	cmp	r3, #253	; 0xfd
 800330e:	d91d      	bls.n	800334c <CO_TPDO_process+0x10c>
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
                               ? (TPDO->inhibitTimer - timeDifference_us) : 0;
 8003316:	68ba      	ldr	r2, [r7, #8]
 8003318:	429a      	cmp	r2, r3
 800331a:	d205      	bcs.n	8003328 <CO_TPDO_process+0xe8>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	f8d3 2164 	ldr.w	r2, [r3, #356]	; 0x164
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	e000      	b.n	800332a <CO_TPDO_process+0xea>
 8003328:	2300      	movs	r3, #0
            TPDO->inhibitTimer = (TPDO->inhibitTimer > timeDifference_us)
 800332a:	68fa      	ldr	r2, [r7, #12]
 800332c:	f8c2 3164 	str.w	r3, [r2, #356]	; 0x164

            /* send TPDO */
            if (TPDO->sendRequest && TPDO->inhibitTimer == 0) {
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8003336:	2b00      	cmp	r3, #0
 8003338:	d07f      	beq.n	800343a <CO_TPDO_process+0x1fa>
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8003340:	2b00      	cmp	r3, #0
 8003342:	d17a      	bne.n	800343a <CO_TPDO_process+0x1fa>
                CO_TPDOsend(TPDO);
 8003344:	68f8      	ldr	r0, [r7, #12]
 8003346:	f7ff fed7 	bl	80030f8 <CO_TPDOsend>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 800334a:	e076      	b.n	800343a <CO_TPDO_process+0x1fa>
#endif
        } /* if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) */

        /* Synchronous PDOs */
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        else if (TPDO->SYNC != NULL && syncWas) {
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003352:	2b00      	cmp	r3, #0
 8003354:	d071      	beq.n	800343a <CO_TPDO_process+0x1fa>
 8003356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003358:	2b00      	cmp	r3, #0
 800335a:	d06e      	beq.n	800343a <CO_TPDO_process+0x1fa>
            /* send synchronous acyclic TPDO */
            if (TPDO->transmissionType == CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC) {
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 8003362:	2b00      	cmp	r3, #0
 8003364:	d108      	bne.n	8003378 <CO_TPDO_process+0x138>
                if (TPDO->sendRequest) CO_TPDOsend(TPDO);
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800336c:	2b00      	cmp	r3, #0
 800336e:	d064      	beq.n	800343a <CO_TPDO_process+0x1fa>
 8003370:	68f8      	ldr	r0, [r7, #12]
 8003372:	f7ff fec1 	bl	80030f8 <CO_TPDOsend>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003376:	e060      	b.n	800343a <CO_TPDO_process+0x1fa>
            }
            /* send synchronous cyclic TPDO */
            else {
                /* is the start of synchronous TPDO transmission */
                if (TPDO->syncCounter == 255) {
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 800337e:	2bff      	cmp	r3, #255	; 0xff
 8003380:	d119      	bne.n	80033b6 <CO_TPDO_process+0x176>
                    if (TPDO->SYNC->counterOverflowValue != 0
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8003388:	7c5b      	ldrb	r3, [r3, #17]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d009      	beq.n	80033a2 <CO_TPDO_process+0x162>
                        && TPDO->syncStartValue != 0
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 8003394:	2b00      	cmp	r3, #0
 8003396:	d004      	beq.n	80033a2 <CO_TPDO_process+0x162>
                    ) {
                        /* syncStartValue is in use */
                        TPDO->syncCounter = 254;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	22fe      	movs	r2, #254	; 0xfe
 800339c:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
 80033a0:	e009      	b.n	80033b6 <CO_TPDO_process+0x176>
                    }
                    else {
                        /* Send first TPDO somewhere in the middle */
                        TPDO->syncCounter = TPDO->transmissionType / 2 + 1;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f893 314c 	ldrb.w	r3, [r3, #332]	; 0x14c
 80033a8:	085b      	lsrs	r3, r3, #1
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	3301      	adds	r3, #1
 80033ae:	b2da      	uxtb	r2, r3
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
                    }
                }
                /* If the syncStartValue is in use, start first TPDO after SYNC
                 * with matched syncStartValue. */
                if (TPDO->syncCounter == 254) {
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 80033bc:	2bfe      	cmp	r3, #254	; 0xfe
 80033be:	d112      	bne.n	80033e6 <CO_TPDO_process+0x1a6>
                    if (TPDO->SYNC->counter == TPDO->syncStartValue) {
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80033c6:	7c9a      	ldrb	r2, [r3, #18]
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	f893 3158 	ldrb.w	r3, [r3, #344]	; 0x158
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d133      	bne.n	800343a <CO_TPDO_process+0x1fa>
                        TPDO->syncCounter = TPDO->transmissionType;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
                        CO_TPDOsend(TPDO);
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f7ff fe8a 	bl	80030f8 <CO_TPDOsend>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 80033e4:	e029      	b.n	800343a <CO_TPDO_process+0x1fa>
                    }
                }
                /* Send TPDO after every N-th Sync */
                else if (--TPDO->syncCounter == 0) {
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 80033ec:	3b01      	subs	r3, #1
 80033ee:	b2da      	uxtb	r2, r3
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	f893 3159 	ldrb.w	r3, [r3, #345]	; 0x159
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d11c      	bne.n	800343a <CO_TPDO_process+0x1fa>
                    TPDO->syncCounter = TPDO->transmissionType;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	f893 214c 	ldrb.w	r2, [r3, #332]	; 0x14c
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
                    CO_TPDOsend(TPDO);
 800340c:	68f8      	ldr	r0, [r7, #12]
 800340e:	f7ff fe73 	bl	80030f8 <CO_TPDOsend>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 8003412:	e012      	b.n	800343a <CO_TPDO_process+0x1fa>
#endif

    }
    else {
        /* Not operational or valid, reset triggers */
        TPDO->sendRequest = true;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2201      	movs	r2, #1
 8003418:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_TIMERS_ENABLE
        TPDO->inhibitTimer = TPDO->eventTimer = 0;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2200      	movs	r2, #0
 8003420:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_PDO_SYNC_ENABLE
        TPDO->syncCounter = 255;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	22ff      	movs	r2, #255	; 0xff
 8003434:	f883 2159 	strb.w	r2, [r3, #345]	; 0x159
#endif
    }
}
 8003438:	e000      	b.n	800343c <CO_TPDO_process+0x1fc>
        if (TPDO->transmissionType >= CO_PDO_TRANSM_TYPE_SYNC_EVENT_LO) {
 800343a:	bf00      	nop
}
 800343c:	bf00      	nop
 800343e:	3720      	adds	r7, #32
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d002      	beq.n	8003458 <OD_getIndex+0x14>
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	881b      	ldrh	r3, [r3, #0]
 8003456:	e000      	b.n	800345a <OD_getIndex+0x16>
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	370c      	adds	r7, #12
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr

08003466 <OD_get_u8>:
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b086      	sub	sp, #24
 800346a:	af02      	add	r7, sp, #8
 800346c:	60f8      	str	r0, [r7, #12]
 800346e:	607a      	str	r2, [r7, #4]
 8003470:	603b      	str	r3, [r7, #0]
 8003472:	460b      	mov	r3, r1
 8003474:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8003476:	7af9      	ldrb	r1, [r7, #11]
 8003478:	683b      	ldr	r3, [r7, #0]
 800347a:	9300      	str	r3, [sp, #0]
 800347c:	2301      	movs	r3, #1
 800347e:	687a      	ldr	r2, [r7, #4]
 8003480:	68f8      	ldr	r0, [r7, #12]
 8003482:	f7fe fb9b 	bl	8001bbc <OD_get_value>
 8003486:	4603      	mov	r3, r0
}
 8003488:	4618      	mov	r0, r3
 800348a:	3710      	adds	r7, #16
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <OD_get_u32>:
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b086      	sub	sp, #24
 8003494:	af02      	add	r7, sp, #8
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	607a      	str	r2, [r7, #4]
 800349a:	603b      	str	r3, [r7, #0]
 800349c:	460b      	mov	r3, r1
 800349e:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 80034a0:	7af9      	ldrb	r1, [r7, #11]
 80034a2:	683b      	ldr	r3, [r7, #0]
 80034a4:	9300      	str	r3, [sp, #0]
 80034a6:	2304      	movs	r3, #4
 80034a8:	687a      	ldr	r2, [r7, #4]
 80034aa:	68f8      	ldr	r0, [r7, #12]
 80034ac:	f7fe fb86 	bl	8001bbc <OD_get_value>
 80034b0:	4603      	mov	r3, r0
}
 80034b2:	4618      	mov	r0, r3
 80034b4:	3710      	adds	r7, #16
 80034b6:	46bd      	mov	sp, r7
 80034b8:	bd80      	pop	{r7, pc}

080034ba <CO_fifo_reset>:
/**
 * Reset fifo object, make it empty
 *
 * @param fifo This object
 */
static inline void CO_fifo_reset(CO_fifo_t *fifo) {
 80034ba:	b480      	push	{r7}
 80034bc:	b083      	sub	sp, #12
 80034be:	af00      	add	r7, sp, #0
 80034c0:	6078      	str	r0, [r7, #4]
    if (fifo != NULL) {
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d006      	beq.n	80034d6 <CO_fifo_reset+0x1c>
        fifo->readPtr = 0;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	2200      	movs	r2, #0
 80034cc:	60da      	str	r2, [r3, #12]
        fifo->writePtr = 0;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	609a      	str	r2, [r3, #8]
#if (CO_CONFIG_FIFO) & CO_CONFIG_FIFO_ASCII_DATATYPES
        fifo->started = false;
#endif
    }

    return;
 80034d4:	bf00      	nop
 80034d6:	bf00      	nop
}
 80034d8:	370c      	adds	r7, #12
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr

080034e2 <CO_fifo_getOccupied>:
 *
 * @param fifo This object
 *
 * @return number of occupied bytes
 */
static inline size_t CO_fifo_getOccupied(CO_fifo_t *fifo) {
 80034e2:	b480      	push	{r7}
 80034e4:	b085      	sub	sp, #20
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	6078      	str	r0, [r7, #4]
    int sizeOccupied = (int)fifo->writePtr - (int)fifo->readPtr;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	461a      	mov	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	1ad3      	subs	r3, r2, r3
 80034f6:	60fb      	str	r3, [r7, #12]
    if (sizeOccupied < 0) {
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	da05      	bge.n	800350a <CO_fifo_getOccupied+0x28>
        sizeOccupied += (int)fifo->bufSize;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	461a      	mov	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	4413      	add	r3, r2
 8003508:	60fb      	str	r3, [r7, #12]
    }

    return (size_t) sizeOccupied;
 800350a:	68fb      	ldr	r3, [r7, #12]
}
 800350c:	4618      	mov	r0, r3
 800350e:	3714      	adds	r7, #20
 8003510:	46bd      	mov	sp, r7
 8003512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003516:	4770      	bx	lr

08003518 <CO_SDOclient_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SDOclient_receive(void *object, void *msg) {
 8003518:	b580      	push	{r7, lr}
 800351a:	b086      	sub	sp, #24
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
 8003520:	6039      	str	r1, [r7, #0]
    CO_SDOclient_t *SDO_C = (CO_SDOclient_t*)object;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	791b      	ldrb	r3, [r3, #4]
 800352a:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 800352c:	683b      	ldr	r3, [r7, #0]
 800352e:	3305      	adds	r3, #5
 8003530:	60fb      	str	r3, [r7, #12]

    /* Ignore messages in idle state and messages with wrong length. Ignore
     * message also if previous message was not processed yet and not abort */
    if (SDO_C->state != CO_SDO_ST_IDLE && DLC == 8U
 8003532:	697b      	ldr	r3, [r7, #20]
 8003534:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003538:	b2db      	uxtb	r3, r3
 800353a:	2b00      	cmp	r3, #0
 800353c:	d014      	beq.n	8003568 <CO_SDOclient_receive+0x50>
 800353e:	7cfb      	ldrb	r3, [r7, #19]
 8003540:	2b08      	cmp	r3, #8
 8003542:	d111      	bne.n	8003568 <CO_SDOclient_receive+0x50>
        && (!CO_FLAG_READ(SDO_C->CANrxNew) || data[0] == 0x80)
 8003544:	697b      	ldr	r3, [r7, #20]
 8003546:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003548:	2b00      	cmp	r3, #0
 800354a:	d003      	beq.n	8003554 <CO_SDOclient_receive+0x3c>
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	781b      	ldrb	r3, [r3, #0]
 8003550:	2b80      	cmp	r3, #128	; 0x80
 8003552:	d109      	bne.n	8003568 <CO_SDOclient_receive+0x50>
            || (SDO_C->state != CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_SREQ
                && SDO_C->state != CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP)
        ) {
#endif
            /* copy data and set 'new message' flag */
            memcpy((void *)&SDO_C->CANrxData[0], (const void *)&data[0], 8);
 8003554:	697b      	ldr	r3, [r7, #20]
 8003556:	3370      	adds	r3, #112	; 0x70
 8003558:	2208      	movs	r2, #8
 800355a:	68f9      	ldr	r1, [r7, #12]
 800355c:	4618      	mov	r0, r3
 800355e:	f010 fd8f 	bl	8014080 <memcpy>
            CO_FLAG_SET(SDO_C->CANrxNew);
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	2201      	movs	r2, #1
 8003566:	66da      	str	r2, [r3, #108]	; 0x6c
#endif
            }
        }
#endif /* (CO_CONFIG_SDO_CLI) & CO_CONFIG_SDO_CLI_BLOCK */
    }
}
 8003568:	bf00      	nop
 800356a:	3718      	adds	r7, #24
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}

08003570 <CO_SDOclient_init>:
                                   CO_CANmodule_t *CANdevRx,
                                   uint16_t CANdevRxIdx,
                                   CO_CANmodule_t *CANdevTx,
                                   uint16_t CANdevTxIdx,
                                   uint32_t *errInfo)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b088      	sub	sp, #32
 8003574:	af00      	add	r7, sp, #0
 8003576:	60f8      	str	r0, [r7, #12]
 8003578:	60b9      	str	r1, [r7, #8]
 800357a:	607a      	str	r2, [r7, #4]
 800357c:	70fb      	strb	r3, [r7, #3]
    /* verify arguments */
    if (SDO_C == NULL || OD_1280_SDOcliPar == NULL
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d016      	beq.n	80035b2 <CO_SDOclient_init+0x42>
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d013      	beq.n	80035b2 <CO_SDOclient_init+0x42>
        || OD_getIndex(OD_1280_SDOcliPar) < OD_H1280_SDO_CLIENT_1_PARAM
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f7ff ff5a 	bl	8003444 <OD_getIndex>
 8003590:	4603      	mov	r3, r0
 8003592:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 8003596:	d30c      	bcc.n	80035b2 <CO_SDOclient_init+0x42>
        || OD_getIndex(OD_1280_SDOcliPar) > (OD_H1280_SDO_CLIENT_1_PARAM + 0x7F)
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f7ff ff53 	bl	8003444 <OD_getIndex>
 800359e:	4603      	mov	r3, r0
 80035a0:	f5b3 5f98 	cmp.w	r3, #4864	; 0x1300
 80035a4:	d205      	bcs.n	80035b2 <CO_SDOclient_init+0x42>
        || CANdevRx==NULL || CANdevTx==NULL
 80035a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d002      	beq.n	80035b2 <CO_SDOclient_init+0x42>
 80035ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d102      	bne.n	80035b8 <CO_SDOclient_init+0x48>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80035b2:	f04f 33ff 	mov.w	r3, #4294967295
 80035b6:	e068      	b.n	800368a <CO_SDOclient_init+0x11a>
    /* Configure object variables */
#if (CO_CONFIG_SDO_CLI) & CO_CONFIG_SDO_CLI_LOCAL
    SDO_C->OD = OD;
    SDO_C->nodeId = nodeId;
#endif
    SDO_C->CANdevRx = CANdevRx;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80035bc:	601a      	str	r2, [r3, #0]
    SDO_C->CANdevRxIdx = CANdevRxIdx;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80035c2:	809a      	strh	r2, [r3, #4]
    SDO_C->CANdevTx = CANdevTx;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035c8:	609a      	str	r2, [r3, #8]
    SDO_C->CANdevTxIdx = CANdevTxIdx;
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80035ce:	819a      	strh	r2, [r3, #12]
    SDO_C->pFunctSignal = NULL;
    SDO_C->functSignalObject = NULL;
#endif

    /* prepare circular fifo buffer */
    CO_fifo_init(&SDO_C->bufFifo, SDO_C->buf,
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	f103 0038 	add.w	r0, r3, #56	; 0x38
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	3348      	adds	r3, #72	; 0x48
 80035da:	2221      	movs	r2, #33	; 0x21
 80035dc:	4619      	mov	r1, r3
 80035de:	f002 fcbd 	bl	8005f5c <CO_fifo_init>
                 CO_CONFIG_SDO_CLI_BUFFER_SIZE + 1);

    /* Get parameters from Object Dictionary (initial values) */
    uint8_t maxSubIndex, nodeIDOfTheSDOServer;
    uint32_t COB_IDClientToServer, COB_IDServerToClient;
    ODR_t odRet0 = OD_get_u8(OD_1280_SDOcliPar, 0, &maxSubIndex, true);
 80035e2:	f107 021a 	add.w	r2, r7, #26
 80035e6:	2301      	movs	r3, #1
 80035e8:	2100      	movs	r1, #0
 80035ea:	6878      	ldr	r0, [r7, #4]
 80035ec:	f7ff ff3b 	bl	8003466 <OD_get_u8>
 80035f0:	4603      	mov	r3, r0
 80035f2:	77fb      	strb	r3, [r7, #31]
    ODR_t odRet1 = OD_get_u32(OD_1280_SDOcliPar, 1, &COB_IDClientToServer, true);
 80035f4:	f107 0214 	add.w	r2, r7, #20
 80035f8:	2301      	movs	r3, #1
 80035fa:	2101      	movs	r1, #1
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f7ff ff47 	bl	8003490 <OD_get_u32>
 8003602:	4603      	mov	r3, r0
 8003604:	77bb      	strb	r3, [r7, #30]
    ODR_t odRet2 = OD_get_u32(OD_1280_SDOcliPar, 2, &COB_IDServerToClient, true);
 8003606:	f107 0210 	add.w	r2, r7, #16
 800360a:	2301      	movs	r3, #1
 800360c:	2102      	movs	r1, #2
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f7ff ff3e 	bl	8003490 <OD_get_u32>
 8003614:	4603      	mov	r3, r0
 8003616:	777b      	strb	r3, [r7, #29]
    ODR_t odRet3 = OD_get_u8(OD_1280_SDOcliPar, 3, &nodeIDOfTheSDOServer, true);
 8003618:	f107 0219 	add.w	r2, r7, #25
 800361c:	2301      	movs	r3, #1
 800361e:	2103      	movs	r1, #3
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f7ff ff20 	bl	8003466 <OD_get_u8>
 8003626:	4603      	mov	r3, r0
 8003628:	773b      	strb	r3, [r7, #28]

    if (odRet0 != ODR_OK || maxSubIndex != 3
 800362a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10e      	bne.n	8003650 <CO_SDOclient_init+0xe0>
 8003632:	7ebb      	ldrb	r3, [r7, #26]
 8003634:	2b03      	cmp	r3, #3
 8003636:	d10b      	bne.n	8003650 <CO_SDOclient_init+0xe0>
        || odRet1 != ODR_OK || odRet2 != ODR_OK || odRet3 != ODR_OK
 8003638:	f997 301e 	ldrsb.w	r3, [r7, #30]
 800363c:	2b00      	cmp	r3, #0
 800363e:	d107      	bne.n	8003650 <CO_SDOclient_init+0xe0>
 8003640:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d103      	bne.n	8003650 <CO_SDOclient_init+0xe0>
 8003648:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800364c:	2b00      	cmp	r3, #0
 800364e:	d00c      	beq.n	800366a <CO_SDOclient_init+0xfa>
    ) {
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1280_SDOcliPar);
 8003650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003652:	2b00      	cmp	r3, #0
 8003654:	d006      	beq.n	8003664 <CO_SDOclient_init+0xf4>
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f7ff fef4 	bl	8003444 <OD_getIndex>
 800365c:	4603      	mov	r3, r0
 800365e:	461a      	mov	r2, r3
 8003660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003662:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8003664:	f06f 030b 	mvn.w	r3, #11
 8003668:	e00f      	b.n	800368a <CO_SDOclient_init+0x11a>
    /* set to zero to make sure CO_SDOclient_setup() will reconfigure CAN */
    SDO_C->COB_IDClientToServer = 0;
    SDO_C->COB_IDServerToClient = 0;
#endif

    CO_SDO_return_t cliSetupRet = CO_SDOclient_setup(SDO_C,
 800366a:	6979      	ldr	r1, [r7, #20]
 800366c:	693a      	ldr	r2, [r7, #16]
 800366e:	7e7b      	ldrb	r3, [r7, #25]
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f000 f80f 	bl	8003694 <CO_SDOclient_setup>
 8003676:	4603      	mov	r3, r0
 8003678:	76fb      	strb	r3, [r7, #27]
                                                     COB_IDClientToServer,
                                                     COB_IDServerToClient,
                                                     nodeIDOfTheSDOServer);

    if (cliSetupRet != CO_SDO_RT_ok_communicationEnd) {
 800367a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d002      	beq.n	8003688 <CO_SDOclient_init+0x118>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8003682:	f04f 33ff 	mov.w	r3, #4294967295
 8003686:	e000      	b.n	800368a <CO_SDOclient_init+0x11a>
    }

    return CO_ERROR_NO;
 8003688:	2300      	movs	r3, #0
}
 800368a:	4618      	mov	r0, r3
 800368c:	3720      	adds	r7, #32
 800368e:	46bd      	mov	sp, r7
 8003690:	bd80      	pop	{r7, pc}
	...

08003694 <CO_SDOclient_setup>:
/******************************************************************************/
CO_SDO_return_t CO_SDOclient_setup(CO_SDOclient_t *SDO_C,
                                   uint32_t COB_IDClientToServer,
                                   uint32_t COB_IDServerToClient,
                                   uint8_t nodeIDOfTheSDOServer)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b08a      	sub	sp, #40	; 0x28
 8003698:	af04      	add	r7, sp, #16
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
 80036a0:	70fb      	strb	r3, [r7, #3]
    /* verify parameters */
    if (SDO_C == NULL) {
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d102      	bne.n	80036ae <CO_SDOclient_setup+0x1a>
        return CO_SDO_RT_wrongArguments;
 80036a8:	f06f 0301 	mvn.w	r3, #1
 80036ac:	e05f      	b.n	800376e <CO_SDOclient_setup+0xda>
    }

    /* Configure object variables */
    SDO_C->state = CO_SDO_ST_IDLE;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	2200      	movs	r2, #0
 80036b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    CO_FLAG_CLEAR(SDO_C->CANrxNew);
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2200      	movs	r2, #0
 80036ba:	66da      	str	r2, [r3, #108]	; 0x6c
    SDO_C->nodeIDOfTheSDOServer = nodeIDOfTheSDOServer;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	78fa      	ldrb	r2, [r7, #3]
 80036c0:	751a      	strb	r2, [r3, #20]
    SDO_C->COB_IDClientToServer = COB_IDClientToServer;
    SDO_C->COB_IDServerToClient = COB_IDServerToClient;
#endif

    /* verify valid bit */
    uint16_t CanIdC2S = ((COB_IDClientToServer & 0x80000000L) == 0) ?
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	db05      	blt.n	80036d4 <CO_SDOclient_setup+0x40>
                        (uint16_t)(COB_IDClientToServer & 0x7FF) : 0;
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	b29b      	uxth	r3, r3
    uint16_t CanIdC2S = ((COB_IDClientToServer & 0x80000000L) == 0) ?
 80036cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036d0:	b29b      	uxth	r3, r3
 80036d2:	e000      	b.n	80036d6 <CO_SDOclient_setup+0x42>
 80036d4:	2300      	movs	r3, #0
 80036d6:	82fb      	strh	r3, [r7, #22]
    uint16_t CanIdS2C = ((COB_IDServerToClient & 0x80000000L) == 0) ?
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2b00      	cmp	r3, #0
 80036dc:	db05      	blt.n	80036ea <CO_SDOclient_setup+0x56>
                        (uint16_t)(COB_IDServerToClient & 0x7FF) : 0;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	b29b      	uxth	r3, r3
    uint16_t CanIdS2C = ((COB_IDServerToClient & 0x80000000L) == 0) ?
 80036e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80036e6:	b29b      	uxth	r3, r3
 80036e8:	e000      	b.n	80036ec <CO_SDOclient_setup+0x58>
 80036ea:	2300      	movs	r3, #0
 80036ec:	82bb      	strh	r3, [r7, #20]
    if (CanIdC2S != 0 && CanIdS2C != 0) {
 80036ee:	8afb      	ldrh	r3, [r7, #22]
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d006      	beq.n	8003702 <CO_SDOclient_setup+0x6e>
 80036f4:	8abb      	ldrh	r3, [r7, #20]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d003      	beq.n	8003702 <CO_SDOclient_setup+0x6e>
        SDO_C->valid = true;
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2201      	movs	r2, #1
 80036fe:	619a      	str	r2, [r3, #24]
 8003700:	e006      	b.n	8003710 <CO_SDOclient_setup+0x7c>
    }
    else {
        CanIdC2S = 0;
 8003702:	2300      	movs	r3, #0
 8003704:	82fb      	strh	r3, [r7, #22]
        CanIdS2C = 0;
 8003706:	2300      	movs	r3, #0
 8003708:	82bb      	strh	r3, [r7, #20]
        SDO_C->valid = false;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	619a      	str	r2, [r3, #24]
    }

    /* configure SDO client CAN reception */
    CO_ReturnError_t ret = CO_CANrxBufferInit(
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	6818      	ldr	r0, [r3, #0]
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	8899      	ldrh	r1, [r3, #4]
 8003718:	8aba      	ldrh	r2, [r7, #20]
 800371a:	4b17      	ldr	r3, [pc, #92]	; (8003778 <CO_SDOclient_setup+0xe4>)
 800371c:	9302      	str	r3, [sp, #8]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	9301      	str	r3, [sp, #4]
 8003722:	2300      	movs	r3, #0
 8003724:	9300      	str	r3, [sp, #0]
 8003726:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800372a:	f004 fbff 	bl	8007f2c <CO_CANrxBufferInit>
 800372e:	4603      	mov	r3, r0
 8003730:	74fb      	strb	r3, [r7, #19]
            0,                      /* rtr */
            (void*)SDO_C,           /* object passed to receive function */
            CO_SDOclient_receive);  /* this function will process rx msg */

    /* configure SDO client CAN transmission */
    SDO_C->CANtxBuff = CO_CANtxBufferInit(
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	6898      	ldr	r0, [r3, #8]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	8999      	ldrh	r1, [r3, #12]
 800373a:	8afa      	ldrh	r2, [r7, #22]
 800373c:	2300      	movs	r3, #0
 800373e:	9301      	str	r3, [sp, #4]
 8003740:	2308      	movs	r3, #8
 8003742:	9300      	str	r3, [sp, #0]
 8003744:	2300      	movs	r3, #0
 8003746:	f004 fc4d 	bl	8007fe4 <CO_CANtxBufferInit>
 800374a:	4602      	mov	r2, r0
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	611a      	str	r2, [r3, #16]
            0,                      /* rtr */
            8,                      /* number of data bytes */
            0);                     /* synchronous message flag bit */


    if (ret != CO_ERROR_NO || SDO_C->CANtxBuff == NULL) {
 8003750:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d103      	bne.n	8003760 <CO_SDOclient_setup+0xcc>
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d105      	bne.n	800376c <CO_SDOclient_setup+0xd8>
        SDO_C->valid = false;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2200      	movs	r2, #0
 8003764:	619a      	str	r2, [r3, #24]
        return CO_SDO_RT_wrongArguments;
 8003766:	f06f 0301 	mvn.w	r3, #1
 800376a:	e000      	b.n	800376e <CO_SDOclient_setup+0xda>
    }

    return CO_SDO_RT_ok_communicationEnd;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3718      	adds	r7, #24
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
 8003776:	bf00      	nop
 8003778:	08003519 	.word	0x08003519

0800377c <CO_SDOclientDownloadInitiate>:
                                             uint16_t index,
                                             uint8_t subIndex,
                                             size_t sizeIndicated,
                                             uint16_t SDOtimeoutTime_ms,
                                             bool_t blockEnable)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	607b      	str	r3, [r7, #4]
 8003786:	460b      	mov	r3, r1
 8003788:	817b      	strh	r3, [r7, #10]
 800378a:	4613      	mov	r3, r2
 800378c:	727b      	strb	r3, [r7, #9]
    /* verify parameters */
    if (SDO_C == NULL || !SDO_C->valid) {
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d003      	beq.n	800379c <CO_SDOclientDownloadInitiate+0x20>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d102      	bne.n	80037a2 <CO_SDOclientDownloadInitiate+0x26>
        return CO_SDO_RT_wrongArguments;
 800379c:	f06f 0301 	mvn.w	r3, #1
 80037a0:	e025      	b.n	80037ee <CO_SDOclientDownloadInitiate+0x72>
    }

    /* save parameters */
    SDO_C->index = index;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	897a      	ldrh	r2, [r7, #10]
 80037a6:	839a      	strh	r2, [r3, #28]
    SDO_C->subIndex = subIndex;
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	7a7a      	ldrb	r2, [r7, #9]
 80037ac:	779a      	strb	r2, [r3, #30]
    SDO_C->sizeInd = sizeIndicated;
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	625a      	str	r2, [r3, #36]	; 0x24
    SDO_C->sizeTran = 0;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2200      	movs	r2, #0
 80037b8:	629a      	str	r2, [r3, #40]	; 0x28
    SDO_C->finished = false;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2200      	movs	r2, #0
 80037be:	621a      	str	r2, [r3, #32]
    SDO_C->SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 1000;
 80037c0:	8b3b      	ldrh	r3, [r7, #24]
 80037c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80037c6:	fb03 f202 	mul.w	r2, r3, r2
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	631a      	str	r2, [r3, #48]	; 0x30
    SDO_C->timeoutTimer = 0;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	635a      	str	r2, [r3, #52]	; 0x34
    CO_fifo_reset(&SDO_C->bufFifo);
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	3338      	adds	r3, #56	; 0x38
 80037d8:	4618      	mov	r0, r3
 80037da:	f7ff fe6e 	bl	80034ba <CO_fifo_reset>
        SDO_C->state = CO_SDO_ST_DOWNLOAD_BLK_INITIATE_REQ;
    }
    else
#endif
    {
        SDO_C->state = CO_SDO_ST_DOWNLOAD_INITIATE_REQ;
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	2211      	movs	r2, #17
 80037e2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    }

    CO_FLAG_CLEAR(SDO_C->CANrxNew);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	66da      	str	r2, [r3, #108]	; 0x6c

    return CO_SDO_RT_ok_communicationEnd;
 80037ec:	2300      	movs	r3, #0
}
 80037ee:	4618      	mov	r0, r3
 80037f0:	3710      	adds	r7, #16
 80037f2:	46bd      	mov	sp, r7
 80037f4:	bd80      	pop	{r7, pc}

080037f6 <CO_SDOclientDownloadBufWrite>:

/******************************************************************************/
size_t CO_SDOclientDownloadBufWrite(CO_SDOclient_t *SDO_C,
                                    const uint8_t *buf,
                                    size_t count)
{
 80037f6:	b580      	push	{r7, lr}
 80037f8:	b086      	sub	sp, #24
 80037fa:	af00      	add	r7, sp, #0
 80037fc:	60f8      	str	r0, [r7, #12]
 80037fe:	60b9      	str	r1, [r7, #8]
 8003800:	607a      	str	r2, [r7, #4]
    size_t ret = 0;
 8003802:	2300      	movs	r3, #0
 8003804:	617b      	str	r3, [r7, #20]
    if (SDO_C != NULL && buf != NULL) {
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2b00      	cmp	r3, #0
 800380a:	d00b      	beq.n	8003824 <CO_SDOclientDownloadBufWrite+0x2e>
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d008      	beq.n	8003824 <CO_SDOclientDownloadBufWrite+0x2e>
        ret = CO_fifo_write(&SDO_C->bufFifo, buf, count, NULL);
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8003818:	2300      	movs	r3, #0
 800381a:	687a      	ldr	r2, [r7, #4]
 800381c:	68b9      	ldr	r1, [r7, #8]
 800381e:	f002 fbbf 	bl	8005fa0 <CO_fifo_write>
 8003822:	6178      	str	r0, [r7, #20]
    }
    return ret;
 8003824:	697b      	ldr	r3, [r7, #20]
}
 8003826:	4618      	mov	r0, r3
 8003828:	3718      	adds	r7, #24
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
	...

08003830 <CO_SDOclientDownload>:
                                     bool_t abort,
                                     bool_t bufferPartial,
                                     CO_SDO_abortCode_t *SDOabortCode,
                                     size_t *sizeTransferred,
                                     uint32_t *timerNext_us)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b08a      	sub	sp, #40	; 0x28
 8003834:	af00      	add	r7, sp, #0
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	607a      	str	r2, [r7, #4]
 800383c:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; (void) bufferPartial; /* may be unused */

    CO_SDO_return_t ret = CO_SDO_RT_waitingResponse;
 800383e:	2301      	movs	r3, #1
 8003840:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    CO_SDO_abortCode_t abortCode = CO_SDO_AB_NONE;
 8003844:	2300      	movs	r3, #0
 8003846:	623b      	str	r3, [r7, #32]

    if (SDO_C == NULL || !SDO_C->valid) {
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d003      	beq.n	8003856 <CO_SDOclientDownload+0x26>
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	2b00      	cmp	r3, #0
 8003854:	d105      	bne.n	8003862 <CO_SDOclientDownload+0x32>
        abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 8003856:	4b8a      	ldr	r3, [pc, #552]	; (8003a80 <CO_SDOclientDownload+0x250>)
 8003858:	623b      	str	r3, [r7, #32]
        ret = CO_SDO_RT_wrongArguments;
 800385a:	23fe      	movs	r3, #254	; 0xfe
 800385c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003860:	e08b      	b.n	800397a <CO_SDOclientDownload+0x14a>
    }
    else if (SDO_C->state == CO_SDO_ST_IDLE) {
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b00      	cmp	r3, #0
 800386c:	d103      	bne.n	8003876 <CO_SDOclientDownload+0x46>
        ret = CO_SDO_RT_ok_communicationEnd;
 800386e:	2300      	movs	r3, #0
 8003870:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003874:	e081      	b.n	800397a <CO_SDOclientDownload+0x14a>
        }
#endif
    }
#endif /* CO_CONFIG_SDO_CLI_LOCAL */
    /* CAN data received ******************************************************/
    else if (CO_FLAG_READ(SDO_C->CANrxNew)) {
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800387a:	2b00      	cmp	r3, #0
 800387c:	d06e      	beq.n	800395c <CO_SDOclientDownload+0x12c>
        /* is SDO abort */
        if (SDO_C->CANrxData[0] == 0x80) {
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003884:	2b80      	cmp	r3, #128	; 0x80
 8003886:	d10d      	bne.n	80038a4 <CO_SDOclientDownload+0x74>
            uint32_t code;
            memcpy(&code, &SDO_C->CANrxData[4], sizeof(code));
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	3374      	adds	r3, #116	; 0x74
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	617b      	str	r3, [r7, #20]
            abortCode = (CO_SDO_abortCode_t)CO_SWAP_32(code);
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	623b      	str	r3, [r7, #32]
            SDO_C->state = CO_SDO_ST_IDLE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            ret = CO_SDO_RT_endedWithServerAbort;
 800389c:	23f6      	movs	r3, #246	; 0xf6
 800389e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80038a2:	e052      	b.n	800394a <CO_SDOclientDownload+0x11a>
        }
        else if (abort) {
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00c      	beq.n	80038c4 <CO_SDOclientDownload+0x94>
            abortCode = (SDOabortCode != NULL)
                      ? *SDOabortCode : CO_SDO_AB_DEVICE_INCOMPAT;
 80038aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d002      	beq.n	80038b6 <CO_SDOclientDownload+0x86>
 80038b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	e000      	b.n	80038b8 <CO_SDOclientDownload+0x88>
 80038b6:	4b72      	ldr	r3, [pc, #456]	; (8003a80 <CO_SDOclientDownload+0x250>)
            abortCode = (SDOabortCode != NULL)
 80038b8:	623b      	str	r3, [r7, #32]
            SDO_C->state = CO_SDO_ST_ABORT;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 80038c2:	e042      	b.n	800394a <CO_SDOclientDownload+0x11a>
        }
        else switch (SDO_C->state) {
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80038ca:	b2db      	uxtb	r3, r3
 80038cc:	2b12      	cmp	r3, #18
 80038ce:	d135      	bne.n	800393c <CO_SDOclientDownload+0x10c>
            case CO_SDO_ST_DOWNLOAD_INITIATE_RSP: {
                if (SDO_C->CANrxData[0] == 0x60) {
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80038d6:	2b60      	cmp	r3, #96	; 0x60
 80038d8:	d129      	bne.n	800392e <CO_SDOclientDownload+0xfe>
                    /* verify index and subindex */
                    uint16_t index;
                    uint8_t subindex;
                    index = ((uint16_t) SDO_C->CANrxData[2]) << 8;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 80038e0:	b29b      	uxth	r3, r3
 80038e2:	021b      	lsls	r3, r3, #8
 80038e4:	83fb      	strh	r3, [r7, #30]
                    index |= SDO_C->CANrxData[1];
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	8bfb      	ldrh	r3, [r7, #30]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	83fb      	strh	r3, [r7, #30]
                    subindex = SDO_C->CANrxData[3];
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 80038fa:	777b      	strb	r3, [r7, #29]
                    if (index != SDO_C->index || subindex != SDO_C->subIndex) {
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8b9b      	ldrh	r3, [r3, #28]
 8003900:	8bfa      	ldrh	r2, [r7, #30]
 8003902:	429a      	cmp	r2, r3
 8003904:	d104      	bne.n	8003910 <CO_SDOclientDownload+0xe0>
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	7f9b      	ldrb	r3, [r3, #30]
 800390a:	7f7a      	ldrb	r2, [r7, #29]
 800390c:	429a      	cmp	r2, r3
 800390e:	d006      	beq.n	800391e <CO_SDOclientDownload+0xee>
                        abortCode = CO_SDO_AB_PRAM_INCOMPAT;
 8003910:	4b5c      	ldr	r3, [pc, #368]	; (8003a84 <CO_SDOclientDownload+0x254>)
 8003912:	623b      	str	r3, [r7, #32]
                        SDO_C->state = CO_SDO_ST_ABORT;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	2201      	movs	r2, #1
 8003918:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                        break;
 800391c:	e015      	b.n	800394a <CO_SDOclientDownload+0x11a>
                        SDO_C->toggle = 0x00;
                        SDO_C->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
                    }
#else
                    /* expedited transfer */
                    SDO_C->state = CO_SDO_ST_IDLE;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	2200      	movs	r2, #0
 8003922:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                    ret = CO_SDO_RT_ok_communicationEnd;
 8003926:	2300      	movs	r3, #0
 8003928:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
                else {
                    abortCode = CO_SDO_AB_CMD;
                    SDO_C->state = CO_SDO_ST_ABORT;
                }
                break;
 800392c:	e00d      	b.n	800394a <CO_SDOclientDownload+0x11a>
                    abortCode = CO_SDO_AB_CMD;
 800392e:	4b56      	ldr	r3, [pc, #344]	; (8003a88 <CO_SDOclientDownload+0x258>)
 8003930:	623b      	str	r3, [r7, #32]
                    SDO_C->state = CO_SDO_ST_ABORT;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                break;
 800393a:	e006      	b.n	800394a <CO_SDOclientDownload+0x11a>
                break;
            }
#endif /* (CO_CONFIG_SDO_CLI) & CO_CONFIG_SDO_CLI_BLOCK */

            default: {
                abortCode = CO_SDO_AB_CMD;
 800393c:	4b52      	ldr	r3, [pc, #328]	; (8003a88 <CO_SDOclientDownload+0x258>)
 800393e:	623b      	str	r3, [r7, #32]
                SDO_C->state = CO_SDO_ST_ABORT;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                break;
 8003948:	bf00      	nop
            }
        }
        SDO_C->timeoutTimer = 0;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	635a      	str	r2, [r3, #52]	; 0x34
        timeDifference_us = 0;
 8003950:	2300      	movs	r3, #0
 8003952:	60bb      	str	r3, [r7, #8]
        CO_FLAG_CLEAR(SDO_C->CANrxNew);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	2200      	movs	r2, #0
 8003958:	66da      	str	r2, [r3, #108]	; 0x6c
 800395a:	e00e      	b.n	800397a <CO_SDOclientDownload+0x14a>
    }
    else if (abort) {
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2b00      	cmp	r3, #0
 8003960:	d00b      	beq.n	800397a <CO_SDOclientDownload+0x14a>
        abortCode = (SDOabortCode != NULL)
                  ? *SDOabortCode : CO_SDO_AB_DEVICE_INCOMPAT;
 8003962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003964:	2b00      	cmp	r3, #0
 8003966:	d002      	beq.n	800396e <CO_SDOclientDownload+0x13e>
 8003968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	e000      	b.n	8003970 <CO_SDOclientDownload+0x140>
 800396e:	4b44      	ldr	r3, [pc, #272]	; (8003a80 <CO_SDOclientDownload+0x250>)
        abortCode = (SDOabortCode != NULL)
 8003970:	623b      	str	r3, [r7, #32]
        SDO_C->state = CO_SDO_ST_ABORT;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	2201      	movs	r2, #1
 8003976:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    }

    /* Timeout timers and transmit bufferFull flag ****************************/
    if (ret == CO_SDO_RT_waitingResponse) {
 800397a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800397e:	2b01      	cmp	r3, #1
 8003980:	d11f      	bne.n	80039c2 <CO_SDOclientDownload+0x192>
        if (SDO_C->timeoutTimer < SDO_C->SDOtimeoutTime_us) {
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800398a:	429a      	cmp	r2, r3
 800398c:	d205      	bcs.n	800399a <CO_SDOclientDownload+0x16a>
            SDO_C->timeoutTimer += timeDifference_us;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	441a      	add	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	635a      	str	r2, [r3, #52]	; 0x34
        }
        if (SDO_C->timeoutTimer >= SDO_C->SDOtimeoutTime_us) {
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d305      	bcc.n	80039b2 <CO_SDOclientDownload+0x182>
            abortCode = CO_SDO_AB_TIMEOUT;
 80039a6:	4b39      	ldr	r3, [pc, #228]	; (8003a8c <CO_SDOclientDownload+0x25c>)
 80039a8:	623b      	str	r3, [r7, #32]
            SDO_C->state = CO_SDO_ST_ABORT;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2201      	movs	r2, #1
 80039ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            if (*timerNext_us > diff) {
                *timerNext_us = diff;
            }
        }
#endif
        if (SDO_C->CANtxBuff->bufferFull) {
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	691b      	ldr	r3, [r3, #16]
 80039b6:	691b      	ldr	r3, [r3, #16]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d002      	beq.n	80039c2 <CO_SDOclientDownload+0x192>
            ret = CO_SDO_RT_transmittBufferFull;
 80039bc:	2304      	movs	r3, #4
 80039be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    /* Transmit CAN data ******************************************************/
    if (ret == CO_SDO_RT_waitingResponse) {
 80039c2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	f040 80a5 	bne.w	8003b16 <CO_SDOclientDownload+0x2e6>
        size_t count;
        memset((void *)&SDO_C->CANtxBuff->data[0], 0, 8);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	691b      	ldr	r3, [r3, #16]
 80039d0:	3305      	adds	r3, #5
 80039d2:	2208      	movs	r2, #8
 80039d4:	2100      	movs	r1, #0
 80039d6:	4618      	mov	r0, r3
 80039d8:	f010 fb7a 	bl	80140d0 <memset>

        switch (SDO_C->state) {
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b11      	cmp	r3, #17
 80039e6:	f040 8098 	bne.w	8003b1a <CO_SDOclientDownload+0x2ea>
        case CO_SDO_ST_DOWNLOAD_INITIATE_REQ: {
            SDO_C->CANtxBuff->data[0] = 0x20;
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	691b      	ldr	r3, [r3, #16]
 80039ee:	2220      	movs	r2, #32
 80039f0:	715a      	strb	r2, [r3, #5]
            SDO_C->CANtxBuff->data[1] = (uint8_t)SDO_C->index;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	8b9a      	ldrh	r2, [r3, #28]
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	691b      	ldr	r3, [r3, #16]
 80039fa:	b2d2      	uxtb	r2, r2
 80039fc:	719a      	strb	r2, [r3, #6]
            SDO_C->CANtxBuff->data[2] = (uint8_t)(SDO_C->index >> 8);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	8b9b      	ldrh	r3, [r3, #28]
 8003a02:	0a1b      	lsrs	r3, r3, #8
 8003a04:	b29a      	uxth	r2, r3
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	691b      	ldr	r3, [r3, #16]
 8003a0a:	b2d2      	uxtb	r2, r2
 8003a0c:	71da      	strb	r2, [r3, #7]
            SDO_C->CANtxBuff->data[3] = SDO_C->subIndex;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	7f92      	ldrb	r2, [r2, #30]
 8003a16:	721a      	strb	r2, [r3, #8]

            /* get count of data bytes to transfer */
            count = CO_fifo_getOccupied(&SDO_C->bufFifo);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	3338      	adds	r3, #56	; 0x38
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f7ff fd60 	bl	80034e2 <CO_fifo_getOccupied>
 8003a22:	61b8      	str	r0, [r7, #24]

            /* is expedited transfer, <= 4bytes of data */
            if ((SDO_C->sizeInd == 0 && count <= 4)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d102      	bne.n	8003a32 <CO_SDOclientDownload+0x202>
 8003a2c:	69bb      	ldr	r3, [r7, #24]
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d907      	bls.n	8003a42 <CO_SDOclientDownload+0x212>
                || (SDO_C->sizeInd > 0 && SDO_C->sizeInd <= 4)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d063      	beq.n	8003b02 <CO_SDOclientDownload+0x2d2>
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	d85f      	bhi.n	8003b02 <CO_SDOclientDownload+0x2d2>
            ) {
                SDO_C->CANtxBuff->data[0] |= 0x02;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	795a      	ldrb	r2, [r3, #5]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	691b      	ldr	r3, [r3, #16]
 8003a4c:	f042 0202 	orr.w	r2, r2, #2
 8003a50:	b2d2      	uxtb	r2, r2
 8003a52:	715a      	strb	r2, [r3, #5]

                /* verify length, indicate data size */
                if (count == 0 || (SDO_C->sizeInd > 0 &&
 8003a54:	69bb      	ldr	r3, [r7, #24]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d008      	beq.n	8003a6c <CO_SDOclientDownload+0x23c>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d018      	beq.n	8003a94 <CO_SDOclientDownload+0x264>
                                   SDO_C->sizeInd != count)
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                if (count == 0 || (SDO_C->sizeInd > 0 &&
 8003a66:	69ba      	ldr	r2, [r7, #24]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d013      	beq.n	8003a94 <CO_SDOclientDownload+0x264>
                ) {
                    SDO_C->state = CO_SDO_ST_IDLE;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                    abortCode = CO_SDO_AB_TYPE_MISMATCH;
 8003a74:	4b06      	ldr	r3, [pc, #24]	; (8003a90 <CO_SDOclientDownload+0x260>)
 8003a76:	623b      	str	r3, [r7, #32]
                    ret = CO_SDO_RT_endedWithClientAbort;
 8003a78:	23f7      	movs	r3, #247	; 0xf7
 8003a7a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    break;
 8003a7e:	e04d      	b.n	8003b1c <CO_SDOclientDownload+0x2ec>
 8003a80:	06040047 	.word	0x06040047
 8003a84:	06040043 	.word	0x06040043
 8003a88:	05040001 	.word	0x05040001
 8003a8c:	05040000 	.word	0x05040000
 8003a90:	06070010 	.word	0x06070010
                }
                if (SDO_C->sizeInd > 0) {
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d011      	beq.n	8003ac0 <CO_SDOclientDownload+0x290>
                    SDO_C->CANtxBuff->data[0] |= 0x01 | ((4 - count) << 2);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	795a      	ldrb	r2, [r3, #5]
 8003aa2:	69bb      	ldr	r3, [r7, #24]
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	f1c3 0304 	rsb	r3, r3, #4
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	009b      	lsls	r3, r3, #2
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	b2da      	uxtb	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	f042 0201 	orr.w	r2, r2, #1
 8003abc:	b2d2      	uxtb	r2, r2
 8003abe:	715a      	strb	r2, [r3, #5]
                }

                /* copy data */
                CO_fifo_read(&SDO_C->bufFifo,
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f103 0038 	add.w	r0, r3, #56	; 0x38
                             &SDO_C->CANtxBuff->data[4], count, NULL);
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	691b      	ldr	r3, [r3, #16]
                CO_fifo_read(&SDO_C->bufFifo,
 8003aca:	f103 0109 	add.w	r1, r3, #9
 8003ace:	2300      	movs	r3, #0
 8003ad0:	69ba      	ldr	r2, [r7, #24]
 8003ad2:	f002 fabd 	bl	8006050 <CO_fifo_read>
                SDO_C->sizeTran = count;
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	69ba      	ldr	r2, [r7, #24]
 8003ada:	629a      	str	r2, [r3, #40]	; 0x28
                SDO_C->finished = true;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	621a      	str	r2, [r3, #32]
                break;
#endif
            }

            /* reset timeout timer and send message */
            SDO_C->timeoutTimer = 0;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	635a      	str	r2, [r3, #52]	; 0x34
            CO_CANsend(SDO_C->CANdevTx, SDO_C->CANtxBuff);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	691b      	ldr	r3, [r3, #16]
 8003af0:	4619      	mov	r1, r3
 8003af2:	4610      	mov	r0, r2
 8003af4:	f004 fb3c 	bl	8008170 <CO_CANsend>
            SDO_C->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2212      	movs	r2, #18
 8003afc:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            break;
 8003b00:	e00c      	b.n	8003b1c <CO_SDOclientDownload+0x2ec>
                SDO_C->state = CO_SDO_ST_IDLE;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
 8003b0a:	4b29      	ldr	r3, [pc, #164]	; (8003bb0 <CO_SDOclientDownload+0x380>)
 8003b0c:	623b      	str	r3, [r7, #32]
                ret = CO_SDO_RT_endedWithClientAbort;
 8003b0e:	23f7      	movs	r3, #247	; 0xf7
 8003b10:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                break;
 8003b14:	e002      	b.n	8003b1c <CO_SDOclientDownload+0x2ec>

        default: {
            break;
        }
        }
    }
 8003b16:	bf00      	nop
 8003b18:	e000      	b.n	8003b1c <CO_SDOclientDownload+0x2ec>
            break;
 8003b1a:	bf00      	nop

    if (ret == CO_SDO_RT_waitingResponse) {
 8003b1c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d132      	bne.n	8003b8a <CO_SDOclientDownload+0x35a>
        if (SDO_C->state == CO_SDO_ST_ABORT) {
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	2b01      	cmp	r3, #1
 8003b2e:	d12c      	bne.n	8003b8a <CO_SDOclientDownload+0x35a>
            uint32_t code = CO_SWAP_32((uint32_t)abortCode);
 8003b30:	6a3b      	ldr	r3, [r7, #32]
 8003b32:	613b      	str	r3, [r7, #16]
            /* Send SDO abort message */
            SDO_C->CANtxBuff->data[0] = 0x80;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	2280      	movs	r2, #128	; 0x80
 8003b3a:	715a      	strb	r2, [r3, #5]
            SDO_C->CANtxBuff->data[1] = (uint8_t)SDO_C->index;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8b9a      	ldrh	r2, [r3, #28]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	b2d2      	uxtb	r2, r2
 8003b46:	719a      	strb	r2, [r3, #6]
            SDO_C->CANtxBuff->data[2] = (uint8_t)(SDO_C->index >> 8);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	8b9b      	ldrh	r3, [r3, #28]
 8003b4c:	0a1b      	lsrs	r3, r3, #8
 8003b4e:	b29a      	uxth	r2, r3
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	691b      	ldr	r3, [r3, #16]
 8003b54:	b2d2      	uxtb	r2, r2
 8003b56:	71da      	strb	r2, [r3, #7]
            SDO_C->CANtxBuff->data[3] = SDO_C->subIndex;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	691b      	ldr	r3, [r3, #16]
 8003b5c:	68fa      	ldr	r2, [r7, #12]
 8003b5e:	7f92      	ldrb	r2, [r2, #30]
 8003b60:	721a      	strb	r2, [r3, #8]

            memcpy(&SDO_C->CANtxBuff->data[4], &code, sizeof(code));
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	691b      	ldr	r3, [r3, #16]
 8003b66:	3309      	adds	r3, #9
 8003b68:	693a      	ldr	r2, [r7, #16]
 8003b6a:	601a      	str	r2, [r3, #0]
            CO_CANsend(SDO_C->CANdevTx, SDO_C->CANtxBuff);
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	689a      	ldr	r2, [r3, #8]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	4619      	mov	r1, r3
 8003b76:	4610      	mov	r0, r2
 8003b78:	f004 fafa 	bl	8008170 <CO_CANsend>
            SDO_C->state = CO_SDO_ST_IDLE;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            ret = CO_SDO_RT_endedWithClientAbort;
 8003b84:	23f7      	movs	r3, #247	; 0xf7
 8003b86:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            ret = CO_SDO_RT_blockDownldInProgress;
        }
#endif
    }

    if (sizeTransferred != NULL) {
 8003b8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d003      	beq.n	8003b98 <CO_SDOclientDownload+0x368>
        *sizeTransferred = SDO_C->sizeTran;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003b96:	601a      	str	r2, [r3, #0]
    }
    if (SDOabortCode != NULL) {
 8003b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d002      	beq.n	8003ba4 <CO_SDOclientDownload+0x374>
        *SDOabortCode = abortCode;
 8003b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ba0:	6a3a      	ldr	r2, [r7, #32]
 8003ba2:	601a      	str	r2, [r3, #0]
    }

    return ret;
 8003ba4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003ba8:	4618      	mov	r0, r3
 8003baa:	3728      	adds	r7, #40	; 0x28
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}
 8003bb0:	06010000 	.word	0x06010000

08003bb4 <CO_SDOclientUploadInitiate>:
CO_SDO_return_t CO_SDOclientUploadInitiate(CO_SDOclient_t *SDO_C,
                                           uint16_t index,
                                           uint8_t subIndex,
                                           uint16_t SDOtimeoutTime_ms,
                                           bool_t blockEnable)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b084      	sub	sp, #16
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	4608      	mov	r0, r1
 8003bbe:	4611      	mov	r1, r2
 8003bc0:	461a      	mov	r2, r3
 8003bc2:	4603      	mov	r3, r0
 8003bc4:	817b      	strh	r3, [r7, #10]
 8003bc6:	460b      	mov	r3, r1
 8003bc8:	727b      	strb	r3, [r7, #9]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	80fb      	strh	r3, [r7, #6]
    /* verify parameters */
    if (SDO_C == NULL || !SDO_C->valid) {
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d003      	beq.n	8003bdc <CO_SDOclientUploadInitiate+0x28>
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	699b      	ldr	r3, [r3, #24]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d102      	bne.n	8003be2 <CO_SDOclientUploadInitiate+0x2e>
        return CO_SDO_RT_wrongArguments;
 8003bdc:	f06f 0301 	mvn.w	r3, #1
 8003be0:	e025      	b.n	8003c2e <CO_SDOclientUploadInitiate+0x7a>
    }

    /* save parameters */
    SDO_C->index = index;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	897a      	ldrh	r2, [r7, #10]
 8003be6:	839a      	strh	r2, [r3, #28]
    SDO_C->subIndex = subIndex;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	7a7a      	ldrb	r2, [r7, #9]
 8003bec:	779a      	strb	r2, [r3, #30]
    SDO_C->sizeInd = 0;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	2200      	movs	r2, #0
 8003bf2:	625a      	str	r2, [r3, #36]	; 0x24
    SDO_C->sizeTran = 0;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	629a      	str	r2, [r3, #40]	; 0x28
    SDO_C->finished = false;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	621a      	str	r2, [r3, #32]
    CO_fifo_reset(&SDO_C->bufFifo);
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	3338      	adds	r3, #56	; 0x38
 8003c04:	4618      	mov	r0, r3
 8003c06:	f7ff fc58 	bl	80034ba <CO_fifo_reset>
    SDO_C->SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 1000;
 8003c0a:	88fb      	ldrh	r3, [r7, #6]
 8003c0c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003c10:	fb03 f202 	mul.w	r2, r3, r2
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	631a      	str	r2, [r3, #48]	; 0x30
    SDO_C->timeoutTimer = 0;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	635a      	str	r2, [r3, #52]	; 0x34
        SDO_C->state = CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ;
    }
    else
#endif
    {
        SDO_C->state = CO_SDO_ST_UPLOAD_INITIATE_REQ;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2221      	movs	r2, #33	; 0x21
 8003c22:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    }

    CO_FLAG_CLEAR(SDO_C->CANrxNew);
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	2200      	movs	r2, #0
 8003c2a:	66da      	str	r2, [r3, #108]	; 0x6c

    return CO_SDO_RT_ok_communicationEnd;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
	...

08003c38 <CO_SDOclientUpload>:
                                   bool_t abort,
                                   CO_SDO_abortCode_t *SDOabortCode,
                                   size_t *sizeIndicated,
                                   size_t *sizeTransferred,
                                   uint32_t *timerNext_us)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b08a      	sub	sp, #40	; 0x28
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	60f8      	str	r0, [r7, #12]
 8003c40:	60b9      	str	r1, [r7, #8]
 8003c42:	607a      	str	r2, [r7, #4]
 8003c44:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    CO_SDO_return_t ret = CO_SDO_RT_waitingResponse;
 8003c46:	2301      	movs	r3, #1
 8003c48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    CO_SDO_abortCode_t abortCode = CO_SDO_AB_NONE;
 8003c4c:	2300      	movs	r3, #0
 8003c4e:	623b      	str	r3, [r7, #32]

    if (SDO_C == NULL || !SDO_C->valid) {
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d003      	beq.n	8003c5e <CO_SDOclientUpload+0x26>
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d105      	bne.n	8003c6a <CO_SDOclientUpload+0x32>
        abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 8003c5e:	4b99      	ldr	r3, [pc, #612]	; (8003ec4 <CO_SDOclientUpload+0x28c>)
 8003c60:	623b      	str	r3, [r7, #32]
        ret = CO_SDO_RT_wrongArguments;
 8003c62:	23fe      	movs	r3, #254	; 0xfe
 8003c64:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003c68:	e0bc      	b.n	8003de4 <CO_SDOclientUpload+0x1ac>
    }
    else if (SDO_C->state == CO_SDO_ST_IDLE) {
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003c70:	b2db      	uxtb	r3, r3
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d103      	bne.n	8003c7e <CO_SDOclientUpload+0x46>
        ret = CO_SDO_RT_ok_communicationEnd;
 8003c76:	2300      	movs	r3, #0
 8003c78:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003c7c:	e0b2      	b.n	8003de4 <CO_SDOclientUpload+0x1ac>
        }
#endif
    }
#endif /* CO_CONFIG_SDO_CLI_LOCAL */
    /* CAN data received ******************************************************/
    else if (CO_FLAG_READ(SDO_C->CANrxNew)) {
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	f000 809f 	beq.w	8003dc6 <CO_SDOclientUpload+0x18e>
        /* is SDO abort */
        if (SDO_C->CANrxData[0] == 0x80) {
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003c8e:	2b80      	cmp	r3, #128	; 0x80
 8003c90:	d10d      	bne.n	8003cae <CO_SDOclientUpload+0x76>
            uint32_t code;
            memcpy(&code, &SDO_C->CANrxData[4], sizeof(code));
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	3374      	adds	r3, #116	; 0x74
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	617b      	str	r3, [r7, #20]
            abortCode = (CO_SDO_abortCode_t)CO_SWAP_32(code);
 8003c9a:	697b      	ldr	r3, [r7, #20]
 8003c9c:	623b      	str	r3, [r7, #32]
            SDO_C->state = CO_SDO_ST_IDLE;
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            ret = CO_SDO_RT_endedWithServerAbort;
 8003ca6:	23f6      	movs	r3, #246	; 0xf6
 8003ca8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003cac:	e082      	b.n	8003db4 <CO_SDOclientUpload+0x17c>
        }
        else if (abort) {
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d00c      	beq.n	8003cce <CO_SDOclientUpload+0x96>
            abortCode = (SDOabortCode != NULL)
                      ? *SDOabortCode : CO_SDO_AB_DEVICE_INCOMPAT;
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d002      	beq.n	8003cc0 <CO_SDOclientUpload+0x88>
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	e000      	b.n	8003cc2 <CO_SDOclientUpload+0x8a>
 8003cc0:	4b80      	ldr	r3, [pc, #512]	; (8003ec4 <CO_SDOclientUpload+0x28c>)
            abortCode = (SDOabortCode != NULL)
 8003cc2:	623b      	str	r3, [r7, #32]
            SDO_C->state = CO_SDO_ST_ABORT;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8003ccc:	e072      	b.n	8003db4 <CO_SDOclientUpload+0x17c>
        }
        else switch (SDO_C->state) {
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b22      	cmp	r3, #34	; 0x22
 8003cd8:	d165      	bne.n	8003da6 <CO_SDOclientUpload+0x16e>
            case CO_SDO_ST_UPLOAD_INITIATE_RSP: {
                if ((SDO_C->CANrxData[0] & 0xF0) == 0x40) {
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003ce0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003ce4:	2b40      	cmp	r3, #64	; 0x40
 8003ce6:	d157      	bne.n	8003d98 <CO_SDOclientUpload+0x160>
                    /* verify index and subindex */
                    uint16_t index;
                    uint8_t subindex;
                    index = ((uint16_t) SDO_C->CANrxData[2]) << 8;
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	f893 3072 	ldrb.w	r3, [r3, #114]	; 0x72
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	021b      	lsls	r3, r3, #8
 8003cf2:	837b      	strh	r3, [r7, #26]
                    index |= SDO_C->CANrxData[1];
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	f893 3071 	ldrb.w	r3, [r3, #113]	; 0x71
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	8b7b      	ldrh	r3, [r7, #26]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	837b      	strh	r3, [r7, #26]
                    subindex = SDO_C->CANrxData[3];
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	f893 3073 	ldrb.w	r3, [r3, #115]	; 0x73
 8003d08:	767b      	strb	r3, [r7, #25]
                    if (index != SDO_C->index || subindex != SDO_C->subIndex) {
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	8b9b      	ldrh	r3, [r3, #28]
 8003d0e:	8b7a      	ldrh	r2, [r7, #26]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d104      	bne.n	8003d1e <CO_SDOclientUpload+0xe6>
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	7f9b      	ldrb	r3, [r3, #30]
 8003d18:	7e7a      	ldrb	r2, [r7, #25]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	d006      	beq.n	8003d2c <CO_SDOclientUpload+0xf4>
                        abortCode = CO_SDO_AB_PRAM_INCOMPAT;
 8003d1e:	4b6a      	ldr	r3, [pc, #424]	; (8003ec8 <CO_SDOclientUpload+0x290>)
 8003d20:	623b      	str	r3, [r7, #32]
                        SDO_C->state = CO_SDO_ST_ABORT;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2201      	movs	r2, #1
 8003d26:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                        break;
 8003d2a:	e043      	b.n	8003db4 <CO_SDOclientUpload+0x17c>
                    }

                    if (SDO_C->CANrxData[0] & 0x02) {
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d027      	beq.n	8003d8a <CO_SDOclientUpload+0x152>
                        /* Expedited transfer */
                        size_t count = 4;
 8003d3a:	2304      	movs	r3, #4
 8003d3c:	61fb      	str	r3, [r7, #28]
                        /* is size indicated? */
                        if (SDO_C->CANrxData[0] & 0x01) {
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003d44:	f003 0301 	and.w	r3, r3, #1
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d009      	beq.n	8003d60 <CO_SDOclientUpload+0x128>
                            count -= (SDO_C->CANrxData[0] >> 2) & 0x03;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8003d52:	089b      	lsrs	r3, r3, #2
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	f003 0303 	and.w	r3, r3, #3
 8003d5a:	69fa      	ldr	r2, [r7, #28]
 8003d5c:	1ad3      	subs	r3, r2, r3
 8003d5e:	61fb      	str	r3, [r7, #28]
                        }
                        /* copy data, indicate size and finish */
                        CO_fifo_write(&SDO_C->bufFifo,
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	f103 0038 	add.w	r0, r3, #56	; 0x38
                                      &SDO_C->CANrxData[4],
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	f103 0174 	add.w	r1, r3, #116	; 0x74
                        CO_fifo_write(&SDO_C->bufFifo,
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	69fa      	ldr	r2, [r7, #28]
 8003d70:	f002 f916 	bl	8005fa0 <CO_fifo_write>
                                      count, NULL);
                        SDO_C->sizeTran = count;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	69fa      	ldr	r2, [r7, #28]
 8003d78:	629a      	str	r2, [r3, #40]	; 0x28
                        SDO_C->state = CO_SDO_ST_IDLE;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                        ret = CO_SDO_RT_ok_communicationEnd;
 8003d82:	2300      	movs	r3, #0
 8003d84:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                }
                else {
                    abortCode = CO_SDO_AB_CMD;
                    SDO_C->state = CO_SDO_ST_ABORT;
                }
                break;
 8003d88:	e014      	b.n	8003db4 <CO_SDOclientUpload+0x17c>
                        abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
 8003d8a:	4b50      	ldr	r3, [pc, #320]	; (8003ecc <CO_SDOclientUpload+0x294>)
 8003d8c:	623b      	str	r3, [r7, #32]
                        SDO_C->state = CO_SDO_ST_ABORT;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                break;
 8003d96:	e00d      	b.n	8003db4 <CO_SDOclientUpload+0x17c>
                    abortCode = CO_SDO_AB_CMD;
 8003d98:	4b4d      	ldr	r3, [pc, #308]	; (8003ed0 <CO_SDOclientUpload+0x298>)
 8003d9a:	623b      	str	r3, [r7, #32]
                    SDO_C->state = CO_SDO_ST_ABORT;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                break;
 8003da4:	e006      	b.n	8003db4 <CO_SDOclientUpload+0x17c>
                break;
            }
#endif /* (CO_CONFIG_SDO_CLI) & CO_CONFIG_SDO_CLI_BLOCK */

            default: {
                abortCode = CO_SDO_AB_CMD;
 8003da6:	4b4a      	ldr	r3, [pc, #296]	; (8003ed0 <CO_SDOclientUpload+0x298>)
 8003da8:	623b      	str	r3, [r7, #32]
                SDO_C->state = CO_SDO_ST_ABORT;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2201      	movs	r2, #1
 8003dae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
                break;
 8003db2:	bf00      	nop
            }
        }
        SDO_C->timeoutTimer = 0;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2200      	movs	r2, #0
 8003db8:	635a      	str	r2, [r3, #52]	; 0x34
        timeDifference_us = 0;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	60bb      	str	r3, [r7, #8]
        CO_FLAG_CLEAR(SDO_C->CANrxNew);
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	66da      	str	r2, [r3, #108]	; 0x6c
 8003dc4:	e00e      	b.n	8003de4 <CO_SDOclientUpload+0x1ac>
    }
    else if (abort) {
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d00b      	beq.n	8003de4 <CO_SDOclientUpload+0x1ac>
        abortCode = (SDOabortCode != NULL)
                  ? *SDOabortCode : CO_SDO_AB_DEVICE_INCOMPAT;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d002      	beq.n	8003dd8 <CO_SDOclientUpload+0x1a0>
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	e000      	b.n	8003dda <CO_SDOclientUpload+0x1a2>
 8003dd8:	4b3a      	ldr	r3, [pc, #232]	; (8003ec4 <CO_SDOclientUpload+0x28c>)
        abortCode = (SDOabortCode != NULL)
 8003dda:	623b      	str	r3, [r7, #32]
        SDO_C->state = CO_SDO_ST_ABORT;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    }

    /* Timeout timers and transmit bufferFull flag ****************************/
    if (ret == CO_SDO_RT_waitingResponse) {
 8003de4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d12f      	bne.n	8003e4c <CO_SDOclientUpload+0x214>
        if (SDO_C->timeoutTimer < SDO_C->SDOtimeoutTime_us) {
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d205      	bcs.n	8003e04 <CO_SDOclientUpload+0x1cc>
            SDO_C->timeoutTimer += timeDifference_us;
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	441a      	add	r2, r3
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	635a      	str	r2, [r3, #52]	; 0x34
        }
        if (SDO_C->timeoutTimer >= SDO_C->SDOtimeoutTime_us) {
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0c:	429a      	cmp	r2, r3
 8003e0e:	d315      	bcc.n	8003e3c <CO_SDOclientUpload+0x204>
            if (SDO_C->state == CO_SDO_ST_UPLOAD_SEGMENT_REQ ||
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003e16:	b2db      	uxtb	r3, r3
 8003e18:	2b23      	cmp	r3, #35	; 0x23
 8003e1a:	d005      	beq.n	8003e28 <CO_SDOclientUpload+0x1f0>
                SDO_C->state == CO_SDO_ST_UPLOAD_BLK_SUBBLOCK_CRSP
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003e22:	b2db      	uxtb	r3, r3
            if (SDO_C->state == CO_SDO_ST_UPLOAD_SEGMENT_REQ ||
 8003e24:	2b65      	cmp	r3, #101	; 0x65
 8003e26:	d103      	bne.n	8003e30 <CO_SDOclientUpload+0x1f8>
            ) {
                /* application didn't empty buffer */
                abortCode = CO_SDO_AB_GENERAL;
 8003e28:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003e2c:	623b      	str	r3, [r7, #32]
 8003e2e:	e001      	b.n	8003e34 <CO_SDOclientUpload+0x1fc>
            } else {
                abortCode = CO_SDO_AB_TIMEOUT;
 8003e30:	4b28      	ldr	r3, [pc, #160]	; (8003ed4 <CO_SDOclientUpload+0x29c>)
 8003e32:	623b      	str	r3, [r7, #32]
            }
            SDO_C->state = CO_SDO_ST_ABORT;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            }
#endif
        }
#endif /* (CO_CONFIG_SDO_CLI) & CO_CONFIG_SDO_CLI_BLOCK */

        if (SDO_C->CANtxBuff->bufferFull) {
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	691b      	ldr	r3, [r3, #16]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d002      	beq.n	8003e4c <CO_SDOclientUpload+0x214>
            ret = CO_SDO_RT_transmittBufferFull;
 8003e46:	2304      	movs	r3, #4
 8003e48:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
    }

    /* Transmit CAN data ******************************************************/
    if (ret == CO_SDO_RT_waitingResponse) {
 8003e4c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003e50:	2b01      	cmp	r3, #1
 8003e52:	d134      	bne.n	8003ebe <CO_SDOclientUpload+0x286>
#if (CO_CONFIG_SDO_CLI) & CO_CONFIG_SDO_CLI_BLOCK
        size_t count;
#endif
        memset((void *)&SDO_C->CANtxBuff->data[0], 0, 8);
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	691b      	ldr	r3, [r3, #16]
 8003e58:	3305      	adds	r3, #5
 8003e5a:	2208      	movs	r2, #8
 8003e5c:	2100      	movs	r1, #0
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f010 f936 	bl	80140d0 <memset>

        switch (SDO_C->state) {
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b21      	cmp	r3, #33	; 0x21
 8003e6e:	d133      	bne.n	8003ed8 <CO_SDOclientUpload+0x2a0>
        case CO_SDO_ST_UPLOAD_INITIATE_REQ: {
            SDO_C->CANtxBuff->data[0] = 0x40;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	691b      	ldr	r3, [r3, #16]
 8003e74:	2240      	movs	r2, #64	; 0x40
 8003e76:	715a      	strb	r2, [r3, #5]
            SDO_C->CANtxBuff->data[1] = (uint8_t)SDO_C->index;
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	8b9a      	ldrh	r2, [r3, #28]
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	b2d2      	uxtb	r2, r2
 8003e82:	719a      	strb	r2, [r3, #6]
            SDO_C->CANtxBuff->data[2] = (uint8_t)(SDO_C->index >> 8);
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8b9b      	ldrh	r3, [r3, #28]
 8003e88:	0a1b      	lsrs	r3, r3, #8
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	691b      	ldr	r3, [r3, #16]
 8003e90:	b2d2      	uxtb	r2, r2
 8003e92:	71da      	strb	r2, [r3, #7]
            SDO_C->CANtxBuff->data[3] = SDO_C->subIndex;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	691b      	ldr	r3, [r3, #16]
 8003e98:	68fa      	ldr	r2, [r7, #12]
 8003e9a:	7f92      	ldrb	r2, [r2, #30]
 8003e9c:	721a      	strb	r2, [r3, #8]

            /* reset timeout timer and send message */
            SDO_C->timeoutTimer = 0;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	635a      	str	r2, [r3, #52]	; 0x34
            CO_CANsend(SDO_C->CANdevTx, SDO_C->CANtxBuff);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	689a      	ldr	r2, [r3, #8]
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	4619      	mov	r1, r3
 8003eae:	4610      	mov	r0, r2
 8003eb0:	f004 f95e 	bl	8008170 <CO_CANsend>
            SDO_C->state = CO_SDO_ST_UPLOAD_INITIATE_RSP;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2222      	movs	r2, #34	; 0x22
 8003eb8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            break;
 8003ebc:	e00d      	b.n	8003eda <CO_SDOclientUpload+0x2a2>

        default: {
            break;
        }
        }
    }
 8003ebe:	bf00      	nop
 8003ec0:	e00b      	b.n	8003eda <CO_SDOclientUpload+0x2a2>
 8003ec2:	bf00      	nop
 8003ec4:	06040047 	.word	0x06040047
 8003ec8:	06040043 	.word	0x06040043
 8003ecc:	06010000 	.word	0x06010000
 8003ed0:	05040001 	.word	0x05040001
 8003ed4:	05040000 	.word	0x05040000
            break;
 8003ed8:	bf00      	nop

    if (ret == CO_SDO_RT_waitingResponse) {
 8003eda:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d132      	bne.n	8003f48 <CO_SDOclientUpload+0x310>
        if (SDO_C->state == CO_SDO_ST_ABORT) {
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b01      	cmp	r3, #1
 8003eec:	d12c      	bne.n	8003f48 <CO_SDOclientUpload+0x310>
            uint32_t code = CO_SWAP_32((uint32_t)abortCode);
 8003eee:	6a3b      	ldr	r3, [r7, #32]
 8003ef0:	613b      	str	r3, [r7, #16]
            /* Send SDO abort message */
            SDO_C->CANtxBuff->data[0] = 0x80;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	691b      	ldr	r3, [r3, #16]
 8003ef6:	2280      	movs	r2, #128	; 0x80
 8003ef8:	715a      	strb	r2, [r3, #5]
            SDO_C->CANtxBuff->data[1] = (uint8_t)SDO_C->index;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8b9a      	ldrh	r2, [r3, #28]
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	691b      	ldr	r3, [r3, #16]
 8003f02:	b2d2      	uxtb	r2, r2
 8003f04:	719a      	strb	r2, [r3, #6]
            SDO_C->CANtxBuff->data[2] = (uint8_t)(SDO_C->index >> 8);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	8b9b      	ldrh	r3, [r3, #28]
 8003f0a:	0a1b      	lsrs	r3, r3, #8
 8003f0c:	b29a      	uxth	r2, r3
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	691b      	ldr	r3, [r3, #16]
 8003f12:	b2d2      	uxtb	r2, r2
 8003f14:	71da      	strb	r2, [r3, #7]
            SDO_C->CANtxBuff->data[3] = SDO_C->subIndex;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	68fa      	ldr	r2, [r7, #12]
 8003f1c:	7f92      	ldrb	r2, [r2, #30]
 8003f1e:	721a      	strb	r2, [r3, #8]

            memcpy(&SDO_C->CANtxBuff->data[4], &code, sizeof(code));
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	691b      	ldr	r3, [r3, #16]
 8003f24:	3309      	adds	r3, #9
 8003f26:	693a      	ldr	r2, [r7, #16]
 8003f28:	601a      	str	r2, [r3, #0]
            CO_CANsend(SDO_C->CANdevTx, SDO_C->CANtxBuff);
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	689a      	ldr	r2, [r3, #8]
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	691b      	ldr	r3, [r3, #16]
 8003f32:	4619      	mov	r1, r3
 8003f34:	4610      	mov	r0, r2
 8003f36:	f004 f91b 	bl	8008170 <CO_CANsend>
            SDO_C->state = CO_SDO_ST_IDLE;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
            ret = CO_SDO_RT_endedWithClientAbort;
 8003f42:	23f7      	movs	r3, #247	; 0xf7
 8003f44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
            ret = CO_SDO_RT_blockUploadInProgress;
        }
#endif
    }

    if (sizeIndicated != NULL) {
 8003f48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <CO_SDOclientUpload+0x31e>
        *sizeIndicated = SDO_C->sizeInd;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003f52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f54:	601a      	str	r2, [r3, #0]
    }
    if (sizeTransferred != NULL) {
 8003f56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d003      	beq.n	8003f64 <CO_SDOclientUpload+0x32c>
        *sizeTransferred = SDO_C->sizeTran;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f62:	601a      	str	r2, [r3, #0]
    }
    if (SDOabortCode != NULL) {
 8003f64:	683b      	ldr	r3, [r7, #0]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d002      	beq.n	8003f70 <CO_SDOclientUpload+0x338>
        *SDOabortCode = abortCode;
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	6a3a      	ldr	r2, [r7, #32]
 8003f6e:	601a      	str	r2, [r3, #0]
    }

    return ret;
 8003f70:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8003f74:	4618      	mov	r0, r3
 8003f76:	3728      	adds	r7, #40	; 0x28
 8003f78:	46bd      	mov	sp, r7
 8003f7a:	bd80      	pop	{r7, pc}

08003f7c <CO_SDOclientUploadBufRead>:

/******************************************************************************/
size_t CO_SDOclientUploadBufRead(CO_SDOclient_t *SDO_C,
                                 uint8_t *buf,
                                 size_t count)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b086      	sub	sp, #24
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	60f8      	str	r0, [r7, #12]
 8003f84:	60b9      	str	r1, [r7, #8]
 8003f86:	607a      	str	r2, [r7, #4]
    size_t ret = 0;
 8003f88:	2300      	movs	r3, #0
 8003f8a:	617b      	str	r3, [r7, #20]
    if (SDO_C != NULL && buf != NULL) {
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00b      	beq.n	8003faa <CO_SDOclientUploadBufRead+0x2e>
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d008      	beq.n	8003faa <CO_SDOclientUploadBufRead+0x2e>
        ret = CO_fifo_read(&SDO_C->bufFifo, buf, count, NULL);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	687a      	ldr	r2, [r7, #4]
 8003fa2:	68b9      	ldr	r1, [r7, #8]
 8003fa4:	f002 f854 	bl	8006050 <CO_fifo_read>
 8003fa8:	6178      	str	r0, [r7, #20]
    }
    return ret;
 8003faa:	697b      	ldr	r3, [r7, #20]
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3718      	adds	r7, #24
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <CO_getUint8>:
static inline uint8_t CO_getUint8(const void *buf) {
 8003fb4:	b480      	push	{r7}
 8003fb6:	b085      	sub	sp, #20
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	781b      	ldrb	r3, [r3, #0]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 8003fc0:	73fb      	strb	r3, [r7, #15]
 8003fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	3714      	adds	r7, #20
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fce:	4770      	bx	lr

08003fd0 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 8003fd0:	b480      	push	{r7}
 8003fd2:	b085      	sub	sp, #20
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8003fdc:	60fb      	str	r3, [r7, #12]
 8003fde:	68fb      	ldr	r3, [r7, #12]
}
 8003fe0:	4618      	mov	r0, r3
 8003fe2:	3714      	adds	r7, #20
 8003fe4:	46bd      	mov	sp, r7
 8003fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fea:	4770      	bx	lr

08003fec <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d002      	beq.n	8004000 <OD_getIndex+0x14>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	881b      	ldrh	r3, [r3, #0]
 8003ffe:	e000      	b.n	8004002 <OD_getIndex+0x16>
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <OD_extension_init>:
{
 800400e:	b480      	push	{r7}
 8004010:	b083      	sub	sp, #12
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
 8004016:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2b00      	cmp	r3, #0
 800401c:	d101      	bne.n	8004022 <OD_extension_init+0x14>
 800401e:	2305      	movs	r3, #5
 8004020:	e003      	b.n	800402a <OD_extension_init+0x1c>
    entry->extension = extension;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	683a      	ldr	r2, [r7, #0]
 8004026:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8004028:	2300      	movs	r3, #0
}
 800402a:	4618      	mov	r0, r3
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <OD_get_u8>:
{
 8004036:	b580      	push	{r7, lr}
 8004038:	b086      	sub	sp, #24
 800403a:	af02      	add	r7, sp, #8
 800403c:	60f8      	str	r0, [r7, #12]
 800403e:	607a      	str	r2, [r7, #4]
 8004040:	603b      	str	r3, [r7, #0]
 8004042:	460b      	mov	r3, r1
 8004044:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8004046:	7af9      	ldrb	r1, [r7, #11]
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	9300      	str	r3, [sp, #0]
 800404c:	2301      	movs	r3, #1
 800404e:	687a      	ldr	r2, [r7, #4]
 8004050:	68f8      	ldr	r0, [r7, #12]
 8004052:	f7fd fdb3 	bl	8001bbc <OD_get_value>
 8004056:	4603      	mov	r3, r0
}
 8004058:	4618      	mov	r0, r3
 800405a:	3710      	adds	r7, #16
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <OD_get_u32>:
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b086      	sub	sp, #24
 8004064:	af02      	add	r7, sp, #8
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	607a      	str	r2, [r7, #4]
 800406a:	603b      	str	r3, [r7, #0]
 800406c:	460b      	mov	r3, r1
 800406e:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8004070:	7af9      	ldrb	r1, [r7, #11]
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	9300      	str	r3, [sp, #0]
 8004076:	2304      	movs	r3, #4
 8004078:	687a      	ldr	r2, [r7, #4]
 800407a:	68f8      	ldr	r0, [r7, #12]
 800407c:	f7fd fd9e 	bl	8001bbc <OD_get_value>
 8004080:	4603      	mov	r3, r0
}
 8004082:	4618      	mov	r0, r3
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <OD_set_u32>:
}

/** Set uint32_t variable in Object Dictionary, see @ref OD_set_value */
static inline ODR_t OD_set_u32(const OD_entry_t *entry, uint8_t subIndex,
                               uint32_t val, bool_t odOrig)
{
 800408a:	b580      	push	{r7, lr}
 800408c:	b086      	sub	sp, #24
 800408e:	af02      	add	r7, sp, #8
 8004090:	60f8      	str	r0, [r7, #12]
 8004092:	607a      	str	r2, [r7, #4]
 8004094:	603b      	str	r3, [r7, #0]
 8004096:	460b      	mov	r3, r1
 8004098:	72fb      	strb	r3, [r7, #11]
    return OD_set_value(entry, subIndex, &val, sizeof(val), odOrig);
 800409a:	1d3a      	adds	r2, r7, #4
 800409c:	7af9      	ldrb	r1, [r7, #11]
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	9300      	str	r3, [sp, #0]
 80040a2:	2304      	movs	r3, #4
 80040a4:	68f8      	ldr	r0, [r7, #12]
 80040a6:	f7fd fdbf 	bl	8001c28 <OD_set_value>
 80040aa:	4603      	mov	r3, r0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3710      	adds	r7, #16
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}

080040b4 <CO_SDO_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SDO_receive(void *object, void *msg) {
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b086      	sub	sp, #24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]
    CO_SDOserver_t *SDO = (CO_SDOserver_t *)object;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	791b      	ldrb	r3, [r3, #4]
 80040c6:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	3305      	adds	r3, #5
 80040cc:	60fb      	str	r3, [r7, #12]

    /* ignore messages with wrong length */
    if (DLC == 8) {
 80040ce:	7cfb      	ldrb	r3, [r7, #19]
 80040d0:	2b08      	cmp	r3, #8
 80040d2:	d115      	bne.n	8004100 <CO_SDO_receive+0x4c>
        if (data[0] == 0x80) {
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	781b      	ldrb	r3, [r3, #0]
 80040d8:	2b80      	cmp	r3, #128	; 0x80
 80040da:	d103      	bne.n	80040e4 <CO_SDO_receive+0x30>
            /* abort from client, just make idle */
            SDO->state = CO_SDO_ST_IDLE;
 80040dc:	697b      	ldr	r3, [r7, #20]
 80040de:	2200      	movs	r2, #0
 80040e0:	751a      	strb	r2, [r3, #20]
                SDO->pFunctSignalPre(SDO->functSignalObjectPre);
            }
#endif
        }
    }
}
 80040e2:	e00d      	b.n	8004100 <CO_SDO_receive+0x4c>
        else if (CO_FLAG_READ(SDO->CANrxNew)) {
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d109      	bne.n	8004100 <CO_SDO_receive+0x4c>
            memcpy(SDO->CANrxData, data, DLC);
 80040ec:	697b      	ldr	r3, [r7, #20]
 80040ee:	333c      	adds	r3, #60	; 0x3c
 80040f0:	7cfa      	ldrb	r2, [r7, #19]
 80040f2:	68f9      	ldr	r1, [r7, #12]
 80040f4:	4618      	mov	r0, r3
 80040f6:	f00f ffc3 	bl	8014080 <memcpy>
            CO_FLAG_SET(SDO->CANrxNew);
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	2201      	movs	r2, #1
 80040fe:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004100:	bf00      	nop
 8004102:	3718      	adds	r7, #24
 8004104:	46bd      	mov	sp, r7
 8004106:	bd80      	pop	{r7, pc}

08004108 <CO_SDOserver_init_canRxTx>:
                                                  CO_CANmodule_t *CANdevRx,
                                                  uint16_t CANdevRxIdx,
                                                  uint16_t CANdevTxIdx,
                                                  uint32_t COB_IDClientToServer,
                                                  uint32_t COB_IDServerToClient)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	b08a      	sub	sp, #40	; 0x28
 800410c:	af04      	add	r7, sp, #16
 800410e:	60f8      	str	r0, [r7, #12]
 8004110:	60b9      	str	r1, [r7, #8]
 8004112:	4611      	mov	r1, r2
 8004114:	461a      	mov	r2, r3
 8004116:	460b      	mov	r3, r1
 8004118:	80fb      	strh	r3, [r7, #6]
 800411a:	4613      	mov	r3, r2
 800411c:	80bb      	strh	r3, [r7, #4]
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC
    /* proceed only, if parameters change */
    if (COB_IDClientToServer == SDO->COB_IDClientToServer
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004122:	6a3a      	ldr	r2, [r7, #32]
 8004124:	429a      	cmp	r2, r3
 8004126:	d106      	bne.n	8004136 <CO_SDOserver_init_canRxTx+0x2e>
        && COB_IDServerToClient == SDO->COB_IDServerToClient
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800412c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800412e:	429a      	cmp	r2, r3
 8004130:	d101      	bne.n	8004136 <CO_SDOserver_init_canRxTx+0x2e>
    ) {
        return CO_ERROR_NO;
 8004132:	2300      	movs	r3, #0
 8004134:	e04e      	b.n	80041d4 <CO_SDOserver_init_canRxTx+0xcc>
    }
    /* store variables */
    SDO->COB_IDClientToServer = COB_IDClientToServer;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	6a3a      	ldr	r2, [r7, #32]
 800413a:	64da      	str	r2, [r3, #76]	; 0x4c
    SDO->COB_IDServerToClient = COB_IDServerToClient;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004140:	651a      	str	r2, [r3, #80]	; 0x50
#endif

    /* verify valid bit */
    uint16_t idC2S = ((COB_IDClientToServer & 0x80000000L) == 0) ?
 8004142:	6a3b      	ldr	r3, [r7, #32]
 8004144:	2b00      	cmp	r3, #0
 8004146:	db02      	blt.n	800414e <CO_SDOserver_init_canRxTx+0x46>
 8004148:	6a3b      	ldr	r3, [r7, #32]
 800414a:	b29b      	uxth	r3, r3
 800414c:	e000      	b.n	8004150 <CO_SDOserver_init_canRxTx+0x48>
 800414e:	2300      	movs	r3, #0
 8004150:	82fb      	strh	r3, [r7, #22]
                     (uint16_t)COB_IDClientToServer : 0;
    uint16_t idS2C = ((COB_IDServerToClient & 0x80000000L) == 0) ?
 8004152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004154:	2b00      	cmp	r3, #0
 8004156:	db02      	blt.n	800415e <CO_SDOserver_init_canRxTx+0x56>
 8004158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800415a:	b29b      	uxth	r3, r3
 800415c:	e000      	b.n	8004160 <CO_SDOserver_init_canRxTx+0x58>
 800415e:	2300      	movs	r3, #0
 8004160:	82bb      	strh	r3, [r7, #20]
                     (uint16_t)COB_IDServerToClient : 0;
    if (idC2S != 0 && idS2C != 0) {
 8004162:	8afb      	ldrh	r3, [r7, #22]
 8004164:	2b00      	cmp	r3, #0
 8004166:	d006      	beq.n	8004176 <CO_SDOserver_init_canRxTx+0x6e>
 8004168:	8abb      	ldrh	r3, [r7, #20]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d003      	beq.n	8004176 <CO_SDOserver_init_canRxTx+0x6e>
        SDO->valid = true;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	2201      	movs	r2, #1
 8004172:	611a      	str	r2, [r3, #16]
 8004174:	e006      	b.n	8004184 <CO_SDOserver_init_canRxTx+0x7c>
    }
    else {
        idC2S = 0;
 8004176:	2300      	movs	r3, #0
 8004178:	82fb      	strh	r3, [r7, #22]
        idS2C = 0;
 800417a:	2300      	movs	r3, #0
 800417c:	82bb      	strh	r3, [r7, #20]
        SDO->valid = false;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2200      	movs	r2, #0
 8004182:	611a      	str	r2, [r3, #16]
    }

    /* configure SDO server CAN reception */
    CO_ReturnError_t ret = CO_CANrxBufferInit(
 8004184:	8afa      	ldrh	r2, [r7, #22]
 8004186:	88f9      	ldrh	r1, [r7, #6]
 8004188:	4b14      	ldr	r3, [pc, #80]	; (80041dc <CO_SDOserver_init_canRxTx+0xd4>)
 800418a:	9302      	str	r3, [sp, #8]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	9301      	str	r3, [sp, #4]
 8004190:	2300      	movs	r3, #0
 8004192:	9300      	str	r3, [sp, #0]
 8004194:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004198:	68b8      	ldr	r0, [r7, #8]
 800419a:	f003 fec7 	bl	8007f2c <CO_CANrxBufferInit>
 800419e:	4603      	mov	r3, r0
 80041a0:	74fb      	strb	r3, [r7, #19]
            0,                      /* rtr */
            (void*)SDO,             /* object passed to receive function */
            CO_SDO_receive);        /* this function will process rx msg */

    /* configure SDO server CAN transmission */
    SDO->CANtxBuff = CO_CANtxBufferInit(
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	6818      	ldr	r0, [r3, #0]
 80041a6:	8aba      	ldrh	r2, [r7, #20]
 80041a8:	88b9      	ldrh	r1, [r7, #4]
 80041aa:	2300      	movs	r3, #0
 80041ac:	9301      	str	r3, [sp, #4]
 80041ae:	2308      	movs	r3, #8
 80041b0:	9300      	str	r3, [sp, #0]
 80041b2:	2300      	movs	r3, #0
 80041b4:	f003 ff16 	bl	8007fe4 <CO_CANtxBufferInit>
 80041b8:	4602      	mov	r2, r0
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	605a      	str	r2, [r3, #4]
            idS2C,                  /* CAN identifier */
            0,                      /* rtr */
            8,                      /* number of data bytes */
            0);                     /* synchronous message flag bit */

    if (SDO->CANtxBuff == NULL) {
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	685b      	ldr	r3, [r3, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d104      	bne.n	80041d0 <CO_SDOserver_init_canRxTx+0xc8>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 80041c6:	23ff      	movs	r3, #255	; 0xff
 80041c8:	74fb      	strb	r3, [r7, #19]
        SDO->valid = false;
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	611a      	str	r2, [r3, #16]
    }

    return ret;
 80041d0:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	3718      	adds	r7, #24
 80041d8:	46bd      	mov	sp, r7
 80041da:	bd80      	pop	{r7, pc}
 80041dc:	080040b5 	.word	0x080040b5

080041e0 <OD_write_1201_additional>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1201_additional(OD_stream_t *stream, const void *buf,
                                      OD_size_t count, OD_size_t *countWritten)
{
 80041e0:	b590      	push	{r4, r7, lr}
 80041e2:	b08f      	sub	sp, #60	; 0x3c
 80041e4:	af02      	add	r7, sp, #8
 80041e6:	60f8      	str	r0, [r7, #12]
 80041e8:	60b9      	str	r1, [r7, #8]
 80041ea:	607a      	str	r2, [r7, #4]
 80041ec:	603b      	str	r3, [r7, #0]
    /* "count" is already verified in *_init() function */
    if (stream == NULL || buf == NULL || countWritten == NULL) {
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d005      	beq.n	8004200 <OD_write_1201_additional+0x20>
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d002      	beq.n	8004200 <OD_write_1201_additional+0x20>
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d101      	bne.n	8004204 <OD_write_1201_additional+0x24>
        return ODR_DEV_INCOMPAT;
 8004200:	2309      	movs	r3, #9
 8004202:	e0f9      	b.n	80043f8 <OD_write_1201_additional+0x218>
    }

    CO_SDOserver_t *SDO = (CO_SDOserver_t *)stream->object;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	62fb      	str	r3, [r7, #44]	; 0x2c

    switch (stream->subIndex) {
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	7c5b      	ldrb	r3, [r3, #17]
 800420e:	2b03      	cmp	r3, #3
 8004210:	f200 80e8 	bhi.w	80043e4 <OD_write_1201_additional+0x204>
 8004214:	a201      	add	r2, pc, #4	; (adr r2, 800421c <OD_write_1201_additional+0x3c>)
 8004216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800421a:	bf00      	nop
 800421c:	0800422d 	.word	0x0800422d
 8004220:	08004231 	.word	0x08004231
 8004224:	080042f5 	.word	0x080042f5
 8004228:	080043bb 	.word	0x080043bb
        case 0: /* Highest sub-index supported */
            return ODR_READONLY;
 800422c:	2304      	movs	r3, #4
 800422e:	e0e3      	b.n	80043f8 <OD_write_1201_additional+0x218>

        case 1: { /* COB-ID client -> server */
            uint32_t COB_ID = CO_getUint32(buf);
 8004230:	68b8      	ldr	r0, [r7, #8]
 8004232:	f7ff fecd 	bl	8003fd0 <CO_getUint32>
 8004236:	61b8      	str	r0, [r7, #24]
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	b29b      	uxth	r3, r3
 800423c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004240:	82fb      	strh	r3, [r7, #22]
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDClientToServer & 0x7FF);
 8004242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004246:	b29b      	uxth	r3, r3
 8004248:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800424c:	82bb      	strh	r3, [r7, #20]
            bool_t valid = (COB_ID & 0x80000000) == 0;
 800424e:	69bb      	ldr	r3, [r7, #24]
 8004250:	43db      	mvns	r3, r3
 8004252:	0fdb      	lsrs	r3, r3, #31
 8004254:	b2db      	uxtb	r3, r3
 8004256:	613b      	str	r3, [r7, #16]

            /* SDO client must not be valid when changing COB_ID */
            if ((COB_ID & 0x3FFFF800) != 0
 8004258:	69ba      	ldr	r2, [r7, #24]
 800425a:	4b69      	ldr	r3, [pc, #420]	; (8004400 <OD_write_1201_additional+0x220>)
 800425c:	4013      	ands	r3, r2
 800425e:	2b00      	cmp	r3, #0
 8004260:	d134      	bne.n	80042cc <OD_write_1201_additional+0xec>
                || (valid && SDO->valid && CAN_ID != CAN_ID_cur)
 8004262:	693b      	ldr	r3, [r7, #16]
 8004264:	2b00      	cmp	r3, #0
 8004266:	d007      	beq.n	8004278 <OD_write_1201_additional+0x98>
 8004268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800426a:	691b      	ldr	r3, [r3, #16]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d003      	beq.n	8004278 <OD_write_1201_additional+0x98>
 8004270:	8afa      	ldrh	r2, [r7, #22]
 8004272:	8abb      	ldrh	r3, [r7, #20]
 8004274:	429a      	cmp	r2, r3
 8004276:	d129      	bne.n	80042cc <OD_write_1201_additional+0xec>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d028      	beq.n	80042d0 <OD_write_1201_additional+0xf0>
 800427e:	8afb      	ldrh	r3, [r7, #22]
 8004280:	2b7f      	cmp	r3, #127	; 0x7f
 8004282:	d923      	bls.n	80042cc <OD_write_1201_additional+0xec>
 8004284:	8afb      	ldrh	r3, [r7, #22]
 8004286:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800428a:	d903      	bls.n	8004294 <OD_write_1201_additional+0xb4>
 800428c:	8afb      	ldrh	r3, [r7, #22]
 800428e:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8004292:	d91b      	bls.n	80042cc <OD_write_1201_additional+0xec>
 8004294:	8afb      	ldrh	r3, [r7, #22]
 8004296:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 800429a:	d903      	bls.n	80042a4 <OD_write_1201_additional+0xc4>
 800429c:	8afb      	ldrh	r3, [r7, #22]
 800429e:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80042a2:	d313      	bcc.n	80042cc <OD_write_1201_additional+0xec>
 80042a4:	8afb      	ldrh	r3, [r7, #22]
 80042a6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80042aa:	d903      	bls.n	80042b4 <OD_write_1201_additional+0xd4>
 80042ac:	8afb      	ldrh	r3, [r7, #22]
 80042ae:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 80042b2:	d30b      	bcc.n	80042cc <OD_write_1201_additional+0xec>
 80042b4:	8afb      	ldrh	r3, [r7, #22]
 80042b6:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 80042ba:	d303      	bcc.n	80042c4 <OD_write_1201_additional+0xe4>
 80042bc:	8afb      	ldrh	r3, [r7, #22]
 80042be:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042c2:	d303      	bcc.n	80042cc <OD_write_1201_additional+0xec>
 80042c4:	8afb      	ldrh	r3, [r7, #22]
 80042c6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80042ca:	d901      	bls.n	80042d0 <OD_write_1201_additional+0xf0>
            ) {
                return ODR_INVALID_VALUE;
 80042cc:	230f      	movs	r3, #15
 80042ce:	e093      	b.n	80043f8 <OD_write_1201_additional+0x218>
            }
            CO_SDOserver_init_canRxTx(SDO,
 80042d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d2:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80042d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042d6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80042da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042dc:	f8b3 004a 	ldrh.w	r0, [r3, #74]	; 0x4a
 80042e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042e4:	9301      	str	r3, [sp, #4]
 80042e6:	69bb      	ldr	r3, [r7, #24]
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	4603      	mov	r3, r0
 80042ec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80042ee:	f7ff ff0b 	bl	8004108 <CO_SDOserver_init_canRxTx>
                                      SDO->CANdevRx,
                                      SDO->CANdevRxIdx,
                                      SDO->CANdevTxIdx,
                                      COB_ID,
                                      SDO->COB_IDServerToClient);
            break;
 80042f2:	e07a      	b.n	80043ea <OD_write_1201_additional+0x20a>
        }

        case 2: { /* COB-ID server -> client */
            uint32_t COB_ID = CO_getUint32(buf);
 80042f4:	68b8      	ldr	r0, [r7, #8]
 80042f6:	f7ff fe6b 	bl	8003fd0 <CO_getUint32>
 80042fa:	6278      	str	r0, [r7, #36]	; 0x24
            uint16_t CAN_ID = (uint16_t)(COB_ID & 0x7FF);
 80042fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fe:	b29b      	uxth	r3, r3
 8004300:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004304:	847b      	strh	r3, [r7, #34]	; 0x22
            uint16_t CAN_ID_cur = (uint16_t)(SDO->COB_IDServerToClient & 0x7FF);
 8004306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004308:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800430a:	b29b      	uxth	r3, r3
 800430c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004310:	843b      	strh	r3, [r7, #32]
            bool_t valid = (COB_ID & 0x80000000) == 0;
 8004312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004314:	43db      	mvns	r3, r3
 8004316:	0fdb      	lsrs	r3, r3, #31
 8004318:	b2db      	uxtb	r3, r3
 800431a:	61fb      	str	r3, [r7, #28]

            /* SDO client must not be valid when changing COB_ID */
            if ((COB_ID & 0x3FFFF800) != 0
 800431c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800431e:	4b38      	ldr	r3, [pc, #224]	; (8004400 <OD_write_1201_additional+0x220>)
 8004320:	4013      	ands	r3, r2
 8004322:	2b00      	cmp	r3, #0
 8004324:	d134      	bne.n	8004390 <OD_write_1201_additional+0x1b0>
                || (valid && SDO->valid && CAN_ID != CAN_ID_cur)
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d007      	beq.n	800433c <OD_write_1201_additional+0x15c>
 800432c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d003      	beq.n	800433c <OD_write_1201_additional+0x15c>
 8004334:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004336:	8c3b      	ldrh	r3, [r7, #32]
 8004338:	429a      	cmp	r2, r3
 800433a:	d129      	bne.n	8004390 <OD_write_1201_additional+0x1b0>
                || (valid && CO_IS_RESTRICTED_CAN_ID(CAN_ID))
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d028      	beq.n	8004394 <OD_write_1201_additional+0x1b4>
 8004342:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004344:	2b7f      	cmp	r3, #127	; 0x7f
 8004346:	d923      	bls.n	8004390 <OD_write_1201_additional+0x1b0>
 8004348:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800434a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800434e:	d903      	bls.n	8004358 <OD_write_1201_additional+0x178>
 8004350:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004352:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8004356:	d91b      	bls.n	8004390 <OD_write_1201_additional+0x1b0>
 8004358:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800435a:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 800435e:	d903      	bls.n	8004368 <OD_write_1201_additional+0x188>
 8004360:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004362:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004366:	d313      	bcc.n	8004390 <OD_write_1201_additional+0x1b0>
 8004368:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800436a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800436e:	d903      	bls.n	8004378 <OD_write_1201_additional+0x198>
 8004370:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004372:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8004376:	d30b      	bcc.n	8004390 <OD_write_1201_additional+0x1b0>
 8004378:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800437a:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 800437e:	d303      	bcc.n	8004388 <OD_write_1201_additional+0x1a8>
 8004380:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004382:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004386:	d303      	bcc.n	8004390 <OD_write_1201_additional+0x1b0>
 8004388:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800438a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800438e:	d901      	bls.n	8004394 <OD_write_1201_additional+0x1b4>
            ) {
                return ODR_INVALID_VALUE;
 8004390:	230f      	movs	r3, #15
 8004392:	e031      	b.n	80043f8 <OD_write_1201_additional+0x218>
            }
            CO_SDOserver_init_canRxTx(SDO,
 8004394:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004396:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8004398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800439a:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 800439e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a0:	f8b3 404a 	ldrh.w	r4, [r3, #74]	; 0x4a
 80043a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043aa:	9201      	str	r2, [sp, #4]
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	4623      	mov	r3, r4
 80043b0:	4602      	mov	r2, r0
 80043b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80043b4:	f7ff fea8 	bl	8004108 <CO_SDOserver_init_canRxTx>
                                      SDO->CANdevRx,
                                      SDO->CANdevRxIdx,
                                      SDO->CANdevTxIdx,
                                      SDO->COB_IDClientToServer,
                                      COB_ID);
            break;
 80043b8:	e017      	b.n	80043ea <OD_write_1201_additional+0x20a>
        }

        case 3: { /* Node-ID of the SDO server */
            if (count != 1) {
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d001      	beq.n	80043c4 <OD_write_1201_additional+0x1e4>
                return ODR_TYPE_MISMATCH;
 80043c0:	230b      	movs	r3, #11
 80043c2:	e019      	b.n	80043f8 <OD_write_1201_additional+0x218>
            }
            uint8_t nodeId = CO_getUint8(buf);
 80043c4:	68b8      	ldr	r0, [r7, #8]
 80043c6:	f7ff fdf5 	bl	8003fb4 <CO_getUint8>
 80043ca:	4603      	mov	r3, r0
 80043cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            if (nodeId < 1 || nodeId > 127) {
 80043d0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d003      	beq.n	80043e0 <OD_write_1201_additional+0x200>
 80043d8:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 80043dc:	2b00      	cmp	r3, #0
 80043de:	da03      	bge.n	80043e8 <OD_write_1201_additional+0x208>
                return ODR_INVALID_VALUE;
 80043e0:	230f      	movs	r3, #15
 80043e2:	e009      	b.n	80043f8 <OD_write_1201_additional+0x218>
            }
            break;
        }

        default:
            return ODR_SUB_NOT_EXIST;
 80043e4:	230e      	movs	r3, #14
 80043e6:	e007      	b.n	80043f8 <OD_write_1201_additional+0x218>
            break;
 80043e8:	bf00      	nop
    }

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	68b9      	ldr	r1, [r7, #8]
 80043f0:	68f8      	ldr	r0, [r7, #12]
 80043f2:	f7fd f9fd 	bl	80017f0 <OD_writeOriginal>
 80043f6:	4603      	mov	r3, r0
}
 80043f8:	4618      	mov	r0, r3
 80043fa:	3734      	adds	r7, #52	; 0x34
 80043fc:	46bd      	mov	sp, r7
 80043fe:	bd90      	pop	{r4, r7, pc}
 8004400:	3ffff800 	.word	0x3ffff800

08004404 <CO_SDOserver_init>:
                                   CO_CANmodule_t *CANdevRx,
                                   uint16_t CANdevRxIdx,
                                   CO_CANmodule_t *CANdevTx,
                                   uint16_t CANdevTxIdx,
                                   uint32_t *errInfo)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b08c      	sub	sp, #48	; 0x30
 8004408:	af02      	add	r7, sp, #8
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	60b9      	str	r1, [r7, #8]
 800440e:	607a      	str	r2, [r7, #4]
 8004410:	70fb      	strb	r3, [r7, #3]
    /* verify arguments */
    if (SDO == NULL || OD == NULL || CANdevRx == NULL || CANdevTx == NULL) {
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d008      	beq.n	800442a <CO_SDOserver_init+0x26>
 8004418:	68bb      	ldr	r3, [r7, #8]
 800441a:	2b00      	cmp	r3, #0
 800441c:	d005      	beq.n	800442a <CO_SDOserver_init+0x26>
 800441e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004420:	2b00      	cmp	r3, #0
 8004422:	d002      	beq.n	800442a <CO_SDOserver_init+0x26>
 8004424:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004426:	2b00      	cmp	r3, #0
 8004428:	d102      	bne.n	8004430 <CO_SDOserver_init+0x2c>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800442a:	f04f 33ff 	mov.w	r3, #4294967295
 800442e:	e0f5      	b.n	800461c <CO_SDOserver_init+0x218>
    }

    /* Configure object variables */
    SDO->OD = OD;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	609a      	str	r2, [r3, #8]
    SDO->nodeId = nodeId;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	78fa      	ldrb	r2, [r7, #3]
 800443a:	731a      	strb	r2, [r3, #12]
#if ((CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED)
    SDO->SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 1000;
 800443c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800443e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004442:	fb03 f202 	mul.w	r2, r3, r2
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	675a      	str	r2, [r3, #116]	; 0x74
#endif
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK
    SDO->block_SDOtimeoutTime_us = (uint32_t)SDOtimeoutTime_ms * 700;
#endif
    SDO->state = CO_SDO_ST_IDLE;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2200      	movs	r2, #0
 800444e:	751a      	strb	r2, [r3, #20]
#endif

    /* configure CAN identifiers and SDO server parameters if available */
    uint16_t CanId_ClientToServer, CanId_ServerToClient;

    if (OD_1200_SDOsrvPar == NULL) {
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2b00      	cmp	r3, #0
 8004454:	d117      	bne.n	8004486 <CO_SDOserver_init+0x82>
        /* configure default SDO channel */
        if (nodeId < 1 || nodeId > 127) return CO_ERROR_ILLEGAL_ARGUMENT;
 8004456:	78fb      	ldrb	r3, [r7, #3]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d003      	beq.n	8004464 <CO_SDOserver_init+0x60>
 800445c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8004460:	2b00      	cmp	r3, #0
 8004462:	da02      	bge.n	800446a <CO_SDOserver_init+0x66>
 8004464:	f04f 33ff 	mov.w	r3, #4294967295
 8004468:	e0d8      	b.n	800461c <CO_SDOserver_init+0x218>

        CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 800446a:	78fb      	ldrb	r3, [r7, #3]
 800446c:	b29b      	uxth	r3, r3
 800446e:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8004472:	84fb      	strh	r3, [r7, #38]	; 0x26
        CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 8004474:	78fb      	ldrb	r3, [r7, #3]
 8004476:	b29b      	uxth	r3, r3
 8004478:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 800447c:	84bb      	strh	r3, [r7, #36]	; 0x24
        SDO->valid = true;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	2201      	movs	r2, #1
 8004482:	611a      	str	r2, [r3, #16]
 8004484:	e0a4      	b.n	80045d0 <CO_SDOserver_init+0x1cc>
    }
    else {
        uint16_t OD_SDOsrvParIdx = OD_getIndex(OD_1200_SDOsrvPar);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f7ff fdb0 	bl	8003fec <OD_getIndex>
 800448c:	4603      	mov	r3, r0
 800448e:	847b      	strh	r3, [r7, #34]	; 0x22

        if (OD_SDOsrvParIdx == OD_H1200_SDO_SERVER_1_PARAM) {
 8004490:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004492:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 8004496:	d123      	bne.n	80044e0 <CO_SDOserver_init+0xdc>
            /* configure default SDO channel and SDO server parameters for it */
            if (nodeId < 1 || nodeId > 127) return CO_ERROR_ILLEGAL_ARGUMENT;
 8004498:	78fb      	ldrb	r3, [r7, #3]
 800449a:	2b00      	cmp	r3, #0
 800449c:	d003      	beq.n	80044a6 <CO_SDOserver_init+0xa2>
 800449e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	da02      	bge.n	80044ac <CO_SDOserver_init+0xa8>
 80044a6:	f04f 33ff 	mov.w	r3, #4294967295
 80044aa:	e0b7      	b.n	800461c <CO_SDOserver_init+0x218>

            CanId_ClientToServer = CO_CAN_ID_SDO_CLI + nodeId;
 80044ac:	78fb      	ldrb	r3, [r7, #3]
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 80044b4:	84fb      	strh	r3, [r7, #38]	; 0x26
            CanId_ServerToClient = CO_CAN_ID_SDO_SRV + nodeId;
 80044b6:	78fb      	ldrb	r3, [r7, #3]
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 80044be:	84bb      	strh	r3, [r7, #36]	; 0x24
            SDO->valid = true;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2201      	movs	r2, #1
 80044c4:	611a      	str	r2, [r3, #16]

            OD_set_u32(OD_1200_SDOsrvPar, 1, CanId_ClientToServer, true);
 80044c6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80044c8:	2301      	movs	r3, #1
 80044ca:	2101      	movs	r1, #1
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f7ff fddc 	bl	800408a <OD_set_u32>
            OD_set_u32(OD_1200_SDOsrvPar, 2, CanId_ServerToClient, true);
 80044d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80044d4:	2301      	movs	r3, #1
 80044d6:	2102      	movs	r1, #2
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f7ff fdd6 	bl	800408a <OD_set_u32>
 80044de:	e077      	b.n	80045d0 <CO_SDOserver_init+0x1cc>
        }
        else if (OD_SDOsrvParIdx > OD_H1200_SDO_SERVER_1_PARAM
 80044e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80044e2:	f5b3 5f90 	cmp.w	r3, #4608	; 0x1200
 80044e6:	d96f      	bls.n	80045c8 <CO_SDOserver_init+0x1c4>
                && OD_SDOsrvParIdx <= (OD_H1200_SDO_SERVER_1_PARAM + 0x7F)
 80044e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80044ea:	f5b3 5f94 	cmp.w	r3, #4736	; 0x1280
 80044ee:	d26b      	bcs.n	80045c8 <CO_SDOserver_init+0x1c4>
            /* configure additional SDO channel and SDO server parameters for it */
            uint8_t maxSubIndex;
            uint32_t COB_IDClientToServer32, COB_IDServerToClient32;

            /* get and verify parameters from Object Dictionary (initial values) */
            ODR_t odRet0 = OD_get_u8(OD_1200_SDOsrvPar, 0, &maxSubIndex, true);
 80044f0:	f107 021d 	add.w	r2, r7, #29
 80044f4:	2301      	movs	r3, #1
 80044f6:	2100      	movs	r1, #0
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f7ff fd9c 	bl	8004036 <OD_get_u8>
 80044fe:	4603      	mov	r3, r0
 8004500:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
            ODR_t odRet1 = OD_get_u32(OD_1200_SDOsrvPar, 1,
 8004504:	f107 0218 	add.w	r2, r7, #24
 8004508:	2301      	movs	r3, #1
 800450a:	2101      	movs	r1, #1
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f7ff fda7 	bl	8004060 <OD_get_u32>
 8004512:	4603      	mov	r3, r0
 8004514:	f887 3020 	strb.w	r3, [r7, #32]
                                    &COB_IDClientToServer32, true);
            ODR_t odRet2 = OD_get_u32(OD_1200_SDOsrvPar, 2,
 8004518:	f107 0214 	add.w	r2, r7, #20
 800451c:	2301      	movs	r3, #1
 800451e:	2102      	movs	r1, #2
 8004520:	6878      	ldr	r0, [r7, #4]
 8004522:	f7ff fd9d 	bl	8004060 <OD_get_u32>
 8004526:	4603      	mov	r3, r0
 8004528:	77fb      	strb	r3, [r7, #31]
                                    &COB_IDServerToClient32, true);

            if (odRet0 != ODR_OK || (maxSubIndex != 2 && maxSubIndex != 3)
 800452a:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800452e:	2b00      	cmp	r3, #0
 8004530:	d10d      	bne.n	800454e <CO_SDOserver_init+0x14a>
 8004532:	7f7b      	ldrb	r3, [r7, #29]
 8004534:	2b02      	cmp	r3, #2
 8004536:	d002      	beq.n	800453e <CO_SDOserver_init+0x13a>
 8004538:	7f7b      	ldrb	r3, [r7, #29]
 800453a:	2b03      	cmp	r3, #3
 800453c:	d107      	bne.n	800454e <CO_SDOserver_init+0x14a>
                || odRet1 != ODR_OK || odRet2 != ODR_OK
 800453e:	f997 3020 	ldrsb.w	r3, [r7, #32]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d103      	bne.n	800454e <CO_SDOserver_init+0x14a>
 8004546:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d008      	beq.n	8004560 <CO_SDOserver_init+0x15c>
            ) {
                if (errInfo != NULL) *errInfo = OD_SDOsrvParIdx;
 800454e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004550:	2b00      	cmp	r3, #0
 8004552:	d002      	beq.n	800455a <CO_SDOserver_init+0x156>
 8004554:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8004556:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004558:	601a      	str	r2, [r3, #0]
                return CO_ERROR_OD_PARAMETERS;
 800455a:	f06f 030b 	mvn.w	r3, #11
 800455e:	e05d      	b.n	800461c <CO_SDOserver_init+0x218>
            }


            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000) == 0)
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	2b00      	cmp	r3, #0
 8004564:	db05      	blt.n	8004572 <CO_SDOserver_init+0x16e>
                                ? (uint16_t)(COB_IDClientToServer32 & 0x7FF) : 0;
 8004566:	69bb      	ldr	r3, [r7, #24]
 8004568:	b29b      	uxth	r3, r3
            CanId_ClientToServer = ((COB_IDClientToServer32 & 0x80000000) == 0)
 800456a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800456e:	b29b      	uxth	r3, r3
 8004570:	e000      	b.n	8004574 <CO_SDOserver_init+0x170>
 8004572:	2300      	movs	r3, #0
 8004574:	84fb      	strh	r3, [r7, #38]	; 0x26
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000) == 0)
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	2b00      	cmp	r3, #0
 800457a:	db05      	blt.n	8004588 <CO_SDOserver_init+0x184>
                                ? (uint16_t)(COB_IDServerToClient32 & 0x7FF) : 0;
 800457c:	697b      	ldr	r3, [r7, #20]
 800457e:	b29b      	uxth	r3, r3
            CanId_ServerToClient = ((COB_IDServerToClient32 & 0x80000000) == 0)
 8004580:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004584:	b29b      	uxth	r3, r3
 8004586:	e000      	b.n	800458a <CO_SDOserver_init+0x186>
 8004588:	2300      	movs	r3, #0
 800458a:	84bb      	strh	r3, [r7, #36]	; 0x24

    #if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC
            SDO->OD_1200_extension.object = SDO;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	68fa      	ldr	r2, [r7, #12]
 8004590:	655a      	str	r2, [r3, #84]	; 0x54
            SDO->OD_1200_extension.read = OD_readOriginal;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	4a23      	ldr	r2, [pc, #140]	; (8004624 <CO_SDOserver_init+0x220>)
 8004596:	659a      	str	r2, [r3, #88]	; 0x58
            SDO->OD_1200_extension.write = OD_write_1201_additional;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	4a23      	ldr	r2, [pc, #140]	; (8004628 <CO_SDOserver_init+0x224>)
 800459c:	65da      	str	r2, [r3, #92]	; 0x5c
            ODR_t odRetE = OD_extension_init(OD_1200_SDOsrvPar,
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	3354      	adds	r3, #84	; 0x54
 80045a2:	4619      	mov	r1, r3
 80045a4:	6878      	ldr	r0, [r7, #4]
 80045a6:	f7ff fd32 	bl	800400e <OD_extension_init>
 80045aa:	4603      	mov	r3, r0
 80045ac:	77bb      	strb	r3, [r7, #30]
                                            &SDO->OD_1200_extension);
            if (odRetE != ODR_OK) {
 80045ae:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d00b      	beq.n	80045ce <CO_SDOserver_init+0x1ca>
                if (errInfo != NULL) *errInfo = OD_SDOsrvParIdx;
 80045b6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d002      	beq.n	80045c2 <CO_SDOserver_init+0x1be>
 80045bc:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80045be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80045c0:	601a      	str	r2, [r3, #0]
                return CO_ERROR_OD_PARAMETERS;
 80045c2:	f06f 030b 	mvn.w	r3, #11
 80045c6:	e029      	b.n	800461c <CO_SDOserver_init+0x218>
            }
    #endif
        }
        else {
            return CO_ERROR_ILLEGAL_ARGUMENT;
 80045c8:	f04f 33ff 	mov.w	r3, #4294967295
 80045cc:	e026      	b.n	800461c <CO_SDOserver_init+0x218>
        ) {
 80045ce:	bf00      	nop
        }
    }
    CO_FLAG_CLEAR(SDO->CANrxNew);
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2200      	movs	r2, #0
 80045d4:	639a      	str	r2, [r3, #56]	; 0x38

    /* store the parameters and configure CANrx and CANtx */
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_FLAG_OD_DYNAMIC
    SDO->CANdevRx = CANdevRx;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80045da:	645a      	str	r2, [r3, #68]	; 0x44
    SDO->CANdevRxIdx = CANdevRxIdx;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80045e0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    SDO->CANdevTxIdx = CANdevTxIdx;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80045ea:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    /* set to zero to make sure CO_SDOserver_init_canRxTx() will reconfig CAN */
    SDO->COB_IDClientToServer = 0;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	2200      	movs	r2, #0
 80045f2:	64da      	str	r2, [r3, #76]	; 0x4c
    SDO->COB_IDServerToClient = 0;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	2200      	movs	r2, #0
 80045f8:	651a      	str	r2, [r3, #80]	; 0x50
#endif
    SDO->CANdevTx = CANdevTx;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045fe:	601a      	str	r2, [r3, #0]

    return CO_SDOserver_init_canRxTx(SDO,
 8004600:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004602:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004604:	f8b7 0040 	ldrh.w	r0, [r7, #64]	; 0x40
 8004608:	8f39      	ldrh	r1, [r7, #56]	; 0x38
 800460a:	9201      	str	r2, [sp, #4]
 800460c:	9300      	str	r3, [sp, #0]
 800460e:	4603      	mov	r3, r0
 8004610:	460a      	mov	r2, r1
 8004612:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004614:	68f8      	ldr	r0, [r7, #12]
 8004616:	f7ff fd77 	bl	8004108 <CO_SDOserver_init_canRxTx>
 800461a:	4603      	mov	r3, r0
                                     CANdevRx,
                                     CANdevRxIdx,
                                     CANdevTxIdx,
                                     CanId_ClientToServer,
                                     CanId_ServerToClient);
}
 800461c:	4618      	mov	r0, r3
 800461e:	3728      	adds	r7, #40	; 0x28
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}
 8004624:	08001741 	.word	0x08001741
 8004628:	080041e1 	.word	0x080041e1

0800462c <validateAndWriteToOD>:
 * CO_SDO_ST_ABORT */
static bool_t validateAndWriteToOD(CO_SDOserver_t *SDO,
                                   CO_SDO_abortCode_t *abortCode,
                                   uint8_t crcOperation,
                                   uint16_t crcClient)
{
 800462c:	b590      	push	{r4, r7, lr}
 800462e:	b08b      	sub	sp, #44	; 0x2c
 8004630:	af00      	add	r7, sp, #0
 8004632:	60f8      	str	r0, [r7, #12]
 8004634:	60b9      	str	r1, [r7, #8]
 8004636:	4611      	mov	r1, r2
 8004638:	461a      	mov	r2, r3
 800463a:	460b      	mov	r3, r1
 800463c:	71fb      	strb	r3, [r7, #7]
 800463e:	4613      	mov	r3, r2
 8004640:	80bb      	strh	r3, [r7, #4]
    OD_size_t bufOffsetWrOrig = SDO->bufOffsetWr;
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004648:	627b      	str	r3, [r7, #36]	; 0x24

    if (SDO->finished) {
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800464e:	2b00      	cmp	r3, #0
 8004650:	d07b      	beq.n	800474a <validateAndWriteToOD+0x11e>
        /* Verify if size of data downloaded matches size indicated. */
        if (SDO->sizeInd > 0 && SDO->sizeTran != SDO->sizeInd) {
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004656:	2b00      	cmp	r3, #0
 8004658:	d015      	beq.n	8004686 <validateAndWriteToOD+0x5a>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004662:	429a      	cmp	r2, r3
 8004664:	d00f      	beq.n	8004686 <validateAndWriteToOD+0x5a>
            *abortCode = (SDO->sizeTran > SDO->sizeInd) ?
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
                         CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 800466e:	429a      	cmp	r2, r3
 8004670:	d901      	bls.n	8004676 <validateAndWriteToOD+0x4a>
 8004672:	4a70      	ldr	r2, [pc, #448]	; (8004834 <validateAndWriteToOD+0x208>)
 8004674:	e000      	b.n	8004678 <validateAndWriteToOD+0x4c>
 8004676:	4a70      	ldr	r2, [pc, #448]	; (8004838 <validateAndWriteToOD+0x20c>)
            *abortCode = (SDO->sizeTran > SDO->sizeInd) ?
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2201      	movs	r2, #1
 8004680:	751a      	strb	r2, [r3, #20]
            return false;
 8004682:	2300      	movs	r3, #0
 8004684:	e0d2      	b.n	800482c <validateAndWriteToOD+0x200>
        if ((SDO->OD_IO.stream.attribute & ODA_MB) != 0) {
            reverseBytes(SDO->buf, SDO->bufOffsetWr);
        }
#endif

        OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	623b      	str	r3, [r7, #32]

        /* If dataType is string, then size of data downloaded may be
         * shorter than size of OD data buffer. If so, add two zero bytes
         * to terminate (unicode) string. Shorten also OD data size,
         * (temporary, send information about EOF into OD_IO.write) */
        if ((SDO->OD_IO.stream.attribute & ODA_STR) != 0
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004692:	b25b      	sxtb	r3, r3
 8004694:	2b00      	cmp	r3, #0
 8004696:	da3c      	bge.n	8004712 <validateAndWriteToOD+0xe6>
            && (sizeInOd == 0 || SDO->sizeTran < sizeInOd)
 8004698:	6a3b      	ldr	r3, [r7, #32]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d004      	beq.n	80046a8 <validateAndWriteToOD+0x7c>
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046a2:	6a3a      	ldr	r2, [r7, #32]
 80046a4:	429a      	cmp	r2, r3
 80046a6:	d934      	bls.n	8004712 <validateAndWriteToOD+0xe6>
            && (SDO->bufOffsetWr + 2) <= CO_CONFIG_SDO_SRV_BUFFER_SIZE
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80046ae:	3302      	adds	r3, #2
 80046b0:	2b20      	cmp	r3, #32
 80046b2:	d82e      	bhi.n	8004712 <validateAndWriteToOD+0xe6>
        ) {
            SDO->buf[SDO->bufOffsetWr++] = 0;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80046ba:	1c59      	adds	r1, r3, #1
 80046bc:	68fa      	ldr	r2, [r7, #12]
 80046be:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 80046c2:	68fa      	ldr	r2, [r7, #12]
 80046c4:	4413      	add	r3, r2
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
            SDO->sizeTran++;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046d0:	1c5a      	adds	r2, r3, #1
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	669a      	str	r2, [r3, #104]	; 0x68
            if (sizeInOd == 0 || SDO->sizeTran < sizeInOd) {
 80046d6:	6a3b      	ldr	r3, [r7, #32]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d004      	beq.n	80046e6 <validateAndWriteToOD+0xba>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80046e0:	6a3a      	ldr	r2, [r7, #32]
 80046e2:	429a      	cmp	r2, r3
 80046e4:	d910      	bls.n	8004708 <validateAndWriteToOD+0xdc>
                SDO->buf[SDO->bufOffsetWr++] = 0;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80046ec:	1c59      	adds	r1, r3, #1
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	f8c2 10a0 	str.w	r1, [r2, #160]	; 0xa0
 80046f4:	68fa      	ldr	r2, [r7, #12]
 80046f6:	4413      	add	r3, r2
 80046f8:	2200      	movs	r2, #0
 80046fa:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
                SDO->sizeTran++;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004702:	1c5a      	adds	r2, r3, #1
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	669a      	str	r2, [r3, #104]	; 0x68
            }
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	621a      	str	r2, [r3, #32]
 8004710:	e02d      	b.n	800476e <validateAndWriteToOD+0x142>
        }
        /* Indicate OD data size, if not indicated. Can be used for EOF check.*/
        else if (sizeInOd == 0) {
 8004712:	6a3b      	ldr	r3, [r7, #32]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d104      	bne.n	8004722 <validateAndWriteToOD+0xf6>
            SDO->OD_IO.stream.dataLength = SDO->sizeTran;
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	621a      	str	r2, [r3, #32]
 8004720:	e025      	b.n	800476e <validateAndWriteToOD+0x142>
        }
        /* Verify if size of data downloaded matches data size in OD. */
        else if (SDO->sizeTran != sizeInOd) {
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004726:	6a3a      	ldr	r2, [r7, #32]
 8004728:	429a      	cmp	r2, r3
 800472a:	d020      	beq.n	800476e <validateAndWriteToOD+0x142>
            *abortCode = (SDO->sizeTran > sizeInOd) ?
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
                         CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 8004730:	6a3a      	ldr	r2, [r7, #32]
 8004732:	429a      	cmp	r2, r3
 8004734:	d201      	bcs.n	800473a <validateAndWriteToOD+0x10e>
 8004736:	4a3f      	ldr	r2, [pc, #252]	; (8004834 <validateAndWriteToOD+0x208>)
 8004738:	e000      	b.n	800473c <validateAndWriteToOD+0x110>
 800473a:	4a3f      	ldr	r2, [pc, #252]	; (8004838 <validateAndWriteToOD+0x20c>)
            *abortCode = (SDO->sizeTran > sizeInOd) ?
 800473c:	68bb      	ldr	r3, [r7, #8]
 800473e:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	2201      	movs	r2, #1
 8004744:	751a      	strb	r2, [r3, #20]
            return false;
 8004746:	2300      	movs	r3, #0
 8004748:	e070      	b.n	800482c <validateAndWriteToOD+0x200>
        }
    }
    else {
        /* Verify if size of data downloaded is not too large. */
        if (SDO->sizeInd > 0 && SDO->sizeTran > SDO->sizeInd) {
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800474e:	2b00      	cmp	r3, #0
 8004750:	d00d      	beq.n	800476e <validateAndWriteToOD+0x142>
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800475a:	429a      	cmp	r2, r3
 800475c:	d907      	bls.n	800476e <validateAndWriteToOD+0x142>
            *abortCode = CO_SDO_AB_DATA_LONG;
 800475e:	68bb      	ldr	r3, [r7, #8]
 8004760:	4a34      	ldr	r2, [pc, #208]	; (8004834 <validateAndWriteToOD+0x208>)
 8004762:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	2201      	movs	r2, #1
 8004768:	751a      	strb	r2, [r3, #20]
            return false;
 800476a:	2300      	movs	r3, #0
 800476c:	e05e      	b.n	800482c <validateAndWriteToOD+0x200>
#endif
    /* may be unused */
    (void) crcOperation; (void) crcClient; (void) bufOffsetWrOrig;

    /* write data */
    OD_size_t countWritten = 0;
 800476e:	2300      	movs	r3, #0
 8004770:	613b      	str	r3, [r7, #16]

    CO_LOCK_OD(SDO->CANdevTx);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004776:	f3ef 8210 	mrs	r2, PRIMASK
 800477a:	617a      	str	r2, [r7, #20]
  return(result);
 800477c:	697a      	ldr	r2, [r7, #20]
 800477e:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8004780:	b672      	cpsid	i
}
 8004782:	bf00      	nop
    ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, SDO->buf,
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f103 0018 	add.w	r0, r3, #24
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	f103 017c 	add.w	r1, r3, #124	; 0x7c
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800479a:	f107 0310 	add.w	r3, r7, #16
 800479e:	47a0      	blx	r4
 80047a0:	4603      	mov	r3, r0
 80047a2:	77fb      	strb	r3, [r7, #31]
                                   SDO->bufOffsetWr, &countWritten);
    CO_UNLOCK_OD(SDO->CANdevTx);
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047aa:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047ac:	69bb      	ldr	r3, [r7, #24]
 80047ae:	f383 8810 	msr	PRIMASK, r3
}
 80047b2:	bf00      	nop

    SDO->bufOffsetWr = 0;
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

    /* verify write error value */
    if (odRet != ODR_OK && odRet != ODR_PARTIAL) {
 80047bc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d011      	beq.n	80047e8 <validateAndWriteToOD+0x1bc>
 80047c4:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80047c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047cc:	d00c      	beq.n	80047e8 <validateAndWriteToOD+0x1bc>
        *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 80047ce:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7fd f9d4 	bl	8001b80 <OD_getSDOabCode>
 80047d8:	4602      	mov	r2, r0
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	2201      	movs	r2, #1
 80047e2:	751a      	strb	r2, [r3, #20]
        return false;
 80047e4:	2300      	movs	r3, #0
 80047e6:	e021      	b.n	800482c <validateAndWriteToOD+0x200>
    }
    else if (SDO->finished && odRet == ODR_PARTIAL) {
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80047ec:	2b00      	cmp	r3, #0
 80047ee:	d00c      	beq.n	800480a <validateAndWriteToOD+0x1de>
 80047f0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80047f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f8:	d107      	bne.n	800480a <validateAndWriteToOD+0x1de>
        /* OD variable was not written completely, but SDO download finished */
        *abortCode = CO_SDO_AB_DATA_SHORT;
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	4a0e      	ldr	r2, [pc, #56]	; (8004838 <validateAndWriteToOD+0x20c>)
 80047fe:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2201      	movs	r2, #1
 8004804:	751a      	strb	r2, [r3, #20]
        return false;
 8004806:	2300      	movs	r3, #0
 8004808:	e010      	b.n	800482c <validateAndWriteToOD+0x200>
    }
    else if (!SDO->finished && odRet == ODR_OK) {
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10b      	bne.n	800482a <validateAndWriteToOD+0x1fe>
 8004812:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d107      	bne.n	800482a <validateAndWriteToOD+0x1fe>
        /* OD variable was written completely, but SDO download still has data*/
        *abortCode = CO_SDO_AB_DATA_LONG;
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	4a05      	ldr	r2, [pc, #20]	; (8004834 <validateAndWriteToOD+0x208>)
 800481e:	601a      	str	r2, [r3, #0]
        SDO->state = CO_SDO_ST_ABORT;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	2201      	movs	r2, #1
 8004824:	751a      	strb	r2, [r3, #20]
        return false;
 8004826:	2300      	movs	r3, #0
 8004828:	e000      	b.n	800482c <validateAndWriteToOD+0x200>
    }

    return true;
 800482a:	2301      	movs	r3, #1
}
 800482c:	4618      	mov	r0, r3
 800482e:	372c      	adds	r7, #44	; 0x2c
 8004830:	46bd      	mov	sp, r7
 8004832:	bd90      	pop	{r4, r7, pc}
 8004834:	06070012 	.word	0x06070012
 8004838:	06070013 	.word	0x06070013

0800483c <readFromOd>:
 * CO_SDO_ST_ABORT */
static bool_t readFromOd(CO_SDOserver_t *SDO,
                         CO_SDO_abortCode_t *abortCode,
                         OD_size_t countMinimum,
                         bool_t calculateCrc)
{
 800483c:	b590      	push	{r4, r7, lr}
 800483e:	b08d      	sub	sp, #52	; 0x34
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
 8004848:	603b      	str	r3, [r7, #0]
    OD_size_t countRemain = SDO->bufOffsetWr - SDO->bufOffsetRd;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004856:	1ad3      	subs	r3, r2, r3
 8004858:	627b      	str	r3, [r7, #36]	; 0x24

    if (!SDO->finished && countRemain < countMinimum) {
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800485e:	2b00      	cmp	r3, #0
 8004860:	f040 80a5 	bne.w	80049ae <readFromOd+0x172>
 8004864:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	429a      	cmp	r2, r3
 800486a:	f080 80a0 	bcs.w	80049ae <readFromOd+0x172>
        /* first move remaining data to the start of the buffer */
        memmove(SDO->buf, SDO->buf + SDO->bufOffsetRd, countRemain);
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004880:	4413      	add	r3, r2
 8004882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004884:	4619      	mov	r1, r3
 8004886:	f00f fc09 	bl	801409c <memmove>
        SDO->bufOffsetRd = 0;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
        SDO->bufOffsetWr = countRemain;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004896:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

        /* Get size of free data buffer */
        OD_size_t countRdRequest = CO_CONFIG_SDO_SRV_BUFFER_SIZE - countRemain;
 800489a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800489c:	f1c3 0320 	rsb	r3, r3, #32
 80048a0:	623b      	str	r3, [r7, #32]

        /* load data from OD variable into the buffer */
        OD_size_t countRd = 0;
 80048a2:	2300      	movs	r3, #0
 80048a4:	613b      	str	r3, [r7, #16]
        uint8_t *bufShifted = SDO->buf + countRemain;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 80048ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ae:	4413      	add	r3, r2
 80048b0:	61fb      	str	r3, [r7, #28]

        CO_LOCK_OD(SDO->CANdevTx);
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80048b6:	f3ef 8210 	mrs	r2, PRIMASK
 80048ba:	617a      	str	r2, [r7, #20]
  return(result);
 80048bc:	697a      	ldr	r2, [r7, #20]
 80048be:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 80048c0:	b672      	cpsid	i
}
 80048c2:	bf00      	nop
        ODR_t odRet = SDO->OD_IO.read(&SDO->OD_IO.stream, bufShifted,
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f103 0018 	add.w	r0, r3, #24
 80048ce:	f107 0310 	add.w	r3, r7, #16
 80048d2:	6a3a      	ldr	r2, [r7, #32]
 80048d4:	69f9      	ldr	r1, [r7, #28]
 80048d6:	47a0      	blx	r4
 80048d8:	4603      	mov	r3, r0
 80048da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                                      countRdRequest, &countRd);
        CO_UNLOCK_OD(SDO->CANdevTx);
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	f383 8810 	msr	PRIMASK, r3
}
 80048ec:	bf00      	nop

        if (odRet != ODR_OK && odRet != ODR_PARTIAL) {
 80048ee:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d011      	beq.n	800491a <readFromOd+0xde>
 80048f6:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 80048fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048fe:	d00c      	beq.n	800491a <readFromOd+0xde>
            *abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8004900:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004904:	4618      	mov	r0, r3
 8004906:	f7fd f93b 	bl	8001b80 <OD_getSDOabCode>
 800490a:	4602      	mov	r2, r0
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	601a      	str	r2, [r3, #0]
            SDO->state = CO_SDO_ST_ABORT;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	2201      	movs	r2, #1
 8004914:	751a      	strb	r2, [r3, #20]
            return false;
 8004916:	2300      	movs	r3, #0
 8004918:	e04a      	b.n	80049b0 <readFromOd+0x174>
        }

        /* if data is string, send only data up to null termination */
        if (countRd > 0 && (SDO->OD_IO.stream.attribute & ODA_STR) != 0) {
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d022      	beq.n	8004966 <readFromOd+0x12a>
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004926:	b25b      	sxtb	r3, r3
 8004928:	2b00      	cmp	r3, #0
 800492a:	da1c      	bge.n	8004966 <readFromOd+0x12a>
            bufShifted[countRd] = 0; /* (SDO->buf is one byte larger) */
 800492c:	693b      	ldr	r3, [r7, #16]
 800492e:	69fa      	ldr	r2, [r7, #28]
 8004930:	4413      	add	r3, r2
 8004932:	2200      	movs	r2, #0
 8004934:	701a      	strb	r2, [r3, #0]
            OD_size_t countStr = (OD_size_t)strlen((char *)bufShifted);
 8004936:	69f8      	ldr	r0, [r7, #28]
 8004938:	f7fb fcdc 	bl	80002f4 <strlen>
 800493c:	62b8      	str	r0, [r7, #40]	; 0x28
            if (countStr == 0) countStr = 1; /* zero length is not allowed */
 800493e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004940:	2b00      	cmp	r3, #0
 8004942:	d101      	bne.n	8004948 <readFromOd+0x10c>
 8004944:	2301      	movs	r3, #1
 8004946:	62bb      	str	r3, [r7, #40]	; 0x28
            if (countStr < countRd) {
 8004948:	693b      	ldr	r3, [r7, #16]
 800494a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800494c:	429a      	cmp	r2, r3
 800494e:	d20a      	bcs.n	8004966 <readFromOd+0x12a>
                /* string terminator found, read is finished, shorten data */
                countRd = countStr;
 8004950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004952:	613b      	str	r3, [r7, #16]
                odRet = ODR_OK;
 8004954:	2300      	movs	r3, #0
 8004956:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                SDO->OD_IO.stream.dataLength = SDO->sizeTran + countRd;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	441a      	add	r2, r3
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	621a      	str	r2, [r3, #32]
            }
        }

        /* partial or finished read */
        SDO->bufOffsetWr = countRemain + countRd;
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800496a:	441a      	add	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
        if (SDO->bufOffsetWr == 0 || odRet == ODR_PARTIAL) {
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004978:	2b00      	cmp	r3, #0
 800497a:	d004      	beq.n	8004986 <readFromOd+0x14a>
 800497c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8004980:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004984:	d110      	bne.n	80049a8 <readFromOd+0x16c>
            SDO->finished = false;
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	2200      	movs	r2, #0
 800498a:	671a      	str	r2, [r3, #112]	; 0x70
            if (SDO->bufOffsetWr < countMinimum) {
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004992:	687a      	ldr	r2, [r7, #4]
 8004994:	429a      	cmp	r2, r3
 8004996:	d90a      	bls.n	80049ae <readFromOd+0x172>
                *abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 8004998:	68bb      	ldr	r3, [r7, #8]
 800499a:	4a07      	ldr	r2, [pc, #28]	; (80049b8 <readFromOd+0x17c>)
 800499c:	601a      	str	r2, [r3, #0]
                SDO->state = CO_SDO_ST_ABORT;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2201      	movs	r2, #1
 80049a2:	751a      	strb	r2, [r3, #20]
                return false;
 80049a4:	2300      	movs	r3, #0
 80049a6:	e003      	b.n	80049b0 <readFromOd+0x174>
            }
        }
        else {
            SDO->finished = true;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	2201      	movs	r2, #1
 80049ac:	671a      	str	r2, [r3, #112]	; 0x70
            SDO->block_crc = crc16_ccitt(bufShifted, countRd, SDO->block_crc);
        }
#endif

    }
    return true;
 80049ae:	2301      	movs	r3, #1
}
 80049b0:	4618      	mov	r0, r3
 80049b2:	3734      	adds	r7, #52	; 0x34
 80049b4:	46bd      	mov	sp, r7
 80049b6:	bd90      	pop	{r4, r7, pc}
 80049b8:	06040047 	.word	0x06040047

080049bc <CO_SDOserver_process>:
/******************************************************************************/
CO_SDO_return_t CO_SDOserver_process(CO_SDOserver_t *SDO,
                                     bool_t NMTisPreOrOperational,
                                     uint32_t timeDifference_us,
                                     uint32_t *timerNext_us)
{
 80049bc:	b590      	push	{r4, r7, lr}
 80049be:	b09b      	sub	sp, #108	; 0x6c
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	60f8      	str	r0, [r7, #12]
 80049c4:	60b9      	str	r1, [r7, #8]
 80049c6:	607a      	str	r2, [r7, #4]
 80049c8:	603b      	str	r3, [r7, #0]
    if (SDO == NULL) {
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d103      	bne.n	80049d8 <CO_SDOserver_process+0x1c>
        return CO_SDO_RT_wrongArguments;
 80049d0:	f06f 0301 	mvn.w	r3, #1
 80049d4:	f000 bcf2 	b.w	80053bc <CO_SDOserver_process+0xa00>
    }

    (void)timerNext_us; /* may be unused */

    CO_SDO_return_t ret = CO_SDO_RT_waitingResponse;
 80049d8:	2301      	movs	r3, #1
 80049da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    CO_SDO_abortCode_t abortCode = CO_SDO_AB_NONE;
 80049de:	2300      	movs	r3, #0
 80049e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    bool_t isNew = CO_FLAG_READ(SDO->CANrxNew);
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	bf14      	ite	ne
 80049ea:	2301      	movne	r3, #1
 80049ec:	2300      	moveq	r3, #0
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	657b      	str	r3, [r7, #84]	; 0x54


    if (SDO->valid && SDO->state == CO_SDO_ST_IDLE && !isNew) {
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	691b      	ldr	r3, [r3, #16]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d00b      	beq.n	8004a12 <CO_SDOserver_process+0x56>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	7d1b      	ldrb	r3, [r3, #20]
 80049fe:	b2db      	uxtb	r3, r3
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d106      	bne.n	8004a12 <CO_SDOserver_process+0x56>
 8004a04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d103      	bne.n	8004a12 <CO_SDOserver_process+0x56>
        /* Idle and nothing new */
        ret = CO_SDO_RT_ok_communicationEnd;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004a10:	e2c7      	b.n	8004fa2 <CO_SDOserver_process+0x5e6>
    }
    else if (!NMTisPreOrOperational || !SDO->valid) {
 8004a12:	68bb      	ldr	r3, [r7, #8]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d003      	beq.n	8004a20 <CO_SDOserver_process+0x64>
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d109      	bne.n	8004a34 <CO_SDOserver_process+0x78>
        /* SDO is allowed only in operational or pre-operational NMT state
         * and must be valid */
        SDO->state = CO_SDO_ST_IDLE;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	751a      	strb	r2, [r3, #20]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	2200      	movs	r2, #0
 8004a2a:	639a      	str	r2, [r3, #56]	; 0x38
        ret = CO_SDO_RT_ok_communicationEnd;
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8004a32:	e2b6      	b.n	8004fa2 <CO_SDOserver_process+0x5e6>
    }
    /* CAN data received ******************************************************/
    else if (isNew) {
 8004a34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	f000 82b3 	beq.w	8004fa2 <CO_SDOserver_process+0x5e6>
        if (SDO->state == CO_SDO_ST_IDLE) { /* new SDO communication? */
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	7d1b      	ldrb	r3, [r3, #20]
 8004a40:	b2db      	uxtb	r3, r3
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f040 80ce 	bne.w	8004be4 <CO_SDOserver_process+0x228>
            bool_t upload = false;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	663b      	str	r3, [r7, #96]	; 0x60

            if ((SDO->CANrxData[0] & 0xF0) == 0x20) {
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a56:	2b20      	cmp	r3, #32
 8004a58:	d103      	bne.n	8004a62 <CO_SDOserver_process+0xa6>
                SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_REQ;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	2211      	movs	r2, #17
 8004a5e:	751a      	strb	r2, [r3, #20]
 8004a60:	e00f      	b.n	8004a82 <CO_SDOserver_process+0xc6>
            }
            else if (SDO->CANrxData[0] == 0x40) {
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a68:	2b40      	cmp	r3, #64	; 0x40
 8004a6a:	d105      	bne.n	8004a78 <CO_SDOserver_process+0xbc>
                upload = true;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	663b      	str	r3, [r7, #96]	; 0x60
                SDO->state = CO_SDO_ST_UPLOAD_INITIATE_REQ;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2221      	movs	r2, #33	; 0x21
 8004a74:	751a      	strb	r2, [r3, #20]
 8004a76:	e004      	b.n	8004a82 <CO_SDOserver_process+0xc6>
                upload = true;
                SDO->state = CO_SDO_ST_UPLOAD_BLK_INITIATE_REQ;
            }
#endif
            else {
                abortCode = CO_SDO_AB_CMD;
 8004a78:	4ba5      	ldr	r3, [pc, #660]	; (8004d10 <CO_SDOserver_process+0x354>)
 8004a7a:	62fb      	str	r3, [r7, #44]	; 0x2c
                SDO->state = CO_SDO_ST_ABORT;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	2201      	movs	r2, #1
 8004a80:	751a      	strb	r2, [r3, #20]
            }

            /* if no error search object dictionary for new SDO request */
            if (abortCode == CO_SDO_AB_NONE) {
 8004a82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d162      	bne.n	8004b4e <CO_SDOserver_process+0x192>
                ODR_t odRet;
                SDO->index = ((uint16_t)SDO->CANrxData[2]) << 8
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a8e:	021b      	lsls	r3, r3, #8
                             | SDO->CANrxData[1];
 8004a90:	b21a      	sxth	r2, r3
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a98:	b21b      	sxth	r3, r3
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	b21b      	sxth	r3, r3
 8004a9e:	b29a      	uxth	r2, r3
                SDO->index = ((uint16_t)SDO->CANrxData[2]) << 8
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	869a      	strh	r2, [r3, #52]	; 0x34
                SDO->subIndex = SDO->CANrxData[3];
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	f893 203f 	ldrb.w	r2, [r3, #63]	; 0x3f
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
                odRet = OD_getSub(OD_find(SDO->OD, SDO->index), SDO->subIndex,
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	689a      	ldr	r2, [r3, #8]
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 8004ab8:	4619      	mov	r1, r3
 8004aba:	4610      	mov	r0, r2
 8004abc:	f7fc ff12 	bl	80018e4 <OD_find>
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f893 1036 	ldrb.w	r1, [r3, #54]	; 0x36
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	f103 0218 	add.w	r2, r3, #24
 8004acc:	2300      	movs	r3, #0
 8004ace:	f7fc ff65 	bl	800199c <OD_getSub>
 8004ad2:	4603      	mov	r3, r0
 8004ad4:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
                                  &SDO->OD_IO, false);
                if (odRet != ODR_OK) {
 8004ad8:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d00a      	beq.n	8004af6 <CO_SDOserver_process+0x13a>
                    abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8004ae0:	f997 3053 	ldrsb.w	r3, [r7, #83]	; 0x53
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	f7fd f84b 	bl	8001b80 <OD_getSDOabCode>
 8004aea:	4603      	mov	r3, r0
 8004aec:	62fb      	str	r3, [r7, #44]	; 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2201      	movs	r2, #1
 8004af2:	751a      	strb	r2, [r3, #20]
 8004af4:	e02b      	b.n	8004b4e <CO_SDOserver_process+0x192>
                }
                else {
                    /* verify read/write attributes */
                    if ((SDO->OD_IO.stream.attribute & ODA_SDO_RW) == 0) {
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004afc:	f003 0303 	and.w	r3, r3, #3
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d105      	bne.n	8004b10 <CO_SDOserver_process+0x154>
                        abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
 8004b04:	4b83      	ldr	r3, [pc, #524]	; (8004d14 <CO_SDOserver_process+0x358>)
 8004b06:	62fb      	str	r3, [r7, #44]	; 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2201      	movs	r2, #1
 8004b0c:	751a      	strb	r2, [r3, #20]
 8004b0e:	e01e      	b.n	8004b4e <CO_SDOserver_process+0x192>
                    }
                    else if (upload
 8004b10:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00c      	beq.n	8004b30 <CO_SDOserver_process+0x174>
                             && (SDO->OD_IO.stream.attribute & ODA_SDO_R) == 0
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b1c:	f003 0301 	and.w	r3, r3, #1
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d105      	bne.n	8004b30 <CO_SDOserver_process+0x174>
                    ) {
                        abortCode = CO_SDO_AB_WRITEONLY;
 8004b24:	4b7c      	ldr	r3, [pc, #496]	; (8004d18 <CO_SDOserver_process+0x35c>)
 8004b26:	62fb      	str	r3, [r7, #44]	; 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	751a      	strb	r2, [r3, #20]
 8004b2e:	e00e      	b.n	8004b4e <CO_SDOserver_process+0x192>
                    }
                    else if (!upload
 8004b30:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10b      	bne.n	8004b4e <CO_SDOserver_process+0x192>
                             && (SDO->OD_IO.stream.attribute & ODA_SDO_W) == 0
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004b3c:	f003 0302 	and.w	r3, r3, #2
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d104      	bne.n	8004b4e <CO_SDOserver_process+0x192>
                    ) {
                        abortCode = CO_SDO_AB_READONLY;
 8004b44:	4b75      	ldr	r3, [pc, #468]	; (8004d1c <CO_SDOserver_process+0x360>)
 8004b46:	62fb      	str	r3, [r7, #44]	; 0x2c
                        SDO->state = CO_SDO_ST_ABORT;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	751a      	strb	r2, [r3, #20]
                }
            }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            /* load data from object dictionary, if upload and no error */
            if (upload && abortCode == CO_SDO_AB_NONE) {
 8004b4e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d047      	beq.n	8004be4 <CO_SDOserver_process+0x228>
 8004b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d144      	bne.n	8004be4 <CO_SDOserver_process+0x228>
                SDO->bufOffsetRd = SDO->bufOffsetWr = 0;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                SDO->sizeTran = 0;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	2200      	movs	r2, #0
 8004b72:	669a      	str	r2, [r3, #104]	; 0x68
                SDO->finished = false;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	671a      	str	r2, [r3, #112]	; 0x70

                if (readFromOd(SDO, &abortCode, 7, false)) {
 8004b7a:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8004b7e:	2300      	movs	r3, #0
 8004b80:	2207      	movs	r2, #7
 8004b82:	68f8      	ldr	r0, [r7, #12]
 8004b84:	f7ff fe5a 	bl	800483c <readFromOd>
 8004b88:	4603      	mov	r3, r0
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d02a      	beq.n	8004be4 <CO_SDOserver_process+0x228>
                    /* Size of variable in OD (may not be known yet) */
                    if (SDO->finished) {
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d01a      	beq.n	8004bcc <CO_SDOserver_process+0x210>
                        /* OD variable was completely read, its size is known */

                        SDO->sizeInd = SDO->OD_IO.stream.dataLength;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	6a1a      	ldr	r2, [r3, #32]
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	665a      	str	r2, [r3, #100]	; 0x64

                        if (SDO->sizeInd == 0) {
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d105      	bne.n	8004bb2 <CO_SDOserver_process+0x1f6>
                            SDO->sizeInd = SDO->bufOffsetWr;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	665a      	str	r2, [r3, #100]	; 0x64
 8004bb0:	e018      	b.n	8004be4 <CO_SDOserver_process+0x228>
                        }
                        else if (SDO->sizeInd != SDO->bufOffsetWr) {
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004bbc:	429a      	cmp	r2, r3
 8004bbe:	d011      	beq.n	8004be4 <CO_SDOserver_process+0x228>
                            abortCode = CO_SDO_AB_DEVICE_INCOMPAT;
 8004bc0:	4b57      	ldr	r3, [pc, #348]	; (8004d20 <CO_SDOserver_process+0x364>)
 8004bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	751a      	strb	r2, [r3, #20]
 8004bca:	e00b      	b.n	8004be4 <CO_SDOserver_process+0x228>
                        }
                    }
                    else {
                        /* If data type is string, size is not known */
                        SDO->sizeInd = (SDO->OD_IO.stream.attribute&ODA_STR)==0
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004bd2:	b25b      	sxtb	r3, r3
                                     ? SDO->OD_IO.stream.dataLength
                                     : 0;
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	db02      	blt.n	8004bde <CO_SDOserver_process+0x222>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	6a1b      	ldr	r3, [r3, #32]
 8004bdc:	e000      	b.n	8004be0 <CO_SDOserver_process+0x224>
 8004bde:	2300      	movs	r3, #0
                        SDO->sizeInd = (SDO->OD_IO.stream.attribute&ODA_STR)==0
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	6653      	str	r3, [r2, #100]	; 0x64
                }
            }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */
        } /* (SDO->state == CO_SDO_ST_IDLE) */

        if (SDO->state != CO_SDO_ST_IDLE && SDO->state != CO_SDO_ST_ABORT)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	7d1b      	ldrb	r3, [r3, #20]
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	f000 81c5 	beq.w	8004f7a <CO_SDOserver_process+0x5be>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	7d1b      	ldrb	r3, [r3, #20]
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	2b01      	cmp	r3, #1
 8004bf8:	f000 81bf 	beq.w	8004f7a <CO_SDOserver_process+0x5be>
        switch (SDO->state) {
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	7d1b      	ldrb	r3, [r3, #20]
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	3b11      	subs	r3, #17
 8004c04:	2b12      	cmp	r3, #18
 8004c06:	f200 81b2 	bhi.w	8004f6e <CO_SDOserver_process+0x5b2>
 8004c0a:	a201      	add	r2, pc, #4	; (adr r2, 8004c10 <CO_SDOserver_process+0x254>)
 8004c0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c10:	08004c5d 	.word	0x08004c5d
 8004c14:	08004f6f 	.word	0x08004f6f
 8004c18:	08004e27 	.word	0x08004e27
 8004c1c:	08004f6f 	.word	0x08004f6f
 8004c20:	08004f6f 	.word	0x08004f6f
 8004c24:	08004f6f 	.word	0x08004f6f
 8004c28:	08004f6f 	.word	0x08004f6f
 8004c2c:	08004f6f 	.word	0x08004f6f
 8004c30:	08004f6f 	.word	0x08004f6f
 8004c34:	08004f6f 	.word	0x08004f6f
 8004c38:	08004f6f 	.word	0x08004f6f
 8004c3c:	08004f6f 	.word	0x08004f6f
 8004c40:	08004f6f 	.word	0x08004f6f
 8004c44:	08004f6f 	.word	0x08004f6f
 8004c48:	08004f6f 	.word	0x08004f6f
 8004c4c:	08004f6f 	.word	0x08004f6f
 8004c50:	08004f1d 	.word	0x08004f1d
 8004c54:	08004f6f 	.word	0x08004f6f
 8004c58:	08004f25 	.word	0x08004f25
        case CO_SDO_ST_DOWNLOAD_INITIATE_REQ: {
            if (SDO->CANrxData[0] & 0x02) {
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	f000 80a3 	beq.w	8004db2 <CO_SDOserver_process+0x3f6>
                /* Expedited transfer, max 4 bytes of data */

                /* Size of OD variable (>0 if indicated) */
                OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	6a1b      	ldr	r3, [r3, #32]
 8004c70:	647b      	str	r3, [r7, #68]	; 0x44

                /* Get SDO data size (indicated by SDO client or get from OD) */
                OD_size_t dataSizeToWrite = 4;
 8004c72:	2304      	movs	r3, #4
 8004c74:	65fb      	str	r3, [r7, #92]	; 0x5c
                if (SDO->CANrxData[0] & 0x01)
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d00a      	beq.n	8004c9a <CO_SDOserver_process+0x2de>
                    dataSizeToWrite -= (SDO->CANrxData[0] >> 2) & 0x03;
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c8a:	089b      	lsrs	r3, r3, #2
 8004c8c:	b2db      	uxtb	r3, r3
 8004c8e:	f003 0303 	and.w	r3, r3, #3
 8004c92:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004c94:	1ad3      	subs	r3, r2, r3
 8004c96:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c98:	e007      	b.n	8004caa <CO_SDOserver_process+0x2ee>
                else if (sizeInOd > 0 && sizeInOd < 4)
 8004c9a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d004      	beq.n	8004caa <CO_SDOserver_process+0x2ee>
 8004ca0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ca2:	2b03      	cmp	r3, #3
 8004ca4:	d801      	bhi.n	8004caa <CO_SDOserver_process+0x2ee>
                    dataSizeToWrite = sizeInOd;
 8004ca6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ca8:	65fb      	str	r3, [r7, #92]	; 0x5c

                /* copy data to the temp buffer, swap data if necessary */
                uint8_t buf[6] = {0};
 8004caa:	2300      	movs	r3, #0
 8004cac:	627b      	str	r3, [r7, #36]	; 0x24
 8004cae:	2300      	movs	r3, #0
 8004cb0:	853b      	strh	r3, [r7, #40]	; 0x28
                memcpy(buf, &SDO->CANrxData[4], dataSizeToWrite);
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f103 0140 	add.w	r1, r3, #64	; 0x40
 8004cb8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004cbc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f00f f9de 	bl	8014080 <memcpy>

                /* If dataType is string, then size of data downloaded may be
                 * shorter as size of OD data buffer. If so, add two zero bytes
                 * to terminate (unicode) string. Shorten also OD data size,
                 * (temporary, send information about EOF into OD_IO.write) */
                if ((SDO->OD_IO.stream.attribute & ODA_STR) != 0
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004cca:	b25b      	sxtb	r3, r3
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	da17      	bge.n	8004d00 <CO_SDOserver_process+0x344>
                    && (sizeInOd == 0 || dataSizeToWrite < sizeInOd)
 8004cd0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d003      	beq.n	8004cde <CO_SDOserver_process+0x322>
 8004cd6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004cd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004cda:	429a      	cmp	r2, r3
 8004cdc:	d210      	bcs.n	8004d00 <CO_SDOserver_process+0x344>
                ) {
                    OD_size_t delta = sizeInOd - dataSizeToWrite;
 8004cde:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ce0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	643b      	str	r3, [r7, #64]	; 0x40
                    dataSizeToWrite += delta == 1 ? 1 : 2;
 8004ce6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ce8:	2b01      	cmp	r3, #1
 8004cea:	d101      	bne.n	8004cf0 <CO_SDOserver_process+0x334>
 8004cec:	2301      	movs	r3, #1
 8004cee:	e000      	b.n	8004cf2 <CO_SDOserver_process+0x336>
 8004cf0:	2302      	movs	r3, #2
 8004cf2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004cf4:	4413      	add	r3, r2
 8004cf6:	65fb      	str	r3, [r7, #92]	; 0x5c
                    SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004cfc:	621a      	str	r2, [r3, #32]
                ) {
 8004cfe:	e021      	b.n	8004d44 <CO_SDOserver_process+0x388>
                }
                else if (sizeInOd == 0) {
 8004d00:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d10e      	bne.n	8004d24 <CO_SDOserver_process+0x368>
                    SDO->OD_IO.stream.dataLength = dataSizeToWrite;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d0a:	621a      	str	r2, [r3, #32]
 8004d0c:	e01a      	b.n	8004d44 <CO_SDOserver_process+0x388>
 8004d0e:	bf00      	nop
 8004d10:	05040001 	.word	0x05040001
 8004d14:	06010000 	.word	0x06010000
 8004d18:	06010001 	.word	0x06010001
 8004d1c:	06010002 	.word	0x06010002
 8004d20:	06040047 	.word	0x06040047
                }
                /* Verify if size of data downloaded matches data size in OD. */
                else if (dataSizeToWrite != sizeInOd) {
 8004d24:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d28:	429a      	cmp	r2, r3
 8004d2a:	d00b      	beq.n	8004d44 <CO_SDOserver_process+0x388>
                    abortCode = (dataSizeToWrite > sizeInOd) ?
                                CO_SDO_AB_DATA_LONG : CO_SDO_AB_DATA_SHORT;
 8004d2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d901      	bls.n	8004d38 <CO_SDOserver_process+0x37c>
 8004d34:	4b92      	ldr	r3, [pc, #584]	; (8004f80 <CO_SDOserver_process+0x5c4>)
 8004d36:	e000      	b.n	8004d3a <CO_SDOserver_process+0x37e>
 8004d38:	4b92      	ldr	r3, [pc, #584]	; (8004f84 <CO_SDOserver_process+0x5c8>)
                    abortCode = (dataSizeToWrite > sizeInOd) ?
 8004d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	2201      	movs	r2, #1
 8004d40:	751a      	strb	r2, [r3, #20]
                    break;
 8004d42:	e126      	b.n	8004f92 <CO_SDOserver_process+0x5d6>
                }

                /* Copy data */
                OD_size_t countWritten = 0;
 8004d44:	2300      	movs	r3, #0
 8004d46:	623b      	str	r3, [r7, #32]

                CO_LOCK_OD(SDO->CANdevTx);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d4c:	f3ef 8210 	mrs	r2, PRIMASK
 8004d50:	633a      	str	r2, [r7, #48]	; 0x30
  return(result);
 8004d52:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d54:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8004d56:	b672      	cpsid	i
}
 8004d58:	bf00      	nop
                ODR_t odRet = SDO->OD_IO.write(&SDO->OD_IO.stream, buf,
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f103 0018 	add.w	r0, r3, #24
 8004d64:	f107 0320 	add.w	r3, r7, #32
 8004d68:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8004d6c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d6e:	47a0      	blx	r4
 8004d70:	4603      	mov	r3, r0
 8004d72:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
                                               dataSizeToWrite, &countWritten);
                CO_UNLOCK_OD(SDO->CANdevTx);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004d7c:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d80:	f383 8810 	msr	PRIMASK, r3
}
 8004d84:	bf00      	nop

                if (odRet != ODR_OK) {
 8004d86:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d00a      	beq.n	8004da4 <CO_SDOserver_process+0x3e8>
                    abortCode = (CO_SDO_abortCode_t)OD_getSDOabCode(odRet);
 8004d8e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8004d92:	4618      	mov	r0, r3
 8004d94:	f7fc fef4 	bl	8001b80 <OD_getSDOabCode>
 8004d98:	4603      	mov	r3, r0
 8004d9a:	62fb      	str	r3, [r7, #44]	; 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	751a      	strb	r2, [r3, #20]
                    break;
 8004da2:	e0f6      	b.n	8004f92 <CO_SDOserver_process+0x5d6>
                }
                else {
                    SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2212      	movs	r2, #18
 8004da8:	751a      	strb	r2, [r3, #20]
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
                    SDO->finished = true;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	2201      	movs	r2, #1
 8004dae:	671a      	str	r2, [r3, #112]	; 0x70
#else
                abortCode = CO_SDO_AB_UNSUPPORTED_ACCESS;
                SDO->state = CO_SDO_ST_ABORT;
#endif
            }
            break;
 8004db0:	e0ef      	b.n	8004f92 <CO_SDOserver_process+0x5d6>
                if (SDO->CANrxData[0] & 0x01) {
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004db8:	f003 0301 	and.w	r3, r3, #1
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d028      	beq.n	8004e12 <CO_SDOserver_process+0x456>
                    OD_size_t sizeInOd = SDO->OD_IO.stream.dataLength;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	6a1b      	ldr	r3, [r3, #32]
 8004dc4:	64bb      	str	r3, [r7, #72]	; 0x48
                    memcpy(&size, &SDO->CANrxData[4], sizeof(size));
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	3340      	adds	r3, #64	; 0x40
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	61fb      	str	r3, [r7, #28]
                    SDO->sizeInd = CO_SWAP_32(size);
 8004dce:	69fa      	ldr	r2, [r7, #28]
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	665a      	str	r2, [r3, #100]	; 0x64
                    if (sizeInOd > 0) {
 8004dd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d01e      	beq.n	8004e18 <CO_SDOserver_process+0x45c>
                        if (SDO->sizeInd > sizeInOd) {
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004dde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d205      	bcs.n	8004df0 <CO_SDOserver_process+0x434>
                            abortCode = CO_SDO_AB_DATA_LONG;
 8004de4:	4b66      	ldr	r3, [pc, #408]	; (8004f80 <CO_SDOserver_process+0x5c4>)
 8004de6:	62fb      	str	r3, [r7, #44]	; 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2201      	movs	r2, #1
 8004dec:	751a      	strb	r2, [r3, #20]
                            break;
 8004dee:	e0d0      	b.n	8004f92 <CO_SDOserver_process+0x5d6>
                        else if (SDO->sizeInd < sizeInOd
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004df4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004df6:	429a      	cmp	r2, r3
 8004df8:	d90e      	bls.n	8004e18 <CO_SDOserver_process+0x45c>
                                 && (SDO->OD_IO.stream.attribute & ODA_STR) == 0
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e00:	b25b      	sxtb	r3, r3
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	db08      	blt.n	8004e18 <CO_SDOserver_process+0x45c>
                            abortCode = CO_SDO_AB_DATA_SHORT;
 8004e06:	4b5f      	ldr	r3, [pc, #380]	; (8004f84 <CO_SDOserver_process+0x5c8>)
 8004e08:	62fb      	str	r3, [r7, #44]	; 0x2c
                            SDO->state = CO_SDO_ST_ABORT;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2201      	movs	r2, #1
 8004e0e:	751a      	strb	r2, [r3, #20]
                            break;
 8004e10:	e0bf      	b.n	8004f92 <CO_SDOserver_process+0x5d6>
                    SDO->sizeInd = 0;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	2200      	movs	r2, #0
 8004e16:	665a      	str	r2, [r3, #100]	; 0x64
                SDO->state = CO_SDO_ST_DOWNLOAD_INITIATE_RSP;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2212      	movs	r2, #18
 8004e1c:	751a      	strb	r2, [r3, #20]
                SDO->finished = false;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	2200      	movs	r2, #0
 8004e22:	671a      	str	r2, [r3, #112]	; 0x70
            break;
 8004e24:	e0b5      	b.n	8004f92 <CO_SDOserver_process+0x5d6>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_DOWNLOAD_SEGMENT_REQ: {
            if ((SDO->CANrxData[0] & 0xE0) == 0x00) {
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e2c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d16d      	bne.n	8004f10 <CO_SDOserver_process+0x554>
                SDO->finished = (SDO->CANrxData[0] & 0x01) != 0;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e3a:	f003 0301 	and.w	r3, r3, #1
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	bf14      	ite	ne
 8004e42:	2301      	movne	r3, #1
 8004e44:	2300      	moveq	r3, #0
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	461a      	mov	r2, r3
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	671a      	str	r2, [r3, #112]	; 0x70

                /* verify and alternate toggle bit */
                uint8_t toggle = SDO->CANrxData[0] & 0x10;
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e54:	f003 0310 	and.w	r3, r3, #16
 8004e58:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
                if (toggle != SDO->toggle) {
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8004e62:	f897 2051 	ldrb.w	r2, [r7, #81]	; 0x51
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d005      	beq.n	8004e76 <CO_SDOserver_process+0x4ba>
                    abortCode = CO_SDO_AB_TOGGLE_BIT;
 8004e6a:	4b47      	ldr	r3, [pc, #284]	; (8004f88 <CO_SDOserver_process+0x5cc>)
 8004e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2201      	movs	r2, #1
 8004e72:	751a      	strb	r2, [r3, #20]
                    break;
 8004e74:	e08d      	b.n	8004f92 <CO_SDOserver_process+0x5d6>
                }

                /* get data size and write data to the buffer */
                OD_size_t count = 7 - ((SDO->CANrxData[0] >> 1) & 0x07);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e7c:	085b      	lsrs	r3, r3, #1
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	43db      	mvns	r3, r3
 8004e82:	f003 0307 	and.w	r3, r3, #7
 8004e86:	64fb      	str	r3, [r7, #76]	; 0x4c
                memcpy(SDO->buf + SDO->bufOffsetWr, &SDO->CANrxData[1], count);
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004e94:	18d0      	adds	r0, r2, r3
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	333d      	adds	r3, #61	; 0x3d
 8004e9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e9c:	4619      	mov	r1, r3
 8004e9e:	f00f f8ef 	bl	8014080 <memcpy>
                SDO->bufOffsetWr += count;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004ea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eaa:	441a      	add	r2, r3
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
                SDO->sizeTran += count;
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004eb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004eb8:	441a      	add	r2, r3
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	669a      	str	r2, [r3, #104]	; 0x68

                /* if data size exceeds variable size, abort */
                if (SDO->OD_IO.stream.dataLength > 0
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	6a1b      	ldr	r3, [r3, #32]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00b      	beq.n	8004ede <CO_SDOserver_process+0x522>
                    && SDO->sizeTran > SDO->OD_IO.stream.dataLength
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6a1b      	ldr	r3, [r3, #32]
 8004ece:	429a      	cmp	r2, r3
 8004ed0:	d905      	bls.n	8004ede <CO_SDOserver_process+0x522>
                ) {
                    abortCode = CO_SDO_AB_DATA_LONG;
 8004ed2:	4b2b      	ldr	r3, [pc, #172]	; (8004f80 <CO_SDOserver_process+0x5c4>)
 8004ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	2201      	movs	r2, #1
 8004eda:	751a      	strb	r2, [r3, #20]
                    break;
 8004edc:	e059      	b.n	8004f92 <CO_SDOserver_process+0x5d6>
                }

                /* if necessary, empty the buffer */
                if (SDO->finished
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d106      	bne.n	8004ef4 <CO_SDOserver_process+0x538>
                    || (CO_CONFIG_SDO_SRV_BUFFER_SIZE - SDO->bufOffsetWr)<(7+2)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004eec:	f1c3 0320 	rsb	r3, r3, #32
 8004ef0:	2b08      	cmp	r3, #8
 8004ef2:	d809      	bhi.n	8004f08 <CO_SDOserver_process+0x54c>
                ) {
                    if (!validateAndWriteToOD(SDO, &abortCode, 0, 0))
 8004ef4:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8004ef8:	2300      	movs	r3, #0
 8004efa:	2200      	movs	r2, #0
 8004efc:	68f8      	ldr	r0, [r7, #12]
 8004efe:	f7ff fb95 	bl	800462c <validateAndWriteToOD>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d043      	beq.n	8004f90 <CO_SDOserver_process+0x5d4>
                        break;
                }

                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_RSP;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	2214      	movs	r2, #20
 8004f0c:	751a      	strb	r2, [r3, #20]
            }
            else {
                abortCode = CO_SDO_AB_CMD;
                SDO->state = CO_SDO_ST_ABORT;
            }
            break;
 8004f0e:	e040      	b.n	8004f92 <CO_SDOserver_process+0x5d6>
                abortCode = CO_SDO_AB_CMD;
 8004f10:	4b1e      	ldr	r3, [pc, #120]	; (8004f8c <CO_SDOserver_process+0x5d0>)
 8004f12:	62fb      	str	r3, [r7, #44]	; 0x2c
                SDO->state = CO_SDO_ST_ABORT;
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	2201      	movs	r2, #1
 8004f18:	751a      	strb	r2, [r3, #20]
            break;
 8004f1a:	e03a      	b.n	8004f92 <CO_SDOserver_process+0x5d6>
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

        case CO_SDO_ST_UPLOAD_INITIATE_REQ: {
            SDO->state = CO_SDO_ST_UPLOAD_INITIATE_RSP;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2222      	movs	r2, #34	; 0x22
 8004f20:	751a      	strb	r2, [r3, #20]
            break;
 8004f22:	e036      	b.n	8004f92 <CO_SDOserver_process+0x5d6>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_UPLOAD_SEGMENT_REQ: {
            if ((SDO->CANrxData[0] & 0xEF) == 0x60) {
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f2a:	f003 03ef 	and.w	r3, r3, #239	; 0xef
 8004f2e:	2b60      	cmp	r3, #96	; 0x60
 8004f30:	d117      	bne.n	8004f62 <CO_SDOserver_process+0x5a6>
                /* verify and alternate toggle bit */
                uint8_t toggle = SDO->CANrxData[0] & 0x10;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f38:	f003 0310 	and.w	r3, r3, #16
 8004f3c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
                if (toggle != SDO->toggle) {
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8004f46:	f897 2052 	ldrb.w	r2, [r7, #82]	; 0x52
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d005      	beq.n	8004f5a <CO_SDOserver_process+0x59e>
                    abortCode = CO_SDO_AB_TOGGLE_BIT;
 8004f4e:	4b0e      	ldr	r3, [pc, #56]	; (8004f88 <CO_SDOserver_process+0x5cc>)
 8004f50:	62fb      	str	r3, [r7, #44]	; 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2201      	movs	r2, #1
 8004f56:	751a      	strb	r2, [r3, #20]
                    break;
 8004f58:	e01b      	b.n	8004f92 <CO_SDOserver_process+0x5d6>
                }
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_RSP;
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2224      	movs	r2, #36	; 0x24
 8004f5e:	751a      	strb	r2, [r3, #20]
            }
            else {
                abortCode = CO_SDO_AB_CMD;
                SDO->state = CO_SDO_ST_ABORT;
            }
            break;
 8004f60:	e017      	b.n	8004f92 <CO_SDOserver_process+0x5d6>
                abortCode = CO_SDO_AB_CMD;
 8004f62:	4b0a      	ldr	r3, [pc, #40]	; (8004f8c <CO_SDOserver_process+0x5d0>)
 8004f64:	62fb      	str	r3, [r7, #44]	; 0x2c
                SDO->state = CO_SDO_ST_ABORT;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	751a      	strb	r2, [r3, #20]
            break;
 8004f6c:	e011      	b.n	8004f92 <CO_SDOserver_process+0x5d6>
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */

        default: {
            /* unknown message received */
            abortCode = CO_SDO_AB_CMD;
 8004f6e:	4b07      	ldr	r3, [pc, #28]	; (8004f8c <CO_SDOserver_process+0x5d0>)
 8004f70:	62fb      	str	r3, [r7, #44]	; 0x2c
            SDO->state = CO_SDO_ST_ABORT;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2201      	movs	r2, #1
 8004f76:	751a      	strb	r2, [r3, #20]
 8004f78:	e00b      	b.n	8004f92 <CO_SDOserver_process+0x5d6>
        }
        } /* switch (SDO->state) */
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        SDO->timeoutTimer = 0;
 8004f7a:	bf00      	nop
 8004f7c:	e009      	b.n	8004f92 <CO_SDOserver_process+0x5d6>
 8004f7e:	bf00      	nop
 8004f80:	06070012 	.word	0x06070012
 8004f84:	06070013 	.word	0x06070013
 8004f88:	05030000 	.word	0x05030000
 8004f8c:	05040001 	.word	0x05040001
                        break;
 8004f90:	bf00      	nop
        SDO->timeoutTimer = 0;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2200      	movs	r2, #0
 8004f96:	679a      	str	r2, [r3, #120]	; 0x78
#endif
        timeDifference_us = 0;
 8004f98:	2300      	movs	r3, #0
 8004f9a:	607b      	str	r3, [r7, #4]
        CO_FLAG_CLEAR(SDO->CANrxNew);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	639a      	str	r2, [r3, #56]	; 0x38
    } /* if (isNew) */

    /* Timeout timers and transmit bufferFull flag ****************************/
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
    if (ret == CO_SDO_RT_waitingResponse) {
 8004fa2:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004fa6:	2b01      	cmp	r3, #1
 8004fa8:	d11e      	bne.n	8004fe8 <CO_SDOserver_process+0x62c>
        if (SDO->timeoutTimer < SDO->SDOtimeoutTime_us) {
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d205      	bcs.n	8004fc2 <CO_SDOserver_process+0x606>
            SDO->timeoutTimer += timeDifference_us;
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	441a      	add	r2, r3
 8004fbe:	68fb      	ldr	r3, [r7, #12]
 8004fc0:	679a      	str	r2, [r3, #120]	; 0x78
        }
        if (SDO->timeoutTimer >= SDO->SDOtimeoutTime_us) {
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d304      	bcc.n	8004fd8 <CO_SDOserver_process+0x61c>
            abortCode = CO_SDO_AB_TIMEOUT;
 8004fce:	4b9c      	ldr	r3, [pc, #624]	; (8005240 <CO_SDOserver_process+0x884>)
 8004fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
            SDO->state = CO_SDO_ST_ABORT;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	2201      	movs	r2, #1
 8004fd6:	751a      	strb	r2, [r3, #20]
            }
#endif
        }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_BLOCK */

        if (SDO->CANtxBuff->bufferFull) {
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d002      	beq.n	8004fe8 <CO_SDOserver_process+0x62c>
            ret = CO_SDO_RT_transmittBufferFull;
 8004fe2:	2304      	movs	r3, #4
 8004fe4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        }
    }
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

    /* Transmit CAN data ******************************************************/
    if (ret == CO_SDO_RT_waitingResponse) {
 8004fe8:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	f040 81a8 	bne.w	8005342 <CO_SDOserver_process+0x986>
        /* clear response buffer */
        memset(SDO->CANtxBuff->data, 0, sizeof(SDO->CANtxBuff->data));
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	3305      	adds	r3, #5
 8004ff8:	2208      	movs	r2, #8
 8004ffa:	2100      	movs	r1, #0
 8004ffc:	4618      	mov	r0, r3
 8004ffe:	f00f f867 	bl	80140d0 <memset>

        switch (SDO->state) {
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	7d1b      	ldrb	r3, [r3, #20]
 8005006:	b2db      	uxtb	r3, r3
 8005008:	3b12      	subs	r3, #18
 800500a:	2b12      	cmp	r3, #18
 800500c:	f200 819b 	bhi.w	8005346 <CO_SDOserver_process+0x98a>
 8005010:	a201      	add	r2, pc, #4	; (adr r2, 8005018 <CO_SDOserver_process+0x65c>)
 8005012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005016:	bf00      	nop
 8005018:	08005065 	.word	0x08005065
 800501c:	08005347 	.word	0x08005347
 8005020:	080050e7 	.word	0x080050e7
 8005024:	08005347 	.word	0x08005347
 8005028:	08005347 	.word	0x08005347
 800502c:	08005347 	.word	0x08005347
 8005030:	08005347 	.word	0x08005347
 8005034:	08005347 	.word	0x08005347
 8005038:	08005347 	.word	0x08005347
 800503c:	08005347 	.word	0x08005347
 8005040:	08005347 	.word	0x08005347
 8005044:	08005347 	.word	0x08005347
 8005048:	08005347 	.word	0x08005347
 800504c:	08005347 	.word	0x08005347
 8005050:	08005347 	.word	0x08005347
 8005054:	08005347 	.word	0x08005347
 8005058:	08005143 	.word	0x08005143
 800505c:	08005347 	.word	0x08005347
 8005060:	08005211 	.word	0x08005211
        case CO_SDO_ST_DOWNLOAD_INITIATE_RSP: {
            SDO->CANtxBuff->data[0] = 0x60;
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	2260      	movs	r2, #96	; 0x60
 800506a:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	685b      	ldr	r3, [r3, #4]
 8005074:	b2d2      	uxtb	r2, r2
 8005076:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800507c:	0a1b      	lsrs	r3, r3, #8
 800507e:	b29a      	uxth	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	685b      	ldr	r3, [r3, #4]
 8005084:	b2d2      	uxtb	r2, r2
 8005086:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8005092:	721a      	strb	r2, [r3, #8]

            /* reset timeout timer and send message */
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            SDO->timeoutTimer = 0;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	2200      	movs	r2, #0
 8005098:	679a      	str	r2, [r3, #120]	; 0x78
#endif
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	685b      	ldr	r3, [r3, #4]
 80050a2:	4619      	mov	r1, r3
 80050a4:	4610      	mov	r0, r2
 80050a6:	f003 f863 	bl	8008170 <CO_CANsend>
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            if (SDO->finished) {
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d006      	beq.n	80050c0 <CO_SDOserver_process+0x704>
                SDO->state = CO_SDO_ST_IDLE;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2200      	movs	r2, #0
 80050b6:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 80050b8:	2300      	movs	r3, #0
 80050ba:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            }
#else
            SDO->state = CO_SDO_ST_IDLE;
            ret = CO_SDO_RT_ok_communicationEnd;
#endif
            break;
 80050be:	e145      	b.n	800534c <CO_SDOserver_process+0x990>
                SDO->toggle = 0x00;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	2200      	movs	r2, #0
 80050c4:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                SDO->sizeTran = 0;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	2200      	movs	r2, #0
 80050cc:	669a      	str	r2, [r3, #104]	; 0x68
                SDO->bufOffsetWr = 0;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
                SDO->bufOffsetRd = 0;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	2200      	movs	r2, #0
 80050da:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	2213      	movs	r2, #19
 80050e2:	751a      	strb	r2, [r3, #20]
            break;
 80050e4:	e132      	b.n	800534c <CO_SDOserver_process+0x990>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_DOWNLOAD_SEGMENT_RSP: {
            SDO->CANtxBuff->data[0] = 0x20 | SDO->toggle;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f893 206c 	ldrb.w	r2, [r3, #108]	; 0x6c
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f042 0220 	orr.w	r2, r2, #32
 80050f4:	b2d2      	uxtb	r2, r2
 80050f6:	715a      	strb	r2, [r3, #5]
            SDO->toggle = (SDO->toggle == 0x00) ? 0x10 : 0x00;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d101      	bne.n	8005106 <CO_SDOserver_process+0x74a>
 8005102:	2210      	movs	r2, #16
 8005104:	e000      	b.n	8005108 <CO_SDOserver_process+0x74c>
 8005106:	2200      	movs	r2, #0
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

            /* reset timeout timer and send message */
            SDO->timeoutTimer = 0;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	2200      	movs	r2, #0
 8005112:	679a      	str	r2, [r3, #120]	; 0x78
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	685b      	ldr	r3, [r3, #4]
 800511c:	4619      	mov	r1, r3
 800511e:	4610      	mov	r0, r2
 8005120:	f003 f826 	bl	8008170 <CO_CANsend>
            if (SDO->finished) {
 8005124:	68fb      	ldr	r3, [r7, #12]
 8005126:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005128:	2b00      	cmp	r3, #0
 800512a:	d006      	beq.n	800513a <CO_SDOserver_process+0x77e>
                SDO->state = CO_SDO_ST_IDLE;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2200      	movs	r2, #0
 8005130:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 8005132:	2300      	movs	r3, #0
 8005134:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            }
            else {
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
            }
            break;
 8005138:	e108      	b.n	800534c <CO_SDOserver_process+0x990>
                SDO->state = CO_SDO_ST_DOWNLOAD_SEGMENT_REQ;
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2213      	movs	r2, #19
 800513e:	751a      	strb	r2, [r3, #20]
            break;
 8005140:	e104      	b.n	800534c <CO_SDOserver_process+0x990>
#endif

        case CO_SDO_ST_UPLOAD_INITIATE_RSP: {
#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
            /* data were already loaded from OD variable */
            if (SDO->sizeInd > 0 && SDO->sizeInd <= 4) {
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005146:	2b00      	cmp	r3, #0
 8005148:	d024      	beq.n	8005194 <CO_SDOserver_process+0x7d8>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800514e:	2b04      	cmp	r3, #4
 8005150:	d820      	bhi.n	8005194 <CO_SDOserver_process+0x7d8>
                /* expedited transfer */
                SDO->CANtxBuff->data[0] = (uint8_t)(0x43|((4-SDO->sizeInd)<<2));
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005156:	b2db      	uxtb	r3, r3
 8005158:	f1c3 0304 	rsb	r3, r3, #4
 800515c:	b2db      	uxtb	r3, r3
 800515e:	009b      	lsls	r3, r3, #2
 8005160:	b2da      	uxtb	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	f042 0243 	orr.w	r2, r2, #67	; 0x43
 800516a:	b2d2      	uxtb	r2, r2
 800516c:	715a      	strb	r2, [r3, #5]
                memcpy(&SDO->CANtxBuff->data[4], &SDO->buf, SDO->sizeInd);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	685b      	ldr	r3, [r3, #4]
 8005172:	f103 0009 	add.w	r0, r3, #9
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	f103 017c 	add.w	r1, r3, #124	; 0x7c
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005180:	461a      	mov	r2, r3
 8005182:	f00e ff7d 	bl	8014080 <memcpy>
                SDO->state = CO_SDO_ST_IDLE;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	2200      	movs	r2, #0
 800518a:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 800518c:	2300      	movs	r3, #0
 800518e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8005192:	e020      	b.n	80051d6 <CO_SDOserver_process+0x81a>
            }
            else {
                /* data will be transferred with segmented transfer */
                if (SDO->sizeInd > 0) {
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00e      	beq.n	80051ba <CO_SDOserver_process+0x7fe>
                    /* indicate data size, if known */
                    uint32_t sizeInd = SDO->sizeInd;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051a0:	63bb      	str	r3, [r7, #56]	; 0x38
                    uint32_t sizeIndSw = CO_SWAP_32(sizeInd);
 80051a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051a4:	61bb      	str	r3, [r7, #24]
                    SDO->CANtxBuff->data[0] = 0x41;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	2241      	movs	r2, #65	; 0x41
 80051ac:	715a      	strb	r2, [r3, #5]
                    memcpy(&SDO->CANtxBuff->data[4],
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	3309      	adds	r3, #9
 80051b4:	69ba      	ldr	r2, [r7, #24]
 80051b6:	601a      	str	r2, [r3, #0]
 80051b8:	e003      	b.n	80051c2 <CO_SDOserver_process+0x806>
                           &sizeIndSw, sizeof(sizeIndSw));
                }
                else {
                    SDO->CANtxBuff->data[0] = 0x40;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	685b      	ldr	r3, [r3, #4]
 80051be:	2240      	movs	r2, #64	; 0x40
 80051c0:	715a      	strb	r2, [r3, #5]
                }
                SDO->toggle = 0x00;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
                SDO->timeoutTimer = 0;
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2200      	movs	r2, #0
 80051ce:	679a      	str	r2, [r3, #120]	; 0x78
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2223      	movs	r2, #35	; 0x23
 80051d4:	751a      	strb	r2, [r3, #20]
            SDO->state = CO_SDO_ST_IDLE;
            ret = CO_SDO_RT_ok_communicationEnd;
#endif /* (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED */

            /* send message */
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	b2d2      	uxtb	r2, r2
 80051e0:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 80051e6:	0a1b      	lsrs	r3, r3, #8
 80051e8:	b29a      	uxth	r2, r3
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	b2d2      	uxtb	r2, r2
 80051f0:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	685b      	ldr	r3, [r3, #4]
 80051f6:	68fa      	ldr	r2, [r7, #12]
 80051f8:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 80051fc:	721a      	strb	r2, [r3, #8]
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	4619      	mov	r1, r3
 8005208:	4610      	mov	r0, r2
 800520a:	f002 ffb1 	bl	8008170 <CO_CANsend>
            break;
 800520e:	e09d      	b.n	800534c <CO_SDOserver_process+0x990>
        }

#if (CO_CONFIG_SDO_SRV) & CO_CONFIG_SDO_SRV_SEGMENTED
        case CO_SDO_ST_UPLOAD_SEGMENT_RSP: {
            /* refill the data buffer if necessary */
            if (!readFromOd(SDO, &abortCode, 7, false))
 8005210:	f107 012c 	add.w	r1, r7, #44	; 0x2c
 8005214:	2300      	movs	r3, #0
 8005216:	2207      	movs	r2, #7
 8005218:	68f8      	ldr	r0, [r7, #12]
 800521a:	f7ff fb0f 	bl	800483c <readFromOd>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	f000 8092 	beq.w	800534a <CO_SDOserver_process+0x98e>
                break;

            /* SDO command specifier with toggle bit */
            SDO->CANtxBuff->data[0] = SDO->toggle;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	685b      	ldr	r3, [r3, #4]
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	f892 206c 	ldrb.w	r2, [r2, #108]	; 0x6c
 8005230:	715a      	strb	r2, [r3, #5]
            SDO->toggle = (SDO->toggle == 0x00) ? 0x10 : 0x00;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8005238:	2b00      	cmp	r3, #0
 800523a:	d103      	bne.n	8005244 <CO_SDOserver_process+0x888>
 800523c:	2210      	movs	r2, #16
 800523e:	e002      	b.n	8005246 <CO_SDOserver_process+0x88a>
 8005240:	05040000 	.word	0x05040000
 8005244:	2200      	movs	r2, #0
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c

            OD_size_t count = SDO->bufOffsetWr - SDO->bufOffsetRd;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	65bb      	str	r3, [r7, #88]	; 0x58
            /* verify, if this is the last segment */
            if (count < 7 || (SDO->finished && count == 7)) {
 800525c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800525e:	2b06      	cmp	r3, #6
 8005260:	d906      	bls.n	8005270 <CO_SDOserver_process+0x8b4>
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005266:	2b00      	cmp	r3, #0
 8005268:	d01b      	beq.n	80052a2 <CO_SDOserver_process+0x8e6>
 800526a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800526c:	2b07      	cmp	r3, #7
 800526e:	d118      	bne.n	80052a2 <CO_SDOserver_process+0x8e6>
                /* indicate last segment and nnn */
                SDO->CANtxBuff->data[0] |= ((7 - count) << 1) | 0x01;
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	685b      	ldr	r3, [r3, #4]
 8005274:	795a      	ldrb	r2, [r3, #5]
 8005276:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005278:	b2db      	uxtb	r3, r3
 800527a:	f1c3 0307 	rsb	r3, r3, #7
 800527e:	b2db      	uxtb	r3, r3
 8005280:	005b      	lsls	r3, r3, #1
 8005282:	b2db      	uxtb	r3, r3
 8005284:	4313      	orrs	r3, r2
 8005286:	b2da      	uxtb	r2, r3
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	685b      	ldr	r3, [r3, #4]
 800528c:	f042 0201 	orr.w	r2, r2, #1
 8005290:	b2d2      	uxtb	r2, r2
 8005292:	715a      	strb	r2, [r3, #5]
                SDO->state = CO_SDO_ST_IDLE;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	2200      	movs	r2, #0
 8005298:	751a      	strb	r2, [r3, #20]
                ret = CO_SDO_RT_ok_communicationEnd;
 800529a:	2300      	movs	r3, #0
 800529c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80052a0:	e007      	b.n	80052b2 <CO_SDOserver_process+0x8f6>
            }
            else {
                SDO->timeoutTimer = 0;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2200      	movs	r2, #0
 80052a6:	679a      	str	r2, [r3, #120]	; 0x78
                SDO->state = CO_SDO_ST_UPLOAD_SEGMENT_REQ;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2223      	movs	r2, #35	; 0x23
 80052ac:	751a      	strb	r2, [r3, #20]
                count = 7;
 80052ae:	2307      	movs	r3, #7
 80052b0:	65bb      	str	r3, [r7, #88]	; 0x58
            }

            /* copy data segment to CAN message */
            memcpy(&SDO->CANtxBuff->data[1], SDO->buf + SDO->bufOffsetRd,
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	1d98      	adds	r0, r3, #6
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	f103 027c 	add.w	r2, r3, #124	; 0x7c
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80052c4:	4413      	add	r3, r2
 80052c6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80052c8:	4619      	mov	r1, r3
 80052ca:	f00e fed9 	bl	8014080 <memcpy>
                   count);
            SDO->bufOffsetRd += count;
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
 80052d4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052d6:	441a      	add	r2, r3
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
            SDO->sizeTran += count;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80052e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80052e4:	441a      	add	r2, r3
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	669a      	str	r2, [r3, #104]	; 0x68

            /* verify if sizeTran is too large or too short if last segment */
            if (SDO->sizeInd > 0) {
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d01e      	beq.n	8005330 <CO_SDOserver_process+0x974>
                if (SDO->sizeTran > SDO->sizeInd) {
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d905      	bls.n	800530a <CO_SDOserver_process+0x94e>
                    abortCode = CO_SDO_AB_DATA_LONG;
 80052fe:	4b31      	ldr	r3, [pc, #196]	; (80053c4 <CO_SDOserver_process+0xa08>)
 8005300:	62fb      	str	r3, [r7, #44]	; 0x2c
                    SDO->state = CO_SDO_ST_ABORT;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	2201      	movs	r2, #1
 8005306:	751a      	strb	r2, [r3, #20]
                    break;
 8005308:	e020      	b.n	800534c <CO_SDOserver_process+0x990>
                }
                else if (ret == CO_SDO_RT_ok_communicationEnd
 800530a:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 800530e:	2b00      	cmp	r3, #0
 8005310:	d10e      	bne.n	8005330 <CO_SDOserver_process+0x974>
                         && SDO->sizeTran < SDO->sizeInd
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800531a:	429a      	cmp	r2, r3
 800531c:	d208      	bcs.n	8005330 <CO_SDOserver_process+0x974>
                ) {
                    abortCode = CO_SDO_AB_DATA_SHORT;
 800531e:	4b2a      	ldr	r3, [pc, #168]	; (80053c8 <CO_SDOserver_process+0xa0c>)
 8005320:	62fb      	str	r3, [r7, #44]	; 0x2c
                    ret = CO_SDO_RT_waitingResponse;
 8005322:	2301      	movs	r3, #1
 8005324:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
                    SDO->state = CO_SDO_ST_ABORT;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2201      	movs	r2, #1
 800532c:	751a      	strb	r2, [r3, #20]
                    break;
 800532e:	e00d      	b.n	800534c <CO_SDOserver_process+0x990>
                }
            }

            /* send message */
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	681a      	ldr	r2, [r3, #0]
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	4619      	mov	r1, r3
 800533a:	4610      	mov	r0, r2
 800533c:	f002 ff18 	bl	8008170 <CO_CANsend>
            break;
 8005340:	e004      	b.n	800534c <CO_SDOserver_process+0x990>

        default: {
            break;
        }
        } /* switch (SDO->state) */
    }
 8005342:	bf00      	nop
 8005344:	e002      	b.n	800534c <CO_SDOserver_process+0x990>
            break;
 8005346:	bf00      	nop
 8005348:	e000      	b.n	800534c <CO_SDOserver_process+0x990>
                break;
 800534a:	bf00      	nop

    if (ret == CO_SDO_RT_waitingResponse) {
 800534c:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
 8005350:	2b01      	cmp	r3, #1
 8005352:	d131      	bne.n	80053b8 <CO_SDOserver_process+0x9fc>
        if (SDO->state == CO_SDO_ST_ABORT) {
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	7d1b      	ldrb	r3, [r3, #20]
 8005358:	b2db      	uxtb	r3, r3
 800535a:	2b01      	cmp	r3, #1
 800535c:	d12c      	bne.n	80053b8 <CO_SDOserver_process+0x9fc>
            uint32_t code = CO_SWAP_32((uint32_t)abortCode);
 800535e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005360:	617b      	str	r3, [r7, #20]
            /* Send SDO abort message */
            SDO->CANtxBuff->data[0] = 0x80;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	685b      	ldr	r3, [r3, #4]
 8005366:	2280      	movs	r2, #128	; 0x80
 8005368:	715a      	strb	r2, [r3, #5]
            SDO->CANtxBuff->data[1] = (uint8_t)SDO->index;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	685b      	ldr	r3, [r3, #4]
 8005372:	b2d2      	uxtb	r2, r2
 8005374:	719a      	strb	r2, [r3, #6]
            SDO->CANtxBuff->data[2] = (uint8_t)(SDO->index >> 8);
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
 800537a:	0a1b      	lsrs	r3, r3, #8
 800537c:	b29a      	uxth	r2, r3
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	b2d2      	uxtb	r2, r2
 8005384:	71da      	strb	r2, [r3, #7]
            SDO->CANtxBuff->data[3] = SDO->subIndex;
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	685b      	ldr	r3, [r3, #4]
 800538a:	68fa      	ldr	r2, [r7, #12]
 800538c:	f892 2036 	ldrb.w	r2, [r2, #54]	; 0x36
 8005390:	721a      	strb	r2, [r3, #8]

            memcpy(&SDO->CANtxBuff->data[4], &code, sizeof(code));
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	3309      	adds	r3, #9
 8005398:	697a      	ldr	r2, [r7, #20]
 800539a:	601a      	str	r2, [r3, #0]
            CO_CANsend(SDO->CANdevTx, SDO->CANtxBuff);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681a      	ldr	r2, [r3, #0]
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	685b      	ldr	r3, [r3, #4]
 80053a4:	4619      	mov	r1, r3
 80053a6:	4610      	mov	r0, r2
 80053a8:	f002 fee2 	bl	8008170 <CO_CANsend>
            SDO->state = CO_SDO_ST_IDLE;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	2200      	movs	r2, #0
 80053b0:	751a      	strb	r2, [r3, #20]
            ret = CO_SDO_RT_endedWithServerAbort;
 80053b2:	23f6      	movs	r3, #246	; 0xf6
 80053b4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
            ret = CO_SDO_RT_blockUploadInProgress;
        }
#endif
    }

    return ret;
 80053b8:	f997 3067 	ldrsb.w	r3, [r7, #103]	; 0x67
}
 80053bc:	4618      	mov	r0, r3
 80053be:	376c      	adds	r7, #108	; 0x6c
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd90      	pop	{r4, r7, pc}
 80053c4:	06070012 	.word	0x06070012
 80053c8:	06070013 	.word	0x06070013

080053cc <CO_getUint8>:
static inline uint8_t CO_getUint8(const void *buf) {
 80053cc:	b480      	push	{r7}
 80053ce:	b085      	sub	sp, #20
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	781b      	ldrb	r3, [r3, #0]
    uint8_t value; memmove(&value, buf, sizeof(value)); return value;
 80053d8:	73fb      	strb	r3, [r7, #15]
 80053da:	7bfb      	ldrb	r3, [r7, #15]
}
 80053dc:	4618      	mov	r0, r3
 80053de:	3714      	adds	r7, #20
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 80053e8:	b480      	push	{r7}
 80053ea:	b085      	sub	sp, #20
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 80053f4:	60fb      	str	r3, [r7, #12]
 80053f6:	68fb      	ldr	r3, [r7, #12]
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3714      	adds	r7, #20
 80053fc:	46bd      	mov	sp, r7
 80053fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005402:	4770      	bx	lr

08005404 <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8005404:	b480      	push	{r7}
 8005406:	b083      	sub	sp, #12
 8005408:	af00      	add	r7, sp, #0
 800540a:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d002      	beq.n	8005418 <OD_getIndex+0x14>
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	881b      	ldrh	r3, [r3, #0]
 8005416:	e000      	b.n	800541a <OD_getIndex+0x16>
 8005418:	2300      	movs	r3, #0
}
 800541a:	4618      	mov	r0, r3
 800541c:	370c      	adds	r7, #12
 800541e:	46bd      	mov	sp, r7
 8005420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005424:	4770      	bx	lr

08005426 <OD_extension_init>:
{
 8005426:	b480      	push	{r7}
 8005428:	b083      	sub	sp, #12
 800542a:	af00      	add	r7, sp, #0
 800542c:	6078      	str	r0, [r7, #4]
 800542e:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <OD_extension_init+0x14>
 8005436:	2305      	movs	r3, #5
 8005438:	e003      	b.n	8005442 <OD_extension_init+0x1c>
    entry->extension = extension;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	683a      	ldr	r2, [r7, #0]
 800543e:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	370c      	adds	r7, #12
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr

0800544e <OD_get_u8>:
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b086      	sub	sp, #24
 8005452:	af02      	add	r7, sp, #8
 8005454:	60f8      	str	r0, [r7, #12]
 8005456:	607a      	str	r2, [r7, #4]
 8005458:	603b      	str	r3, [r7, #0]
 800545a:	460b      	mov	r3, r1
 800545c:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 800545e:	7af9      	ldrb	r1, [r7, #11]
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	9300      	str	r3, [sp, #0]
 8005464:	2301      	movs	r3, #1
 8005466:	687a      	ldr	r2, [r7, #4]
 8005468:	68f8      	ldr	r0, [r7, #12]
 800546a:	f7fc fba7 	bl	8001bbc <OD_get_value>
 800546e:	4603      	mov	r3, r0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3710      	adds	r7, #16
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <OD_get_u32>:
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b086      	sub	sp, #24
 800547c:	af02      	add	r7, sp, #8
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	607a      	str	r2, [r7, #4]
 8005482:	603b      	str	r3, [r7, #0]
 8005484:	460b      	mov	r3, r1
 8005486:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8005488:	7af9      	ldrb	r1, [r7, #11]
 800548a:	683b      	ldr	r3, [r7, #0]
 800548c:	9300      	str	r3, [sp, #0]
 800548e:	2304      	movs	r3, #4
 8005490:	687a      	ldr	r2, [r7, #4]
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	f7fc fb92 	bl	8001bbc <OD_get_value>
 8005498:	4603      	mov	r3, r0
}
 800549a:	4618      	mov	r0, r3
 800549c:	3710      	adds	r7, #16
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <CO_SYNCsend>:
 *
 * @param SYNC SYNC object.
 *
 * @return Same as CO_CANsend().
 */
static inline CO_ReturnError_t CO_SYNCsend(CO_SYNC_t *SYNC) {
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b082      	sub	sp, #8
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
    if (++SYNC->counter > SYNC->counterOverflowValue) SYNC->counter = 1;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	7c9b      	ldrb	r3, [r3, #18]
 80054ae:	3301      	adds	r3, #1
 80054b0:	b2da      	uxtb	r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	749a      	strb	r2, [r3, #18]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	7c9a      	ldrb	r2, [r3, #18]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	7c5b      	ldrb	r3, [r3, #17]
 80054be:	429a      	cmp	r2, r3
 80054c0:	d902      	bls.n	80054c8 <CO_SYNCsend+0x26>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2201      	movs	r2, #1
 80054c6:	749a      	strb	r2, [r3, #18]
    SYNC->timer = 0;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2200      	movs	r2, #0
 80054cc:	619a      	str	r2, [r3, #24]
    SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	bf0c      	ite	eq
 80054d6:	2301      	moveq	r3, #1
 80054d8:	2300      	movne	r3, #0
 80054da:	b2db      	uxtb	r3, r3
 80054dc:	461a      	mov	r2, r3
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	60da      	str	r2, [r3, #12]
    SYNC->CANtxBuff->data[0] = SYNC->counter;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e6:	687a      	ldr	r2, [r7, #4]
 80054e8:	7c92      	ldrb	r2, [r2, #18]
 80054ea:	715a      	strb	r2, [r3, #5]
    return CO_CANsend(SYNC->CANdevTx, SYNC->CANtxBuff);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f4:	4619      	mov	r1, r3
 80054f6:	4610      	mov	r0, r2
 80054f8:	f002 fe3a 	bl	8008170 <CO_CANsend>
 80054fc:	4603      	mov	r3, r0
}
 80054fe:	4618      	mov	r0, r3
 8005500:	3708      	adds	r7, #8
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <CO_SYNC_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_SYNC_receive(void *object, void *msg) {
 8005506:	b480      	push	{r7}
 8005508:	b087      	sub	sp, #28
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
 800550e:	6039      	str	r1, [r7, #0]
    CO_SYNC_t *SYNC = object;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	613b      	str	r3, [r7, #16]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	791b      	ldrb	r3, [r3, #4]
 8005518:	73fb      	strb	r3, [r7, #15]
    bool_t syncReceived = false;
 800551a:	2300      	movs	r3, #0
 800551c:	617b      	str	r3, [r7, #20]

    if (SYNC->counterOverflowValue == 0) {
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	7c5b      	ldrb	r3, [r3, #17]
 8005522:	2b00      	cmp	r3, #0
 8005524:	d10c      	bne.n	8005540 <CO_SYNC_receive+0x3a>
        if (DLC == 0) {
 8005526:	7bfb      	ldrb	r3, [r7, #15]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d102      	bne.n	8005532 <CO_SYNC_receive+0x2c>
            syncReceived = true;
 800552c:	2301      	movs	r3, #1
 800552e:	617b      	str	r3, [r7, #20]
 8005530:	e019      	b.n	8005566 <CO_SYNC_receive+0x60>
        }
        else {
            SYNC->receiveError = DLC | 0x40;
 8005532:	7bfb      	ldrb	r3, [r7, #15]
 8005534:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005538:	b2da      	uxtb	r2, r3
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	721a      	strb	r2, [r3, #8]
 800553e:	e012      	b.n	8005566 <CO_SYNC_receive+0x60>
        }
    }
    else {
        if (DLC == 1) {
 8005540:	7bfb      	ldrb	r3, [r7, #15]
 8005542:	2b01      	cmp	r3, #1
 8005544:	d109      	bne.n	800555a <CO_SYNC_receive+0x54>
            uint8_t *data = CO_CANrxMsg_readData(msg);
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	3305      	adds	r3, #5
 800554a:	60bb      	str	r3, [r7, #8]
            SYNC->counter = data[0];
 800554c:	68bb      	ldr	r3, [r7, #8]
 800554e:	781a      	ldrb	r2, [r3, #0]
 8005550:	693b      	ldr	r3, [r7, #16]
 8005552:	749a      	strb	r2, [r3, #18]
            syncReceived = true;
 8005554:	2301      	movs	r3, #1
 8005556:	617b      	str	r3, [r7, #20]
 8005558:	e005      	b.n	8005566 <CO_SYNC_receive+0x60>
        }
        else {
            SYNC->receiveError = DLC | 0x80;
 800555a:	7bfb      	ldrb	r3, [r7, #15]
 800555c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005560:	b2da      	uxtb	r2, r3
 8005562:	693b      	ldr	r3, [r7, #16]
 8005564:	721a      	strb	r2, [r3, #8]
        }
    }

    if (syncReceived) {
 8005566:	697b      	ldr	r3, [r7, #20]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00c      	beq.n	8005586 <CO_SYNC_receive+0x80>
        /* toggle PDO receive buffer */
        SYNC->CANrxToggle = SYNC->CANrxToggle ? false : true;
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	2b00      	cmp	r3, #0
 8005572:	bf0c      	ite	eq
 8005574:	2301      	moveq	r3, #1
 8005576:	2300      	movne	r3, #0
 8005578:	b2db      	uxtb	r3, r3
 800557a:	461a      	mov	r2, r3
 800557c:	693b      	ldr	r3, [r7, #16]
 800557e:	60da      	str	r2, [r3, #12]

        CO_FLAG_SET(SYNC->CANrxNew);
 8005580:	693b      	ldr	r3, [r7, #16]
 8005582:	2201      	movs	r2, #1
 8005584:	605a      	str	r2, [r3, #4]
        if (SYNC->pFunctSignalPre != NULL) {
            SYNC->pFunctSignalPre(SYNC->functSignalObjectPre);
        }
#endif
    }
}
 8005586:	bf00      	nop
 8005588:	371c      	adds	r7, #28
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
	...

08005594 <OD_write_1005>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1005(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8005594:	b590      	push	{r4, r7, lr}
 8005596:	b08f      	sub	sp, #60	; 0x3c
 8005598:	af04      	add	r7, sp, #16
 800559a:	60f8      	str	r0, [r7, #12]
 800559c:	60b9      	str	r1, [r7, #8]
 800559e:	607a      	str	r2, [r7, #4]
 80055a0:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d00c      	beq.n	80055c2 <OD_write_1005+0x2e>
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	7c5b      	ldrb	r3, [r3, #17]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d108      	bne.n	80055c2 <OD_write_1005+0x2e>
 80055b0:	68bb      	ldr	r3, [r7, #8]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d005      	beq.n	80055c2 <OD_write_1005+0x2e>
        || count != sizeof(uint32_t) || countWritten == NULL
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2b04      	cmp	r3, #4
 80055ba:	d102      	bne.n	80055c2 <OD_write_1005+0x2e>
 80055bc:	683b      	ldr	r3, [r7, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d101      	bne.n	80055c6 <OD_write_1005+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 80055c2:	2309      	movs	r3, #9
 80055c4:	e0a3      	b.n	800570e <OD_write_1005+0x17a>
    }

    CO_SYNC_t *SYNC = stream->object;
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	685b      	ldr	r3, [r3, #4]
 80055ca:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t cobIdSync = CO_getUint32(buf);
 80055cc:	68b8      	ldr	r0, [r7, #8]
 80055ce:	f7ff ff0b 	bl	80053e8 <CO_getUint32>
 80055d2:	6238      	str	r0, [r7, #32]
    uint16_t CAN_ID = (uint16_t)(cobIdSync & 0x7FF);
 80055d4:	6a3b      	ldr	r3, [r7, #32]
 80055d6:	b29b      	uxth	r3, r3
 80055d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80055dc:	83fb      	strh	r3, [r7, #30]

    /* verify written value */
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    bool_t isProducer = (cobIdSync & 0x40000000) != 0;
 80055de:	6a3b      	ldr	r3, [r7, #32]
 80055e0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	bf14      	ite	ne
 80055e8:	2301      	movne	r3, #1
 80055ea:	2300      	moveq	r3, #0
 80055ec:	b2db      	uxtb	r3, r3
 80055ee:	61bb      	str	r3, [r7, #24]
    if ((cobIdSync & 0xBFFFF800) != 0 || CO_IS_RESTRICTED_CAN_ID(CAN_ID)
 80055f0:	6a3a      	ldr	r2, [r7, #32]
 80055f2:	4b49      	ldr	r3, [pc, #292]	; (8005718 <OD_write_1005+0x184>)
 80055f4:	4013      	ands	r3, r2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d133      	bne.n	8005662 <OD_write_1005+0xce>
 80055fa:	8bfb      	ldrh	r3, [r7, #30]
 80055fc:	2b7f      	cmp	r3, #127	; 0x7f
 80055fe:	d930      	bls.n	8005662 <OD_write_1005+0xce>
 8005600:	8bfb      	ldrh	r3, [r7, #30]
 8005602:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005606:	d903      	bls.n	8005610 <OD_write_1005+0x7c>
 8005608:	8bfb      	ldrh	r3, [r7, #30]
 800560a:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 800560e:	d928      	bls.n	8005662 <OD_write_1005+0xce>
 8005610:	8bfb      	ldrh	r3, [r7, #30]
 8005612:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8005616:	d903      	bls.n	8005620 <OD_write_1005+0x8c>
 8005618:	8bfb      	ldrh	r3, [r7, #30]
 800561a:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800561e:	d320      	bcc.n	8005662 <OD_write_1005+0xce>
 8005620:	8bfb      	ldrh	r3, [r7, #30]
 8005622:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005626:	d903      	bls.n	8005630 <OD_write_1005+0x9c>
 8005628:	8bfb      	ldrh	r3, [r7, #30]
 800562a:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 800562e:	d318      	bcc.n	8005662 <OD_write_1005+0xce>
 8005630:	8bfb      	ldrh	r3, [r7, #30]
 8005632:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8005636:	d303      	bcc.n	8005640 <OD_write_1005+0xac>
 8005638:	8bfb      	ldrh	r3, [r7, #30]
 800563a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800563e:	d310      	bcc.n	8005662 <OD_write_1005+0xce>
 8005640:	8bfb      	ldrh	r3, [r7, #30]
 8005642:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005646:	d80c      	bhi.n	8005662 <OD_write_1005+0xce>
        || (SYNC->isProducer && isProducer && CAN_ID != SYNC->CAN_ID)
 8005648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800564a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800564c:	2b00      	cmp	r3, #0
 800564e:	d00a      	beq.n	8005666 <OD_write_1005+0xd2>
 8005650:	69bb      	ldr	r3, [r7, #24]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d007      	beq.n	8005666 <OD_write_1005+0xd2>
 8005656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005658:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800565c:	8bfa      	ldrh	r2, [r7, #30]
 800565e:	429a      	cmp	r2, r3
 8005660:	d001      	beq.n	8005666 <OD_write_1005+0xd2>
    ) {
        return ODR_INVALID_VALUE;
 8005662:	230f      	movs	r3, #15
 8005664:	e053      	b.n	800570e <OD_write_1005+0x17a>
        return ODR_INVALID_VALUE;
    }
#endif

    /* Configure CAN receive and transmit buffers */
    if (CAN_ID != SYNC->CAN_ID) {
 8005666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005668:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800566c:	8bfa      	ldrh	r2, [r7, #30]
 800566e:	429a      	cmp	r2, r3
 8005670:	d03a      	beq.n	80056e8 <OD_write_1005+0x154>
        CO_ReturnError_t CANret = CO_CANrxBufferInit(
 8005672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005674:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8005676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005678:	8e19      	ldrh	r1, [r3, #48]	; 0x30
 800567a:	8bfa      	ldrh	r2, [r7, #30]
 800567c:	4b27      	ldr	r3, [pc, #156]	; (800571c <OD_write_1005+0x188>)
 800567e:	9302      	str	r3, [sp, #8]
 8005680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005682:	9301      	str	r3, [sp, #4]
 8005684:	2300      	movs	r3, #0
 8005686:	9300      	str	r3, [sp, #0]
 8005688:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800568c:	f002 fc4e 	bl	8007f2c <CO_CANrxBufferInit>
 8005690:	4603      	mov	r3, r0
 8005692:	75fb      	strb	r3, [r7, #23]
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)SYNC,        /* object passed to receive function */
            CO_SYNC_receive);   /* this function will process received message*/

        if (CANret != CO_ERROR_NO) {
 8005694:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8005698:	2b00      	cmp	r3, #0
 800569a:	d001      	beq.n	80056a0 <OD_write_1005+0x10c>
            return ODR_DEV_INCOMPAT;
 800569c:	2309      	movs	r3, #9
 800569e:	e036      	b.n	800570e <OD_write_1005+0x17a>
        }

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        SYNC->CANtxBuff = CO_CANtxBufferInit(
 80056a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a2:	6c98      	ldr	r0, [r3, #72]	; 0x48
 80056a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a6:	f8b3 104c 	ldrh.w	r1, [r3, #76]	; 0x4c
            SYNC->CANdevTx,     /* CAN device */
            SYNC->CANdevTxIdx,  /* index of specific buffer inside CAN module */
            CAN_ID,             /* CAN identifier */
            0,                  /* rtr */
            SYNC->counterOverflowValue != 0 ? 1 : 0, /* number of data bytes */
 80056aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ac:	7c5b      	ldrb	r3, [r3, #17]
        SYNC->CANtxBuff = CO_CANtxBufferInit(
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	bf14      	ite	ne
 80056b2:	2301      	movne	r3, #1
 80056b4:	2300      	moveq	r3, #0
 80056b6:	b2db      	uxtb	r3, r3
 80056b8:	461c      	mov	r4, r3
 80056ba:	8bfa      	ldrh	r2, [r7, #30]
 80056bc:	2300      	movs	r3, #0
 80056be:	9301      	str	r3, [sp, #4]
 80056c0:	9400      	str	r4, [sp, #0]
 80056c2:	2300      	movs	r3, #0
 80056c4:	f002 fc8e 	bl	8007fe4 <CO_CANtxBufferInit>
 80056c8:	4602      	mov	r2, r0
 80056ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056cc:	629a      	str	r2, [r3, #40]	; 0x28
            0);                 /* synchronous message flag bit */

        if (SYNC->CANtxBuff == NULL) {
 80056ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d104      	bne.n	80056e0 <OD_write_1005+0x14c>
            SYNC->isProducer = false;
 80056d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056d8:	2200      	movs	r2, #0
 80056da:	625a      	str	r2, [r3, #36]	; 0x24
            return ODR_DEV_INCOMPAT;
 80056dc:	2309      	movs	r3, #9
 80056de:	e016      	b.n	800570e <OD_write_1005+0x17a>
        }
#endif

        SYNC->CAN_ID = CAN_ID;
 80056e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056e2:	8bfa      	ldrh	r2, [r7, #30]
 80056e4:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    }

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->isProducer = isProducer;
 80056e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056ea:	69ba      	ldr	r2, [r7, #24]
 80056ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (isProducer) {
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d005      	beq.n	8005700 <OD_write_1005+0x16c>
        SYNC->counter = 0;
 80056f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f6:	2200      	movs	r2, #0
 80056f8:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 80056fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056fc:	2200      	movs	r2, #0
 80056fe:	619a      	str	r2, [r3, #24]
    }
#endif /* CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	687a      	ldr	r2, [r7, #4]
 8005704:	68b9      	ldr	r1, [r7, #8]
 8005706:	68f8      	ldr	r0, [r7, #12]
 8005708:	f7fc f872 	bl	80017f0 <OD_writeOriginal>
 800570c:	4603      	mov	r3, r0
}
 800570e:	4618      	mov	r0, r3
 8005710:	372c      	adds	r7, #44	; 0x2c
 8005712:	46bd      	mov	sp, r7
 8005714:	bd90      	pop	{r4, r7, pc}
 8005716:	bf00      	nop
 8005718:	bffff800 	.word	0xbffff800
 800571c:	08005507 	.word	0x08005507

08005720 <OD_write_1019>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1019(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8005720:	b590      	push	{r4, r7, lr}
 8005722:	b089      	sub	sp, #36	; 0x24
 8005724:	af02      	add	r7, sp, #8
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]
 800572c:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00c      	beq.n	800574e <OD_write_1019+0x2e>
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	7c5b      	ldrb	r3, [r3, #17]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d108      	bne.n	800574e <OD_write_1019+0x2e>
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d005      	beq.n	800574e <OD_write_1019+0x2e>
        || count != sizeof(uint8_t) || countWritten == NULL
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b01      	cmp	r3, #1
 8005746:	d102      	bne.n	800574e <OD_write_1019+0x2e>
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	2b00      	cmp	r3, #0
 800574c:	d101      	bne.n	8005752 <OD_write_1019+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 800574e:	2309      	movs	r3, #9
 8005750:	e041      	b.n	80057d6 <OD_write_1019+0xb6>
    }

    CO_SYNC_t *SYNC = stream->object;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	617b      	str	r3, [r7, #20]
    uint8_t syncCounterOvf = CO_getUint8(buf);
 8005758:	68b8      	ldr	r0, [r7, #8]
 800575a:	f7ff fe37 	bl	80053cc <CO_getUint8>
 800575e:	4603      	mov	r3, r0
 8005760:	74fb      	strb	r3, [r7, #19]

    /* verify written value */
    if (syncCounterOvf == 1 || syncCounterOvf > 240) {
 8005762:	7cfb      	ldrb	r3, [r7, #19]
 8005764:	2b01      	cmp	r3, #1
 8005766:	d002      	beq.n	800576e <OD_write_1019+0x4e>
 8005768:	7cfb      	ldrb	r3, [r7, #19]
 800576a:	2bf0      	cmp	r3, #240	; 0xf0
 800576c:	d901      	bls.n	8005772 <OD_write_1019+0x52>
        return ODR_INVALID_VALUE;
 800576e:	230f      	movs	r3, #15
 8005770:	e031      	b.n	80057d6 <OD_write_1019+0xb6>
    }
    if (*SYNC->OD_1006_period != 0) {
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	69db      	ldr	r3, [r3, #28]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d001      	beq.n	8005780 <OD_write_1019+0x60>
        return ODR_DATA_DEV_STATE;
 800577c:	2317      	movs	r3, #23
 800577e:	e02a      	b.n	80057d6 <OD_write_1019+0xb6>
    }

    /* Configure CAN transmit buffer */
    SYNC->CANtxBuff = CO_CANtxBufferInit(
 8005780:	697b      	ldr	r3, [r7, #20]
 8005782:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	f8b3 104c 	ldrh.w	r1, [r3, #76]	; 0x4c
 800578a:	697b      	ldr	r3, [r7, #20]
 800578c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8005790:	7cfb      	ldrb	r3, [r7, #19]
 8005792:	2b00      	cmp	r3, #0
 8005794:	bf14      	ite	ne
 8005796:	2301      	movne	r3, #1
 8005798:	2300      	moveq	r3, #0
 800579a:	b2db      	uxtb	r3, r3
 800579c:	461c      	mov	r4, r3
 800579e:	2300      	movs	r3, #0
 80057a0:	9301      	str	r3, [sp, #4]
 80057a2:	9400      	str	r4, [sp, #0]
 80057a4:	2300      	movs	r3, #0
 80057a6:	f002 fc1d 	bl	8007fe4 <CO_CANtxBufferInit>
 80057aa:	4602      	mov	r2, r0
 80057ac:	697b      	ldr	r3, [r7, #20]
 80057ae:	629a      	str	r2, [r3, #40]	; 0x28
        SYNC->CAN_ID,       /* CAN identifier */
        0,                  /* rtr */
        syncCounterOvf != 0 ? 1 : 0, /* number of data bytes */
        0);                 /* synchronous message flag bit */

    if (SYNC->CANtxBuff == NULL) {
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d104      	bne.n	80057c2 <OD_write_1019+0xa2>
        SYNC->isProducer = false;
 80057b8:	697b      	ldr	r3, [r7, #20]
 80057ba:	2200      	movs	r2, #0
 80057bc:	625a      	str	r2, [r3, #36]	; 0x24
        return ODR_DEV_INCOMPAT;
 80057be:	2309      	movs	r3, #9
 80057c0:	e009      	b.n	80057d6 <OD_write_1019+0xb6>
    }

    SYNC->counterOverflowValue = syncCounterOvf;
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	7cfa      	ldrb	r2, [r7, #19]
 80057c6:	745a      	strb	r2, [r3, #17]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 80057c8:	683b      	ldr	r3, [r7, #0]
 80057ca:	687a      	ldr	r2, [r7, #4]
 80057cc:	68b9      	ldr	r1, [r7, #8]
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f7fc f80e 	bl	80017f0 <OD_writeOriginal>
 80057d4:	4603      	mov	r3, r0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	371c      	adds	r7, #28
 80057da:	46bd      	mov	sp, r7
 80057dc:	bd90      	pop	{r4, r7, pc}
	...

080057e0 <CO_SYNC_init>:
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
                              CO_CANmodule_t *CANdevTx,
                              uint16_t CANdevTxIdx,
#endif
                              uint32_t *errInfo)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b08c      	sub	sp, #48	; 0x30
 80057e4:	af04      	add	r7, sp, #16
 80057e6:	60f8      	str	r0, [r7, #12]
 80057e8:	60b9      	str	r1, [r7, #8]
 80057ea:	607a      	str	r2, [r7, #4]
 80057ec:	603b      	str	r3, [r7, #0]
    ODR_t odRet;

    /* verify arguments */
    if (SYNC == NULL || em == NULL || OD_1005_cobIdSync == NULL
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d00e      	beq.n	8005812 <CO_SYNC_init+0x32>
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d00b      	beq.n	8005812 <CO_SYNC_init+0x32>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d008      	beq.n	8005812 <CO_SYNC_init+0x32>
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        || OD_1006_commCyclePeriod == NULL || CANdevTx == NULL
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d005      	beq.n	8005812 <CO_SYNC_init+0x32>
 8005806:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005808:	2b00      	cmp	r3, #0
 800580a:	d002      	beq.n	8005812 <CO_SYNC_init+0x32>
#endif
        || CANdevRx == NULL
 800580c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580e:	2b00      	cmp	r3, #0
 8005810:	d102      	bne.n	8005818 <CO_SYNC_init+0x38>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005812:	f04f 33ff 	mov.w	r3, #4294967295
 8005816:	e0fe      	b.n	8005a16 <CO_SYNC_init+0x236>
    }

    /* clear object */
    memset(SYNC, 0, sizeof(CO_SYNC_t));
 8005818:	2260      	movs	r2, #96	; 0x60
 800581a:	2100      	movs	r1, #0
 800581c:	68f8      	ldr	r0, [r7, #12]
 800581e:	f00e fc57 	bl	80140d0 <memset>

    /* get and verify "COB-ID SYNC message" from OD and configure extension */
    uint32_t cobIdSync = 0x00000080;
 8005822:	2380      	movs	r3, #128	; 0x80
 8005824:	61bb      	str	r3, [r7, #24]

    odRet = OD_get_u32(OD_1005_cobIdSync, 0, &cobIdSync, true);
 8005826:	f107 0218 	add.w	r2, r7, #24
 800582a:	2301      	movs	r3, #1
 800582c:	2100      	movs	r1, #0
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f7ff fe22 	bl	8005478 <OD_get_u32>
 8005834:	4603      	mov	r3, r0
 8005836:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 8005838:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d00c      	beq.n	800585a <CO_SYNC_init+0x7a>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1005_cobIdSync);
 8005840:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005842:	2b00      	cmp	r3, #0
 8005844:	d006      	beq.n	8005854 <CO_SYNC_init+0x74>
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f7ff fddc 	bl	8005404 <OD_getIndex>
 800584c:	4603      	mov	r3, r0
 800584e:	461a      	mov	r2, r3
 8005850:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005852:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8005854:	f06f 030b 	mvn.w	r3, #11
 8005858:	e0dd      	b.n	8005a16 <CO_SYNC_init+0x236>
    }
#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
    SYNC->OD_1005_extension.object = SYNC;
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	68fa      	ldr	r2, [r7, #12]
 800585e:	635a      	str	r2, [r3, #52]	; 0x34
    SYNC->OD_1005_extension.read = OD_readOriginal;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	4a6f      	ldr	r2, [pc, #444]	; (8005a20 <CO_SYNC_init+0x240>)
 8005864:	639a      	str	r2, [r3, #56]	; 0x38
    SYNC->OD_1005_extension.write = OD_write_1005;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	4a6e      	ldr	r2, [pc, #440]	; (8005a24 <CO_SYNC_init+0x244>)
 800586a:	63da      	str	r2, [r3, #60]	; 0x3c
    OD_extension_init(OD_1005_cobIdSync, &SYNC->OD_1005_extension);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	3334      	adds	r3, #52	; 0x34
 8005870:	4619      	mov	r1, r3
 8005872:	6878      	ldr	r0, [r7, #4]
 8005874:	f7ff fdd7 	bl	8005426 <OD_extension_init>
#endif

    /* get and verify "Communication cycle period" from OD */
    SYNC->OD_1006_period = OD_getPtr(OD_1006_commCyclePeriod, 0,
 8005878:	2300      	movs	r3, #0
 800587a:	2204      	movs	r2, #4
 800587c:	2100      	movs	r1, #0
 800587e:	6838      	ldr	r0, [r7, #0]
 8005880:	f7fc fa03 	bl	8001c8a <OD_getPtr>
 8005884:	4602      	mov	r2, r0
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	61da      	str	r2, [r3, #28]
                                     sizeof(uint32_t), NULL);
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    if (SYNC->OD_1006_period == NULL) {
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	69db      	ldr	r3, [r3, #28]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d10c      	bne.n	80058ac <CO_SYNC_init+0xcc>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1006_commCyclePeriod);
 8005892:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005894:	2b00      	cmp	r3, #0
 8005896:	d006      	beq.n	80058a6 <CO_SYNC_init+0xc6>
 8005898:	6838      	ldr	r0, [r7, #0]
 800589a:	f7ff fdb3 	bl	8005404 <OD_getIndex>
 800589e:	4603      	mov	r3, r0
 80058a0:	461a      	mov	r2, r3
 80058a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058a4:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 80058a6:	f06f 030b 	mvn.w	r3, #11
 80058aa:	e0b4      	b.n	8005a16 <CO_SYNC_init+0x236>
        return CO_ERROR_OD_PARAMETERS;
    }
#endif

    /* get "Synchronous window length" from OD (optional parameter) */
    SYNC->OD_1007_window = OD_getPtr(OD_1007_syncWindowLen, 0,
 80058ac:	2300      	movs	r3, #0
 80058ae:	2204      	movs	r2, #4
 80058b0:	2100      	movs	r1, #0
 80058b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058b4:	f7fc f9e9 	bl	8001c8a <OD_getPtr>
 80058b8:	4602      	mov	r2, r0
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	621a      	str	r2, [r3, #32]
                                     sizeof(uint32_t), NULL);
    if (OD_1007_syncWindowLen != NULL && SYNC->OD_1007_window == NULL) {
 80058be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d010      	beq.n	80058e6 <CO_SYNC_init+0x106>
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	6a1b      	ldr	r3, [r3, #32]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d10c      	bne.n	80058e6 <CO_SYNC_init+0x106>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1007_syncWindowLen);
 80058cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d006      	beq.n	80058e0 <CO_SYNC_init+0x100>
 80058d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058d4:	f7ff fd96 	bl	8005404 <OD_getIndex>
 80058d8:	4603      	mov	r3, r0
 80058da:	461a      	mov	r2, r3
 80058dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80058de:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 80058e0:	f06f 030b 	mvn.w	r3, #11
 80058e4:	e097      	b.n	8005a16 <CO_SYNC_init+0x236>
    }

    /* get and verify optional "Synchronous counter overflow value" from OD and
     * configure extension */
    uint8_t syncCounterOvf = 0;
 80058e6:	2300      	movs	r3, #0
 80058e8:	75fb      	strb	r3, [r7, #23]

    if (OD_1019_syncCounterOvf != NULL) {
 80058ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d033      	beq.n	8005958 <CO_SYNC_init+0x178>
        odRet = OD_get_u8(OD_1019_syncCounterOvf, 0, &syncCounterOvf, true);
 80058f0:	f107 0217 	add.w	r2, r7, #23
 80058f4:	2301      	movs	r3, #1
 80058f6:	2100      	movs	r1, #0
 80058f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80058fa:	f7ff fda8 	bl	800544e <OD_get_u8>
 80058fe:	4603      	mov	r3, r0
 8005900:	77fb      	strb	r3, [r7, #31]
        if (odRet != ODR_OK) {
 8005902:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00c      	beq.n	8005924 <CO_SYNC_init+0x144>
            if (errInfo != NULL) *errInfo = OD_getIndex(OD_1019_syncCounterOvf);
 800590a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800590c:	2b00      	cmp	r3, #0
 800590e:	d006      	beq.n	800591e <CO_SYNC_init+0x13e>
 8005910:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005912:	f7ff fd77 	bl	8005404 <OD_getIndex>
 8005916:	4603      	mov	r3, r0
 8005918:	461a      	mov	r2, r3
 800591a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800591c:	601a      	str	r2, [r3, #0]
            return CO_ERROR_OD_PARAMETERS;
 800591e:	f06f 030b 	mvn.w	r3, #11
 8005922:	e078      	b.n	8005a16 <CO_SYNC_init+0x236>
        }
        if (syncCounterOvf == 1) syncCounterOvf = 2;
 8005924:	7dfb      	ldrb	r3, [r7, #23]
 8005926:	2b01      	cmp	r3, #1
 8005928:	d102      	bne.n	8005930 <CO_SYNC_init+0x150>
 800592a:	2302      	movs	r3, #2
 800592c:	75fb      	strb	r3, [r7, #23]
 800592e:	e004      	b.n	800593a <CO_SYNC_init+0x15a>
        else if (syncCounterOvf > 240) syncCounterOvf = 240;
 8005930:	7dfb      	ldrb	r3, [r7, #23]
 8005932:	2bf0      	cmp	r3, #240	; 0xf0
 8005934:	d901      	bls.n	800593a <CO_SYNC_init+0x15a>
 8005936:	23f0      	movs	r3, #240	; 0xf0
 8005938:	75fb      	strb	r3, [r7, #23]

#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
        SYNC->OD_1019_extension.object = SYNC;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	651a      	str	r2, [r3, #80]	; 0x50
        SYNC->OD_1019_extension.read = OD_readOriginal;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	4a37      	ldr	r2, [pc, #220]	; (8005a20 <CO_SYNC_init+0x240>)
 8005944:	655a      	str	r2, [r3, #84]	; 0x54
        SYNC->OD_1019_extension.write = OD_write_1019;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	4a37      	ldr	r2, [pc, #220]	; (8005a28 <CO_SYNC_init+0x248>)
 800594a:	659a      	str	r2, [r3, #88]	; 0x58
        OD_extension_init(OD_1019_syncCounterOvf, &SYNC->OD_1019_extension);
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	3350      	adds	r3, #80	; 0x50
 8005950:	4619      	mov	r1, r3
 8005952:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005954:	f7ff fd67 	bl	8005426 <OD_extension_init>
#endif
#endif
    }
    SYNC->counterOverflowValue = syncCounterOvf;
 8005958:	7dfa      	ldrb	r2, [r7, #23]
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	745a      	strb	r2, [r3, #17]

    /* Configure object variables */
    SYNC->em = em;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	68ba      	ldr	r2, [r7, #8]
 8005962:	601a      	str	r2, [r3, #0]
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->isProducer = (cobIdSync & 0x40000000) != 0;
 8005964:	69bb      	ldr	r3, [r7, #24]
 8005966:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800596a:	2b00      	cmp	r3, #0
 800596c:	bf14      	ite	ne
 800596e:	2301      	movne	r3, #1
 8005970:	2300      	moveq	r3, #0
 8005972:	b2db      	uxtb	r3, r3
 8005974:	461a      	mov	r2, r3
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	625a      	str	r2, [r3, #36]	; 0x24
#endif
#if (CO_CONFIG_SYNC) & CO_CONFIG_FLAG_OD_DYNAMIC
    SYNC->CAN_ID = cobIdSync & 0x7FF;
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	b29b      	uxth	r3, r3
 800597e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005982:	b29a      	uxth	r2, r3
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    SYNC->CANdevRx = CANdevRx;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800598e:	62da      	str	r2, [r3, #44]	; 0x2c
    SYNC->CANdevRxIdx = CANdevRxIdx;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8005994:	861a      	strh	r2, [r3, #48]	; 0x30
 #if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->CANdevTx = CANdevTx;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800599a:	649a      	str	r2, [r3, #72]	; 0x48
    SYNC->CANdevTxIdx = CANdevTxIdx;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 80059a0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 #endif
#endif

    /* configure SYNC CAN reception and transmission */
    CO_ReturnError_t ret = CO_CANrxBufferInit(
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	b29b      	uxth	r3, r3
 80059a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059ac:	b29a      	uxth	r2, r3
 80059ae:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 80059b0:	4b1e      	ldr	r3, [pc, #120]	; (8005a2c <CO_SYNC_init+0x24c>)
 80059b2:	9302      	str	r3, [sp, #8]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	9301      	str	r3, [sp, #4]
 80059b8:	2300      	movs	r3, #0
 80059ba:	9300      	str	r3, [sp, #0]
 80059bc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80059c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80059c2:	f002 fab3 	bl	8007f2c <CO_CANrxBufferInit>
 80059c6:	4603      	mov	r3, r0
 80059c8:	77bb      	strb	r3, [r7, #30]
            cobIdSync & 0x7FF,  /* CAN identifier */
            0x7FF,              /* mask */
            0,                  /* rtr */
            (void*)SYNC,        /* object passed to receive function */
            CO_SYNC_receive);   /* this function will process received message*/
    if (ret != CO_ERROR_NO)
 80059ca:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d002      	beq.n	80059d8 <CO_SYNC_init+0x1f8>
        return ret;
 80059d2:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80059d6:	e01e      	b.n	8005a16 <CO_SYNC_init+0x236>

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
    SYNC->CANtxBuff = CO_CANtxBufferInit(
 80059d8:	69bb      	ldr	r3, [r7, #24]
 80059da:	b29b      	uxth	r3, r3
 80059dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80059e0:	b29a      	uxth	r2, r3
 80059e2:	7dfb      	ldrb	r3, [r7, #23]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	bf14      	ite	ne
 80059e8:	2301      	movne	r3, #1
 80059ea:	2300      	moveq	r3, #0
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	4618      	mov	r0, r3
 80059f0:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 80059f2:	2300      	movs	r3, #0
 80059f4:	9301      	str	r3, [sp, #4]
 80059f6:	9000      	str	r0, [sp, #0]
 80059f8:	2300      	movs	r3, #0
 80059fa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80059fc:	f002 faf2 	bl	8007fe4 <CO_CANtxBufferInit>
 8005a00:	4602      	mov	r2, r0
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	629a      	str	r2, [r3, #40]	; 0x28
            cobIdSync & 0x7FF,  /* CAN identifier */
            0,                  /* rtr */
            syncCounterOvf != 0 ? 1 : 0, /* number of data bytes */
            0);                 /* synchronous message flag bit */

    if (SYNC->CANtxBuff == NULL)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d102      	bne.n	8005a14 <CO_SYNC_init+0x234>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a12:	e000      	b.n	8005a16 <CO_SYNC_init+0x236>
#endif

    return CO_ERROR_NO;
 8005a14:	2300      	movs	r3, #0
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3720      	adds	r7, #32
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	08001741 	.word	0x08001741
 8005a24:	08005595 	.word	0x08005595
 8005a28:	08005721 	.word	0x08005721
 8005a2c:	08005507 	.word	0x08005507

08005a30 <CO_SYNC_process>:
/******************************************************************************/
CO_SYNC_status_t CO_SYNC_process(CO_SYNC_t *SYNC,
                                 bool_t NMTisPreOrOperational,
                                 uint32_t timeDifference_us,
                                 uint32_t *timerNext_us)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b08a      	sub	sp, #40	; 0x28
 8005a34:	af02      	add	r7, sp, #8
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	60b9      	str	r1, [r7, #8]
 8005a3a:	607a      	str	r2, [r7, #4]
 8005a3c:	603b      	str	r3, [r7, #0]
    (void)timerNext_us; /* may be unused */

    CO_SYNC_status_t syncStatus = CO_SYNC_NONE;
 8005a3e:	2300      	movs	r3, #0
 8005a40:	77fb      	strb	r3, [r7, #31]

    if (NMTisPreOrOperational) {
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	f000 8088 	beq.w	8005b5a <CO_SYNC_process+0x12a>
        /* update sync timer, no overflow */
        uint32_t timerNew = SYNC->timer + timeDifference_us;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	699b      	ldr	r3, [r3, #24]
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	4413      	add	r3, r2
 8005a52:	617b      	str	r3, [r7, #20]
        if (timerNew > SYNC->timer) SYNC->timer = timerNew;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	699b      	ldr	r3, [r3, #24]
 8005a58:	697a      	ldr	r2, [r7, #20]
 8005a5a:	429a      	cmp	r2, r3
 8005a5c:	d902      	bls.n	8005a64 <CO_SYNC_process+0x34>
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	697a      	ldr	r2, [r7, #20]
 8005a62:	619a      	str	r2, [r3, #24]

        /* was SYNC just received */
        if (CO_FLAG_READ(SYNC->CANrxNew)) {
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	685b      	ldr	r3, [r3, #4]
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d007      	beq.n	8005a7c <CO_SYNC_process+0x4c>
            SYNC->timer = 0;
 8005a6c:	68fb      	ldr	r3, [r7, #12]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	619a      	str	r2, [r3, #24]
            syncStatus = CO_SYNC_RX_TX;
 8005a72:	2301      	movs	r3, #1
 8005a74:	77fb      	strb	r3, [r7, #31]
            CO_FLAG_CLEAR(SYNC->CANrxNew);
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	605a      	str	r2, [r3, #4]
        }

        uint32_t OD_1006_period = SYNC->OD_1006_period != NULL
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	69db      	ldr	r3, [r3, #28]
                                ? *SYNC->OD_1006_period : 0;
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d003      	beq.n	8005a8c <CO_SYNC_process+0x5c>
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	69db      	ldr	r3, [r3, #28]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	e000      	b.n	8005a8e <CO_SYNC_process+0x5e>
 8005a8c:	2300      	movs	r3, #0
        uint32_t OD_1006_period = SYNC->OD_1006_period != NULL
 8005a8e:	613b      	str	r3, [r7, #16]

        if (OD_1006_period > 0) {
 8005a90:	693b      	ldr	r3, [r7, #16]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d031      	beq.n	8005afa <CO_SYNC_process+0xca>
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
            if (SYNC->isProducer) {
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d00a      	beq.n	8005ab4 <CO_SYNC_process+0x84>
                if (SYNC->timer >= OD_1006_period) {
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	699b      	ldr	r3, [r3, #24]
 8005aa2:	693a      	ldr	r2, [r7, #16]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d828      	bhi.n	8005afa <CO_SYNC_process+0xca>
                    syncStatus = CO_SYNC_RX_TX;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	77fb      	strb	r3, [r7, #31]
                    CO_SYNCsend(SYNC);
 8005aac:	68f8      	ldr	r0, [r7, #12]
 8005aae:	f7ff fcf8 	bl	80054a2 <CO_SYNCsend>
 8005ab2:	e022      	b.n	8005afa <CO_SYNC_process+0xca>
            }
            else
#endif /* (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER */

            /* Verify timeout of SYNC */
            if (SYNC->timeoutError == 1) {
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	7c1b      	ldrb	r3, [r3, #16]
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d11e      	bne.n	8005afa <CO_SYNC_process+0xca>
                /* periodTimeout is 1,5 * OD_1006_period, no overflow */
                uint32_t periodTimeout = OD_1006_period + (OD_1006_period >> 1);
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	085b      	lsrs	r3, r3, #1
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	61bb      	str	r3, [r7, #24]
                if (periodTimeout < OD_1006_period) periodTimeout = 0xFFFFFFFF;
 8005ac6:	69ba      	ldr	r2, [r7, #24]
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d202      	bcs.n	8005ad4 <CO_SYNC_process+0xa4>
 8005ace:	f04f 33ff 	mov.w	r3, #4294967295
 8005ad2:	61bb      	str	r3, [r7, #24]

                if (SYNC->timer > periodTimeout) {
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	699b      	ldr	r3, [r3, #24]
 8005ad8:	69ba      	ldr	r2, [r7, #24]
 8005ada:	429a      	cmp	r2, r3
 8005adc:	d20d      	bcs.n	8005afa <CO_SYNC_process+0xca>
                    CO_errorReport(SYNC->em, CO_EM_SYNC_TIME_OUT,
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6818      	ldr	r0, [r3, #0]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	699b      	ldr	r3, [r3, #24]
 8005ae6:	9300      	str	r3, [sp, #0]
 8005ae8:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8005aec:	2218      	movs	r2, #24
 8005aee:	2101      	movs	r1, #1
 8005af0:	f7fa ffc6 	bl	8000a80 <CO_error>
                                   CO_EMC_COMMUNICATION, SYNC->timer);
                    SYNC->timeoutError = 2;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2202      	movs	r2, #2
 8005af8:	741a      	strb	r2, [r3, #16]
#endif
            }
        } /* if (OD_1006_period > 0) */

        /* Synchronous PDOs are allowed only inside time window */
        if (SYNC->OD_1007_window != NULL && *SYNC->OD_1007_window > 0
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d015      	beq.n	8005b2e <CO_SYNC_process+0xfe>
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	6a1b      	ldr	r3, [r3, #32]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d010      	beq.n	8005b2e <CO_SYNC_process+0xfe>
            && SYNC->timer > *SYNC->OD_1007_window
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	699a      	ldr	r2, [r3, #24]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	6a1b      	ldr	r3, [r3, #32]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	429a      	cmp	r2, r3
 8005b18:	d909      	bls.n	8005b2e <CO_SYNC_process+0xfe>
        ) {
            if (!SYNC->syncIsOutsideWindow) {
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d101      	bne.n	8005b26 <CO_SYNC_process+0xf6>
                syncStatus = CO_SYNC_PASSED_WINDOW;
 8005b22:	2302      	movs	r3, #2
 8005b24:	77fb      	strb	r3, [r7, #31]
            }
            SYNC->syncIsOutsideWindow = true;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	2201      	movs	r2, #1
 8005b2a:	615a      	str	r2, [r3, #20]
 8005b2c:	e002      	b.n	8005b34 <CO_SYNC_process+0x104>
        }
        else {
            SYNC->syncIsOutsideWindow = false;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	615a      	str	r2, [r3, #20]
        }

        /* verify error from receive function */
        if (SYNC->receiveError != 0) {
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	7a1b      	ldrb	r3, [r3, #8]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d01a      	beq.n	8005b72 <CO_SYNC_process+0x142>
            CO_errorReport(SYNC->em, CO_EM_SYNC_LENGTH,
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	6818      	ldr	r0, [r3, #0]
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	7a1b      	ldrb	r3, [r3, #8]
 8005b44:	9300      	str	r3, [sp, #0]
 8005b46:	f248 2340 	movw	r3, #33344	; 0x8240
 8005b4a:	2219      	movs	r2, #25
 8005b4c:	2101      	movs	r1, #1
 8005b4e:	f7fa ff97 	bl	8000a80 <CO_error>
                           CO_EMC_SYNC_DATA_LENGTH, SYNC->receiveError);
            SYNC->receiveError = 0;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	721a      	strb	r2, [r3, #8]
 8005b58:	e00b      	b.n	8005b72 <CO_SYNC_process+0x142>
        }
    } /* if (NMTisPreOrOperational) */
    else {
        CO_FLAG_CLEAR(SYNC->CANrxNew);
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	605a      	str	r2, [r3, #4]
        SYNC->receiveError = 0;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	721a      	strb	r2, [r3, #8]
        SYNC->counter = 0;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	749a      	strb	r2, [r3, #18]
        SYNC->timer = 0;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	619a      	str	r2, [r3, #24]
    }

    if (syncStatus == CO_SYNC_RX_TX) {
 8005b72:	7ffb      	ldrb	r3, [r7, #31]
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d10f      	bne.n	8005b98 <CO_SYNC_process+0x168>
        if (SYNC->timeoutError == 2) {
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	7c1b      	ldrb	r3, [r3, #16]
 8005b7c:	2b02      	cmp	r3, #2
 8005b7e:	d108      	bne.n	8005b92 <CO_SYNC_process+0x162>
            CO_errorReset(SYNC->em, CO_EM_SYNC_TIME_OUT, 0);
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6818      	ldr	r0, [r3, #0]
 8005b84:	2300      	movs	r3, #0
 8005b86:	9300      	str	r3, [sp, #0]
 8005b88:	2300      	movs	r3, #0
 8005b8a:	2218      	movs	r2, #24
 8005b8c:	2100      	movs	r1, #0
 8005b8e:	f7fa ff77 	bl	8000a80 <CO_error>
        }
        SYNC->timeoutError = 1;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	2201      	movs	r2, #1
 8005b96:	741a      	strb	r2, [r3, #16]
    }

    return syncStatus;
 8005b98:	7ffb      	ldrb	r3, [r7, #31]
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3720      	adds	r7, #32
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <CO_getUint16>:
static inline uint16_t CO_getUint16(const void *buf) {
 8005ba2:	b480      	push	{r7}
 8005ba4:	b085      	sub	sp, #20
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	881b      	ldrh	r3, [r3, #0]
 8005bae:	b29b      	uxth	r3, r3
    uint16_t value; memmove(&value, buf, sizeof(value)); return value;
 8005bb0:	81fb      	strh	r3, [r7, #14]
 8005bb2:	89fb      	ldrh	r3, [r7, #14]
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3714      	adds	r7, #20
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bbe:	4770      	bx	lr

08005bc0 <CO_getUint32>:
static inline uint32_t CO_getUint32(const void *buf) {
 8005bc0:	b480      	push	{r7}
 8005bc2:	b085      	sub	sp, #20
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	681b      	ldr	r3, [r3, #0]
    uint32_t value; memmove(&value, buf, sizeof(value)); return value;
 8005bcc:	60fb      	str	r3, [r7, #12]
 8005bce:	68fb      	ldr	r3, [r7, #12]
}
 8005bd0:	4618      	mov	r0, r3
 8005bd2:	3714      	adds	r7, #20
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr

08005bdc <OD_getIndex>:
static inline uint16_t OD_getIndex(const OD_entry_t *entry) {
 8005bdc:	b480      	push	{r7}
 8005bde:	b083      	sub	sp, #12
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]
    return (entry != NULL) ? entry->index : 0;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d002      	beq.n	8005bf0 <OD_getIndex+0x14>
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	881b      	ldrh	r3, [r3, #0]
 8005bee:	e000      	b.n	8005bf2 <OD_getIndex+0x16>
 8005bf0:	2300      	movs	r3, #0
}
 8005bf2:	4618      	mov	r0, r3
 8005bf4:	370c      	adds	r7, #12
 8005bf6:	46bd      	mov	sp, r7
 8005bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfc:	4770      	bx	lr

08005bfe <OD_extension_init>:
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b083      	sub	sp, #12
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
 8005c06:	6039      	str	r1, [r7, #0]
    if (entry == NULL) return ODR_IDX_NOT_EXIST;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d101      	bne.n	8005c12 <OD_extension_init+0x14>
 8005c0e:	2305      	movs	r3, #5
 8005c10:	e003      	b.n	8005c1a <OD_extension_init+0x1c>
    entry->extension = extension;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	683a      	ldr	r2, [r7, #0]
 8005c16:	609a      	str	r2, [r3, #8]
    return ODR_OK;
 8005c18:	2300      	movs	r3, #0
}
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	370c      	adds	r7, #12
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c24:	4770      	bx	lr

08005c26 <OD_get_u32>:
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b086      	sub	sp, #24
 8005c2a:	af02      	add	r7, sp, #8
 8005c2c:	60f8      	str	r0, [r7, #12]
 8005c2e:	607a      	str	r2, [r7, #4]
 8005c30:	603b      	str	r3, [r7, #0]
 8005c32:	460b      	mov	r3, r1
 8005c34:	72fb      	strb	r3, [r7, #11]
    return OD_get_value(entry, subIndex, val, sizeof(*val), odOrig);
 8005c36:	7af9      	ldrb	r1, [r7, #11]
 8005c38:	683b      	ldr	r3, [r7, #0]
 8005c3a:	9300      	str	r3, [sp, #0]
 8005c3c:	2304      	movs	r3, #4
 8005c3e:	687a      	ldr	r2, [r7, #4]
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f7fb ffbb 	bl	8001bbc <OD_get_value>
 8005c46:	4603      	mov	r3, r0
}
 8005c48:	4618      	mov	r0, r3
 8005c4a:	3710      	adds	r7, #16
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <CO_TIME_receive>:
 *
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_TIME_receive(void *object, void *msg) {
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b086      	sub	sp, #24
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	6039      	str	r1, [r7, #0]
    CO_TIME_t *TIME = object;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	617b      	str	r3, [r7, #20]
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 8005c5e:	683b      	ldr	r3, [r7, #0]
 8005c60:	791b      	ldrb	r3, [r3, #4]
 8005c62:	74fb      	strb	r3, [r7, #19]
    uint8_t *data = CO_CANrxMsg_readData(msg);
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	3305      	adds	r3, #5
 8005c68:	60fb      	str	r3, [r7, #12]

    if (DLC == CO_TIME_MSG_LENGTH) {
 8005c6a:	7cfb      	ldrb	r3, [r7, #19]
 8005c6c:	2b06      	cmp	r3, #6
 8005c6e:	d108      	bne.n	8005c82 <CO_TIME_receive+0x32>
        memcpy(TIME->timeStamp, data, sizeof(TIME->timeStamp));
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	2206      	movs	r2, #6
 8005c74:	68f9      	ldr	r1, [r7, #12]
 8005c76:	4618      	mov	r0, r3
 8005c78:	f00e fa02 	bl	8014080 <memcpy>
        CO_FLAG_SET(TIME->CANrxNew);
 8005c7c:	697b      	ldr	r3, [r7, #20]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	619a      	str	r2, [r3, #24]
        if (TIME->pFunctSignalPre != NULL) {
            TIME->pFunctSignalPre(TIME->functSignalObjectPre);
        }
#endif
    }
}
 8005c82:	bf00      	nop
 8005c84:	3718      	adds	r7, #24
 8005c86:	46bd      	mov	sp, r7
 8005c88:	bd80      	pop	{r7, pc}
	...

08005c8c <OD_write_1012>:
 *
 * For more information see file CO_ODinterface.h, OD_IO_t.
 */
static ODR_t OD_write_1012(OD_stream_t *stream, const void *buf,
                           OD_size_t count, OD_size_t *countWritten)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b088      	sub	sp, #32
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	60f8      	str	r0, [r7, #12]
 8005c94:	60b9      	str	r1, [r7, #8]
 8005c96:	607a      	str	r2, [r7, #4]
 8005c98:	603b      	str	r3, [r7, #0]
    if (stream == NULL || stream->subIndex != 0 || buf == NULL
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d00c      	beq.n	8005cba <OD_write_1012+0x2e>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	7c5b      	ldrb	r3, [r3, #17]
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d108      	bne.n	8005cba <OD_write_1012+0x2e>
 8005ca8:	68bb      	ldr	r3, [r7, #8]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d005      	beq.n	8005cba <OD_write_1012+0x2e>
        || count != sizeof(uint32_t) || countWritten == NULL
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2b04      	cmp	r3, #4
 8005cb2:	d102      	bne.n	8005cba <OD_write_1012+0x2e>
 8005cb4:	683b      	ldr	r3, [r7, #0]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	d101      	bne.n	8005cbe <OD_write_1012+0x32>
    ) {
        return ODR_DEV_INCOMPAT;
 8005cba:	2309      	movs	r3, #9
 8005cbc:	e051      	b.n	8005d62 <OD_write_1012+0xd6>
    }

    CO_TIME_t *TIME = stream->object;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	685b      	ldr	r3, [r3, #4]
 8005cc2:	61fb      	str	r3, [r7, #28]

    /* verify written value */
    uint32_t cobIdTimeStamp = CO_getUint32(buf);
 8005cc4:	68b8      	ldr	r0, [r7, #8]
 8005cc6:	f7ff ff7b 	bl	8005bc0 <CO_getUint32>
 8005cca:	61b8      	str	r0, [r7, #24]
    uint16_t CAN_ID = cobIdTimeStamp & 0x7FF;
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	b29b      	uxth	r3, r3
 8005cd0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005cd4:	82fb      	strh	r3, [r7, #22]
    if ((cobIdTimeStamp & 0x3FFFF800) != 0 || CO_IS_RESTRICTED_CAN_ID(CAN_ID)) {
 8005cd6:	69ba      	ldr	r2, [r7, #24]
 8005cd8:	4b24      	ldr	r3, [pc, #144]	; (8005d6c <OD_write_1012+0xe0>)
 8005cda:	4013      	ands	r3, r2
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d126      	bne.n	8005d2e <OD_write_1012+0xa2>
 8005ce0:	8afb      	ldrh	r3, [r7, #22]
 8005ce2:	2b7f      	cmp	r3, #127	; 0x7f
 8005ce4:	d923      	bls.n	8005d2e <OD_write_1012+0xa2>
 8005ce6:	8afb      	ldrh	r3, [r7, #22]
 8005ce8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005cec:	d903      	bls.n	8005cf6 <OD_write_1012+0x6a>
 8005cee:	8afb      	ldrh	r3, [r7, #22]
 8005cf0:	f5b3 7fc0 	cmp.w	r3, #384	; 0x180
 8005cf4:	d91b      	bls.n	8005d2e <OD_write_1012+0xa2>
 8005cf6:	8afb      	ldrh	r3, [r7, #22]
 8005cf8:	f5b3 6fb0 	cmp.w	r3, #1408	; 0x580
 8005cfc:	d903      	bls.n	8005d06 <OD_write_1012+0x7a>
 8005cfe:	8afb      	ldrh	r3, [r7, #22]
 8005d00:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005d04:	d313      	bcc.n	8005d2e <OD_write_1012+0xa2>
 8005d06:	8afb      	ldrh	r3, [r7, #22]
 8005d08:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005d0c:	d903      	bls.n	8005d16 <OD_write_1012+0x8a>
 8005d0e:	8afb      	ldrh	r3, [r7, #22]
 8005d10:	f5b3 6fd0 	cmp.w	r3, #1664	; 0x680
 8005d14:	d30b      	bcc.n	8005d2e <OD_write_1012+0xa2>
 8005d16:	8afb      	ldrh	r3, [r7, #22]
 8005d18:	f5b3 6fdc 	cmp.w	r3, #1760	; 0x6e0
 8005d1c:	d303      	bcc.n	8005d26 <OD_write_1012+0x9a>
 8005d1e:	8afb      	ldrh	r3, [r7, #22]
 8005d20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d24:	d303      	bcc.n	8005d2e <OD_write_1012+0xa2>
 8005d26:	8afb      	ldrh	r3, [r7, #22]
 8005d28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005d2c:	d901      	bls.n	8005d32 <OD_write_1012+0xa6>
        return ODR_INVALID_VALUE;
 8005d2e:	230f      	movs	r3, #15
 8005d30:	e017      	b.n	8005d62 <OD_write_1012+0xd6>
    }

    /* update object */
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000L) != 0;
 8005d32:	69bb      	ldr	r3, [r7, #24]
 8005d34:	0fdb      	lsrs	r3, r3, #31
 8005d36:	b2db      	uxtb	r3, r3
 8005d38:	461a      	mov	r2, r3
 8005d3a:	69fb      	ldr	r3, [r7, #28]
 8005d3c:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000L) != 0;
 8005d3e:	69bb      	ldr	r3, [r7, #24]
 8005d40:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	bf14      	ite	ne
 8005d48:	2301      	movne	r3, #1
 8005d4a:	2300      	moveq	r3, #0
 8005d4c:	b2db      	uxtb	r3, r3
 8005d4e:	461a      	mov	r2, r3
 8005d50:	69fb      	ldr	r3, [r7, #28]
 8005d52:	615a      	str	r2, [r3, #20]

    /* write value to the original location in the Object Dictionary */
    return OD_writeOriginal(stream, buf, count, countWritten);
 8005d54:	683b      	ldr	r3, [r7, #0]
 8005d56:	687a      	ldr	r2, [r7, #4]
 8005d58:	68b9      	ldr	r1, [r7, #8]
 8005d5a:	68f8      	ldr	r0, [r7, #12]
 8005d5c:	f7fb fd48 	bl	80017f0 <OD_writeOriginal>
 8005d60:	4603      	mov	r3, r0
}
 8005d62:	4618      	mov	r0, r3
 8005d64:	3720      	adds	r7, #32
 8005d66:	46bd      	mov	sp, r7
 8005d68:	bd80      	pop	{r7, pc}
 8005d6a:	bf00      	nop
 8005d6c:	3ffff800 	.word	0x3ffff800

08005d70 <CO_TIME_init>:
#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_PRODUCER
                              CO_CANmodule_t *CANdevTx,
                              uint16_t CANdevTxIdx,
#endif
                              uint32_t *errInfo)
{
 8005d70:	b580      	push	{r7, lr}
 8005d72:	b08c      	sub	sp, #48	; 0x30
 8005d74:	af04      	add	r7, sp, #16
 8005d76:	60f8      	str	r0, [r7, #12]
 8005d78:	60b9      	str	r1, [r7, #8]
 8005d7a:	607a      	str	r2, [r7, #4]
 8005d7c:	807b      	strh	r3, [r7, #2]
    /* verify arguments */
    if (TIME == NULL || OD_1012_cobIdTimeStamp == NULL || CANdevRx == NULL
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d005      	beq.n	8005d90 <CO_TIME_init+0x20>
 8005d84:	68bb      	ldr	r3, [r7, #8]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d002      	beq.n	8005d90 <CO_TIME_init+0x20>
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d102      	bne.n	8005d96 <CO_TIME_init+0x26>
#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_PRODUCER
        || CANdevTx == NULL
#endif
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8005d90:	f04f 33ff 	mov.w	r3, #4294967295
 8005d94:	e061      	b.n	8005e5a <CO_TIME_init+0xea>
    }

    memset(TIME, 0, sizeof(CO_TIME_t));
 8005d96:	222c      	movs	r2, #44	; 0x2c
 8005d98:	2100      	movs	r1, #0
 8005d9a:	68f8      	ldr	r0, [r7, #12]
 8005d9c:	f00e f998 	bl	80140d0 <memset>

    /* get parameters from object dictionary and configure extension */
    uint32_t cobIdTimeStamp;
    ODR_t odRet = OD_get_u32(OD_1012_cobIdTimeStamp, 0, &cobIdTimeStamp, true);
 8005da0:	f107 0214 	add.w	r2, r7, #20
 8005da4:	2301      	movs	r3, #1
 8005da6:	2100      	movs	r1, #0
 8005da8:	68b8      	ldr	r0, [r7, #8]
 8005daa:	f7ff ff3c 	bl	8005c26 <OD_get_u32>
 8005dae:	4603      	mov	r3, r0
 8005db0:	77fb      	strb	r3, [r7, #31]
    if (odRet != ODR_OK) {
 8005db2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d00c      	beq.n	8005dd4 <CO_TIME_init+0x64>
        if (errInfo != NULL) *errInfo = OD_getIndex(OD_1012_cobIdTimeStamp);
 8005dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d006      	beq.n	8005dce <CO_TIME_init+0x5e>
 8005dc0:	68b8      	ldr	r0, [r7, #8]
 8005dc2:	f7ff ff0b 	bl	8005bdc <OD_getIndex>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	461a      	mov	r2, r3
 8005dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dcc:	601a      	str	r2, [r3, #0]
        return CO_ERROR_OD_PARAMETERS;
 8005dce:	f06f 030b 	mvn.w	r3, #11
 8005dd2:	e042      	b.n	8005e5a <CO_TIME_init+0xea>
    }
#if (CO_CONFIG_TIME) & CO_CONFIG_FLAG_OD_DYNAMIC
    TIME->OD_1012_extension.object = TIME;
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	68fa      	ldr	r2, [r7, #12]
 8005dd8:	61da      	str	r2, [r3, #28]
    TIME->OD_1012_extension.read = OD_readOriginal;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	4a21      	ldr	r2, [pc, #132]	; (8005e64 <CO_TIME_init+0xf4>)
 8005dde:	621a      	str	r2, [r3, #32]
    TIME->OD_1012_extension.write = OD_write_1012;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	4a21      	ldr	r2, [pc, #132]	; (8005e68 <CO_TIME_init+0xf8>)
 8005de4:	625a      	str	r2, [r3, #36]	; 0x24
    OD_extension_init(OD_1012_cobIdTimeStamp, &TIME->OD_1012_extension);
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	331c      	adds	r3, #28
 8005dea:	4619      	mov	r1, r3
 8005dec:	68b8      	ldr	r0, [r7, #8]
 8005dee:	f7ff ff06 	bl	8005bfe <OD_extension_init>
#endif

    /* Configure object variables */
    uint16_t cobId = cobIdTimeStamp & 0x7FF;
 8005df2:	697b      	ldr	r3, [r7, #20]
 8005df4:	b29b      	uxth	r3, r3
 8005df6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005dfa:	83bb      	strh	r3, [r7, #28]
    TIME->isConsumer = (cobIdTimeStamp & 0x80000000L) != 0;
 8005dfc:	697b      	ldr	r3, [r7, #20]
 8005dfe:	0fdb      	lsrs	r3, r3, #31
 8005e00:	b2db      	uxtb	r3, r3
 8005e02:	461a      	mov	r2, r3
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	611a      	str	r2, [r3, #16]
    TIME->isProducer = (cobIdTimeStamp & 0x40000000L) != 0;
 8005e08:	697b      	ldr	r3, [r7, #20]
 8005e0a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	bf14      	ite	ne
 8005e12:	2301      	movne	r3, #1
 8005e14:	2300      	moveq	r3, #0
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	461a      	mov	r2, r3
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	615a      	str	r2, [r3, #20]
    CO_FLAG_CLEAR(TIME->CANrxNew);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	2200      	movs	r2, #0
 8005e22:	619a      	str	r2, [r3, #24]

    /* configure TIME consumer message reception */
	if (TIME->isConsumer) {
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	691b      	ldr	r3, [r3, #16]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d015      	beq.n	8005e58 <CO_TIME_init+0xe8>
        CO_ReturnError_t ret = CO_CANrxBufferInit(
 8005e2c:	8bba      	ldrh	r2, [r7, #28]
 8005e2e:	8879      	ldrh	r1, [r7, #2]
 8005e30:	4b0e      	ldr	r3, [pc, #56]	; (8005e6c <CO_TIME_init+0xfc>)
 8005e32:	9302      	str	r3, [sp, #8]
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	9301      	str	r3, [sp, #4]
 8005e38:	2300      	movs	r3, #0
 8005e3a:	9300      	str	r3, [sp, #0]
 8005e3c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f002 f873 	bl	8007f2c <CO_CANrxBufferInit>
 8005e46:	4603      	mov	r3, r0
 8005e48:	76fb      	strb	r3, [r7, #27]
                cobId,          /* CAN identifier */
                0x7FF,          /* mask */
                0,              /* rtr */
                (void*)TIME,    /* object passed to receive function */
                CO_TIME_receive);/*this function will process received message*/
        if (ret != CO_ERROR_NO)
 8005e4a:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d002      	beq.n	8005e58 <CO_TIME_init+0xe8>
            return ret;
 8005e52:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8005e56:	e000      	b.n	8005e5a <CO_TIME_init+0xea>
    if (TIME->CANtxBuff == NULL) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    return CO_ERROR_NO;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3720      	adds	r7, #32
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}
 8005e62:	bf00      	nop
 8005e64:	08001741 	.word	0x08001741
 8005e68:	08005c8d 	.word	0x08005c8d
 8005e6c:	08005c51 	.word	0x08005c51

08005e70 <CO_TIME_process>:


bool_t CO_TIME_process(CO_TIME_t *TIME,
                       bool_t NMTisPreOrOperational,
                       uint32_t timeDifference_us)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b08a      	sub	sp, #40	; 0x28
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	60f8      	str	r0, [r7, #12]
 8005e78:	60b9      	str	r1, [r7, #8]
 8005e7a:	607a      	str	r2, [r7, #4]
    bool_t timestampReceived = false;
 8005e7c:	2300      	movs	r3, #0
 8005e7e:	627b      	str	r3, [r7, #36]	; 0x24

    /* Was TIME stamp message just received */
    if (NMTisPreOrOperational && TIME->isConsumer) {
 8005e80:	68bb      	ldr	r3, [r7, #8]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d024      	beq.n	8005ed0 <CO_TIME_process+0x60>
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	691b      	ldr	r3, [r3, #16]
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d020      	beq.n	8005ed0 <CO_TIME_process+0x60>
        if(CO_FLAG_READ(TIME->CANrxNew)) {
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d01f      	beq.n	8005ed6 <CO_TIME_process+0x66>
            uint32_t ms_swapped = CO_getUint32(&TIME->timeStamp[0]);
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	4618      	mov	r0, r3
 8005e9a:	f7ff fe91 	bl	8005bc0 <CO_getUint32>
 8005e9e:	6238      	str	r0, [r7, #32]
            uint16_t days_swapped = CO_getUint16(&TIME->timeStamp[4]);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	3304      	adds	r3, #4
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f7ff fe7c 	bl	8005ba2 <CO_getUint16>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	83fb      	strh	r3, [r7, #30]
            TIME->ms = CO_SWAP_32(ms_swapped) & 0x0FFFFFFF;
 8005eae:	6a3b      	ldr	r3, [r7, #32]
 8005eb0:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	609a      	str	r2, [r3, #8]
            TIME->days = CO_SWAP_16(days_swapped);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	8bfa      	ldrh	r2, [r7, #30]
 8005ebc:	819a      	strh	r2, [r3, #12]
            TIME->residual_us = 0;
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	81da      	strh	r2, [r3, #14]
            timestampReceived = true;
 8005ec4:	2301      	movs	r3, #1
 8005ec6:	627b      	str	r3, [r7, #36]	; 0x24

            CO_FLAG_CLEAR(TIME->CANrxNew);
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	619a      	str	r2, [r3, #24]
        if(CO_FLAG_READ(TIME->CANrxNew)) {
 8005ece:	e002      	b.n	8005ed6 <CO_TIME_process+0x66>
        }
    }
    else {
        CO_FLAG_CLEAR(TIME->CANrxNew);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	619a      	str	r2, [r3, #24]
    }

    /* Update time */
    uint32_t ms = 0;
 8005ed6:	2300      	movs	r3, #0
 8005ed8:	61bb      	str	r3, [r7, #24]
    if (!timestampReceived && timeDifference_us > 0) {
 8005eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d132      	bne.n	8005f46 <CO_TIME_process+0xd6>
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d02f      	beq.n	8005f46 <CO_TIME_process+0xd6>
        uint32_t us = timeDifference_us + TIME->residual_us;
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	89db      	ldrh	r3, [r3, #14]
 8005eea:	461a      	mov	r2, r3
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	4413      	add	r3, r2
 8005ef0:	617b      	str	r3, [r7, #20]
        ms = us / 1000;
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	4a16      	ldr	r2, [pc, #88]	; (8005f50 <CO_TIME_process+0xe0>)
 8005ef6:	fba2 2303 	umull	r2, r3, r2, r3
 8005efa:	099b      	lsrs	r3, r3, #6
 8005efc:	61bb      	str	r3, [r7, #24]
        TIME->residual_us = us % 1000;
 8005efe:	697a      	ldr	r2, [r7, #20]
 8005f00:	4b13      	ldr	r3, [pc, #76]	; (8005f50 <CO_TIME_process+0xe0>)
 8005f02:	fba3 1302 	umull	r1, r3, r3, r2
 8005f06:	099b      	lsrs	r3, r3, #6
 8005f08:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005f0c:	fb01 f303 	mul.w	r3, r1, r3
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	81da      	strh	r2, [r3, #14]
        TIME->ms += ms;
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	689a      	ldr	r2, [r3, #8]
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	441a      	add	r2, r3
 8005f20:	68fb      	ldr	r3, [r7, #12]
 8005f22:	609a      	str	r2, [r3, #8]
        if (TIME->ms >= ((uint32_t)1000*60*60*24)) {
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	4a0a      	ldr	r2, [pc, #40]	; (8005f54 <CO_TIME_process+0xe4>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d90b      	bls.n	8005f46 <CO_TIME_process+0xd6>
            TIME->ms -= ((uint32_t)1000*60*60*24);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	689a      	ldr	r2, [r3, #8]
 8005f32:	4b09      	ldr	r3, [pc, #36]	; (8005f58 <CO_TIME_process+0xe8>)
 8005f34:	4413      	add	r3, r2
 8005f36:	68fa      	ldr	r2, [r7, #12]
 8005f38:	6093      	str	r3, [r2, #8]
            TIME->days += 1;
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	899b      	ldrh	r3, [r3, #12]
 8005f3e:	3301      	adds	r3, #1
 8005f40:	b29a      	uxth	r2, r3
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	819a      	strh	r2, [r3, #12]
    else {
        TIME->producerTimer_ms = TIME->producerInterval_ms;
    }
#endif

    return timestampReceived;
 8005f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3728      	adds	r7, #40	; 0x28
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}
 8005f50:	10624dd3 	.word	0x10624dd3
 8005f54:	05265bff 	.word	0x05265bff
 8005f58:	fad9a400 	.word	0xfad9a400

08005f5c <CO_fifo_init>:
  #error CO_CONFIG_CRC16_ENABLE must be enabled.
 #endif
#endif

/******************************************************************************/
void CO_fifo_init(CO_fifo_t *fifo, uint8_t *buf, size_t bufSize) {
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	607a      	str	r2, [r7, #4]

    if (fifo == NULL || buf == NULL || bufSize < 2) {
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d012      	beq.n	8005f94 <CO_fifo_init+0x38>
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d00f      	beq.n	8005f94 <CO_fifo_init+0x38>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2b01      	cmp	r3, #1
 8005f78:	d90c      	bls.n	8005f94 <CO_fifo_init+0x38>
        return;
    }

    fifo->readPtr = 0;
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	60da      	str	r2, [r3, #12]
    fifo->writePtr = 0;
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	2200      	movs	r2, #0
 8005f84:	609a      	str	r2, [r3, #8]
    fifo->buf = buf;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	68ba      	ldr	r2, [r7, #8]
 8005f8a:	601a      	str	r2, [r3, #0]
    fifo->bufSize = bufSize;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	687a      	ldr	r2, [r7, #4]
 8005f90:	605a      	str	r2, [r3, #4]

    return;
 8005f92:	e000      	b.n	8005f96 <CO_fifo_init+0x3a>
        return;
 8005f94:	bf00      	nop
}
 8005f96:	3714      	adds	r7, #20
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9e:	4770      	bx	lr

08005fa0 <CO_fifo_write>:
 ******************************************************************************/
size_t CO_fifo_write(CO_fifo_t *fifo,
                     const uint8_t *buf,
                     size_t count,
                     uint16_t *crc)
{
 8005fa0:	b480      	push	{r7}
 8005fa2:	b089      	sub	sp, #36	; 0x24
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	60f8      	str	r0, [r7, #12]
 8005fa8:	60b9      	str	r1, [r7, #8]
 8005faa:	607a      	str	r2, [r7, #4]
 8005fac:	603b      	str	r3, [r7, #0]
    size_t i;
    uint8_t *bufDest;

    if (fifo == NULL || fifo->buf == NULL || buf == NULL) {
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d006      	beq.n	8005fc2 <CO_fifo_write+0x22>
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d002      	beq.n	8005fc2 <CO_fifo_write+0x22>
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d101      	bne.n	8005fc6 <CO_fifo_write+0x26>
        return 0;
 8005fc2:	2300      	movs	r3, #0
 8005fc4:	e03e      	b.n	8006044 <CO_fifo_write+0xa4>
    }

    bufDest = &fifo->buf[fifo->writePtr];
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	681a      	ldr	r2, [r3, #0]
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	689b      	ldr	r3, [r3, #8]
 8005fce:	4413      	add	r3, r2
 8005fd0:	61bb      	str	r3, [r7, #24]
    for (i = count; i > 0; i--) {
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	61fb      	str	r3, [r7, #28]
 8005fd6:	e02f      	b.n	8006038 <CO_fifo_write+0x98>
        size_t writePtrNext = fifo->writePtr + 1;
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	689b      	ldr	r3, [r3, #8]
 8005fdc:	3301      	adds	r3, #1
 8005fde:	617b      	str	r3, [r7, #20]

        /* is circular buffer full */
        if (writePtrNext == fifo->readPtr ||
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	68db      	ldr	r3, [r3, #12]
 8005fe4:	697a      	ldr	r2, [r7, #20]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d029      	beq.n	800603e <CO_fifo_write+0x9e>
            (writePtrNext == fifo->bufSize && fifo->readPtr == 0)) {
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	685b      	ldr	r3, [r3, #4]
        if (writePtrNext == fifo->readPtr ||
 8005fee:	697a      	ldr	r2, [r7, #20]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d103      	bne.n	8005ffc <CO_fifo_write+0x5c>
            (writePtrNext == fifo->bufSize && fifo->readPtr == 0)) {
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	68db      	ldr	r3, [r3, #12]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d020      	beq.n	800603e <CO_fifo_write+0x9e>
            break;
        }

        *bufDest = *buf;
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	781a      	ldrb	r2, [r3, #0]
 8006000:	69bb      	ldr	r3, [r7, #24]
 8006002:	701a      	strb	r2, [r3, #0]
            crc16_ccitt_single(crc, *buf);
        }
#endif

        /* increment variables */
        if (writePtrNext == fifo->bufSize) {
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	685b      	ldr	r3, [r3, #4]
 8006008:	697a      	ldr	r2, [r7, #20]
 800600a:	429a      	cmp	r2, r3
 800600c:	d106      	bne.n	800601c <CO_fifo_write+0x7c>
            fifo->writePtr = 0;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	2200      	movs	r2, #0
 8006012:	609a      	str	r2, [r3, #8]
            bufDest = &fifo->buf[0];
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	61bb      	str	r3, [r7, #24]
 800601a:	e007      	b.n	800602c <CO_fifo_write+0x8c>
        }
        else {
            fifo->writePtr++;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	1c5a      	adds	r2, r3, #1
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	609a      	str	r2, [r3, #8]
            bufDest++;
 8006026:	69bb      	ldr	r3, [r7, #24]
 8006028:	3301      	adds	r3, #1
 800602a:	61bb      	str	r3, [r7, #24]
        }
        buf++;
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	3301      	adds	r3, #1
 8006030:	60bb      	str	r3, [r7, #8]
    for (i = count; i > 0; i--) {
 8006032:	69fb      	ldr	r3, [r7, #28]
 8006034:	3b01      	subs	r3, #1
 8006036:	61fb      	str	r3, [r7, #28]
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	2b00      	cmp	r3, #0
 800603c:	d1cc      	bne.n	8005fd8 <CO_fifo_write+0x38>
    }

    return count - i;
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	1ad3      	subs	r3, r2, r3
}
 8006044:	4618      	mov	r0, r3
 8006046:	3724      	adds	r7, #36	; 0x24
 8006048:	46bd      	mov	sp, r7
 800604a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800604e:	4770      	bx	lr

08006050 <CO_fifo_read>:


/******************************************************************************/
size_t CO_fifo_read(CO_fifo_t *fifo, uint8_t *buf, size_t count, bool_t *eof) {
 8006050:	b480      	push	{r7}
 8006052:	b089      	sub	sp, #36	; 0x24
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
 800605c:	603b      	str	r3, [r7, #0]
    size_t i;
    const uint8_t *bufSrc;

    if (eof != NULL) {
 800605e:	683b      	ldr	r3, [r7, #0]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d002      	beq.n	800606a <CO_fifo_read+0x1a>
        *eof = false;
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	2200      	movs	r2, #0
 8006068:	601a      	str	r2, [r3, #0]
    }
    if (fifo == NULL || buf == NULL || fifo->readPtr == fifo->writePtr) {
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	2b00      	cmp	r3, #0
 800606e:	d008      	beq.n	8006082 <CO_fifo_read+0x32>
 8006070:	68bb      	ldr	r3, [r7, #8]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d005      	beq.n	8006082 <CO_fifo_read+0x32>
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	68da      	ldr	r2, [r3, #12]
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	689b      	ldr	r3, [r3, #8]
 800607e:	429a      	cmp	r2, r3
 8006080:	d101      	bne.n	8006086 <CO_fifo_read+0x36>
        return 0;
 8006082:	2300      	movs	r3, #0
 8006084:	e036      	b.n	80060f4 <CO_fifo_read+0xa4>
    }

    bufSrc = &fifo->buf[fifo->readPtr];
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	4413      	add	r3, r2
 8006090:	61bb      	str	r3, [r7, #24]
    for (i = count; i > 0; ) {
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	61fb      	str	r3, [r7, #28]
 8006096:	e025      	b.n	80060e4 <CO_fifo_read+0x94>
        const uint8_t c = *bufSrc;
 8006098:	69bb      	ldr	r3, [r7, #24]
 800609a:	781b      	ldrb	r3, [r3, #0]
 800609c:	75fb      	strb	r3, [r7, #23]

        /* is circular buffer empty */
        if (fifo->readPtr == fifo->writePtr) {
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	68da      	ldr	r2, [r3, #12]
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	689b      	ldr	r3, [r3, #8]
 80060a6:	429a      	cmp	r2, r3
 80060a8:	d020      	beq.n	80060ec <CO_fifo_read+0x9c>
            break;
        }

        *(buf++) = c;
 80060aa:	68bb      	ldr	r3, [r7, #8]
 80060ac:	1c5a      	adds	r2, r3, #1
 80060ae:	60ba      	str	r2, [r7, #8]
 80060b0:	7dfa      	ldrb	r2, [r7, #23]
 80060b2:	701a      	strb	r2, [r3, #0]

        /* increment variables */
        if (++fifo->readPtr == fifo->bufSize) {
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	68db      	ldr	r3, [r3, #12]
 80060b8:	1c5a      	adds	r2, r3, #1
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	60da      	str	r2, [r3, #12]
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	68da      	ldr	r2, [r3, #12]
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	685b      	ldr	r3, [r3, #4]
 80060c6:	429a      	cmp	r2, r3
 80060c8:	d106      	bne.n	80060d8 <CO_fifo_read+0x88>
            fifo->readPtr = 0;
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	2200      	movs	r2, #0
 80060ce:	60da      	str	r2, [r3, #12]
            bufSrc = &fifo->buf[0];
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	61bb      	str	r3, [r7, #24]
 80060d6:	e002      	b.n	80060de <CO_fifo_read+0x8e>
        }
        else {
            bufSrc++;
 80060d8:	69bb      	ldr	r3, [r7, #24]
 80060da:	3301      	adds	r3, #1
 80060dc:	61bb      	str	r3, [r7, #24]
        }
        i--;
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	3b01      	subs	r3, #1
 80060e2:	61fb      	str	r3, [r7, #28]
    for (i = count; i > 0; ) {
 80060e4:	69fb      	ldr	r3, [r7, #28]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d1d6      	bne.n	8006098 <CO_fifo_read+0x48>
 80060ea:	e000      	b.n	80060ee <CO_fifo_read+0x9e>
            break;
 80060ec:	bf00      	nop
            break;
        }
#endif
    }

    return count - i;
 80060ee:	687a      	ldr	r2, [r7, #4]
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	1ad3      	subs	r3, r2, r3
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3724      	adds	r7, #36	; 0x24
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr

08006100 <CO_LEDs_init>:
#include "303/CO_LEDs.h"

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE

/******************************************************************************/
CO_ReturnError_t CO_LEDs_init(CO_LEDs_t *LEDs) {
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8006108:	2300      	movs	r3, #0
 800610a:	73fb      	strb	r3, [r7, #15]

    /* verify arguments */
    if (LEDs == NULL) {
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d102      	bne.n	8006118 <CO_LEDs_init+0x18>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006112:	f04f 33ff 	mov.w	r3, #4294967295
 8006116:	e006      	b.n	8006126 <CO_LEDs_init+0x26>
    }

    /* clear the object */
    memset(LEDs, 0, sizeof(CO_LEDs_t));
 8006118:	220c      	movs	r2, #12
 800611a:	2100      	movs	r1, #0
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f00d ffd7 	bl	80140d0 <memset>

    return ret;
 8006122:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8006126:	4618      	mov	r0, r3
 8006128:	3710      	adds	r7, #16
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
	...

08006130 <CO_LEDs_process>:
                     bool_t ErrSync,
                     bool_t ErrHbCons,
                     bool_t ErrOther,
                     bool_t firmwareDownload,
                     uint32_t *timerNext_us)
{
 8006130:	b480      	push	{r7}
 8006132:	b089      	sub	sp, #36	; 0x24
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	603b      	str	r3, [r7, #0]
 800613c:	4613      	mov	r3, r2
 800613e:	71fb      	strb	r3, [r7, #7]
    (void)timerNext_us; /* may be unused */

    uint8_t rd = 0;
 8006140:	2300      	movs	r3, #0
 8006142:	77fb      	strb	r3, [r7, #31]
    uint8_t gr = 0;
 8006144:	2300      	movs	r3, #0
 8006146:	77bb      	strb	r3, [r7, #30]
    bool_t tick = false;
 8006148:	2300      	movs	r3, #0
 800614a:	61bb      	str	r3, [r7, #24]

    LEDs->LEDtmr50ms += timeDifference_us;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	681a      	ldr	r2, [r3, #0]
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	441a      	add	r2, r3
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	601a      	str	r2, [r3, #0]
    while (LEDs->LEDtmr50ms >= 50000) {
 8006158:	e0fe      	b.n	8006358 <CO_LEDs_process+0x228>
        bool_t rdFlickerNext = (LEDs->LEDred & CO_LED_flicker) == 0;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	7a5b      	ldrb	r3, [r3, #9]
 800615e:	f003 0301 	and.w	r3, r3, #1
 8006162:	2b00      	cmp	r3, #0
 8006164:	bf0c      	ite	eq
 8006166:	2301      	moveq	r3, #1
 8006168:	2300      	movne	r3, #0
 800616a:	b2db      	uxtb	r3, r3
 800616c:	613b      	str	r3, [r7, #16]

        tick = true;
 800616e:	2301      	movs	r3, #1
 8006170:	61bb      	str	r3, [r7, #24]
        LEDs->LEDtmr50ms -= 50000;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681a      	ldr	r2, [r3, #0]
 8006176:	4bae      	ldr	r3, [pc, #696]	; (8006430 <CO_LEDs_process+0x300>)
 8006178:	4413      	add	r3, r2
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	6013      	str	r3, [r2, #0]

        if (++LEDs->LEDtmr200ms > 3) {
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	791b      	ldrb	r3, [r3, #4]
 8006182:	3301      	adds	r3, #1
 8006184:	b2da      	uxtb	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	711a      	strb	r2, [r3, #4]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	791b      	ldrb	r3, [r3, #4]
 800618e:	2b03      	cmp	r3, #3
 8006190:	f240 80ca 	bls.w	8006328 <CO_LEDs_process+0x1f8>
            /* calculate 2,5Hz blinking and flashing */
            LEDs->LEDtmr200ms = 0;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	2200      	movs	r2, #0
 8006198:	711a      	strb	r2, [r3, #4]
            rd = gr = 0;
 800619a:	2300      	movs	r3, #0
 800619c:	77bb      	strb	r3, [r7, #30]
 800619e:	7fbb      	ldrb	r3, [r7, #30]
 80061a0:	77fb      	strb	r3, [r7, #31]

            if ((LEDs->LEDred & CO_LED_blink) == 0) rd |= CO_LED_blink;
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	7a5b      	ldrb	r3, [r3, #9]
 80061a6:	f003 0302 	and.w	r3, r3, #2
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d104      	bne.n	80061b8 <CO_LEDs_process+0x88>
 80061ae:	7ffb      	ldrb	r3, [r7, #31]
 80061b0:	f043 0302 	orr.w	r3, r3, #2
 80061b4:	77fb      	strb	r3, [r7, #31]
 80061b6:	e003      	b.n	80061c0 <CO_LEDs_process+0x90>
            else                                    gr |= CO_LED_blink;
 80061b8:	7fbb      	ldrb	r3, [r7, #30]
 80061ba:	f043 0302 	orr.w	r3, r3, #2
 80061be:	77bb      	strb	r3, [r7, #30]

            switch (++LEDs->LEDtmrflash_1) {
 80061c0:	68fb      	ldr	r3, [r7, #12]
 80061c2:	795b      	ldrb	r3, [r3, #5]
 80061c4:	3301      	adds	r3, #1
 80061c6:	b2da      	uxtb	r2, r3
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	715a      	strb	r2, [r3, #5]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	795b      	ldrb	r3, [r3, #5]
 80061d0:	2b06      	cmp	r3, #6
 80061d2:	d010      	beq.n	80061f6 <CO_LEDs_process+0xc6>
 80061d4:	2b06      	cmp	r3, #6
 80061d6:	dc12      	bgt.n	80061fe <CO_LEDs_process+0xce>
 80061d8:	2b01      	cmp	r3, #1
 80061da:	d002      	beq.n	80061e2 <CO_LEDs_process+0xb2>
 80061dc:	2b02      	cmp	r3, #2
 80061de:	d005      	beq.n	80061ec <CO_LEDs_process+0xbc>
                case 1: rd |= CO_LED_flash_1; break;
                case 2: gr |= CO_LED_flash_1; break;
                case 6: LEDs->LEDtmrflash_1 = 0; break;
                default: break;
 80061e0:	e00d      	b.n	80061fe <CO_LEDs_process+0xce>
                case 1: rd |= CO_LED_flash_1; break;
 80061e2:	7ffb      	ldrb	r3, [r7, #31]
 80061e4:	f043 0304 	orr.w	r3, r3, #4
 80061e8:	77fb      	strb	r3, [r7, #31]
 80061ea:	e009      	b.n	8006200 <CO_LEDs_process+0xd0>
                case 2: gr |= CO_LED_flash_1; break;
 80061ec:	7fbb      	ldrb	r3, [r7, #30]
 80061ee:	f043 0304 	orr.w	r3, r3, #4
 80061f2:	77bb      	strb	r3, [r7, #30]
 80061f4:	e004      	b.n	8006200 <CO_LEDs_process+0xd0>
                case 6: LEDs->LEDtmrflash_1 = 0; break;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2200      	movs	r2, #0
 80061fa:	715a      	strb	r2, [r3, #5]
 80061fc:	e000      	b.n	8006200 <CO_LEDs_process+0xd0>
                default: break;
 80061fe:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_2) {
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	799b      	ldrb	r3, [r3, #6]
 8006204:	3301      	adds	r3, #1
 8006206:	b2da      	uxtb	r2, r3
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	719a      	strb	r2, [r3, #6]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	799b      	ldrb	r3, [r3, #6]
 8006210:	3b01      	subs	r3, #1
 8006212:	2b07      	cmp	r3, #7
 8006214:	d820      	bhi.n	8006258 <CO_LEDs_process+0x128>
 8006216:	a201      	add	r2, pc, #4	; (adr r2, 800621c <CO_LEDs_process+0xec>)
 8006218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800621c:	0800623d 	.word	0x0800623d
 8006220:	08006247 	.word	0x08006247
 8006224:	0800623d 	.word	0x0800623d
 8006228:	08006247 	.word	0x08006247
 800622c:	08006259 	.word	0x08006259
 8006230:	08006259 	.word	0x08006259
 8006234:	08006259 	.word	0x08006259
 8006238:	08006251 	.word	0x08006251
                case 1: case 3: rd |= CO_LED_flash_2; break;
 800623c:	7ffb      	ldrb	r3, [r7, #31]
 800623e:	f043 0308 	orr.w	r3, r3, #8
 8006242:	77fb      	strb	r3, [r7, #31]
 8006244:	e009      	b.n	800625a <CO_LEDs_process+0x12a>
                case 2: case 4: gr |= CO_LED_flash_2; break;
 8006246:	7fbb      	ldrb	r3, [r7, #30]
 8006248:	f043 0308 	orr.w	r3, r3, #8
 800624c:	77bb      	strb	r3, [r7, #30]
 800624e:	e004      	b.n	800625a <CO_LEDs_process+0x12a>
                case 8: LEDs->LEDtmrflash_2 = 0; break;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	719a      	strb	r2, [r3, #6]
 8006256:	e000      	b.n	800625a <CO_LEDs_process+0x12a>
                default: break;
 8006258:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_3) {
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	79db      	ldrb	r3, [r3, #7]
 800625e:	3301      	adds	r3, #1
 8006260:	b2da      	uxtb	r2, r3
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	71da      	strb	r2, [r3, #7]
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	79db      	ldrb	r3, [r3, #7]
 800626a:	3b01      	subs	r3, #1
 800626c:	2b09      	cmp	r3, #9
 800626e:	d825      	bhi.n	80062bc <CO_LEDs_process+0x18c>
 8006270:	a201      	add	r2, pc, #4	; (adr r2, 8006278 <CO_LEDs_process+0x148>)
 8006272:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006276:	bf00      	nop
 8006278:	080062a1 	.word	0x080062a1
 800627c:	080062ab 	.word	0x080062ab
 8006280:	080062a1 	.word	0x080062a1
 8006284:	080062ab 	.word	0x080062ab
 8006288:	080062a1 	.word	0x080062a1
 800628c:	080062ab 	.word	0x080062ab
 8006290:	080062bd 	.word	0x080062bd
 8006294:	080062bd 	.word	0x080062bd
 8006298:	080062bd 	.word	0x080062bd
 800629c:	080062b5 	.word	0x080062b5
                case 1: case 3: case 5: rd |= CO_LED_flash_3; break;
 80062a0:	7ffb      	ldrb	r3, [r7, #31]
 80062a2:	f043 0310 	orr.w	r3, r3, #16
 80062a6:	77fb      	strb	r3, [r7, #31]
 80062a8:	e009      	b.n	80062be <CO_LEDs_process+0x18e>
                case 2: case 4: case 6: gr |= CO_LED_flash_3; break;
 80062aa:	7fbb      	ldrb	r3, [r7, #30]
 80062ac:	f043 0310 	orr.w	r3, r3, #16
 80062b0:	77bb      	strb	r3, [r7, #30]
 80062b2:	e004      	b.n	80062be <CO_LEDs_process+0x18e>
                case 10: LEDs->LEDtmrflash_3 = 0; break;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	2200      	movs	r2, #0
 80062b8:	71da      	strb	r2, [r3, #7]
 80062ba:	e000      	b.n	80062be <CO_LEDs_process+0x18e>
                default: break;
 80062bc:	bf00      	nop
            }
            switch (++LEDs->LEDtmrflash_4) {
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	7a1b      	ldrb	r3, [r3, #8]
 80062c2:	3301      	adds	r3, #1
 80062c4:	b2da      	uxtb	r2, r3
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	721a      	strb	r2, [r3, #8]
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	7a1b      	ldrb	r3, [r3, #8]
 80062ce:	3b01      	subs	r3, #1
 80062d0:	2b0b      	cmp	r3, #11
 80062d2:	d834      	bhi.n	800633e <CO_LEDs_process+0x20e>
 80062d4:	a201      	add	r2, pc, #4	; (adr r2, 80062dc <CO_LEDs_process+0x1ac>)
 80062d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062da:	bf00      	nop
 80062dc:	0800630d 	.word	0x0800630d
 80062e0:	08006317 	.word	0x08006317
 80062e4:	0800630d 	.word	0x0800630d
 80062e8:	08006317 	.word	0x08006317
 80062ec:	0800630d 	.word	0x0800630d
 80062f0:	08006317 	.word	0x08006317
 80062f4:	0800630d 	.word	0x0800630d
 80062f8:	08006317 	.word	0x08006317
 80062fc:	0800633f 	.word	0x0800633f
 8006300:	0800633f 	.word	0x0800633f
 8006304:	0800633f 	.word	0x0800633f
 8006308:	08006321 	.word	0x08006321
                case 1: case 3: case 5: case 7: rd |= CO_LED_flash_4; break;
 800630c:	7ffb      	ldrb	r3, [r7, #31]
 800630e:	f043 0320 	orr.w	r3, r3, #32
 8006312:	77fb      	strb	r3, [r7, #31]
 8006314:	e014      	b.n	8006340 <CO_LEDs_process+0x210>
                case 2: case 4: case 6: case 8: gr |= CO_LED_flash_4; break;
 8006316:	7fbb      	ldrb	r3, [r7, #30]
 8006318:	f043 0320 	orr.w	r3, r3, #32
 800631c:	77bb      	strb	r3, [r7, #30]
 800631e:	e00f      	b.n	8006340 <CO_LEDs_process+0x210>
                case 12: LEDs->LEDtmrflash_4 = 0; break;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	721a      	strb	r2, [r3, #8]
 8006326:	e00b      	b.n	8006340 <CO_LEDs_process+0x210>
                default: break;
            }
        }
        else {
            /* clear flicker and CANopen bits, keep others */
            rd = LEDs->LEDred & (0xFF ^ (CO_LED_flicker | CO_LED_CANopen));
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	7a5b      	ldrb	r3, [r3, #9]
 800632c:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 8006330:	77fb      	strb	r3, [r7, #31]
            gr = LEDs->LEDgreen & (0xFF ^ (CO_LED_flicker | CO_LED_CANopen));
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	7a9b      	ldrb	r3, [r3, #10]
 8006336:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800633a:	77bb      	strb	r3, [r7, #30]
 800633c:	e000      	b.n	8006340 <CO_LEDs_process+0x210>
                default: break;
 800633e:	bf00      	nop
        }

        /* calculate 10Hz flickering */
        if (rdFlickerNext) rd |= CO_LED_flicker;
 8006340:	693b      	ldr	r3, [r7, #16]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d004      	beq.n	8006350 <CO_LEDs_process+0x220>
 8006346:	7ffb      	ldrb	r3, [r7, #31]
 8006348:	f043 0301 	orr.w	r3, r3, #1
 800634c:	77fb      	strb	r3, [r7, #31]
 800634e:	e003      	b.n	8006358 <CO_LEDs_process+0x228>
        else               gr |= CO_LED_flicker;
 8006350:	7fbb      	ldrb	r3, [r7, #30]
 8006352:	f043 0301 	orr.w	r3, r3, #1
 8006356:	77bb      	strb	r3, [r7, #30]
    while (LEDs->LEDtmr50ms >= 50000) {
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8006360:	4293      	cmp	r3, r2
 8006362:	f63f aefa 	bhi.w	800615a <CO_LEDs_process+0x2a>

    } /* while (LEDs->LEDtmr50ms >= 50000) */

    if (tick) {
 8006366:	69bb      	ldr	r3, [r7, #24]
 8006368:	2b00      	cmp	r3, #0
 800636a:	d079      	beq.n	8006460 <CO_LEDs_process+0x330>
        uint8_t rd_co, gr_co;

        /* CANopen red ERROR LED */
        if      (ErrCANbusOff)                      rd_co = 1;
 800636c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800636e:	2b00      	cmp	r3, #0
 8006370:	d002      	beq.n	8006378 <CO_LEDs_process+0x248>
 8006372:	2301      	movs	r3, #1
 8006374:	75fb      	strb	r3, [r7, #23]
 8006376:	e032      	b.n	80063de <CO_LEDs_process+0x2ae>
        else if (NMTstate == CO_NMT_INITIALIZING)   rd_co = rd & CO_LED_flicker;
 8006378:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d104      	bne.n	800638a <CO_LEDs_process+0x25a>
 8006380:	7ffb      	ldrb	r3, [r7, #31]
 8006382:	f003 0301 	and.w	r3, r3, #1
 8006386:	75fb      	strb	r3, [r7, #23]
 8006388:	e029      	b.n	80063de <CO_LEDs_process+0x2ae>
        else if (ErrRpdo)                           rd_co = rd & CO_LED_flash_4;
 800638a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800638c:	2b00      	cmp	r3, #0
 800638e:	d004      	beq.n	800639a <CO_LEDs_process+0x26a>
 8006390:	7ffb      	ldrb	r3, [r7, #31]
 8006392:	f003 0320 	and.w	r3, r3, #32
 8006396:	75fb      	strb	r3, [r7, #23]
 8006398:	e021      	b.n	80063de <CO_LEDs_process+0x2ae>
        else if (ErrSync)                           rd_co = rd & CO_LED_flash_3;
 800639a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800639c:	2b00      	cmp	r3, #0
 800639e:	d004      	beq.n	80063aa <CO_LEDs_process+0x27a>
 80063a0:	7ffb      	ldrb	r3, [r7, #31]
 80063a2:	f003 0310 	and.w	r3, r3, #16
 80063a6:	75fb      	strb	r3, [r7, #23]
 80063a8:	e019      	b.n	80063de <CO_LEDs_process+0x2ae>
        else if (ErrHbCons)                         rd_co = rd & CO_LED_flash_2;
 80063aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	d004      	beq.n	80063ba <CO_LEDs_process+0x28a>
 80063b0:	7ffb      	ldrb	r3, [r7, #31]
 80063b2:	f003 0308 	and.w	r3, r3, #8
 80063b6:	75fb      	strb	r3, [r7, #23]
 80063b8:	e011      	b.n	80063de <CO_LEDs_process+0x2ae>
        else if (ErrCANbusWarn)                     rd_co = rd & CO_LED_flash_1;
 80063ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d004      	beq.n	80063ca <CO_LEDs_process+0x29a>
 80063c0:	7ffb      	ldrb	r3, [r7, #31]
 80063c2:	f003 0304 	and.w	r3, r3, #4
 80063c6:	75fb      	strb	r3, [r7, #23]
 80063c8:	e009      	b.n	80063de <CO_LEDs_process+0x2ae>
        else if (ErrOther)                          rd_co = rd & CO_LED_blink;
 80063ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d004      	beq.n	80063da <CO_LEDs_process+0x2aa>
 80063d0:	7ffb      	ldrb	r3, [r7, #31]
 80063d2:	f003 0302 	and.w	r3, r3, #2
 80063d6:	75fb      	strb	r3, [r7, #23]
 80063d8:	e001      	b.n	80063de <CO_LEDs_process+0x2ae>
        else                                        rd_co = 0;
 80063da:	2300      	movs	r3, #0
 80063dc:	75fb      	strb	r3, [r7, #23]

        /* CANopen green RUN LED */
        if      (LSSconfig)                         gr_co = gr & CO_LED_flicker;
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d004      	beq.n	80063ee <CO_LEDs_process+0x2be>
 80063e4:	7fbb      	ldrb	r3, [r7, #30]
 80063e6:	f003 0301 	and.w	r3, r3, #1
 80063ea:	75bb      	strb	r3, [r7, #22]
 80063ec:	e024      	b.n	8006438 <CO_LEDs_process+0x308>
        else if (firmwareDownload)                  gr_co = gr & CO_LED_flash_3;
 80063ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d004      	beq.n	80063fe <CO_LEDs_process+0x2ce>
 80063f4:	7fbb      	ldrb	r3, [r7, #30]
 80063f6:	f003 0310 	and.w	r3, r3, #16
 80063fa:	75bb      	strb	r3, [r7, #22]
 80063fc:	e01c      	b.n	8006438 <CO_LEDs_process+0x308>
        else if (NMTstate == CO_NMT_STOPPED)        gr_co = gr & CO_LED_flash_1;
 80063fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006402:	2b04      	cmp	r3, #4
 8006404:	d104      	bne.n	8006410 <CO_LEDs_process+0x2e0>
 8006406:	7fbb      	ldrb	r3, [r7, #30]
 8006408:	f003 0304 	and.w	r3, r3, #4
 800640c:	75bb      	strb	r3, [r7, #22]
 800640e:	e013      	b.n	8006438 <CO_LEDs_process+0x308>
        else if (NMTstate == CO_NMT_PRE_OPERATIONAL)gr_co = gr & CO_LED_blink;
 8006410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006414:	2b7f      	cmp	r3, #127	; 0x7f
 8006416:	d104      	bne.n	8006422 <CO_LEDs_process+0x2f2>
 8006418:	7fbb      	ldrb	r3, [r7, #30]
 800641a:	f003 0302 	and.w	r3, r3, #2
 800641e:	75bb      	strb	r3, [r7, #22]
 8006420:	e00a      	b.n	8006438 <CO_LEDs_process+0x308>
        else if (NMTstate == CO_NMT_OPERATIONAL)    gr_co = 1;
 8006422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006426:	2b05      	cmp	r3, #5
 8006428:	d104      	bne.n	8006434 <CO_LEDs_process+0x304>
 800642a:	2301      	movs	r3, #1
 800642c:	75bb      	strb	r3, [r7, #22]
 800642e:	e003      	b.n	8006438 <CO_LEDs_process+0x308>
 8006430:	ffff3cb0 	.word	0xffff3cb0
        else                                        gr_co = 0;
 8006434:	2300      	movs	r3, #0
 8006436:	75bb      	strb	r3, [r7, #22]

        if (rd_co != 0) rd |= CO_LED_CANopen;
 8006438:	7dfb      	ldrb	r3, [r7, #23]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d003      	beq.n	8006446 <CO_LEDs_process+0x316>
 800643e:	7ffb      	ldrb	r3, [r7, #31]
 8006440:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006444:	77fb      	strb	r3, [r7, #31]
        if (gr_co != 0) gr |= CO_LED_CANopen;
 8006446:	7dbb      	ldrb	r3, [r7, #22]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d003      	beq.n	8006454 <CO_LEDs_process+0x324>
 800644c:	7fbb      	ldrb	r3, [r7, #30]
 800644e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006452:	77bb      	strb	r3, [r7, #30]
        LEDs->LEDred = rd;
 8006454:	68fb      	ldr	r3, [r7, #12]
 8006456:	7ffa      	ldrb	r2, [r7, #31]
 8006458:	725a      	strb	r2, [r3, #9]
        LEDs->LEDgreen = gr;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	7fba      	ldrb	r2, [r7, #30]
 800645e:	729a      	strb	r2, [r3, #10]
        if (*timerNext_us > diff) {
            *timerNext_us = diff;
        }
    }
#endif
}
 8006460:	bf00      	nop
 8006462:	3724      	adds	r7, #36	; 0x24
 8006464:	46bd      	mov	sp, r7
 8006466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800646a:	4770      	bx	lr

0800646c <CO_LSSslave_receive>:
 * Function will be called (by CAN receive interrupt) every time, when CAN
 * message with correct identifier will be received. For more information and
 * description of parameters see file CO_driver.h.
 */
static void CO_LSSslave_receive(void *object, void *msg)
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b090      	sub	sp, #64	; 0x40
 8006470:	af00      	add	r7, sp, #0
 8006472:	6078      	str	r0, [r7, #4]
 8006474:	6039      	str	r1, [r7, #0]
    CO_LSSslave_t *LSSslave = (CO_LSSslave_t*)object;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	637b      	str	r3, [r7, #52]	; 0x34
    uint8_t DLC = CO_CANrxMsg_readDLC(msg);
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	791b      	ldrb	r3, [r3, #4]
 800647e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

    if(DLC == 8U && !CO_FLAG_READ(LSSslave->sendResponse)) {
 8006482:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006486:	2b08      	cmp	r3, #8
 8006488:	f040 814c 	bne.w	8006724 <CO_LSSslave_receive+0x2b8>
 800648c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800648e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006490:	2b00      	cmp	r3, #0
 8006492:	f040 8147 	bne.w	8006724 <CO_LSSslave_receive+0x2b8>
        bool_t request_LSSslave_process = false;
 8006496:	2300      	movs	r3, #0
 8006498:	63fb      	str	r3, [r7, #60]	; 0x3c
        uint8_t *data = CO_CANrxMsg_readData(msg);
 800649a:	683b      	ldr	r3, [r7, #0]
 800649c:	3305      	adds	r3, #5
 800649e:	62fb      	str	r3, [r7, #44]	; 0x2c
        CO_LSS_cs_t cs = (CO_LSS_cs_t) data[0];
 80064a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a2:	781b      	ldrb	r3, [r3, #0]
 80064a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

        if (cs == CO_LSS_SWITCH_STATE_GLOBAL) {
 80064a8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80064ac:	2b04      	cmp	r3, #4
 80064ae:	d12c      	bne.n	800650a <CO_LSSslave_receive+0x9e>
            uint8_t mode = data[1];
 80064b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064b2:	785b      	ldrb	r3, [r3, #1]
 80064b4:	77fb      	strb	r3, [r7, #31]

            switch (mode) {
 80064b6:	7ffb      	ldrb	r3, [r7, #31]
 80064b8:	2b00      	cmp	r3, #0
 80064ba:	d002      	beq.n	80064c2 <CO_LSSslave_receive+0x56>
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d020      	beq.n	8006502 <CO_LSSslave_receive+0x96>
                    break;
                case CO_LSS_STATE_CONFIGURATION:
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
                    break;
                default:
                    break;
 80064c0:	e12a      	b.n	8006718 <CO_LSSslave_receive+0x2ac>
                    if (LSSslave->lssState == CO_LSS_STATE_CONFIGURATION &&
 80064c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064c4:	7c1b      	ldrb	r3, [r3, #16]
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d110      	bne.n	80064ec <CO_LSSslave_receive+0x80>
                        LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 80064ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                    if (LSSslave->lssState == CO_LSS_STATE_CONFIGURATION &&
 80064d0:	2bff      	cmp	r3, #255	; 0xff
 80064d2:	d10b      	bne.n	80064ec <CO_LSSslave_receive+0x80>
                        *LSSslave->pendingNodeID != CO_LSS_NODE_ID_ASSIGNMENT)
 80064d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80064d8:	781b      	ldrb	r3, [r3, #0]
                        LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 80064da:	2bff      	cmp	r3, #255	; 0xff
 80064dc:	d006      	beq.n	80064ec <CO_LSSslave_receive+0x80>
                        LSSslave->service = cs;
 80064de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064e0:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80064e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                        request_LSSslave_process = true;
 80064e8:	2301      	movs	r3, #1
 80064ea:	63fb      	str	r3, [r7, #60]	; 0x3c
                    LSSslave->lssState = CO_LSS_STATE_WAITING;
 80064ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ee:	2200      	movs	r2, #0
 80064f0:	741a      	strb	r2, [r3, #16]
                    memset(&LSSslave->lssSelect, 0,
 80064f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f4:	3314      	adds	r3, #20
 80064f6:	2210      	movs	r2, #16
 80064f8:	2100      	movs	r1, #0
 80064fa:	4618      	mov	r0, r3
 80064fc:	f00d fde8 	bl	80140d0 <memset>
                    break;
 8006500:	e10a      	b.n	8006718 <CO_LSSslave_receive+0x2ac>
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 8006502:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006504:	2201      	movs	r2, #1
 8006506:	741a      	strb	r2, [r3, #16]
                    break;
 8006508:	e106      	b.n	8006718 <CO_LSSslave_receive+0x2ac>
            }
        }
        else if(LSSslave->lssState == CO_LSS_STATE_WAITING) {
 800650a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800650c:	7c1b      	ldrb	r3, [r3, #16]
 800650e:	2b00      	cmp	r3, #0
 8006510:	f040 80ee 	bne.w	80066f0 <CO_LSSslave_receive+0x284>
            switch (cs) {
 8006514:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006518:	3b40      	subs	r3, #64	; 0x40
 800651a:	2b11      	cmp	r3, #17
 800651c:	f200 80f7 	bhi.w	800670e <CO_LSSslave_receive+0x2a2>
 8006520:	a201      	add	r2, pc, #4	; (adr r2, 8006528 <CO_LSSslave_receive+0xbc>)
 8006522:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006526:	bf00      	nop
 8006528:	08006571 	.word	0x08006571
 800652c:	08006581 	.word	0x08006581
 8006530:	08006591 	.word	0x08006591
 8006534:	080065a1 	.word	0x080065a1
 8006538:	0800670f 	.word	0x0800670f
 800653c:	0800670f 	.word	0x0800670f
 8006540:	0800670f 	.word	0x0800670f
 8006544:	0800670f 	.word	0x0800670f
 8006548:	0800670f 	.word	0x0800670f
 800654c:	0800670f 	.word	0x0800670f
 8006550:	0800670f 	.word	0x0800670f
 8006554:	0800670f 	.word	0x0800670f
 8006558:	0800670f 	.word	0x0800670f
 800655c:	0800670f 	.word	0x0800670f
 8006560:	0800670f 	.word	0x0800670f
 8006564:	0800670f 	.word	0x0800670f
 8006568:	0800670f 	.word	0x0800670f
 800656c:	080065fd 	.word	0x080065fd
            case CO_LSS_SWITCH_STATE_SEL_VENDOR: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8006570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006572:	3301      	adds	r3, #1
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	61bb      	str	r3, [r7, #24]
                LSSslave->lssSelect.identity.vendorID = CO_SWAP_32(valSw);
 8006578:	69ba      	ldr	r2, [r7, #24]
 800657a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800657c:	615a      	str	r2, [r3, #20]
                break;
 800657e:	e0cb      	b.n	8006718 <CO_LSSslave_receive+0x2ac>
            }
            case CO_LSS_SWITCH_STATE_SEL_PRODUCT: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8006580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006582:	3301      	adds	r3, #1
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	617b      	str	r3, [r7, #20]
                LSSslave->lssSelect.identity.productCode = CO_SWAP_32(valSw);
 8006588:	697a      	ldr	r2, [r7, #20]
 800658a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800658c:	619a      	str	r2, [r3, #24]
                break;
 800658e:	e0c3      	b.n	8006718 <CO_LSSslave_receive+0x2ac>
            }
            case CO_LSS_SWITCH_STATE_SEL_REV: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 8006590:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006592:	3301      	adds	r3, #1
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	613b      	str	r3, [r7, #16]
                LSSslave->lssSelect.identity.revisionNumber = CO_SWAP_32(valSw);
 8006598:	693a      	ldr	r2, [r7, #16]
 800659a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800659c:	61da      	str	r2, [r3, #28]
                break;
 800659e:	e0bb      	b.n	8006718 <CO_LSSslave_receive+0x2ac>
            }
            case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
                uint32_t valSw;
                memcpy(&valSw, &data[1], sizeof(valSw));
 80065a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065a2:	3301      	adds	r3, #1
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	60fb      	str	r3, [r7, #12]
                LSSslave->lssSelect.identity.serialNumber = CO_SWAP_32(valSw);
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ac:	621a      	str	r2, [r3, #32]

                if (CO_LSS_ADDRESS_EQUAL(LSSslave->lssAddress,
 80065ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065b0:	685a      	ldr	r2, [r3, #4]
 80065b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065b4:	699b      	ldr	r3, [r3, #24]
 80065b6:	429a      	cmp	r2, r3
 80065b8:	f040 80ab 	bne.w	8006712 <CO_LSSslave_receive+0x2a6>
 80065bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065be:	689a      	ldr	r2, [r3, #8]
 80065c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065c2:	69db      	ldr	r3, [r3, #28]
 80065c4:	429a      	cmp	r2, r3
 80065c6:	f040 80a4 	bne.w	8006712 <CO_LSSslave_receive+0x2a6>
 80065ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065cc:	68da      	ldr	r2, [r3, #12]
 80065ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065d0:	6a1b      	ldr	r3, [r3, #32]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	f040 809d 	bne.w	8006712 <CO_LSSslave_receive+0x2a6>
 80065d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065da:	681a      	ldr	r2, [r3, #0]
 80065dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065de:	695b      	ldr	r3, [r3, #20]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	f040 8096 	bne.w	8006712 <CO_LSSslave_receive+0x2a6>
                                         LSSslave->lssSelect)
                ) {
                    LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 80065e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065e8:	2201      	movs	r2, #1
 80065ea:	741a      	strb	r2, [r3, #16]
                    LSSslave->service = cs;
 80065ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065ee:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80065f2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                    request_LSSslave_process = true;
 80065f6:	2301      	movs	r3, #1
 80065f8:	63fb      	str	r3, [r7, #60]	; 0x3c
                }
                break;
 80065fa:	e08a      	b.n	8006712 <CO_LSSslave_receive+0x2a6>
            }
            case CO_LSS_IDENT_FASTSCAN: {
                /* fastscan is only active on unconfigured nodes */
                if (*LSSslave->pendingNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 80065fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006600:	781b      	ldrb	r3, [r3, #0]
 8006602:	2bff      	cmp	r3, #255	; 0xff
 8006604:	f040 8087 	bne.w	8006716 <CO_LSSslave_receive+0x2aa>
                    LSSslave->activeNodeID == CO_LSS_NODE_ID_ASSIGNMENT)
 8006608:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800660a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
                if (*LSSslave->pendingNodeID == CO_LSS_NODE_ID_ASSIGNMENT &&
 800660e:	2bff      	cmp	r3, #255	; 0xff
 8006610:	f040 8081 	bne.w	8006716 <CO_LSSslave_receive+0x2aa>
                {
                    uint8_t bitCheck = data[5];
 8006614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006616:	795b      	ldrb	r3, [r3, #5]
 8006618:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
                    uint8_t lssSub = data[6];
 800661c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800661e:	799b      	ldrb	r3, [r3, #6]
 8006620:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                    uint8_t lssNext = data[7];
 8006624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006626:	79db      	ldrb	r3, [r3, #7]
 8006628:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
                    uint32_t valSw;
                    uint32_t idNumber;
                    bool_t ack;

                    if (!CO_LSS_FASTSCAN_BITCHECK_VALID(bitCheck) ||
 800662c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006630:	2b1f      	cmp	r3, #31
 8006632:	d903      	bls.n	800663c <CO_LSSslave_receive+0x1d0>
 8006634:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006638:	2b80      	cmp	r3, #128	; 0x80
 800663a:	d16d      	bne.n	8006718 <CO_LSSslave_receive+0x2ac>
 800663c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006640:	2b03      	cmp	r3, #3
 8006642:	d869      	bhi.n	8006718 <CO_LSSslave_receive+0x2ac>
                        !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssSub) ||
 8006644:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006648:	2b03      	cmp	r3, #3
 800664a:	d865      	bhi.n	8006718 <CO_LSSslave_receive+0x2ac>
                        !CO_LSS_FASTSCAN_LSS_SUB_NEXT_VALID(lssNext)) {
                        /* Invalid request */
                        break;
                    }

                    memcpy(&valSw, &data[1], sizeof(valSw));
 800664c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800664e:	3301      	adds	r3, #1
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	60bb      	str	r3, [r7, #8]
                    idNumber = CO_SWAP_32(valSw);
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	627b      	str	r3, [r7, #36]	; 0x24
                    ack = false;
 8006658:	2300      	movs	r3, #0
 800665a:	63bb      	str	r3, [r7, #56]	; 0x38

                    if (bitCheck == CO_LSS_FASTSCAN_CONFIRM) {
 800665c:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006660:	2b80      	cmp	r3, #128	; 0x80
 8006662:	d10d      	bne.n	8006680 <CO_LSSslave_receive+0x214>
                        /* Confirm, Reset */
                        ack = true;
 8006664:	2301      	movs	r3, #1
 8006666:	63bb      	str	r3, [r7, #56]	; 0x38
                        LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 8006668:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800666a:	2200      	movs	r2, #0
 800666c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
                        memset(&LSSslave->lssFastscan, 0,
 8006670:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006672:	3324      	adds	r3, #36	; 0x24
 8006674:	2210      	movs	r2, #16
 8006676:	2100      	movs	r1, #0
 8006678:	4618      	mov	r0, r3
 800667a:	f00d fd29 	bl	80140d0 <memset>
 800667e:	e02c      	b.n	80066da <CO_LSSslave_receive+0x26e>
                                sizeof(LSSslave->lssFastscan));
                    }
                    else if (LSSslave->fastscanPos == lssSub) {
 8006680:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006682:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006686:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 800668a:	429a      	cmp	r2, r3
 800668c:	d125      	bne.n	80066da <CO_LSSslave_receive+0x26e>
                        uint32_t mask = 0xFFFFFFFF << bitCheck;
 800668e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006692:	f04f 32ff 	mov.w	r2, #4294967295
 8006696:	fa02 f303 	lsl.w	r3, r2, r3
 800669a:	623b      	str	r3, [r7, #32]

                        if ((LSSslave->lssAddress.addr[lssSub] & mask)
 800669c:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 80066a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066a2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
                            == (idNumber & mask))
 80066a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066a8:	405a      	eors	r2, r3
 80066aa:	6a3b      	ldr	r3, [r7, #32]
 80066ac:	4013      	ands	r3, r2
                        if ((LSSslave->lssAddress.addr[lssSub] & mask)
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d113      	bne.n	80066da <CO_LSSslave_receive+0x26e>
                        {
                            /* all requested bits match */
                            ack = true;
 80066b2:	2301      	movs	r3, #1
 80066b4:	63bb      	str	r3, [r7, #56]	; 0x38
                            LSSslave->fastscanPos = lssNext;
 80066b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066b8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80066bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

                            if (bitCheck == 0 && lssNext < lssSub) {
 80066c0:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d108      	bne.n	80066da <CO_LSSslave_receive+0x26e>
 80066c8:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 80066cc:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 80066d0:	429a      	cmp	r2, r3
 80066d2:	d202      	bcs.n	80066da <CO_LSSslave_receive+0x26e>
                                /* complete match, enter configuration state */
                                LSSslave->lssState = CO_LSS_STATE_CONFIGURATION;
 80066d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066d6:	2201      	movs	r2, #1
 80066d8:	741a      	strb	r2, [r3, #16]
                            }
                        }
                    }
                    if (ack) {
 80066da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d01a      	beq.n	8006716 <CO_LSSslave_receive+0x2aa>
                        LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
                        memset(&LSSslave->TXbuff->data[1], 0,
                               sizeof(LSSslave->TXbuff->data) - 1);
                        CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
#else
                        LSSslave->service = cs;
 80066e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066e2:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 80066e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
                        request_LSSslave_process = true;
 80066ea:	2301      	movs	r3, #1
 80066ec:	63fb      	str	r3, [r7, #60]	; 0x3c
#endif
                    }
                }
                break;
 80066ee:	e012      	b.n	8006716 <CO_LSSslave_receive+0x2aa>
                break;
            }
            }
        }
        else { /* LSSslave->lssState == CO_LSS_STATE_CONFIGURATION */
            memcpy(&LSSslave->CANdata, &data[0], sizeof(LSSslave->CANdata));
 80066f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066f2:	3349      	adds	r3, #73	; 0x49
 80066f4:	2208      	movs	r2, #8
 80066f6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80066f8:	4618      	mov	r0, r3
 80066fa:	f00d fcc1 	bl	8014080 <memcpy>
            LSSslave->service = cs;
 80066fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006700:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006704:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
            request_LSSslave_process = true;
 8006708:	2301      	movs	r3, #1
 800670a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800670c:	e004      	b.n	8006718 <CO_LSSslave_receive+0x2ac>
                break;
 800670e:	bf00      	nop
 8006710:	e002      	b.n	8006718 <CO_LSSslave_receive+0x2ac>
                break;
 8006712:	bf00      	nop
 8006714:	e000      	b.n	8006718 <CO_LSSslave_receive+0x2ac>
                break;
 8006716:	bf00      	nop
        }

        if (request_LSSslave_process) {
 8006718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800671a:	2b00      	cmp	r3, #0
 800671c:	d002      	beq.n	8006724 <CO_LSSslave_receive+0x2b8>
            CO_FLAG_SET(LSSslave->sendResponse);
 800671e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006720:	2201      	movs	r2, #1
 8006722:	645a      	str	r2, [r3, #68]	; 0x44
                LSSslave->pFunctSignalPre(LSSslave->functSignalObjectPre);
            }
#endif
        }
    }
}
 8006724:	bf00      	nop
 8006726:	3740      	adds	r7, #64	; 0x40
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <CO_LSSslave_init>:
        uint16_t                CANdevRxIdx,
        uint16_t                CANidLssMaster,
        CO_CANmodule_t         *CANdevTx,
        uint16_t                CANdevTxIdx,
        uint16_t                CANidLssSlave)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b08a      	sub	sp, #40	; 0x28
 8006730:	af04      	add	r7, sp, #16
 8006732:	60f8      	str	r0, [r7, #12]
 8006734:	60b9      	str	r1, [r7, #8]
 8006736:	607a      	str	r2, [r7, #4]
 8006738:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t ret = CO_ERROR_NO;
 800673a:	2300      	movs	r3, #0
 800673c:	75fb      	strb	r3, [r7, #23]

    /* verify arguments */
    if (LSSslave==NULL || pendingBitRate == NULL || pendingNodeID == NULL ||
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d018      	beq.n	8006776 <CO_LSSslave_init+0x4a>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2b00      	cmp	r3, #0
 8006748:	d015      	beq.n	8006776 <CO_LSSslave_init+0x4a>
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d012      	beq.n	8006776 <CO_LSSslave_init+0x4a>
 8006750:	6a3b      	ldr	r3, [r7, #32]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d00f      	beq.n	8006776 <CO_LSSslave_init+0x4a>
        CANdevRx==NULL || CANdevTx==NULL ||
 8006756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00c      	beq.n	8006776 <CO_LSSslave_init+0x4a>
        !CO_LSS_NODE_ID_VALID(*pendingNodeID)
 800675c:	683b      	ldr	r3, [r7, #0]
 800675e:	781b      	ldrb	r3, [r3, #0]
        CANdevRx==NULL || CANdevTx==NULL ||
 8006760:	2b00      	cmp	r3, #0
 8006762:	d004      	beq.n	800676e <CO_LSSslave_init+0x42>
        !CO_LSS_NODE_ID_VALID(*pendingNodeID)
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	781b      	ldrb	r3, [r3, #0]
 8006768:	b25b      	sxtb	r3, r3
 800676a:	2b00      	cmp	r3, #0
 800676c:	da06      	bge.n	800677c <CO_LSSslave_init+0x50>
 800676e:	683b      	ldr	r3, [r7, #0]
 8006770:	781b      	ldrb	r3, [r3, #0]
 8006772:	2bff      	cmp	r3, #255	; 0xff
 8006774:	d002      	beq.n	800677c <CO_LSSslave_init+0x50>
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8006776:	f04f 33ff 	mov.w	r3, #4294967295
 800677a:	e046      	b.n	800680a <CO_LSSslave_init+0xde>
    }

    /* Application must make sure that lssAddress is filled with data. */

    /* clear the object */
    memset(LSSslave, 0, sizeof(CO_LSSslave_t));
 800677c:	2274      	movs	r2, #116	; 0x74
 800677e:	2100      	movs	r1, #0
 8006780:	68f8      	ldr	r0, [r7, #12]
 8006782:	f00d fca5 	bl	80140d0 <memset>

    /* Configure object variables */
    memcpy(&LSSslave->lssAddress, lssAddress, sizeof(LSSslave->lssAddress));
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	2210      	movs	r2, #16
 800678a:	68b9      	ldr	r1, [r7, #8]
 800678c:	4618      	mov	r0, r3
 800678e:	f00d fc77 	bl	8014080 <memcpy>
    LSSslave->lssState = CO_LSS_STATE_WAITING;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	2200      	movs	r2, #0
 8006796:	741a      	strb	r2, [r3, #16]
    LSSslave->fastscanPos = CO_LSS_FASTSCAN_VENDOR_ID;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2200      	movs	r2, #0
 800679c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    LSSslave->pendingBitRate = pendingBitRate;
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	687a      	ldr	r2, [r7, #4]
 80067a4:	639a      	str	r2, [r3, #56]	; 0x38
    LSSslave->pendingNodeID = pendingNodeID;
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	683a      	ldr	r2, [r7, #0]
 80067aa:	63da      	str	r2, [r3, #60]	; 0x3c
    LSSslave->activeNodeID = *pendingNodeID;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	781a      	ldrb	r2, [r3, #0]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    CO_FLAG_CLEAR(LSSslave->sendResponse);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	2200      	movs	r2, #0
 80067ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* configure LSS CAN Master message reception */
    ret = CO_CANrxBufferInit(
 80067bc:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80067be:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80067c0:	4b14      	ldr	r3, [pc, #80]	; (8006814 <CO_LSSslave_init+0xe8>)
 80067c2:	9302      	str	r3, [sp, #8]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	9301      	str	r3, [sp, #4]
 80067c8:	2300      	movs	r3, #0
 80067ca:	9300      	str	r3, [sp, #0]
 80067cc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80067d0:	6a38      	ldr	r0, [r7, #32]
 80067d2:	f001 fbab 	bl	8007f2c <CO_CANrxBufferInit>
 80067d6:	4603      	mov	r3, r0
 80067d8:	75fb      	strb	r3, [r7, #23]
            0,                    /* rtr */
            (void*)LSSslave,      /* object passed to receive function */
            CO_LSSslave_receive); /* this function will process received message */

    /* configure LSS CAN Slave response message transmission */
    LSSslave->CANdevTx = CANdevTx;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80067de:	66da      	str	r2, [r3, #108]	; 0x6c
    LSSslave->TXbuff = CO_CANtxBufferInit(
 80067e0:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80067e2:	8e39      	ldrh	r1, [r7, #48]	; 0x30
 80067e4:	2300      	movs	r3, #0
 80067e6:	9301      	str	r3, [sp, #4]
 80067e8:	2308      	movs	r3, #8
 80067ea:	9300      	str	r3, [sp, #0]
 80067ec:	2300      	movs	r3, #0
 80067ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80067f0:	f001 fbf8 	bl	8007fe4 <CO_CANtxBufferInit>
 80067f4:	4602      	mov	r2, r0
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	671a      	str	r2, [r3, #112]	; 0x70
            CANidLssSlave,        /* CAN identifier */
            0,                    /* rtr */
            8,                    /* number of data bytes */
            0);                   /* synchronous message flag bit */

    if (LSSslave->TXbuff == NULL) {
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d101      	bne.n	8006806 <CO_LSSslave_init+0xda>
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8006802:	23ff      	movs	r3, #255	; 0xff
 8006804:	75fb      	strb	r3, [r7, #23]
    }

    return ret;
 8006806:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800680a:	4618      	mov	r0, r3
 800680c:	3718      	adds	r7, #24
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	0800646d 	.word	0x0800646d

08006818 <CO_LSSslave_process>:
    }
}


/******************************************************************************/
bool_t CO_LSSslave_process(CO_LSSslave_t *LSSslave) {
 8006818:	b580      	push	{r7, lr}
 800681a:	b08c      	sub	sp, #48	; 0x30
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
    bool_t resetCommunication = false;
 8006820:	2300      	movs	r3, #0
 8006822:	62fb      	str	r3, [r7, #44]	; 0x2c

    if (CO_FLAG_READ(LSSslave->sendResponse)) {
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006828:	2b00      	cmp	r3, #0
 800682a:	f000 8203 	beq.w	8006c34 <CO_LSSslave_process+0x41c>
        uint8_t nid;
        uint8_t errorCode;
        uint8_t errorCodeManuf;
        uint8_t tableSelector;
        uint8_t tableIndex;
        bool_t CANsend = false;
 800682e:	2300      	movs	r3, #0
 8006830:	627b      	str	r3, [r7, #36]	; 0x24
        uint32_t valSw;

        memset(&LSSslave->TXbuff->data[0], 0, sizeof(LSSslave->TXbuff->data));
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006836:	3305      	adds	r3, #5
 8006838:	2208      	movs	r2, #8
 800683a:	2100      	movs	r1, #0
 800683c:	4618      	mov	r0, r3
 800683e:	f00d fc47 	bl	80140d0 <memset>

        switch (LSSslave->service) {
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8006848:	3b04      	subs	r3, #4
 800684a:	2b5a      	cmp	r3, #90	; 0x5a
 800684c:	f200 81dd 	bhi.w	8006c0a <CO_LSSslave_process+0x3f2>
 8006850:	a201      	add	r2, pc, #4	; (adr r2, 8006858 <CO_LSSslave_process+0x40>)
 8006852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006856:	bf00      	nop
 8006858:	080069c5 	.word	0x080069c5
 800685c:	08006c0b 	.word	0x08006c0b
 8006860:	08006c0b 	.word	0x08006c0b
 8006864:	08006c0b 	.word	0x08006c0b
 8006868:	08006c0b 	.word	0x08006c0b
 800686c:	08006c0b 	.word	0x08006c0b
 8006870:	08006c0b 	.word	0x08006c0b
 8006874:	08006c0b 	.word	0x08006c0b
 8006878:	08006c0b 	.word	0x08006c0b
 800687c:	08006c0b 	.word	0x08006c0b
 8006880:	08006c0b 	.word	0x08006c0b
 8006884:	08006c0b 	.word	0x08006c0b
 8006888:	08006c0b 	.word	0x08006c0b
 800688c:	080069d9 	.word	0x080069d9
 8006890:	08006c0b 	.word	0x08006c0b
 8006894:	08006a27 	.word	0x08006a27
 8006898:	08006c0b 	.word	0x08006c0b
 800689c:	08006ac3 	.word	0x08006ac3
 80068a0:	08006c0b 	.word	0x08006c0b
 80068a4:	08006b01 	.word	0x08006b01
 80068a8:	08006c0b 	.word	0x08006c0b
 80068ac:	08006c0b 	.word	0x08006c0b
 80068b0:	08006c0b 	.word	0x08006c0b
 80068b4:	08006c0b 	.word	0x08006c0b
 80068b8:	08006c0b 	.word	0x08006c0b
 80068bc:	08006c0b 	.word	0x08006c0b
 80068c0:	08006c0b 	.word	0x08006c0b
 80068c4:	08006c0b 	.word	0x08006c0b
 80068c8:	08006c0b 	.word	0x08006c0b
 80068cc:	08006c0b 	.word	0x08006c0b
 80068d0:	08006c0b 	.word	0x08006c0b
 80068d4:	08006c0b 	.word	0x08006c0b
 80068d8:	08006c0b 	.word	0x08006c0b
 80068dc:	08006c0b 	.word	0x08006c0b
 80068e0:	08006c0b 	.word	0x08006c0b
 80068e4:	08006c0b 	.word	0x08006c0b
 80068e8:	08006c0b 	.word	0x08006c0b
 80068ec:	08006c0b 	.word	0x08006c0b
 80068f0:	08006c0b 	.word	0x08006c0b
 80068f4:	08006c0b 	.word	0x08006c0b
 80068f8:	08006c0b 	.word	0x08006c0b
 80068fc:	08006c0b 	.word	0x08006c0b
 8006900:	08006c0b 	.word	0x08006c0b
 8006904:	08006c0b 	.word	0x08006c0b
 8006908:	08006c0b 	.word	0x08006c0b
 800690c:	08006c0b 	.word	0x08006c0b
 8006910:	08006c0b 	.word	0x08006c0b
 8006914:	08006c0b 	.word	0x08006c0b
 8006918:	08006c0b 	.word	0x08006c0b
 800691c:	08006c0b 	.word	0x08006c0b
 8006920:	08006c0b 	.word	0x08006c0b
 8006924:	08006c0b 	.word	0x08006c0b
 8006928:	08006c0b 	.word	0x08006c0b
 800692c:	08006c0b 	.word	0x08006c0b
 8006930:	08006c0b 	.word	0x08006c0b
 8006934:	08006c0b 	.word	0x08006c0b
 8006938:	08006c0b 	.word	0x08006c0b
 800693c:	08006c0b 	.word	0x08006c0b
 8006940:	08006c0b 	.word	0x08006c0b
 8006944:	08006c0b 	.word	0x08006c0b
 8006948:	08006c0b 	.word	0x08006c0b
 800694c:	08006c0b 	.word	0x08006c0b
 8006950:	08006c0b 	.word	0x08006c0b
 8006954:	080069cb 	.word	0x080069cb
 8006958:	08006c0b 	.word	0x08006c0b
 800695c:	08006c0b 	.word	0x08006c0b
 8006960:	08006c0b 	.word	0x08006c0b
 8006964:	08006c0b 	.word	0x08006c0b
 8006968:	08006c0b 	.word	0x08006c0b
 800696c:	08006c0b 	.word	0x08006c0b
 8006970:	08006c0b 	.word	0x08006c0b
 8006974:	08006c0b 	.word	0x08006c0b
 8006978:	08006c0b 	.word	0x08006c0b
 800697c:	08006c0b 	.word	0x08006c0b
 8006980:	08006c0b 	.word	0x08006c0b
 8006984:	08006c0b 	.word	0x08006c0b
 8006988:	08006c0b 	.word	0x08006c0b
 800698c:	08006bfd 	.word	0x08006bfd
 8006990:	08006c0b 	.word	0x08006c0b
 8006994:	08006c0b 	.word	0x08006c0b
 8006998:	08006c0b 	.word	0x08006c0b
 800699c:	08006c0b 	.word	0x08006c0b
 80069a0:	08006c0b 	.word	0x08006c0b
 80069a4:	08006c0b 	.word	0x08006c0b
 80069a8:	08006c0b 	.word	0x08006c0b
 80069ac:	08006c0b 	.word	0x08006c0b
 80069b0:	08006b57 	.word	0x08006b57
 80069b4:	08006b79 	.word	0x08006b79
 80069b8:	08006b9b 	.word	0x08006b9b
 80069bc:	08006bbd 	.word	0x08006bbd
 80069c0:	08006bdf 	.word	0x08006bdf
        case CO_LSS_SWITCH_STATE_GLOBAL: {
            /* Node-Id was unconfigured before, now it is configured,
             * enter the NMT Reset communication autonomously. */
            resetCommunication = true;
 80069c4:	2301      	movs	r3, #1
 80069c6:	62fb      	str	r3, [r7, #44]	; 0x2c
            break;
 80069c8:	e126      	b.n	8006c18 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_SWITCH_STATE_SEL_SERIAL: {
            LSSslave->TXbuff->data[0] = CO_LSS_SWITCH_STATE_SEL;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069ce:	2244      	movs	r2, #68	; 0x44
 80069d0:	715a      	strb	r2, [r3, #5]
            CANsend = true;
 80069d2:	2301      	movs	r3, #1
 80069d4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80069d6:	e11f      	b.n	8006c18 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_CFG_NODE_ID: {
            nid = LSSslave->CANdata[1];
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 80069de:	74fb      	strb	r3, [r7, #19]
            errorCode = CO_LSS_CFG_NODE_ID_OK;
 80069e0:	2300      	movs	r3, #0
 80069e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

            if (CO_LSS_NODE_ID_VALID(nid)) {
 80069e6:	7cfb      	ldrb	r3, [r7, #19]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	d003      	beq.n	80069f4 <CO_LSSslave_process+0x1dc>
 80069ec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	da02      	bge.n	80069fa <CO_LSSslave_process+0x1e2>
 80069f4:	7cfb      	ldrb	r3, [r7, #19]
 80069f6:	2bff      	cmp	r3, #255	; 0xff
 80069f8:	d104      	bne.n	8006a04 <CO_LSSslave_process+0x1ec>
                *LSSslave->pendingNodeID = nid;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069fe:	7cfa      	ldrb	r2, [r7, #19]
 8006a00:	701a      	strb	r2, [r3, #0]
 8006a02:	e002      	b.n	8006a0a <CO_LSSslave_process+0x1f2>
            }
            else {
                errorCode = CO_LSS_CFG_NODE_ID_OUT_OF_RANGE;
 8006a04:	2301      	movs	r3, #1
 8006a06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            }

            /* send confirmation */
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a0e:	687a      	ldr	r2, [r7, #4]
 8006a10:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8006a14:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = errorCode;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a1a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006a1e:	719a      	strb	r2, [r3, #6]
            /* we do not use spec-error, always 0 */
            CANsend = true;
 8006a20:	2301      	movs	r3, #1
 8006a22:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006a24:	e0f8      	b.n	8006c18 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_CFG_BIT_TIMING: {
            if (LSSslave->pFunctLSScheckBitRate == NULL) {
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	f000 80ef 	beq.w	8006c0e <CO_LSSslave_process+0x3f6>
                /* setting bit timing is not supported. Drop request */
                break;
            }

            tableSelector = LSSslave->CANdata[1];
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8006a36:	777b      	strb	r3, [r7, #29]
            tableIndex = LSSslave->CANdata[2];
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8006a3e:	773b      	strb	r3, [r7, #28]
            errorCode = CO_LSS_CFG_BIT_TIMING_OK;
 8006a40:	2300      	movs	r3, #0
 8006a42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OK;
 8006a46:	2300      	movs	r3, #0
 8006a48:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a

            if (tableSelector == 0 && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 8006a4c:	7f7b      	ldrb	r3, [r7, #29]
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d121      	bne.n	8006a96 <CO_LSSslave_process+0x27e>
 8006a52:	7f3b      	ldrb	r3, [r7, #28]
 8006a54:	2b05      	cmp	r3, #5
 8006a56:	d01e      	beq.n	8006a96 <CO_LSSslave_process+0x27e>
 8006a58:	7f3b      	ldrb	r3, [r7, #28]
 8006a5a:	2b09      	cmp	r3, #9
 8006a5c:	d81b      	bhi.n	8006a96 <CO_LSSslave_process+0x27e>
                uint16_t bit = CO_LSS_bitTimingTableLookup[tableIndex];
 8006a5e:	7f3b      	ldrb	r3, [r7, #28]
 8006a60:	4a77      	ldr	r2, [pc, #476]	; (8006c40 <CO_LSSslave_process+0x428>)
 8006a62:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a66:	837b      	strh	r3, [r7, #26]
                bool_t bit_rate_supported = LSSslave->pFunctLSScheckBitRate(
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8006a70:	8b79      	ldrh	r1, [r7, #26]
 8006a72:	4610      	mov	r0, r2
 8006a74:	4798      	blx	r3
 8006a76:	6178      	str	r0, [r7, #20]
                    LSSslave->functLSScheckBitRateObject, bit);

                if (bit_rate_supported) {
 8006a78:	697b      	ldr	r3, [r7, #20]
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d004      	beq.n	8006a88 <CO_LSSslave_process+0x270>
                    *LSSslave->pendingBitRate = bit;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a82:	8b7a      	ldrh	r2, [r7, #26]
 8006a84:	801a      	strh	r2, [r3, #0]
            if (tableSelector == 0 && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 8006a86:	e009      	b.n	8006a9c <CO_LSSslave_process+0x284>
                }
                else {
                    errorCode = CO_LSS_CFG_BIT_TIMING_MANUFACTURER;
 8006a88:	23ff      	movs	r3, #255	; 0xff
 8006a8a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                    errorCodeManuf = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
            if (tableSelector == 0 && CO_LSS_BIT_TIMING_VALID(tableIndex)) {
 8006a94:	e002      	b.n	8006a9c <CO_LSSslave_process+0x284>
                }
            }
            else {
                /* we currently only support CiA301 bit timing table */
                errorCode = CO_LSS_CFG_BIT_TIMING_OUT_OF_RANGE;
 8006a96:	2301      	movs	r3, #1
 8006a98:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
            }

            /* send confirmation */
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aa0:	687a      	ldr	r2, [r7, #4]
 8006aa2:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8006aa6:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = errorCode;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aac:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006ab0:	719a      	strb	r2, [r3, #6]
            LSSslave->TXbuff->data[2] = errorCodeManuf;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ab6:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8006aba:	71da      	strb	r2, [r3, #7]
            CANsend = true;
 8006abc:	2301      	movs	r3, #1
 8006abe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006ac0:	e0aa      	b.n	8006c18 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_CFG_ACTIVATE_BIT_TIMING: {
            if (LSSslave->pFunctLSScheckBitRate == NULL) {
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	f000 80a3 	beq.w	8006c12 <CO_LSSslave_process+0x3fa>
                /* setting bit timing is not supported. Drop request */
                break;
            }

            /* notify application */
            if (LSSslave->pFunctLSSactivateBitRate != NULL) {
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ad0:	2b00      	cmp	r3, #0
 8006ad2:	f000 80a0 	beq.w	8006c16 <CO_LSSslave_process+0x3fe>
                uint16_t delay = ((uint16_t) LSSslave->CANdata[2]) << 8;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 8006adc:	b29b      	uxth	r3, r3
 8006ade:	021b      	lsls	r3, r3, #8
 8006ae0:	83fb      	strh	r3, [r7, #30]
                delay |= LSSslave->CANdata[1];
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8006ae8:	b29a      	uxth	r2, r3
 8006aea:	8bfb      	ldrh	r3, [r7, #30]
 8006aec:	4313      	orrs	r3, r2
 8006aee:	83fb      	strh	r3, [r7, #30]
                LSSslave->pFunctLSSactivateBitRate(
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006af4:	687a      	ldr	r2, [r7, #4]
 8006af6:	6e12      	ldr	r2, [r2, #96]	; 0x60
 8006af8:	8bf9      	ldrh	r1, [r7, #30]
 8006afa:	4610      	mov	r0, r2
 8006afc:	4798      	blx	r3
                    LSSslave->functLSSactivateBitRateObject, delay);
            }
            break;
 8006afe:	e08a      	b.n	8006c16 <CO_LSSslave_process+0x3fe>
        }
        case CO_LSS_CFG_STORE: {
            errorCode = CO_LSS_CFG_STORE_OK;
 8006b00:	2300      	movs	r3, #0
 8006b02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

            if (LSSslave->pFunctLSScfgStore == NULL) {
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d103      	bne.n	8006b16 <CO_LSSslave_process+0x2fe>
                /* storing is not supported. Reply error */
                errorCode = CO_LSS_CFG_STORE_NOT_SUPPORTED;
 8006b0e:	2301      	movs	r3, #1
 8006b10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006b14:	e011      	b.n	8006b3a <CO_LSSslave_process+0x322>
            }
            else {
                bool_t result;
                /* Store "pending" to "persistent" */
                result =
                   LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject,
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	6e90      	ldr	r0, [r2, #104]	; 0x68
                                               *LSSslave->pendingNodeID,
 8006b1e:	687a      	ldr	r2, [r7, #4]
 8006b20:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
                   LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject,
 8006b22:	7811      	ldrb	r1, [r2, #0]
                                               *LSSslave->pendingBitRate);
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	6b92      	ldr	r2, [r2, #56]	; 0x38
                   LSSslave->pFunctLSScfgStore(LSSslave->functLSScfgStoreObject,
 8006b28:	8812      	ldrh	r2, [r2, #0]
 8006b2a:	4798      	blx	r3
 8006b2c:	6238      	str	r0, [r7, #32]
                if (!result) {
 8006b2e:	6a3b      	ldr	r3, [r7, #32]
 8006b30:	2b00      	cmp	r3, #0
 8006b32:	d102      	bne.n	8006b3a <CO_LSSslave_process+0x322>
                    errorCode = CO_LSS_CFG_STORE_FAILED;
 8006b34:	2302      	movs	r3, #2
 8006b36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
                }
            }

            /* send confirmation */
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8006b44:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = errorCode;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b4a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006b4e:	719a      	strb	r2, [r3, #6]
            /* we do not use spec-error, always 0 */
            CANsend = true;
 8006b50:	2301      	movs	r3, #1
 8006b52:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006b54:	e060      	b.n	8006c18 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_INQUIRE_VENDOR: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b5a:	687a      	ldr	r2, [r7, #4]
 8006b5c:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8006b60:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.vendorID);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b6c:	3306      	adds	r3, #6
 8006b6e:	68fa      	ldr	r2, [r7, #12]
 8006b70:	601a      	str	r2, [r3, #0]
            CANsend = true;
 8006b72:	2301      	movs	r3, #1
 8006b74:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006b76:	e04f      	b.n	8006c18 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_INQUIRE_PRODUCT: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b7c:	687a      	ldr	r2, [r7, #4]
 8006b7e:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8006b82:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.productCode);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	685b      	ldr	r3, [r3, #4]
 8006b88:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b8e:	3306      	adds	r3, #6
 8006b90:	68fa      	ldr	r2, [r7, #12]
 8006b92:	601a      	str	r2, [r3, #0]
            CANsend = true;
 8006b94:	2301      	movs	r3, #1
 8006b96:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006b98:	e03e      	b.n	8006c18 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_INQUIRE_REV: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b9e:	687a      	ldr	r2, [r7, #4]
 8006ba0:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8006ba4:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.revisionNumber);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	689b      	ldr	r3, [r3, #8]
 8006baa:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bb0:	3306      	adds	r3, #6
 8006bb2:	68fa      	ldr	r2, [r7, #12]
 8006bb4:	601a      	str	r2, [r3, #0]
            CANsend = true;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006bba:	e02d      	b.n	8006c18 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_INQUIRE_SERIAL: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8006bc6:	715a      	strb	r2, [r3, #5]
            valSw = CO_SWAP_32(LSSslave->lssAddress.identity.serialNumber);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	68db      	ldr	r3, [r3, #12]
 8006bcc:	60fb      	str	r3, [r7, #12]
            memcpy(&LSSslave->TXbuff->data[1], &valSw, sizeof(valSw));
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bd2:	3306      	adds	r3, #6
 8006bd4:	68fa      	ldr	r2, [r7, #12]
 8006bd6:	601a      	str	r2, [r3, #0]
            CANsend = true;
 8006bd8:	2301      	movs	r3, #1
 8006bda:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006bdc:	e01c      	b.n	8006c18 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_INQUIRE_NODE_ID: {
            LSSslave->TXbuff->data[0] = LSSslave->service;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be2:	687a      	ldr	r2, [r7, #4]
 8006be4:	f892 2048 	ldrb.w	r2, [r2, #72]	; 0x48
 8006be8:	715a      	strb	r2, [r3, #5]
            LSSslave->TXbuff->data[1] = LSSslave->activeNodeID;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bee:	687a      	ldr	r2, [r7, #4]
 8006bf0:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
 8006bf4:	719a      	strb	r2, [r3, #6]
            CANsend = true;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006bfa:	e00d      	b.n	8006c18 <CO_LSSslave_process+0x400>
        }
        case CO_LSS_IDENT_FASTSCAN: {
            LSSslave->TXbuff->data[0] = CO_LSS_IDENT_SLAVE;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c00:	224f      	movs	r2, #79	; 0x4f
 8006c02:	715a      	strb	r2, [r3, #5]
            CANsend = true;
 8006c04:	2301      	movs	r3, #1
 8006c06:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006c08:	e006      	b.n	8006c18 <CO_LSSslave_process+0x400>
        }
        default: {
            break;
 8006c0a:	bf00      	nop
 8006c0c:	e004      	b.n	8006c18 <CO_LSSslave_process+0x400>
                break;
 8006c0e:	bf00      	nop
 8006c10:	e002      	b.n	8006c18 <CO_LSSslave_process+0x400>
                break;
 8006c12:	bf00      	nop
 8006c14:	e000      	b.n	8006c18 <CO_LSSslave_process+0x400>
            break;
 8006c16:	bf00      	nop
        }
        }

        if(CANsend) {
 8006c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d007      	beq.n	8006c2e <CO_LSSslave_process+0x416>
            CO_CANsend(LSSslave->CANdevTx, LSSslave->TXbuff);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c26:	4619      	mov	r1, r3
 8006c28:	4610      	mov	r0, r2
 8006c2a:	f001 faa1 	bl	8008170 <CO_CANsend>
        }

        CO_FLAG_CLEAR(LSSslave->sendResponse);
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	2200      	movs	r2, #0
 8006c32:	645a      	str	r2, [r3, #68]	; 0x44
    }

    return resetCommunication;
 8006c34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	3730      	adds	r7, #48	; 0x30
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	bd80      	pop	{r7, pc}
 8006c3e:	bf00      	nop
 8006c40:	08015740 	.word	0x08015740

08006c44 <CO_isError>:
static inline bool_t CO_isError(CO_EM_t *em, const uint8_t errorBit) {
 8006c44:	b480      	push	{r7}
 8006c46:	b085      	sub	sp, #20
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
 8006c4c:	460b      	mov	r3, r1
 8006c4e:	70fb      	strb	r3, [r7, #3]
    uint8_t index = errorBit >> 3;
 8006c50:	78fb      	ldrb	r3, [r7, #3]
 8006c52:	08db      	lsrs	r3, r3, #3
 8006c54:	73fb      	strb	r3, [r7, #15]
    uint8_t bitmask = 1 << (errorBit & 0x7);
 8006c56:	78fb      	ldrb	r3, [r7, #3]
 8006c58:	f003 0307 	and.w	r3, r3, #7
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8006c62:	73bb      	strb	r3, [r7, #14]
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00a      	beq.n	8006c80 <CO_isError+0x3c>
    return (em == NULL || index >= (CO_CONFIG_EM_ERR_STATUS_BITS_COUNT / 8)
 8006c6a:	7bfb      	ldrb	r3, [r7, #15]
 8006c6c:	2b09      	cmp	r3, #9
 8006c6e:	d807      	bhi.n	8006c80 <CO_isError+0x3c>
            || (em->errorStatusBits[index] & bitmask) != 0) ? true : false;
 8006c70:	7bfb      	ldrb	r3, [r7, #15]
 8006c72:	687a      	ldr	r2, [r7, #4]
 8006c74:	5cd2      	ldrb	r2, [r2, r3]
 8006c76:	7bbb      	ldrb	r3, [r7, #14]
 8006c78:	4013      	ands	r3, r2
 8006c7a:	b2db      	uxtb	r3, r3
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d001      	beq.n	8006c84 <CO_isError+0x40>
 8006c80:	2301      	movs	r3, #1
 8006c82:	e000      	b.n	8006c86 <CO_isError+0x42>
 8006c84:	2300      	movs	r3, #0
}
 8006c86:	4618      	mov	r0, r3
 8006c88:	3714      	adds	r7, #20
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c90:	4770      	bx	lr

08006c92 <CO_getErrorRegister>:
static inline uint8_t CO_getErrorRegister(CO_EM_t *em) {
 8006c92:	b480      	push	{r7}
 8006c94:	b083      	sub	sp, #12
 8006c96:	af00      	add	r7, sp, #0
 8006c98:	6078      	str	r0, [r7, #4]
    return (em == NULL || em->errorRegister == NULL) ? 0 : *em->errorRegister;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d007      	beq.n	8006cb0 <CO_getErrorRegister+0x1e>
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d003      	beq.n	8006cb0 <CO_getErrorRegister+0x1e>
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	68db      	ldr	r3, [r3, #12]
 8006cac:	781b      	ldrb	r3, [r3, #0]
 8006cae:	e000      	b.n	8006cb2 <CO_getErrorRegister+0x20>
 8006cb0:	2300      	movs	r3, #0
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	370c      	adds	r7, #12
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr

08006cbe <CO_NMT_getInternalState>:
 *
 * @param NMT This object.
 *
 * @return @ref CO_NMT_internalState_t
 */
static inline CO_NMT_internalState_t CO_NMT_getInternalState(CO_NMT_t *NMT) {
 8006cbe:	b480      	push	{r7}
 8006cc0:	b083      	sub	sp, #12
 8006cc2:	af00      	add	r7, sp, #0
 8006cc4:	6078      	str	r0, [r7, #4]
    return (NMT == NULL) ? CO_NMT_INITIALIZING : NMT->operatingState;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d003      	beq.n	8006cd4 <CO_NMT_getInternalState+0x16>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	f993 3000 	ldrsb.w	r3, [r3]
 8006cd2:	e000      	b.n	8006cd6 <CO_NMT_getInternalState+0x18>
 8006cd4:	2300      	movs	r3, #0
}
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	370c      	adds	r7, #12
 8006cda:	46bd      	mov	sp, r7
 8006cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ce0:	4770      	bx	lr

08006ce2 <CO_LSSslave_getState>:
 * Get current LSS state
 *
 * @param LSSslave This object.
 * @return #CO_LSS_state_t
 */
static inline CO_LSS_state_t CO_LSSslave_getState(CO_LSSslave_t *LSSslave) {
 8006ce2:	b480      	push	{r7}
 8006ce4:	b083      	sub	sp, #12
 8006ce6:	af00      	add	r7, sp, #0
 8006ce8:	6078      	str	r0, [r7, #4]
    return (LSSslave == NULL) ? CO_LSS_STATE_WAITING : LSSslave->lssState;
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d002      	beq.n	8006cf6 <CO_LSSslave_getState+0x14>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	7c1b      	ldrb	r3, [r3, #16]
 8006cf4:	e000      	b.n	8006cf8 <CO_LSSslave_getState+0x16>
 8006cf6:	2300      	movs	r3, #0
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	370c      	adds	r7, #12
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <CO_new>:
#define ON_MULTI_OD(sentence) sentence
#else
#define ON_MULTI_OD(sentence)
#endif

CO_t *CO_new(CO_config_t *config, uint32_t *heapMemoryUsed) {
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b086      	sub	sp, #24
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
    CO_t *co = NULL;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	60fb      	str	r3, [r7, #12]
    /* return values */
    CO_t *coFinal = NULL;
 8006d12:	2300      	movs	r3, #0
 8006d14:	617b      	str	r3, [r7, #20]
    uint32_t mem = 0;
 8006d16:	2300      	movs	r3, #0
 8006d18:	613b      	str	r3, [r7, #16]
#else
        (void) config;
#endif

        /* CANopen object */
        CO_alloc_break_on_fail(co, 1, sizeof(*co));
 8006d1a:	2144      	movs	r1, #68	; 0x44
 8006d1c:	2001      	movs	r0, #1
 8006d1e:	f00c ff9f 	bl	8013c60 <calloc>
 8006d22:	4603      	mov	r3, r0
 8006d24:	60fb      	str	r3, [r7, #12]
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	f000 8114 	beq.w	8006f56 <CO_new+0x252>
 8006d2e:	693b      	ldr	r3, [r7, #16]
 8006d30:	3344      	adds	r3, #68	; 0x44
 8006d32:	613b      	str	r3, [r7, #16]
        /* NMT_Heartbeat */
        ON_MULTI_OD(uint8_t RX_CNT_NMT_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_NMT_MST = 0);
        ON_MULTI_OD(uint8_t TX_CNT_HB_PROD = 0);
        if (CO_GET_CNT(NMT) == 1) {
            CO_alloc_break_on_fail(co->NMT, CO_GET_CNT(NMT), sizeof(*co->NMT));
 8006d34:	2134      	movs	r1, #52	; 0x34
 8006d36:	2001      	movs	r0, #1
 8006d38:	f00c ff92 	bl	8013c60 <calloc>
 8006d3c:	4603      	mov	r3, r0
 8006d3e:	461a      	mov	r2, r3
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	611a      	str	r2, [r3, #16]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	691b      	ldr	r3, [r3, #16]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	f000 8106 	beq.w	8006f5a <CO_new+0x256>
 8006d4e:	693b      	ldr	r3, [r7, #16]
 8006d50:	3334      	adds	r3, #52	; 0x34
 8006d52:	613b      	str	r3, [r7, #16]
        }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_HB_CONS = 0);
        if (CO_GET_CNT(HB_CONS) == 1) {
            uint8_t countOfMonitoredNodes = CO_GET_CNT(ARR_1016);
 8006d54:	2308      	movs	r3, #8
 8006d56:	72fb      	strb	r3, [r7, #11]
            CO_alloc_break_on_fail(co->HBcons, CO_GET_CNT(HB_CONS), sizeof(*co->HBcons));
 8006d58:	2130      	movs	r1, #48	; 0x30
 8006d5a:	2001      	movs	r0, #1
 8006d5c:	f00c ff80 	bl	8013c60 <calloc>
 8006d60:	4603      	mov	r3, r0
 8006d62:	461a      	mov	r2, r3
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	615a      	str	r2, [r3, #20]
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	695b      	ldr	r3, [r3, #20]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	f000 80f6 	beq.w	8006f5e <CO_new+0x25a>
 8006d72:	693b      	ldr	r3, [r7, #16]
 8006d74:	3330      	adds	r3, #48	; 0x30
 8006d76:	613b      	str	r3, [r7, #16]
            CO_alloc_break_on_fail(co->HBconsMonitoredNodes, countOfMonitoredNodes, sizeof(*co->HBconsMonitoredNodes));
 8006d78:	7afb      	ldrb	r3, [r7, #11]
 8006d7a:	2110      	movs	r1, #16
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	f00c ff6f 	bl	8013c60 <calloc>
 8006d82:	4603      	mov	r3, r0
 8006d84:	461a      	mov	r2, r3
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	619a      	str	r2, [r3, #24]
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	699b      	ldr	r3, [r3, #24]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	f000 80e7 	beq.w	8006f62 <CO_new+0x25e>
 8006d94:	7afb      	ldrb	r3, [r7, #11]
 8006d96:	011b      	lsls	r3, r3, #4
 8006d98:	693a      	ldr	r2, [r7, #16]
 8006d9a:	4413      	add	r3, r2
 8006d9c:	613b      	str	r3, [r7, #16]

        /* Emergency */
        ON_MULTI_OD(uint8_t RX_CNT_EM_CONS = 0);
        ON_MULTI_OD(uint8_t TX_CNT_EM_PROD = 0);
        if (CO_GET_CNT(EM) == 1) {
            CO_alloc_break_on_fail(co->em, CO_GET_CNT(EM), sizeof(*co->em));
 8006d9e:	2150      	movs	r1, #80	; 0x50
 8006da0:	2001      	movs	r0, #1
 8006da2:	f00c ff5d 	bl	8013c60 <calloc>
 8006da6:	4603      	mov	r3, r0
 8006da8:	461a      	mov	r2, r3
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	61da      	str	r2, [r3, #28]
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	69db      	ldr	r3, [r3, #28]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	f000 80d7 	beq.w	8006f66 <CO_new+0x262>
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	3350      	adds	r3, #80	; 0x50
 8006dbc:	613b      	str	r3, [r7, #16]
 #endif
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
            ON_MULTI_OD(TX_CNT_EM_PROD = 1);
 #endif
 #if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
            uint8_t fifoSize = CO_GET_CNT(ARR_1003) + 1;
 8006dbe:	2311      	movs	r3, #17
 8006dc0:	72bb      	strb	r3, [r7, #10]
            if (fifoSize >= 2) {
 8006dc2:	7abb      	ldrb	r3, [r7, #10]
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d912      	bls.n	8006dee <CO_new+0xea>
                CO_alloc_break_on_fail(co->em_fifo, fifoSize, sizeof(*co->em_fifo));
 8006dc8:	7abb      	ldrb	r3, [r7, #10]
 8006dca:	2108      	movs	r1, #8
 8006dcc:	4618      	mov	r0, r3
 8006dce:	f00c ff47 	bl	8013c60 <calloc>
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	621a      	str	r2, [r3, #32]
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	6a1b      	ldr	r3, [r3, #32]
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	f000 80c3 	beq.w	8006f6a <CO_new+0x266>
 8006de4:	7abb      	ldrb	r3, [r7, #10]
 8006de6:	00db      	lsls	r3, r3, #3
 8006de8:	693a      	ldr	r2, [r7, #16]
 8006dea:	4413      	add	r3, r2
 8006dec:	613b      	str	r3, [r7, #16]

        /* SDOserver */
        ON_MULTI_OD(uint8_t RX_CNT_SDO_SRV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SDO_SRV = 0);
        if (CO_GET_CNT(SDO_SRV) > 0) {
            CO_alloc_break_on_fail(co->SDOserver, CO_GET_CNT(SDO_SRV), sizeof(*co->SDOserver));
 8006dee:	21a8      	movs	r1, #168	; 0xa8
 8006df0:	2001      	movs	r0, #1
 8006df2:	f00c ff35 	bl	8013c60 <calloc>
 8006df6:	4603      	mov	r3, r0
 8006df8:	461a      	mov	r2, r3
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	625a      	str	r2, [r3, #36]	; 0x24
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e02:	2b00      	cmp	r3, #0
 8006e04:	f000 80b3 	beq.w	8006f6e <CO_new+0x26a>
 8006e08:	693b      	ldr	r3, [r7, #16]
 8006e0a:	33a8      	adds	r3, #168	; 0xa8
 8006e0c:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_SDO_CLI) & CO_CONFIG_SDO_CLI_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_SDO_CLI = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SDO_CLI = 0);
        if (CO_GET_CNT(SDO_CLI) > 0) {
            CO_alloc_break_on_fail(co->SDOclient, CO_GET_CNT(SDO_CLI), sizeof(*co->SDOclient));
 8006e0e:	2178      	movs	r1, #120	; 0x78
 8006e10:	2001      	movs	r0, #1
 8006e12:	f00c ff25 	bl	8013c60 <calloc>
 8006e16:	4603      	mov	r3, r0
 8006e18:	461a      	mov	r2, r3
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	629a      	str	r2, [r3, #40]	; 0x28
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	f000 80a5 	beq.w	8006f72 <CO_new+0x26e>
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	3378      	adds	r3, #120	; 0x78
 8006e2c:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_TIME = 0);
        ON_MULTI_OD(uint8_t TX_CNT_TIME = 0);
        if (CO_GET_CNT(TIME) == 1) {
            CO_alloc_break_on_fail(co->TIME, CO_GET_CNT(TIME), sizeof(*co->TIME));
 8006e2e:	212c      	movs	r1, #44	; 0x2c
 8006e30:	2001      	movs	r0, #1
 8006e32:	f00c ff15 	bl	8013c60 <calloc>
 8006e36:	4603      	mov	r3, r0
 8006e38:	461a      	mov	r2, r3
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	62da      	str	r2, [r3, #44]	; 0x2c
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	f000 8097 	beq.w	8006f76 <CO_new+0x272>
 8006e48:	693b      	ldr	r3, [r7, #16]
 8006e4a:	332c      	adds	r3, #44	; 0x2c
 8006e4c:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
        ON_MULTI_OD(uint8_t RX_CNT_SYNC = 0);
        ON_MULTI_OD(uint8_t TX_CNT_SYNC = 0);
        if (CO_GET_CNT(SYNC) == 1) {
            CO_alloc_break_on_fail(co->SYNC, CO_GET_CNT(SYNC), sizeof(*co->SYNC));
 8006e4e:	2160      	movs	r1, #96	; 0x60
 8006e50:	2001      	movs	r0, #1
 8006e52:	f00c ff05 	bl	8013c60 <calloc>
 8006e56:	4603      	mov	r3, r0
 8006e58:	461a      	mov	r2, r3
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	631a      	str	r2, [r3, #48]	; 0x30
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	f000 8089 	beq.w	8006f7a <CO_new+0x276>
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	3360      	adds	r3, #96	; 0x60
 8006e6c:	613b      	str	r3, [r7, #16]
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
        ON_MULTI_OD(uint16_t RX_CNT_RPDO = 0);
        if (CO_GET_CNT(RPDO) > 0) {
            CO_alloc_break_on_fail(co->RPDO, CO_GET_CNT(RPDO), sizeof(*co->RPDO));
 8006e6e:	f44f 71ba 	mov.w	r1, #372	; 0x174
 8006e72:	2004      	movs	r0, #4
 8006e74:	f00c fef4 	bl	8013c60 <calloc>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	635a      	str	r2, [r3, #52]	; 0x34
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d07a      	beq.n	8006f7e <CO_new+0x27a>
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	f503 63ba 	add.w	r3, r3, #1488	; 0x5d0
 8006e8e:	613b      	str	r3, [r7, #16]
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
        ON_MULTI_OD(uint16_t TX_CNT_TPDO = 0);
        if (CO_GET_CNT(TPDO) > 0) {
            CO_alloc_break_on_fail(co->TPDO, CO_GET_CNT(TPDO), sizeof(*co->TPDO));
 8006e90:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8006e94:	2004      	movs	r0, #4
 8006e96:	f00c fee3 	bl	8013c60 <calloc>
 8006e9a:	4603      	mov	r3, r0
 8006e9c:	461a      	mov	r2, r3
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	639a      	str	r2, [r3, #56]	; 0x38
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d06b      	beq.n	8006f82 <CO_new+0x27e>
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	f503 63b6 	add.w	r3, r3, #1456	; 0x5b0
 8006eb0:	613b      	str	r3, [r7, #16]
        }
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
        if (CO_GET_CNT(LEDS) == 1) {
            CO_alloc_break_on_fail(co->LEDs, CO_GET_CNT(LEDS), sizeof(*co->LEDs));
 8006eb2:	210c      	movs	r1, #12
 8006eb4:	2001      	movs	r0, #1
 8006eb6:	f00c fed3 	bl	8013c60 <calloc>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	461a      	mov	r2, r3
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	63da      	str	r2, [r3, #60]	; 0x3c
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d05d      	beq.n	8006f86 <CO_new+0x282>
 8006eca:	693b      	ldr	r3, [r7, #16]
 8006ecc:	330c      	adds	r3, #12
 8006ece:	613b      	str	r3, [r7, #16]

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
        ON_MULTI_OD(uint8_t RX_CNT_LSS_SLV = 0);
        ON_MULTI_OD(uint8_t TX_CNT_LSS_SLV = 0);
        if (CO_GET_CNT(LSS_SLV) == 1) {
            CO_alloc_break_on_fail(co->LSSslave, CO_GET_CNT(LSS_SLV), sizeof(*co->LSSslave));
 8006ed0:	2174      	movs	r1, #116	; 0x74
 8006ed2:	2001      	movs	r0, #1
 8006ed4:	f00c fec4 	bl	8013c60 <calloc>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	461a      	mov	r2, r3
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	641a      	str	r2, [r3, #64]	; 0x40
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d050      	beq.n	8006f8a <CO_new+0x286>
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	3374      	adds	r3, #116	; 0x74
 8006eec:	613b      	str	r3, [r7, #16]
#endif
        co->CNT_ALL_TX_MSGS = idxTx;
#endif /* #ifdef CO_MULTIPLE_OD */

        /* CANmodule */
        CO_alloc_break_on_fail(co->CANmodule, 1, sizeof(*co->CANmodule));
 8006eee:	2138      	movs	r1, #56	; 0x38
 8006ef0:	2001      	movs	r0, #1
 8006ef2:	f00c feb5 	bl	8013c60 <calloc>
 8006ef6:	4603      	mov	r3, r0
 8006ef8:	461a      	mov	r2, r3
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	605a      	str	r2, [r3, #4]
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	685b      	ldr	r3, [r3, #4]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d043      	beq.n	8006f8e <CO_new+0x28a>
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	3338      	adds	r3, #56	; 0x38
 8006f0a:	613b      	str	r3, [r7, #16]

        /* CAN RX blocks */
        CO_alloc_break_on_fail(co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), sizeof(*co->CANrx));
 8006f0c:	210c      	movs	r1, #12
 8006f0e:	2012      	movs	r0, #18
 8006f10:	f00c fea6 	bl	8013c60 <calloc>
 8006f14:	4603      	mov	r3, r0
 8006f16:	461a      	mov	r2, r3
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	609a      	str	r2, [r3, #8]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	689b      	ldr	r3, [r3, #8]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d036      	beq.n	8006f92 <CO_new+0x28e>
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	33d8      	adds	r3, #216	; 0xd8
 8006f28:	613b      	str	r3, [r7, #16]

        /* CAN TX blocks */
        CO_alloc_break_on_fail(co->CANtx, CO_GET_CO(CNT_ALL_TX_MSGS), sizeof(*co->CANtx));
 8006f2a:	2118      	movs	r1, #24
 8006f2c:	200b      	movs	r0, #11
 8006f2e:	f00c fe97 	bl	8013c60 <calloc>
 8006f32:	4603      	mov	r3, r0
 8006f34:	461a      	mov	r2, r3
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	60da      	str	r2, [r3, #12]
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	68db      	ldr	r3, [r3, #12]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d029      	beq.n	8006f96 <CO_new+0x292>
 8006f42:	693b      	ldr	r3, [r7, #16]
 8006f44:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8006f48:	613b      	str	r3, [r7, #16]

        /* finish successfully, set other parameters */
        co->nodeIdUnconfigured = true;
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2201      	movs	r2, #1
 8006f4e:	601a      	str	r2, [r3, #0]
        coFinal = co;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	617b      	str	r3, [r7, #20]
 8006f54:	e020      	b.n	8006f98 <CO_new+0x294>
        CO_alloc_break_on_fail(co, 1, sizeof(*co));
 8006f56:	bf00      	nop
 8006f58:	e01e      	b.n	8006f98 <CO_new+0x294>
            CO_alloc_break_on_fail(co->NMT, CO_GET_CNT(NMT), sizeof(*co->NMT));
 8006f5a:	bf00      	nop
 8006f5c:	e01c      	b.n	8006f98 <CO_new+0x294>
            CO_alloc_break_on_fail(co->HBcons, CO_GET_CNT(HB_CONS), sizeof(*co->HBcons));
 8006f5e:	bf00      	nop
 8006f60:	e01a      	b.n	8006f98 <CO_new+0x294>
            CO_alloc_break_on_fail(co->HBconsMonitoredNodes, countOfMonitoredNodes, sizeof(*co->HBconsMonitoredNodes));
 8006f62:	bf00      	nop
 8006f64:	e018      	b.n	8006f98 <CO_new+0x294>
            CO_alloc_break_on_fail(co->em, CO_GET_CNT(EM), sizeof(*co->em));
 8006f66:	bf00      	nop
 8006f68:	e016      	b.n	8006f98 <CO_new+0x294>
                CO_alloc_break_on_fail(co->em_fifo, fifoSize, sizeof(*co->em_fifo));
 8006f6a:	bf00      	nop
 8006f6c:	e014      	b.n	8006f98 <CO_new+0x294>
            CO_alloc_break_on_fail(co->SDOserver, CO_GET_CNT(SDO_SRV), sizeof(*co->SDOserver));
 8006f6e:	bf00      	nop
 8006f70:	e012      	b.n	8006f98 <CO_new+0x294>
            CO_alloc_break_on_fail(co->SDOclient, CO_GET_CNT(SDO_CLI), sizeof(*co->SDOclient));
 8006f72:	bf00      	nop
 8006f74:	e010      	b.n	8006f98 <CO_new+0x294>
            CO_alloc_break_on_fail(co->TIME, CO_GET_CNT(TIME), sizeof(*co->TIME));
 8006f76:	bf00      	nop
 8006f78:	e00e      	b.n	8006f98 <CO_new+0x294>
            CO_alloc_break_on_fail(co->SYNC, CO_GET_CNT(SYNC), sizeof(*co->SYNC));
 8006f7a:	bf00      	nop
 8006f7c:	e00c      	b.n	8006f98 <CO_new+0x294>
            CO_alloc_break_on_fail(co->RPDO, CO_GET_CNT(RPDO), sizeof(*co->RPDO));
 8006f7e:	bf00      	nop
 8006f80:	e00a      	b.n	8006f98 <CO_new+0x294>
            CO_alloc_break_on_fail(co->TPDO, CO_GET_CNT(TPDO), sizeof(*co->TPDO));
 8006f82:	bf00      	nop
 8006f84:	e008      	b.n	8006f98 <CO_new+0x294>
            CO_alloc_break_on_fail(co->LEDs, CO_GET_CNT(LEDS), sizeof(*co->LEDs));
 8006f86:	bf00      	nop
 8006f88:	e006      	b.n	8006f98 <CO_new+0x294>
            CO_alloc_break_on_fail(co->LSSslave, CO_GET_CNT(LSS_SLV), sizeof(*co->LSSslave));
 8006f8a:	bf00      	nop
 8006f8c:	e004      	b.n	8006f98 <CO_new+0x294>
        CO_alloc_break_on_fail(co->CANmodule, 1, sizeof(*co->CANmodule));
 8006f8e:	bf00      	nop
 8006f90:	e002      	b.n	8006f98 <CO_new+0x294>
        CO_alloc_break_on_fail(co->CANrx, CO_GET_CO(CNT_ALL_RX_MSGS), sizeof(*co->CANrx));
 8006f92:	bf00      	nop
 8006f94:	e000      	b.n	8006f98 <CO_new+0x294>
        CO_alloc_break_on_fail(co->CANtx, CO_GET_CO(CNT_ALL_TX_MSGS), sizeof(*co->CANtx));
 8006f96:	bf00      	nop
    } while (false);

    if (coFinal == NULL) {
 8006f98:	697b      	ldr	r3, [r7, #20]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d102      	bne.n	8006fa4 <CO_new+0x2a0>
        CO_delete(co);
 8006f9e:	68f8      	ldr	r0, [r7, #12]
 8006fa0:	f000 f80b 	bl	8006fba <CO_delete>
    }
    if (heapMemoryUsed != NULL) {
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d002      	beq.n	8006fb0 <CO_new+0x2ac>
        *heapMemoryUsed = mem;
 8006faa:	683b      	ldr	r3, [r7, #0]
 8006fac:	693a      	ldr	r2, [r7, #16]
 8006fae:	601a      	str	r2, [r3, #0]
    }
    return coFinal;
 8006fb0:	697b      	ldr	r3, [r7, #20]
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3718      	adds	r7, #24
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <CO_delete>:

void CO_delete(CO_t *co) {
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b082      	sub	sp, #8
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	6078      	str	r0, [r7, #4]
    if (co == NULL) {
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d058      	beq.n	800707a <CO_delete+0xc0>
        return;
    }

    CO_CANmodule_disable(co->CANmodule);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f000 ff97 	bl	8007f00 <CO_CANmodule_disable>

    /* CANmodule */
    CO_free(co->CANtx);
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	68db      	ldr	r3, [r3, #12]
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f00d f84a 	bl	8014070 <free>
    CO_free(co->CANrx);
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	689b      	ldr	r3, [r3, #8]
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f00d f845 	bl	8014070 <free>
    CO_free(co->CANmodule);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	685b      	ldr	r3, [r3, #4]
 8006fea:	4618      	mov	r0, r3
 8006fec:	f00d f840 	bl	8014070 <free>
#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_MASTER
    CO_free(co->LSSmaster);
#endif

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    CO_free(co->LSSslave);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	f00d f83b 	bl	8014070 <free>
#if (CO_CONFIG_GFC) & CO_CONFIG_GFC_ENABLE
    CO_free(co->GFC);
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    CO_free(co->LEDs);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ffe:	4618      	mov	r0, r3
 8007000:	f00d f836 	bl	8014070 <free>
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
    CO_free(co->TPDO);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007008:	4618      	mov	r0, r3
 800700a:	f00d f831 	bl	8014070 <free>
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
    CO_free(co->RPDO);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007012:	4618      	mov	r0, r3
 8007014:	f00d f82c 	bl	8014070 <free>
#endif

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
    CO_free(co->SYNC);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800701c:	4618      	mov	r0, r3
 800701e:	f00d f827 	bl	8014070 <free>
#endif

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
    CO_free(co->TIME);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007026:	4618      	mov	r0, r3
 8007028:	f00d f822 	bl	8014070 <free>
#endif

#if (CO_CONFIG_SDO_CLI) & CO_CONFIG_SDO_CLI_ENABLE
    free(co->SDOclient);
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007030:	4618      	mov	r0, r3
 8007032:	f00d f81d 	bl	8014070 <free>
#endif

    /* SDOserver */
    CO_free(co->SDOserver);
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800703a:	4618      	mov	r0, r3
 800703c:	f00d f818 	bl	8014070 <free>

    /* Emergency */
    CO_free(co->em);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	69db      	ldr	r3, [r3, #28]
 8007044:	4618      	mov	r0, r3
 8007046:	f00d f813 	bl	8014070 <free>
#if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
    CO_free(co->em_fifo);
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6a1b      	ldr	r3, [r3, #32]
 800704e:	4618      	mov	r0, r3
 8007050:	f00d f80e 	bl	8014070 <free>
#if (CO_CONFIG_NODE_GUARDING) & CO_CONFIG_NODE_GUARDING_MASTER_ENABLE
    CO_free(co->NGmaster);
#endif

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
    CO_free(co->HBconsMonitoredNodes);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	699b      	ldr	r3, [r3, #24]
 8007058:	4618      	mov	r0, r3
 800705a:	f00d f809 	bl	8014070 <free>
    CO_free(co->HBcons);
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	695b      	ldr	r3, [r3, #20]
 8007062:	4618      	mov	r0, r3
 8007064:	f00d f804 	bl	8014070 <free>
#endif

    /* NMT_Heartbeat */
    CO_free(co->NMT);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	691b      	ldr	r3, [r3, #16]
 800706c:	4618      	mov	r0, r3
 800706e:	f00c ffff 	bl	8014070 <free>

    /* CANopen object */
    CO_free(co);
 8007072:	6878      	ldr	r0, [r7, #4]
 8007074:	f00c fffc 	bl	8014070 <free>
 8007078:	e000      	b.n	800707c <CO_delete+0xc2>
        return;
 800707a:	bf00      	nop
}
 800707c:	3708      	adds	r7, #8
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <CO_CANinit>:
#endif
    return en;
}

/******************************************************************************/
CO_ReturnError_t CO_CANinit(CO_t *co, void *CANptr, uint16_t bitRate) {
 8007082:	b580      	push	{r7, lr}
 8007084:	b08a      	sub	sp, #40	; 0x28
 8007086:	af04      	add	r7, sp, #16
 8007088:	60f8      	str	r0, [r7, #12]
 800708a:	60b9      	str	r1, [r7, #8]
 800708c:	4613      	mov	r3, r2
 800708e:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t err;

    if (co == NULL) return CO_ERROR_ILLEGAL_ARGUMENT;
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d102      	bne.n	800709c <CO_CANinit+0x1a>
 8007096:	f04f 33ff 	mov.w	r3, #4294967295
 800709a:	e01a      	b.n	80070d2 <CO_CANinit+0x50>

    co->CANmodule->CANnormal = false;
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	2200      	movs	r2, #0
 80070a2:	615a      	str	r2, [r3, #20]
    CO_CANsetConfigurationMode(CANptr);
 80070a4:	68b8      	ldr	r0, [r7, #8]
 80070a6:	f000 fe59 	bl	8007d5c <CO_CANsetConfigurationMode>

    /* CANmodule */
    err = CO_CANmodule_init(co->CANmodule,
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6858      	ldr	r0, [r3, #4]
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	6899      	ldr	r1, [r3, #8]
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	68db      	ldr	r3, [r3, #12]
 80070b6:	88fa      	ldrh	r2, [r7, #6]
 80070b8:	9202      	str	r2, [sp, #8]
 80070ba:	220b      	movs	r2, #11
 80070bc:	9201      	str	r2, [sp, #4]
 80070be:	9300      	str	r3, [sp, #0]
 80070c0:	2312      	movs	r3, #18
 80070c2:	460a      	mov	r2, r1
 80070c4:	68b9      	ldr	r1, [r7, #8]
 80070c6:	f000 fe71 	bl	8007dac <CO_CANmodule_init>
 80070ca:	4603      	mov	r3, r0
 80070cc:	75fb      	strb	r3, [r7, #23]
                            CO_GET_CO(CNT_ALL_RX_MSGS),
                            co->CANtx,
                            CO_GET_CO(CNT_ALL_TX_MSGS),
                            bitRate);

    return err;
 80070ce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80070d2:	4618      	mov	r0, r3
 80070d4:	3718      	adds	r7, #24
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <CO_LSSinit>:
#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
CO_ReturnError_t CO_LSSinit(CO_t *co,
                            CO_LSS_address_t *lssAddress,
                            uint8_t *pendingNodeID,
                            uint16_t *pendingBitRate)
{
 80070da:	b580      	push	{r7, lr}
 80070dc:	b08c      	sub	sp, #48	; 0x30
 80070de:	af06      	add	r7, sp, #24
 80070e0:	60f8      	str	r0, [r7, #12]
 80070e2:	60b9      	str	r1, [r7, #8]
 80070e4:	607a      	str	r2, [r7, #4]
 80070e6:	603b      	str	r3, [r7, #0]
    CO_ReturnError_t err;

    if (co == NULL || CO_GET_CNT(LSS_SLV) != 1) {
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d102      	bne.n	80070f4 <CO_LSSinit+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 80070ee:	f04f 33ff 	mov.w	r3, #4294967295
 80070f2:	e01a      	b.n	800712a <CO_LSSinit+0x50>
    }

    /* LSSslave */
    err = CO_LSSslave_init(co->LSSslave,
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	6c18      	ldr	r0, [r3, #64]	; 0x40
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	68fa      	ldr	r2, [r7, #12]
 80070fe:	6852      	ldr	r2, [r2, #4]
 8007100:	f240 71e4 	movw	r1, #2020	; 0x7e4
 8007104:	9105      	str	r1, [sp, #20]
 8007106:	210a      	movs	r1, #10
 8007108:	9104      	str	r1, [sp, #16]
 800710a:	9203      	str	r2, [sp, #12]
 800710c:	f240 72e5 	movw	r2, #2021	; 0x7e5
 8007110:	9202      	str	r2, [sp, #8]
 8007112:	2211      	movs	r2, #17
 8007114:	9201      	str	r2, [sp, #4]
 8007116:	9300      	str	r3, [sp, #0]
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	683a      	ldr	r2, [r7, #0]
 800711c:	68b9      	ldr	r1, [r7, #8]
 800711e:	f7ff fb05 	bl	800672c <CO_LSSslave_init>
 8007122:	4603      	mov	r3, r0
 8007124:	75fb      	strb	r3, [r7, #23]
                           CO_CAN_ID_LSS_MST,
                           co->CANmodule,
                           CO_GET_CO(TX_IDX_LSS_SLV),
                           CO_CAN_ID_LSS_SLV);

    return err;
 8007126:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800712a:	4618      	mov	r0, r3
 800712c:	3718      	adds	r7, #24
 800712e:	46bd      	mov	sp, r7
 8007130:	bd80      	pop	{r7, pc}
	...

08007134 <CO_CANopenInit>:
                                uint16_t SDOserverTimeoutTime_ms,
                                uint16_t SDOclientTimeoutTime_ms,
                                bool_t SDOclientBlockTransfer,
                                uint8_t nodeId,
                                uint32_t *errInfo)
{
 8007134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007136:	b095      	sub	sp, #84	; 0x54
 8007138:	af0c      	add	r7, sp, #48	; 0x30
 800713a:	60f8      	str	r0, [r7, #12]
 800713c:	60b9      	str	r1, [r7, #8]
 800713e:	607a      	str	r2, [r7, #4]
 8007140:	603b      	str	r3, [r7, #0]
    (void)SDOclientTimeoutTime_ms; (void)SDOclientBlockTransfer;
    CO_ReturnError_t err;

    if (co == NULL
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	2b00      	cmp	r3, #0
 8007146:	d102      	bne.n	800714e <CO_CANopenInit+0x1a>
        || (CO_GET_CNT(NMT) == 0 && NMT == NULL)
        || (CO_GET_CNT(EM) == 0 && em == NULL)
    ) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8007148:	f04f 33ff 	mov.w	r3, #4294967295
 800714c:	e17f      	b.n	800744e <CO_CANopenInit+0x31a>

    /* alternatives */
    if (CO_GET_CNT(NMT) == 0) {
        co->NMT = NMT;
    }
    if (em == NULL) {
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d102      	bne.n	800715a <CO_CANopenInit+0x26>
        em = co->em;
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	69db      	ldr	r3, [r3, #28]
 8007158:	607b      	str	r3, [r7, #4]
    }

    /* Verify CANopen Node-ID */
    co->nodeIdUnconfigured = false;
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	2200      	movs	r2, #0
 800715e:	601a      	str	r2, [r3, #0]
#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    if (CO_GET_CNT(LSS_SLV) == 1 && nodeId == CO_LSS_NODE_ID_ASSIGNMENT) {
 8007160:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8007164:	2bff      	cmp	r3, #255	; 0xff
 8007166:	d103      	bne.n	8007170 <CO_CANopenInit+0x3c>
        co->nodeIdUnconfigured = true;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2201      	movs	r2, #1
 800716c:	601a      	str	r2, [r3, #0]
 800716e:	e00a      	b.n	8007186 <CO_CANopenInit+0x52>
    }
    else
#endif
    if (nodeId < 1 || nodeId > 127) {
 8007170:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8007174:	2b00      	cmp	r3, #0
 8007176:	d003      	beq.n	8007180 <CO_CANopenInit+0x4c>
 8007178:	f997 3050 	ldrsb.w	r3, [r7, #80]	; 0x50
 800717c:	2b00      	cmp	r3, #0
 800717e:	da02      	bge.n	8007186 <CO_CANopenInit+0x52>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8007180:	f04f 33ff 	mov.w	r3, #4294967295
 8007184:	e163      	b.n	800744e <CO_CANopenInit+0x31a>
    }

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    if (CO_GET_CNT(LEDS) == 1) {
        err = CO_LEDs_init(co->LEDs);
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800718a:	4618      	mov	r0, r3
 800718c:	f7fe ffb8 	bl	8006100 <CO_LEDs_init>
 8007190:	4603      	mov	r3, r0
 8007192:	747b      	strb	r3, [r7, #17]
        if (err) return err;
 8007194:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d002      	beq.n	80071a2 <CO_CANopenInit+0x6e>
 800719c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80071a0:	e155      	b.n	800744e <CO_CANopenInit+0x31a>
    }
#endif

    /* CANopen Node ID is unconfigured, stop initialization here */
    if (co->nodeIdUnconfigured) {
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d002      	beq.n	80071b0 <CO_CANopenInit+0x7c>
        return CO_ERROR_NODE_ID_UNCONFIGURED_LSS;
 80071aa:	f06f 0312 	mvn.w	r3, #18
 80071ae:	e14e      	b.n	800744e <CO_CANopenInit+0x31a>
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1) {
        err = CO_EM_init(co->em,
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	69d8      	ldr	r0, [r3, #28]
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	685c      	ldr	r4, [r3, #4]
                         co->CANmodule,
                         OD_GET(H1001, OD_H1001_ERR_REG),
 80071b8:	4ba3      	ldr	r3, [pc, #652]	; (8007448 <CO_CANopenInit+0x314>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	685b      	ldr	r3, [r3, #4]
 80071be:	f103 050c 	add.w	r5, r3, #12
        err = CO_EM_init(co->em,
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6a1e      	ldr	r6, [r3, #32]
 #if (CO_CONFIG_EM) & (CO_CONFIG_EM_PRODUCER | CO_CONFIG_EM_HISTORY)
                         co->em_fifo,
                         (CO_GET_CNT(ARR_1003) + 1),
 #endif
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_PRODUCER
                         OD_GET(H1014, OD_H1014_COBID_EMERGENCY),
 80071c6:	4ba0      	ldr	r3, [pc, #640]	; (8007448 <CO_CANopenInit+0x314>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	685b      	ldr	r3, [r3, #4]
        err = CO_EM_init(co->em,
 80071cc:	336c      	adds	r3, #108	; 0x6c
  #if (CO_CONFIG_EM) & CO_CONFIG_EM_PROD_INHIBIT
                         OD_GET(H1015, OD_H1015_INHIBIT_TIME_EMCY),
  #endif
 #endif
 #if (CO_CONFIG_EM) & CO_CONFIG_EM_HISTORY
                         OD_GET(H1003, OD_H1003_PREDEF_ERR_FIELD),
 80071ce:	4a9e      	ldr	r2, [pc, #632]	; (8007448 <CO_CANopenInit+0x314>)
 80071d0:	6812      	ldr	r2, [r2, #0]
 80071d2:	6852      	ldr	r2, [r2, #4]
        err = CO_EM_init(co->em,
 80071d4:	3218      	adds	r2, #24
 80071d6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80071d8:	9105      	str	r1, [sp, #20]
 80071da:	f897 1050 	ldrb.w	r1, [r7, #80]	; 0x50
 80071de:	9104      	str	r1, [sp, #16]
 80071e0:	9203      	str	r2, [sp, #12]
 80071e2:	2202      	movs	r2, #2
 80071e4:	9202      	str	r2, [sp, #8]
 80071e6:	9301      	str	r3, [sp, #4]
 80071e8:	2311      	movs	r3, #17
 80071ea:	9300      	str	r3, [sp, #0]
 80071ec:	4633      	mov	r3, r6
 80071ee:	462a      	mov	r2, r5
 80071f0:	4621      	mov	r1, r4
 80071f2:	f7f9 fa1b 	bl	800062c <CO_EM_init>
 80071f6:	4603      	mov	r3, r0
 80071f8:	747b      	strb	r3, [r7, #17]
                         co->CANmodule,
                         CO_GET_CO(RX_IDX_EM_CONS),
 #endif
                         nodeId,
                         errInfo);
        if (err) return err;
 80071fa:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	d002      	beq.n	8007208 <CO_CANopenInit+0xd4>
 8007202:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8007206:	e122      	b.n	800744e <CO_CANopenInit+0x31a>
    }

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1) {
        err = CO_NMT_init(co->NMT,
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	691d      	ldr	r5, [r3, #16]
                          OD_GET(H1017, OD_H1017_PRODUCER_HB_TIME),
 800720c:	4b8e      	ldr	r3, [pc, #568]	; (8007448 <CO_CANopenInit+0x314>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	685b      	ldr	r3, [r3, #4]
        err = CO_NMT_init(co->NMT,
 8007212:	f103 0690 	add.w	r6, r3, #144	; 0x90
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	685b      	ldr	r3, [r3, #4]
 800721a:	68fa      	ldr	r2, [r7, #12]
 800721c:	6852      	ldr	r2, [r2, #4]
 800721e:	68f9      	ldr	r1, [r7, #12]
 8007220:	6849      	ldr	r1, [r1, #4]
 8007222:	f897 0050 	ldrb.w	r0, [r7, #80]	; 0x50
 8007226:	b280      	uxth	r0, r0
 8007228:	f500 60e0 	add.w	r0, r0, #1792	; 0x700
 800722c:	b280      	uxth	r0, r0
 800722e:	f897 c050 	ldrb.w	ip, [r7, #80]	; 0x50
 8007232:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8007234:	940b      	str	r4, [sp, #44]	; 0x2c
 8007236:	900a      	str	r0, [sp, #40]	; 0x28
 8007238:	2009      	movs	r0, #9
 800723a:	9009      	str	r0, [sp, #36]	; 0x24
 800723c:	9108      	str	r1, [sp, #32]
 800723e:	2100      	movs	r1, #0
 8007240:	9107      	str	r1, [sp, #28]
 8007242:	2100      	movs	r1, #0
 8007244:	9106      	str	r1, [sp, #24]
 8007246:	9205      	str	r2, [sp, #20]
 8007248:	2200      	movs	r2, #0
 800724a:	9204      	str	r2, [sp, #16]
 800724c:	2200      	movs	r2, #0
 800724e:	9203      	str	r2, [sp, #12]
 8007250:	9302      	str	r3, [sp, #8]
 8007252:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007256:	9301      	str	r3, [sp, #4]
 8007258:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800725a:	9300      	str	r3, [sp, #0]
 800725c:	4663      	mov	r3, ip
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	4631      	mov	r1, r6
 8007262:	4628      	mov	r0, r5
 8007264:	f7fa f872 	bl	800134c <CO_NMT_init>
 8007268:	4603      	mov	r3, r0
 800726a:	747b      	strb	r3, [r7, #17]
 #endif
                          co->CANmodule,
                          CO_GET_CO(TX_IDX_HB_PROD),
                          CO_CAN_ID_HEARTBEAT + nodeId,
                          errInfo);
        if (err) return err;
 800726c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d002      	beq.n	800727a <CO_CANopenInit+0x146>
 8007274:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8007278:	e0e9      	b.n	800744e <CO_CANopenInit+0x31a>
    }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
    if (CO_GET_CNT(HB_CONS) == 1) {
        err = CO_HBconsumer_init(co->HBcons,
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	6958      	ldr	r0, [r3, #20]
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	699c      	ldr	r4, [r3, #24]
                                 em,
                                 co->HBconsMonitoredNodes,
                                 CO_GET_CNT(ARR_1016),
                                 OD_GET(H1016, OD_H1016_CONSUMER_HB_TIME),
 8007282:	4b71      	ldr	r3, [pc, #452]	; (8007448 <CO_CANopenInit+0x314>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	685b      	ldr	r3, [r3, #4]
        err = CO_HBconsumer_init(co->HBcons,
 8007288:	3384      	adds	r3, #132	; 0x84
 800728a:	68fa      	ldr	r2, [r7, #12]
 800728c:	6852      	ldr	r2, [r2, #4]
 800728e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007290:	9103      	str	r1, [sp, #12]
 8007292:	2109      	movs	r1, #9
 8007294:	9102      	str	r1, [sp, #8]
 8007296:	9201      	str	r2, [sp, #4]
 8007298:	9300      	str	r3, [sp, #0]
 800729a:	2308      	movs	r3, #8
 800729c:	4622      	mov	r2, r4
 800729e:	6879      	ldr	r1, [r7, #4]
 80072a0:	f7f9 fd58 	bl	8000d54 <CO_HBconsumer_init>
 80072a4:	4603      	mov	r3, r0
 80072a6:	747b      	strb	r3, [r7, #17]
                                 co->CANmodule,
                                 CO_GET_CO(RX_IDX_HB_CONS),
                                 errInfo);
        if (err) return err;
 80072a8:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d002      	beq.n	80072b6 <CO_CANopenInit+0x182>
 80072b0:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80072b4:	e0cb      	b.n	800744e <CO_CANopenInit+0x31a>
    if (err) return err;
#endif

    /* SDOserver */
    if (CO_GET_CNT(SDO_SRV) > 0) {
        OD_entry_t *SDOsrvPar = OD_GET(H1200, OD_H1200_SDO_SERVER_1_PARAM);
 80072b6:	4b64      	ldr	r3, [pc, #400]	; (8007448 <CO_CANopenInit+0x314>)
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	33b4      	adds	r3, #180	; 0xb4
 80072be:	61fb      	str	r3, [r7, #28]
        for (int16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 80072c0:	2300      	movs	r3, #0
 80072c2:	837b      	strh	r3, [r7, #26]
 80072c4:	e034      	b.n	8007330 <CO_CANopenInit+0x1fc>
            err = CO_SDOserver_init(&co->SDOserver[i],
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80072ca:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80072ce:	21a8      	movs	r1, #168	; 0xa8
 80072d0:	fb01 f303 	mul.w	r3, r1, r3
 80072d4:	18d6      	adds	r6, r2, r3
 80072d6:	69fa      	ldr	r2, [r7, #28]
 80072d8:	f102 030c 	add.w	r3, r2, #12
 80072dc:	61fb      	str	r3, [r7, #28]
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	685b      	ldr	r3, [r3, #4]
 80072e2:	8b79      	ldrh	r1, [r7, #26]
 80072e4:	3107      	adds	r1, #7
 80072e6:	b289      	uxth	r1, r1
 80072e8:	68f8      	ldr	r0, [r7, #12]
 80072ea:	6840      	ldr	r0, [r0, #4]
 80072ec:	8b7c      	ldrh	r4, [r7, #26]
 80072ee:	3407      	adds	r4, #7
 80072f0:	b2a4      	uxth	r4, r4
 80072f2:	f897 c050 	ldrb.w	ip, [r7, #80]	; 0x50
 80072f6:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 80072f8:	9505      	str	r5, [sp, #20]
 80072fa:	9404      	str	r4, [sp, #16]
 80072fc:	9003      	str	r0, [sp, #12]
 80072fe:	9102      	str	r1, [sp, #8]
 8007300:	9301      	str	r3, [sp, #4]
 8007302:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8007306:	9300      	str	r3, [sp, #0]
 8007308:	4663      	mov	r3, ip
 800730a:	6839      	ldr	r1, [r7, #0]
 800730c:	4630      	mov	r0, r6
 800730e:	f7fd f879 	bl	8004404 <CO_SDOserver_init>
 8007312:	4603      	mov	r3, r0
 8007314:	747b      	strb	r3, [r7, #17]
                                    co->CANmodule,
                                    CO_GET_CO(RX_IDX_SDO_SRV) + i,
                                    co->CANmodule,
                                    CO_GET_CO(TX_IDX_SDO_SRV) + i,
                                    errInfo);
            if (err) return err;
 8007316:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d002      	beq.n	8007324 <CO_CANopenInit+0x1f0>
 800731e:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8007322:	e094      	b.n	800744e <CO_CANopenInit+0x31a>
        for (int16_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8007324:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8007328:	b29b      	uxth	r3, r3
 800732a:	3301      	adds	r3, #1
 800732c:	b29b      	uxth	r3, r3
 800732e:	837b      	strh	r3, [r7, #26]
 8007330:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8007334:	2b00      	cmp	r3, #0
 8007336:	ddc6      	ble.n	80072c6 <CO_CANopenInit+0x192>
        }
    }

#if (CO_CONFIG_SDO_CLI) & CO_CONFIG_SDO_CLI_ENABLE
    if (CO_GET_CNT(SDO_CLI) > 0) {
        OD_entry_t *SDOcliPar = OD_GET(H1280, OD_H1280_SDO_CLIENT_1_PARAM);
 8007338:	4b43      	ldr	r3, [pc, #268]	; (8007448 <CO_CANopenInit+0x314>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	685b      	ldr	r3, [r3, #4]
 800733e:	33c0      	adds	r3, #192	; 0xc0
 8007340:	617b      	str	r3, [r7, #20]
        for (int16_t i = 0; i < CO_GET_CNT(SDO_CLI); i++) {
 8007342:	2300      	movs	r3, #0
 8007344:	827b      	strh	r3, [r7, #18]
 8007346:	e032      	b.n	80073ae <CO_CANopenInit+0x27a>
            err = CO_SDOclient_init(&co->SDOclient[i],
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800734c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8007350:	4613      	mov	r3, r2
 8007352:	011b      	lsls	r3, r3, #4
 8007354:	1a9b      	subs	r3, r3, r2
 8007356:	00db      	lsls	r3, r3, #3
 8007358:	18ce      	adds	r6, r1, r3
 800735a:	697a      	ldr	r2, [r7, #20]
 800735c:	f102 030c 	add.w	r3, r2, #12
 8007360:	617b      	str	r3, [r7, #20]
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	685b      	ldr	r3, [r3, #4]
 8007366:	8a79      	ldrh	r1, [r7, #18]
 8007368:	3108      	adds	r1, #8
 800736a:	b289      	uxth	r1, r1
 800736c:	68f8      	ldr	r0, [r7, #12]
 800736e:	6840      	ldr	r0, [r0, #4]
 8007370:	8a7c      	ldrh	r4, [r7, #18]
 8007372:	3408      	adds	r4, #8
 8007374:	b2a4      	uxth	r4, r4
 8007376:	f897 c050 	ldrb.w	ip, [r7, #80]	; 0x50
 800737a:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 800737c:	9504      	str	r5, [sp, #16]
 800737e:	9403      	str	r4, [sp, #12]
 8007380:	9002      	str	r0, [sp, #8]
 8007382:	9101      	str	r1, [sp, #4]
 8007384:	9300      	str	r3, [sp, #0]
 8007386:	4663      	mov	r3, ip
 8007388:	6839      	ldr	r1, [r7, #0]
 800738a:	4630      	mov	r0, r6
 800738c:	f7fc f8f0 	bl	8003570 <CO_SDOclient_init>
 8007390:	4603      	mov	r3, r0
 8007392:	747b      	strb	r3, [r7, #17]
                                    co->CANmodule,
                                    CO_GET_CO(RX_IDX_SDO_CLI) + i,
                                    co->CANmodule,
                                    CO_GET_CO(TX_IDX_SDO_CLI) + i,
                                    errInfo);
            if (err) return err;
 8007394:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8007398:	2b00      	cmp	r3, #0
 800739a:	d002      	beq.n	80073a2 <CO_CANopenInit+0x26e>
 800739c:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80073a0:	e055      	b.n	800744e <CO_CANopenInit+0x31a>
        for (int16_t i = 0; i < CO_GET_CNT(SDO_CLI); i++) {
 80073a2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80073a6:	b29b      	uxth	r3, r3
 80073a8:	3301      	adds	r3, #1
 80073aa:	b29b      	uxth	r3, r3
 80073ac:	827b      	strh	r3, [r7, #18]
 80073ae:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80073b2:	2b00      	cmp	r3, #0
 80073b4:	ddc8      	ble.n	8007348 <CO_CANopenInit+0x214>
    }
#endif

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
    if (CO_GET_CNT(TIME) == 1) {
        err = CO_TIME_init(co->TIME,
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
                           OD_GET(H1012, OD_H1012_COBID_TIME),
 80073ba:	4b23      	ldr	r3, [pc, #140]	; (8007448 <CO_CANopenInit+0x314>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	685b      	ldr	r3, [r3, #4]
        err = CO_TIME_init(co->TIME,
 80073c0:	f103 0160 	add.w	r1, r3, #96	; 0x60
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	685a      	ldr	r2, [r3, #4]
 80073c8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80073ca:	9300      	str	r3, [sp, #0]
 80073cc:	2302      	movs	r3, #2
 80073ce:	f7fe fccf 	bl	8005d70 <CO_TIME_init>
 80073d2:	4603      	mov	r3, r0
 80073d4:	747b      	strb	r3, [r7, #17]
#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_PRODUCER
                           co->CANmodule,
                           CO_GET_CO(TX_IDX_TIME),
#endif
                           errInfo);
        if (err) return err;
 80073d6:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d002      	beq.n	80073e4 <CO_CANopenInit+0x2b0>
 80073de:	f997 3011 	ldrsb.w	r3, [r7, #17]
 80073e2:	e034      	b.n	800744e <CO_CANopenInit+0x31a>
    }
#endif

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
    if (CO_GET_CNT(SYNC) == 1) {
        err = CO_SYNC_init(co->SYNC,
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	6b1d      	ldr	r5, [r3, #48]	; 0x30
                           em,
                           OD_GET(H1005, OD_H1005_COBID_SYNC),
 80073e8:	4b17      	ldr	r3, [pc, #92]	; (8007448 <CO_CANopenInit+0x314>)
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC,
 80073ee:	f103 0624 	add.w	r6, r3, #36	; 0x24
                           OD_GET(H1006, OD_H1006_COMM_CYCL_PERIOD),
 80073f2:	4b15      	ldr	r3, [pc, #84]	; (8007448 <CO_CANopenInit+0x314>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC,
 80073f8:	f103 0c30 	add.w	ip, r3, #48	; 0x30
                           OD_GET(H1007, OD_H1007_SYNC_WINDOW_LEN),
 80073fc:	4b12      	ldr	r3, [pc, #72]	; (8007448 <CO_CANopenInit+0x314>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	685b      	ldr	r3, [r3, #4]
        err = CO_SYNC_init(co->SYNC,
 8007402:	333c      	adds	r3, #60	; 0x3c
                           OD_GET(H1019, OD_H1019_SYNC_CNT_OVERFLOW),
 8007404:	4a10      	ldr	r2, [pc, #64]	; (8007448 <CO_CANopenInit+0x314>)
 8007406:	6812      	ldr	r2, [r2, #0]
 8007408:	6852      	ldr	r2, [r2, #4]
        err = CO_SYNC_init(co->SYNC,
 800740a:	32a8      	adds	r2, #168	; 0xa8
 800740c:	68f9      	ldr	r1, [r7, #12]
 800740e:	6849      	ldr	r1, [r1, #4]
 8007410:	68f8      	ldr	r0, [r7, #12]
 8007412:	6840      	ldr	r0, [r0, #4]
 8007414:	6d7c      	ldr	r4, [r7, #84]	; 0x54
 8007416:	9406      	str	r4, [sp, #24]
 8007418:	2401      	movs	r4, #1
 800741a:	9405      	str	r4, [sp, #20]
 800741c:	9004      	str	r0, [sp, #16]
 800741e:	2001      	movs	r0, #1
 8007420:	9003      	str	r0, [sp, #12]
 8007422:	9102      	str	r1, [sp, #8]
 8007424:	9201      	str	r2, [sp, #4]
 8007426:	9300      	str	r3, [sp, #0]
 8007428:	4663      	mov	r3, ip
 800742a:	4632      	mov	r2, r6
 800742c:	6879      	ldr	r1, [r7, #4]
 800742e:	4628      	mov	r0, r5
 8007430:	f7fe f9d6 	bl	80057e0 <CO_SYNC_init>
 8007434:	4603      	mov	r3, r0
 8007436:	747b      	strb	r3, [r7, #17]
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_PRODUCER
                           co->CANmodule,
                           CO_GET_CO(TX_IDX_SYNC),
#endif
                           errInfo);
        if (err) return err;
 8007438:	f997 3011 	ldrsb.w	r3, [r7, #17]
 800743c:	2b00      	cmp	r3, #0
 800743e:	d005      	beq.n	800744c <CO_CANopenInit+0x318>
 8007440:	f997 3011 	ldrsb.w	r3, [r7, #17]
 8007444:	e003      	b.n	800744e <CO_CANopenInit+0x31a>
 8007446:	bf00      	nop
 8007448:	240003cc 	.word	0x240003cc
            if (err) return err;
        }
    }
#endif

    return CO_ERROR_NO;
 800744c:	2300      	movs	r3, #0
}
 800744e:	4618      	mov	r0, r3
 8007450:	3724      	adds	r7, #36	; 0x24
 8007452:	46bd      	mov	sp, r7
 8007454:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007456:	bf00      	nop

08007458 <CO_CANopenInitPDO>:
CO_ReturnError_t CO_CANopenInitPDO(CO_t *co,
                                   CO_EM_t *em,
                                   OD_t *od,
                                   uint8_t nodeId,
                                   uint32_t *errInfo)
{
 8007458:	b5f0      	push	{r4, r5, r6, r7, lr}
 800745a:	b093      	sub	sp, #76	; 0x4c
 800745c:	af06      	add	r7, sp, #24
 800745e:	60f8      	str	r0, [r7, #12]
 8007460:	60b9      	str	r1, [r7, #8]
 8007462:	607a      	str	r2, [r7, #4]
 8007464:	70fb      	strb	r3, [r7, #3]
    if (co == NULL) {
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d102      	bne.n	8007472 <CO_CANopenInitPDO+0x1a>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 800746c:	f04f 33ff 	mov.w	r3, #4294967295
 8007470:	e0c3      	b.n	80075fa <CO_CANopenInitPDO+0x1a2>
    }
    if (nodeId < 1 || nodeId > 127 || co->nodeIdUnconfigured) {
 8007472:	78fb      	ldrb	r3, [r7, #3]
 8007474:	2b00      	cmp	r3, #0
 8007476:	d007      	beq.n	8007488 <CO_CANopenInitPDO+0x30>
 8007478:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800747c:	2b00      	cmp	r3, #0
 800747e:	db03      	blt.n	8007488 <CO_CANopenInitPDO+0x30>
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	2b00      	cmp	r3, #0
 8007486:	d009      	beq.n	800749c <CO_CANopenInitPDO+0x44>
        return (co->nodeIdUnconfigured)
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
               ? CO_ERROR_NODE_ID_UNCONFIGURED_LSS : CO_ERROR_ILLEGAL_ARGUMENT;
 800748c:	2b00      	cmp	r3, #0
 800748e:	d002      	beq.n	8007496 <CO_CANopenInitPDO+0x3e>
 8007490:	f06f 0312 	mvn.w	r3, #18
 8007494:	e0b1      	b.n	80075fa <CO_CANopenInitPDO+0x1a2>
 8007496:	f04f 33ff 	mov.w	r3, #4294967295
 800749a:	e0ae      	b.n	80075fa <CO_CANopenInitPDO+0x1a2>
    }

#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
    if (CO_GET_CNT(RPDO) > 0) {
        OD_entry_t *RPDOcomm = OD_GET(H1400, OD_H1400_RXPDO_1_PARAM);
 800749c:	4b59      	ldr	r3, [pc, #356]	; (8007604 <CO_CANopenInitPDO+0x1ac>)
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	33cc      	adds	r3, #204	; 0xcc
 80074a4:	62fb      	str	r3, [r7, #44]	; 0x2c
        OD_entry_t *RPDOmap = OD_GET(H1600, OD_H1600_RXPDO_1_MAPPING);
 80074a6:	4b57      	ldr	r3, [pc, #348]	; (8007604 <CO_CANopenInitPDO+0x1ac>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	685b      	ldr	r3, [r3, #4]
 80074ac:	33fc      	adds	r3, #252	; 0xfc
 80074ae:	62bb      	str	r3, [r7, #40]	; 0x28
        for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 80074b0:	2300      	movs	r3, #0
 80074b2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80074b4:	e044      	b.n	8007540 <CO_CANopenInitPDO+0xe8>
            CO_ReturnError_t err;
            uint16_t preDefinedCanId = 0;
 80074b6:	2300      	movs	r3, #0
 80074b8:	84bb      	strh	r3, [r7, #36]	; 0x24
            if (i < CO_RPDO_DEFAULT_CANID_COUNT) {
 80074ba:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80074be:	2b03      	cmp	r3, #3
 80074c0:	dc09      	bgt.n	80074d6 <CO_CANopenInitPDO+0x7e>
#if CO_RPDO_DEFAULT_CANID_COUNT <= 4
                preDefinedCanId = (CO_CAN_ID_RPDO_1 + i * 0x100) + nodeId;
 80074c2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80074c6:	3302      	adds	r3, #2
 80074c8:	b29b      	uxth	r3, r3
 80074ca:	021b      	lsls	r3, r3, #8
 80074cc:	b29a      	uxth	r2, r3
 80074ce:	78fb      	ldrb	r3, [r7, #3]
 80074d0:	b29b      	uxth	r3, r3
 80074d2:	4413      	add	r3, r2
 80074d4:	84bb      	strh	r3, [r7, #36]	; 0x24
                uint16_t nodeIdOffset = i / 4;
                preDefinedCanId = (CO_CAN_ID_RPDO_1 + pdoOffset * 0x100)
                                + nodeId + nodeIdOffset;
#endif
            }
            err = CO_RPDO_init(&co->RPDO[i],
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074da:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80074de:	f44f 71ba 	mov.w	r1, #372	; 0x174
 80074e2:	fb01 f303 	mul.w	r3, r1, r3
 80074e6:	18d5      	adds	r5, r2, r3
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 80074ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074ee:	f103 020c 	add.w	r2, r3, #12
 80074f2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80074f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80074f6:	f102 010c 	add.w	r1, r2, #12
 80074fa:	62b9      	str	r1, [r7, #40]	; 0x28
 80074fc:	68f9      	ldr	r1, [r7, #12]
 80074fe:	6849      	ldr	r1, [r1, #4]
 8007500:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8007502:	3003      	adds	r0, #3
 8007504:	b280      	uxth	r0, r0
 8007506:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 8007508:	9405      	str	r4, [sp, #20]
 800750a:	9004      	str	r0, [sp, #16]
 800750c:	9103      	str	r1, [sp, #12]
 800750e:	9202      	str	r2, [sp, #8]
 8007510:	9301      	str	r3, [sp, #4]
 8007512:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007514:	9300      	str	r3, [sp, #0]
 8007516:	4633      	mov	r3, r6
 8007518:	68ba      	ldr	r2, [r7, #8]
 800751a:	6879      	ldr	r1, [r7, #4]
 800751c:	4628      	mov	r0, r5
 800751e:	f7fb f8a7 	bl	8002670 <CO_RPDO_init>
 8007522:	4603      	mov	r3, r0
 8007524:	75bb      	strb	r3, [r7, #22]
                               RPDOcomm++,
                               RPDOmap++,
                               co->CANmodule,
                               CO_GET_CO(RX_IDX_RPDO) + i,
                               errInfo);
            if (err) return err;
 8007526:	f997 3016 	ldrsb.w	r3, [r7, #22]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d002      	beq.n	8007534 <CO_CANopenInitPDO+0xdc>
 800752e:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8007532:	e062      	b.n	80075fa <CO_CANopenInitPDO+0x1a2>
        for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 8007534:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8007538:	b29b      	uxth	r3, r3
 800753a:	3301      	adds	r3, #1
 800753c:	b29b      	uxth	r3, r3
 800753e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007540:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8007544:	2b03      	cmp	r3, #3
 8007546:	ddb6      	ble.n	80074b6 <CO_CANopenInitPDO+0x5e>
    }
#endif

#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
    if (CO_GET_CNT(TPDO) > 0) {
        OD_entry_t *TPDOcomm = OD_GET(H1800, OD_H1800_TXPDO_1_PARAM);
 8007548:	4b2e      	ldr	r3, [pc, #184]	; (8007604 <CO_CANopenInitPDO+0x1ac>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	f503 7396 	add.w	r3, r3, #300	; 0x12c
 8007552:	623b      	str	r3, [r7, #32]
        OD_entry_t *TPDOmap = OD_GET(H1A00, OD_H1A00_TXPDO_1_MAPPING);
 8007554:	4b2b      	ldr	r3, [pc, #172]	; (8007604 <CO_CANopenInitPDO+0x1ac>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	685b      	ldr	r3, [r3, #4]
 800755a:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 800755e:	61fb      	str	r3, [r7, #28]
        for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8007560:	2300      	movs	r3, #0
 8007562:	837b      	strh	r3, [r7, #26]
 8007564:	e044      	b.n	80075f0 <CO_CANopenInitPDO+0x198>
            CO_ReturnError_t err;
            uint16_t preDefinedCanId = 0;
 8007566:	2300      	movs	r3, #0
 8007568:	833b      	strh	r3, [r7, #24]
            if (i < CO_TPDO_DEFAULT_CANID_COUNT) {
 800756a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800756e:	2b03      	cmp	r3, #3
 8007570:	dc09      	bgt.n	8007586 <CO_CANopenInitPDO+0x12e>
#if CO_TPDO_DEFAULT_CANID_COUNT <= 4
                preDefinedCanId = (CO_CAN_ID_TPDO_1 + i * 0x100) + nodeId;
 8007572:	8b7b      	ldrh	r3, [r7, #26]
 8007574:	021b      	lsls	r3, r3, #8
 8007576:	b29a      	uxth	r2, r3
 8007578:	78fb      	ldrb	r3, [r7, #3]
 800757a:	b29b      	uxth	r3, r3
 800757c:	4413      	add	r3, r2
 800757e:	b29b      	uxth	r3, r3
 8007580:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8007584:	833b      	strh	r3, [r7, #24]
                uint16_t nodeIdOffset = i / 4;
                preDefinedCanId = (CO_CAN_ID_TPDO_1 + pdoOffset * 0x100)
                                + nodeId + nodeIdOffset;
#endif
            }
            err = CO_TPDO_init(&co->TPDO[i],
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800758a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800758e:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8007592:	fb01 f303 	mul.w	r3, r1, r3
 8007596:	18d5      	adds	r5, r2, r3
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	6b1e      	ldr	r6, [r3, #48]	; 0x30
 800759c:	6a3b      	ldr	r3, [r7, #32]
 800759e:	f103 020c 	add.w	r2, r3, #12
 80075a2:	623a      	str	r2, [r7, #32]
 80075a4:	69fa      	ldr	r2, [r7, #28]
 80075a6:	f102 010c 	add.w	r1, r2, #12
 80075aa:	61f9      	str	r1, [r7, #28]
 80075ac:	68f9      	ldr	r1, [r7, #12]
 80075ae:	6849      	ldr	r1, [r1, #4]
 80075b0:	8b78      	ldrh	r0, [r7, #26]
 80075b2:	3003      	adds	r0, #3
 80075b4:	b280      	uxth	r0, r0
 80075b6:	6cbc      	ldr	r4, [r7, #72]	; 0x48
 80075b8:	9405      	str	r4, [sp, #20]
 80075ba:	9004      	str	r0, [sp, #16]
 80075bc:	9103      	str	r1, [sp, #12]
 80075be:	9202      	str	r2, [sp, #8]
 80075c0:	9301      	str	r3, [sp, #4]
 80075c2:	8b3b      	ldrh	r3, [r7, #24]
 80075c4:	9300      	str	r3, [sp, #0]
 80075c6:	4633      	mov	r3, r6
 80075c8:	68ba      	ldr	r2, [r7, #8]
 80075ca:	6879      	ldr	r1, [r7, #4]
 80075cc:	4628      	mov	r0, r5
 80075ce:	f7fb fc1b 	bl	8002e08 <CO_TPDO_init>
 80075d2:	4603      	mov	r3, r0
 80075d4:	75fb      	strb	r3, [r7, #23]
                               TPDOcomm++,
                               TPDOmap++,
                               co->CANmodule,
                               CO_GET_CO(TX_IDX_TPDO) + i,
                               errInfo);
            if (err) return err;
 80075d6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80075da:	2b00      	cmp	r3, #0
 80075dc:	d002      	beq.n	80075e4 <CO_CANopenInitPDO+0x18c>
 80075de:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80075e2:	e00a      	b.n	80075fa <CO_CANopenInitPDO+0x1a2>
        for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 80075e4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80075e8:	b29b      	uxth	r3, r3
 80075ea:	3301      	adds	r3, #1
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	837b      	strh	r3, [r7, #26]
 80075f0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80075f4:	2b03      	cmp	r3, #3
 80075f6:	ddb6      	ble.n	8007566 <CO_CANopenInitPDO+0x10e>
        }
    }
#endif

    return CO_ERROR_NO;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3734      	adds	r7, #52	; 0x34
 80075fe:	46bd      	mov	sp, r7
 8007600:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007602:	bf00      	nop
 8007604:	240003cc 	.word	0x240003cc

08007608 <CO_process>:
/******************************************************************************/
CO_NMT_reset_cmd_t CO_process(CO_t *co,
                              bool_t enableGateway,
                              uint32_t timeDifference_us,
                              uint32_t *timerNext_us)
{
 8007608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800760a:	b097      	sub	sp, #92	; 0x5c
 800760c:	af08      	add	r7, sp, #32
 800760e:	61f8      	str	r0, [r7, #28]
 8007610:	61b9      	str	r1, [r7, #24]
 8007612:	617a      	str	r2, [r7, #20]
 8007614:	613b      	str	r3, [r7, #16]
    (void) enableGateway; /* may be unused */
    CO_NMT_reset_cmd_t reset = CO_RESET_NOT;
 8007616:	2300      	movs	r3, #0
 8007618:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
    CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 800761c:	69fb      	ldr	r3, [r7, #28]
 800761e:	691b      	ldr	r3, [r3, #16]
 8007620:	4618      	mov	r0, r3
 8007622:	f7ff fb4c 	bl	8006cbe <CO_NMT_getInternalState>
 8007626:	4603      	mov	r3, r0
 8007628:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 800762c:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
                                    || NMTstate == CO_NMT_OPERATIONAL);
 8007630:	2b7f      	cmp	r3, #127	; 0x7f
 8007632:	d003      	beq.n	800763c <CO_process+0x34>
 8007634:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 8007638:	2b05      	cmp	r3, #5
 800763a:	d101      	bne.n	8007640 <CO_process+0x38>
 800763c:	2301      	movs	r3, #1
 800763e:	e000      	b.n	8007642 <CO_process+0x3a>
 8007640:	2300      	movs	r3, #0
    bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 8007642:	62bb      	str	r3, [r7, #40]	; 0x28

    /* CAN module */
    CO_CANmodule_process(co->CANmodule);
 8007644:	69fb      	ldr	r3, [r7, #28]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	4618      	mov	r0, r3
 800764a:	f000 fe3a 	bl	80082c2 <CO_CANmodule_process>

#if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    if (CO_GET_CNT(LSS_SLV) == 1) {
        if (CO_LSSslave_process(co->LSSslave)) {
 800764e:	69fb      	ldr	r3, [r7, #28]
 8007650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007652:	4618      	mov	r0, r3
 8007654:	f7ff f8e0 	bl	8006818 <CO_LSSslave_process>
 8007658:	4603      	mov	r3, r0
 800765a:	2b00      	cmp	r3, #0
 800765c:	d002      	beq.n	8007664 <CO_process+0x5c>
            reset = CO_RESET_COMM;
 800765e:	2301      	movs	r3, #1
 8007660:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
    }
#endif

#if (CO_CONFIG_LEDS) & CO_CONFIG_LEDS_ENABLE
    bool_t unc = co->nodeIdUnconfigured;
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	627b      	str	r3, [r7, #36]	; 0x24
    uint16_t CANerrorStatus = co->CANmodule->CANerrorStatus;
 800766a:	69fb      	ldr	r3, [r7, #28]
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	8a5b      	ldrh	r3, [r3, #18]
 8007670:	847b      	strh	r3, [r7, #34]	; 0x22
    bool_t LSSslave_configuration = false;
 8007672:	2300      	movs	r3, #0
 8007674:	633b      	str	r3, [r7, #48]	; 0x30
 #if (CO_CONFIG_LSS) & CO_CONFIG_LSS_SLAVE
    if (CO_GET_CNT(LSS_SLV) == 1
        && CO_LSSslave_getState(co->LSSslave) == CO_LSS_STATE_CONFIGURATION
 8007676:	69fb      	ldr	r3, [r7, #28]
 8007678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800767a:	4618      	mov	r0, r3
 800767c:	f7ff fb31 	bl	8006ce2 <CO_LSSslave_getState>
 8007680:	4603      	mov	r3, r0
    if (CO_GET_CNT(LSS_SLV) == 1
 8007682:	2b01      	cmp	r3, #1
 8007684:	d101      	bne.n	800768a <CO_process+0x82>
    ) {
        LSSslave_configuration = true;
 8007686:	2301      	movs	r3, #1
 8007688:	633b      	str	r3, [r7, #48]	; 0x30
 #ifndef CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS
  #define CO_STATUS_FIRMWARE_DOWNLOAD_IN_PROGRESS 0
 #endif

    if (CO_GET_CNT(LEDS) == 1) {
        CO_LEDs_process(co->LEDs,
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	6bde      	ldr	r6, [r3, #60]	; 0x3c
 800768e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007690:	2b00      	cmp	r3, #0
 8007692:	d102      	bne.n	800769a <CO_process+0x92>
 8007694:	f997 4021 	ldrsb.w	r4, [r7, #33]	; 0x21
 8007698:	e000      	b.n	800769c <CO_process+0x94>
 800769a:	2400      	movs	r4, #0
            timeDifference_us,
            unc ? CO_NMT_INITIALIZING : NMTstate,
            LSSslave_configuration,
            (CANerrorStatus & CO_CAN_ERRTX_BUS_OFF) != 0,
 800769c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800769e:	f003 0304 	and.w	r3, r3, #4
        CO_LEDs_process(co->LEDs,
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	bf14      	ite	ne
 80076a6:	2301      	movne	r3, #1
 80076a8:	2300      	moveq	r3, #0
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	60fb      	str	r3, [r7, #12]
            (CANerrorStatus & CO_CAN_ERR_WARN_PASSIVE) != 0,
 80076ae:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80076b0:	f240 3303 	movw	r3, #771	; 0x303
 80076b4:	4013      	ands	r3, r2
        CO_LEDs_process(co->LEDs,
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	bf14      	ite	ne
 80076ba:	2301      	movne	r3, #1
 80076bc:	2300      	moveq	r3, #0
 80076be:	b2db      	uxtb	r3, r3
 80076c0:	60bb      	str	r3, [r7, #8]
 80076c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d107      	bne.n	80076d8 <CO_process+0xd0>
            0, /* RPDO event timer timeout */
            unc ? false : CO_isError(co->em, CO_EM_SYNC_TIME_OUT),
 80076c8:	69fb      	ldr	r3, [r7, #28]
 80076ca:	69db      	ldr	r3, [r3, #28]
 80076cc:	2118      	movs	r1, #24
 80076ce:	4618      	mov	r0, r3
 80076d0:	f7ff fab8 	bl	8006c44 <CO_isError>
 80076d4:	4605      	mov	r5, r0
 80076d6:	e000      	b.n	80076da <CO_process+0xd2>
        CO_LEDs_process(co->LEDs,
 80076d8:	2500      	movs	r5, #0
            unc ? false : (CO_isError(co->em, CO_EM_HEARTBEAT_CONSUMER)
 80076da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d113      	bne.n	8007708 <CO_process+0x100>
 80076e0:	69fb      	ldr	r3, [r7, #28]
 80076e2:	69db      	ldr	r3, [r3, #28]
 80076e4:	211b      	movs	r1, #27
 80076e6:	4618      	mov	r0, r3
 80076e8:	f7ff faac 	bl	8006c44 <CO_isError>
 80076ec:	4603      	mov	r3, r0
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d108      	bne.n	8007704 <CO_process+0xfc>
                        || CO_isError(co->em, CO_EM_HB_CONSUMER_REMOTE_RESET)),
 80076f2:	69fb      	ldr	r3, [r7, #28]
 80076f4:	69db      	ldr	r3, [r3, #28]
 80076f6:	211c      	movs	r1, #28
 80076f8:	4618      	mov	r0, r3
 80076fa:	f7ff faa3 	bl	8006c44 <CO_isError>
 80076fe:	4603      	mov	r3, r0
 8007700:	2b00      	cmp	r3, #0
 8007702:	d001      	beq.n	8007708 <CO_process+0x100>
            unc ? false : (CO_isError(co->em, CO_EM_HEARTBEAT_CONSUMER)
 8007704:	2301      	movs	r3, #1
 8007706:	e000      	b.n	800770a <CO_process+0x102>
 8007708:	2300      	movs	r3, #0
        CO_LEDs_process(co->LEDs,
 800770a:	607b      	str	r3, [r7, #4]
            CO_getErrorRegister(co->em) != 0,
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	69db      	ldr	r3, [r3, #28]
 8007710:	4618      	mov	r0, r3
 8007712:	f7ff fabe 	bl	8006c92 <CO_getErrorRegister>
 8007716:	4603      	mov	r3, r0
        CO_LEDs_process(co->LEDs,
 8007718:	2b00      	cmp	r3, #0
 800771a:	bf14      	ite	ne
 800771c:	2301      	movne	r3, #1
 800771e:	2300      	moveq	r3, #0
 8007720:	b2db      	uxtb	r3, r3
 8007722:	461a      	mov	r2, r3
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	9307      	str	r3, [sp, #28]
 8007728:	2300      	movs	r3, #0
 800772a:	9306      	str	r3, [sp, #24]
 800772c:	9205      	str	r2, [sp, #20]
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	9304      	str	r3, [sp, #16]
 8007732:	9503      	str	r5, [sp, #12]
 8007734:	2300      	movs	r3, #0
 8007736:	9302      	str	r3, [sp, #8]
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	9301      	str	r3, [sp, #4]
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	9300      	str	r3, [sp, #0]
 8007740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007742:	4622      	mov	r2, r4
 8007744:	6979      	ldr	r1, [r7, #20]
 8007746:	4630      	mov	r0, r6
 8007748:	f7fe fcf2 	bl	8006130 <CO_LEDs_process>
            timerNext_us);
    }
#endif

    /* CANopen Node ID is unconfigured (LSS slave), stop processing here */
    if (co->nodeIdUnconfigured) {
 800774c:	69fb      	ldr	r3, [r7, #28]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2b00      	cmp	r3, #0
 8007752:	d002      	beq.n	800775a <CO_process+0x152>
        return reset;
 8007754:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007758:	e047      	b.n	80077ea <CO_process+0x1e2>
    }

    /* Emergency */
    if (CO_GET_CNT(EM) == 1) {
        CO_EM_process(co->em,
 800775a:	69fb      	ldr	r3, [r7, #28]
 800775c:	69d8      	ldr	r0, [r3, #28]
 800775e:	693b      	ldr	r3, [r7, #16]
 8007760:	697a      	ldr	r2, [r7, #20]
 8007762:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007764:	f7f9 f842 	bl	80007ec <CO_EM_process>
                      timerNext_us);
    }

    /* NMT_Heartbeat */
    if (CO_GET_CNT(NMT) == 1) {
        reset = CO_NMT_process(co->NMT,
 8007768:	69fb      	ldr	r3, [r7, #28]
 800776a:	6918      	ldr	r0, [r3, #16]
 800776c:	f107 0121 	add.w	r1, r7, #33	; 0x21
 8007770:	693b      	ldr	r3, [r7, #16]
 8007772:	697a      	ldr	r2, [r7, #20]
 8007774:	f7f9 fec4 	bl	8001500 <CO_NMT_process>
 8007778:	4603      	mov	r3, r0
 800777a:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
                               &NMTstate,
                               timeDifference_us,
                               timerNext_us);
    }
    NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 800777e:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
                             || NMTstate == CO_NMT_OPERATIONAL);
 8007782:	2b7f      	cmp	r3, #127	; 0x7f
 8007784:	d003      	beq.n	800778e <CO_process+0x186>
 8007786:	f997 3021 	ldrsb.w	r3, [r7, #33]	; 0x21
 800778a:	2b05      	cmp	r3, #5
 800778c:	d101      	bne.n	8007792 <CO_process+0x18a>
 800778e:	2301      	movs	r3, #1
 8007790:	e000      	b.n	8007794 <CO_process+0x18c>
 8007792:	2300      	movs	r3, #0
    NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 8007794:	62bb      	str	r3, [r7, #40]	; 0x28

    /* SDOserver */
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 8007796:	2300      	movs	r3, #0
 8007798:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800779c:	e011      	b.n	80077c2 <CO_process+0x1ba>
        CO_SDOserver_process(&co->SDOserver[i],
 800779e:	69fb      	ldr	r3, [r7, #28]
 80077a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077a2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80077a6:	21a8      	movs	r1, #168	; 0xa8
 80077a8:	fb01 f303 	mul.w	r3, r1, r3
 80077ac:	18d0      	adds	r0, r2, r3
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	697a      	ldr	r2, [r7, #20]
 80077b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077b4:	f7fd f902 	bl	80049bc <CO_SDOserver_process>
    for (uint8_t i = 0; i < CO_GET_CNT(SDO_SRV); i++) {
 80077b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80077bc:	3301      	adds	r3, #1
 80077be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 80077c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d0e9      	beq.n	800779e <CO_process+0x196>
                             timerNext_us);
    }

#if (CO_CONFIG_HB_CONS) & CO_CONFIG_HB_CONS_ENABLE
    if (CO_GET_CNT(HB_CONS) == 1) {
        CO_HBconsumer_process(co->HBcons,
 80077ca:	69fb      	ldr	r3, [r7, #28]
 80077cc:	6958      	ldr	r0, [r3, #20]
 80077ce:	693b      	ldr	r3, [r7, #16]
 80077d0:	697a      	ldr	r2, [r7, #20]
 80077d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077d4:	f7f9 fc02 	bl	8000fdc <CO_HBconsumer_process>
                                  timerNext_us);
#endif

#if (CO_CONFIG_TIME) & CO_CONFIG_TIME_ENABLE
    if (CO_GET_CNT(TIME) == 1) {
        CO_TIME_process(co->TIME, NMTisPreOrOperational, timeDifference_us);
 80077d8:	69fb      	ldr	r3, [r7, #28]
 80077da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077dc:	697a      	ldr	r2, [r7, #20]
 80077de:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80077e0:	4618      	mov	r0, r3
 80077e2:	f7fe fb45 	bl	8005e70 <CO_TIME_process>
                        timeDifference_us,
                        timerNext_us);
    }
#endif

    return reset;
 80077e6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 80077ea:	4618      	mov	r0, r3
 80077ec:	373c      	adds	r7, #60	; 0x3c
 80077ee:	46bd      	mov	sp, r7
 80077f0:	bdf0      	pop	{r4, r5, r6, r7, pc}

080077f2 <CO_process_SYNC>:
/******************************************************************************/
#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
bool_t CO_process_SYNC(CO_t *co,
                       uint32_t timeDifference_us,
                       uint32_t *timerNext_us)
{
 80077f2:	b580      	push	{r7, lr}
 80077f4:	b088      	sub	sp, #32
 80077f6:	af00      	add	r7, sp, #0
 80077f8:	60f8      	str	r0, [r7, #12]
 80077fa:	60b9      	str	r1, [r7, #8]
 80077fc:	607a      	str	r2, [r7, #4]
    bool_t syncWas = false;
 80077fe:	2300      	movs	r3, #0
 8007800:	61fb      	str	r3, [r7, #28]

    if (!co->nodeIdUnconfigured && CO_GET_CNT(SYNC) == 1) {
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d12d      	bne.n	8007866 <CO_process_SYNC+0x74>
        CO_NMT_internalState_t NMTstate = CO_NMT_getInternalState(co->NMT);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	691b      	ldr	r3, [r3, #16]
 800780e:	4618      	mov	r0, r3
 8007810:	f7ff fa55 	bl	8006cbe <CO_NMT_getInternalState>
 8007814:	4603      	mov	r3, r0
 8007816:	76fb      	strb	r3, [r7, #27]
        bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
                                        || NMTstate == CO_NMT_OPERATIONAL);
 8007818:	f997 301b 	ldrsb.w	r3, [r7, #27]
 800781c:	2b7f      	cmp	r3, #127	; 0x7f
 800781e:	d003      	beq.n	8007828 <CO_process_SYNC+0x36>
 8007820:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8007824:	2b05      	cmp	r3, #5
 8007826:	d101      	bne.n	800782c <CO_process_SYNC+0x3a>
 8007828:	2301      	movs	r3, #1
 800782a:	e000      	b.n	800782e <CO_process_SYNC+0x3c>
 800782c:	2300      	movs	r3, #0
        bool_t NMTisPreOrOperational = (NMTstate == CO_NMT_PRE_OPERATIONAL
 800782e:	617b      	str	r3, [r7, #20]

        CO_SYNC_status_t sync_process = CO_SYNC_process(co->SYNC,
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	68ba      	ldr	r2, [r7, #8]
 8007838:	6979      	ldr	r1, [r7, #20]
 800783a:	f7fe f8f9 	bl	8005a30 <CO_SYNC_process>
 800783e:	4603      	mov	r3, r0
 8007840:	74fb      	strb	r3, [r7, #19]
                                                        NMTisPreOrOperational,
                                                        timeDifference_us,
                                                        timerNext_us);

        switch (sync_process) {
 8007842:	7cfb      	ldrb	r3, [r7, #19]
 8007844:	2b02      	cmp	r3, #2
 8007846:	d008      	beq.n	800785a <CO_process_SYNC+0x68>
 8007848:	2b02      	cmp	r3, #2
 800784a:	dc0f      	bgt.n	800786c <CO_process_SYNC+0x7a>
 800784c:	2b00      	cmp	r3, #0
 800784e:	d00c      	beq.n	800786a <CO_process_SYNC+0x78>
 8007850:	2b01      	cmp	r3, #1
 8007852:	d10b      	bne.n	800786c <CO_process_SYNC+0x7a>
            case CO_SYNC_NONE:
                break;
            case CO_SYNC_RX_TX:
                syncWas = true;
 8007854:	2301      	movs	r3, #1
 8007856:	61fb      	str	r3, [r7, #28]
                break;
 8007858:	e008      	b.n	800786c <CO_process_SYNC+0x7a>
            case CO_SYNC_PASSED_WINDOW:
                CO_CANclearPendingSyncPDOs(co->CANmodule);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	4618      	mov	r0, r3
 8007860:	f000 fcc9 	bl	80081f6 <CO_CANclearPendingSyncPDOs>
                break;
 8007864:	e002      	b.n	800786c <CO_process_SYNC+0x7a>
        }
    }
 8007866:	bf00      	nop
 8007868:	e000      	b.n	800786c <CO_process_SYNC+0x7a>
                break;
 800786a:	bf00      	nop

    return syncWas;
 800786c:	69fb      	ldr	r3, [r7, #28]
}
 800786e:	4618      	mov	r0, r3
 8007870:	3720      	adds	r7, #32
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <CO_process_RPDO>:
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
void CO_process_RPDO(CO_t *co,
                     bool_t syncWas,
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us)
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b088      	sub	sp, #32
 800787a:	af02      	add	r7, sp, #8
 800787c:	60f8      	str	r0, [r7, #12]
 800787e:	60b9      	str	r1, [r7, #8]
 8007880:	607a      	str	r2, [r7, #4]
 8007882:	603b      	str	r3, [r7, #0]
    (void) timeDifference_us; (void) timerNext_us;
    if (co->nodeIdUnconfigured) {
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	681b      	ldr	r3, [r3, #0]
 8007888:	2b00      	cmp	r3, #0
 800788a:	d129      	bne.n	80078e0 <CO_process_RPDO+0x6a>
        return;
    }

    bool_t NMTisOperational =
        CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	691b      	ldr	r3, [r3, #16]
 8007890:	4618      	mov	r0, r3
 8007892:	f7ff fa14 	bl	8006cbe <CO_NMT_getInternalState>
 8007896:	4603      	mov	r3, r0
 8007898:	2b05      	cmp	r3, #5
 800789a:	bf0c      	ite	eq
 800789c:	2301      	moveq	r3, #1
 800789e:	2300      	movne	r3, #0
 80078a0:	b2db      	uxtb	r3, r3
    bool_t NMTisOperational =
 80078a2:	613b      	str	r3, [r7, #16]

    for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 80078a4:	2300      	movs	r3, #0
 80078a6:	82fb      	strh	r3, [r7, #22]
 80078a8:	e015      	b.n	80078d6 <CO_process_RPDO+0x60>
        CO_RPDO_process(&co->RPDO[i],
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078ae:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80078b2:	f44f 71ba 	mov.w	r1, #372	; 0x174
 80078b6:	fb01 f303 	mul.w	r3, r1, r3
 80078ba:	18d0      	adds	r0, r2, r3
 80078bc:	68bb      	ldr	r3, [r7, #8]
 80078be:	9300      	str	r3, [sp, #0]
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	683a      	ldr	r2, [r7, #0]
 80078c4:	6879      	ldr	r1, [r7, #4]
 80078c6:	f7fb f819 	bl	80028fc <CO_RPDO_process>
    for (int16_t i = 0; i < CO_GET_CNT(RPDO); i++) {
 80078ca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80078ce:	b29b      	uxth	r3, r3
 80078d0:	3301      	adds	r3, #1
 80078d2:	b29b      	uxth	r3, r3
 80078d4:	82fb      	strh	r3, [r7, #22]
 80078d6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80078da:	2b03      	cmp	r3, #3
 80078dc:	dde5      	ble.n	80078aa <CO_process_RPDO+0x34>
 80078de:	e000      	b.n	80078e2 <CO_process_RPDO+0x6c>
        return;
 80078e0:	bf00      	nop
                        timerNext_us,
#endif
                        NMTisOperational,
                        syncWas);
    }
}
 80078e2:	3718      	adds	r7, #24
 80078e4:	46bd      	mov	sp, r7
 80078e6:	bd80      	pop	{r7, pc}

080078e8 <CO_process_TPDO>:
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
void CO_process_TPDO(CO_t *co,
                     bool_t syncWas,
                     uint32_t timeDifference_us,
                     uint32_t *timerNext_us)
{
 80078e8:	b580      	push	{r7, lr}
 80078ea:	b088      	sub	sp, #32
 80078ec:	af02      	add	r7, sp, #8
 80078ee:	60f8      	str	r0, [r7, #12]
 80078f0:	60b9      	str	r1, [r7, #8]
 80078f2:	607a      	str	r2, [r7, #4]
 80078f4:	603b      	str	r3, [r7, #0]
    (void) timeDifference_us; (void) timerNext_us;
    if (co->nodeIdUnconfigured) {
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d129      	bne.n	8007952 <CO_process_TPDO+0x6a>
        return;
    }

    bool_t NMTisOperational =
        CO_NMT_getInternalState(co->NMT) == CO_NMT_OPERATIONAL;
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	691b      	ldr	r3, [r3, #16]
 8007902:	4618      	mov	r0, r3
 8007904:	f7ff f9db 	bl	8006cbe <CO_NMT_getInternalState>
 8007908:	4603      	mov	r3, r0
 800790a:	2b05      	cmp	r3, #5
 800790c:	bf0c      	ite	eq
 800790e:	2301      	moveq	r3, #1
 8007910:	2300      	movne	r3, #0
 8007912:	b2db      	uxtb	r3, r3
    bool_t NMTisOperational =
 8007914:	613b      	str	r3, [r7, #16]

    for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 8007916:	2300      	movs	r3, #0
 8007918:	82fb      	strh	r3, [r7, #22]
 800791a:	e015      	b.n	8007948 <CO_process_TPDO+0x60>
        CO_TPDO_process(&co->TPDO[i],
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007920:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007924:	f44f 71b6 	mov.w	r1, #364	; 0x16c
 8007928:	fb01 f303 	mul.w	r3, r1, r3
 800792c:	18d0      	adds	r0, r2, r3
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	9300      	str	r3, [sp, #0]
 8007932:	693b      	ldr	r3, [r7, #16]
 8007934:	683a      	ldr	r2, [r7, #0]
 8007936:	6879      	ldr	r1, [r7, #4]
 8007938:	f7fb fc82 	bl	8003240 <CO_TPDO_process>
    for (int16_t i = 0; i < CO_GET_CNT(TPDO); i++) {
 800793c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8007940:	b29b      	uxth	r3, r3
 8007942:	3301      	adds	r3, #1
 8007944:	b29b      	uxth	r3, r3
 8007946:	82fb      	strh	r3, [r7, #22]
 8007948:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800794c:	2b03      	cmp	r3, #3
 800794e:	dde5      	ble.n	800791c <CO_process_TPDO+0x34>
 8007950:	e000      	b.n	8007954 <CO_process_TPDO+0x6c>
        return;
 8007952:	bf00      	nop
                        timerNext_us,
#endif
                        NMTisOperational,
                        syncWas);
    }
}
 8007954:	3718      	adds	r7, #24
 8007956:	46bd      	mov	sp, r7
 8007958:	bd80      	pop	{r7, pc}
	...

0800795c <canopen_app_init>:
uint32_t time_old, time_current;
CO_ReturnError_t err;

/* This function will basically setup the CANopen node */
int
canopen_app_init(CANopenNodeSTM32* _canopenNodeSTM32) {
 800795c:	b580      	push	{r7, lr}
 800795e:	b084      	sub	sp, #16
 8007960:	af00      	add	r7, sp, #0
 8007962:	6078      	str	r0, [r7, #4]

    // Keep a copy global reference of canOpenSTM32 Object
    canopenNodeSTM32 = _canopenNodeSTM32;
 8007964:	4a13      	ldr	r2, [pc, #76]	; (80079b4 <canopen_app_init+0x58>)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	6013      	str	r3, [r2, #0]
    uint8_t storageEntriesCount = sizeof(storageEntries) / sizeof(storageEntries[0]);
    uint32_t storageInitError = 0;
#endif

    /* Allocate memory */
    CO_config_t* config_ptr = NULL;
 800796a:	2300      	movs	r3, #0
 800796c:	60fb      	str	r3, [r7, #12]
    co_config.CNT_LSS_SLV = 1;
    config_ptr = &co_config;
#endif /* CO_MULTIPLE_OD */

    uint32_t heapMemoryUsed;
    CO = CO_new(config_ptr, &heapMemoryUsed);
 800796e:	f107 0308 	add.w	r3, r7, #8
 8007972:	4619      	mov	r1, r3
 8007974:	68f8      	ldr	r0, [r7, #12]
 8007976:	f7ff f9c5 	bl	8006d04 <CO_new>
 800797a:	4603      	mov	r3, r0
 800797c:	4a0e      	ldr	r2, [pc, #56]	; (80079b8 <canopen_app_init+0x5c>)
 800797e:	6013      	str	r3, [r2, #0]
    if (CO == NULL) {
 8007980:	4b0d      	ldr	r3, [pc, #52]	; (80079b8 <canopen_app_init+0x5c>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d104      	bne.n	8007992 <canopen_app_init+0x36>
        log_printf("Error: Can't allocate memory\n");
 8007988:	480c      	ldr	r0, [pc, #48]	; (80079bc <canopen_app_init+0x60>)
 800798a:	f00c fd25 	bl	80143d8 <puts>
        return 1;
 800798e:	2301      	movs	r3, #1
 8007990:	e00c      	b.n	80079ac <canopen_app_init+0x50>
    } else {
        log_printf("Allocated %u bytes for CANopen objects\n", heapMemoryUsed);
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	4619      	mov	r1, r3
 8007996:	480a      	ldr	r0, [pc, #40]	; (80079c0 <canopen_app_init+0x64>)
 8007998:	f00c fc98 	bl	80142cc <iprintf>
    }

    canopenNodeSTM32->canOpenStack = CO;
 800799c:	4b05      	ldr	r3, [pc, #20]	; (80079b4 <canopen_app_init+0x58>)
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	4a05      	ldr	r2, [pc, #20]	; (80079b8 <canopen_app_init+0x5c>)
 80079a2:	6812      	ldr	r2, [r2, #0]
 80079a4:	615a      	str	r2, [r3, #20]
        log_printf("Error: Storage %d\n", storageInitError);
        return 2;
    }
#endif

    canopen_app_resetCommunication();
 80079a6:	f000 f80d 	bl	80079c4 <canopen_app_resetCommunication>
    return 0;
 80079aa:	2300      	movs	r3, #0
}
 80079ac:	4618      	mov	r0, r3
 80079ae:	3710      	adds	r7, #16
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}
 80079b4:	24000550 	.word	0x24000550
 80079b8:	24000554 	.word	0x24000554
 80079bc:	080153e8 	.word	0x080153e8
 80079c0:	08015408 	.word	0x08015408

080079c4 <canopen_app_resetCommunication>:

int
canopen_app_resetCommunication() {
 80079c4:	b590      	push	{r4, r7, lr}
 80079c6:	b08f      	sub	sp, #60	; 0x3c
 80079c8:	af08      	add	r7, sp, #32
    /* CANopen communication reset - initialize CANopen objects *******************/
    log_printf("CANopenNode - Reset communication...\n");
 80079ca:	487d      	ldr	r0, [pc, #500]	; (8007bc0 <canopen_app_resetCommunication+0x1fc>)
 80079cc:	f00c fd04 	bl	80143d8 <puts>

    /* Wait rt_thread. */
    CO->CANmodule->CANnormal = false;
 80079d0:	4b7c      	ldr	r3, [pc, #496]	; (8007bc4 <canopen_app_resetCommunication+0x200>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	2200      	movs	r2, #0
 80079d8:	615a      	str	r2, [r3, #20]

    /* Enter CAN configuration. */
    CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 80079da:	4b7b      	ldr	r3, [pc, #492]	; (8007bc8 <canopen_app_resetCommunication+0x204>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4618      	mov	r0, r3
 80079e0:	f000 f9bc 	bl	8007d5c <CO_CANsetConfigurationMode>
    CO_CANmodule_disable(CO->CANmodule);
 80079e4:	4b77      	ldr	r3, [pc, #476]	; (8007bc4 <canopen_app_resetCommunication+0x200>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	4618      	mov	r0, r3
 80079ec:	f000 fa88 	bl	8007f00 <CO_CANmodule_disable>

    /* initialize CANopen */
    err = CO_CANinit(CO, canopenNodeSTM32, 0); // Bitrate for STM32 microcontroller is being set in MXCube Settings
 80079f0:	4b74      	ldr	r3, [pc, #464]	; (8007bc4 <canopen_app_resetCommunication+0x200>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a74      	ldr	r2, [pc, #464]	; (8007bc8 <canopen_app_resetCommunication+0x204>)
 80079f6:	6811      	ldr	r1, [r2, #0]
 80079f8:	2200      	movs	r2, #0
 80079fa:	4618      	mov	r0, r3
 80079fc:	f7ff fb41 	bl	8007082 <CO_CANinit>
 8007a00:	4603      	mov	r3, r0
 8007a02:	461a      	mov	r2, r3
 8007a04:	4b71      	ldr	r3, [pc, #452]	; (8007bcc <canopen_app_resetCommunication+0x208>)
 8007a06:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 8007a08:	4b70      	ldr	r3, [pc, #448]	; (8007bcc <canopen_app_resetCommunication+0x208>)
 8007a0a:	f993 3000 	ldrsb.w	r3, [r3]
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d008      	beq.n	8007a24 <canopen_app_resetCommunication+0x60>
        log_printf("Error: CAN initialization failed: %d\n", err);
 8007a12:	4b6e      	ldr	r3, [pc, #440]	; (8007bcc <canopen_app_resetCommunication+0x208>)
 8007a14:	f993 3000 	ldrsb.w	r3, [r3]
 8007a18:	4619      	mov	r1, r3
 8007a1a:	486d      	ldr	r0, [pc, #436]	; (8007bd0 <canopen_app_resetCommunication+0x20c>)
 8007a1c:	f00c fc56 	bl	80142cc <iprintf>
        return 1;
 8007a20:	2301      	movs	r3, #1
 8007a22:	e0c8      	b.n	8007bb6 <canopen_app_resetCommunication+0x1f2>
    }

    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8007a24:	4b6b      	ldr	r3, [pc, #428]	; (8007bd4 <canopen_app_resetCommunication+0x210>)
 8007a26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a28:	60bb      	str	r3, [r7, #8]
                                                .productCode = OD_PERSIST_COMM.x1018_identity.productCode,
 8007a2a:	4b6a      	ldr	r3, [pc, #424]	; (8007bd4 <canopen_app_resetCommunication+0x210>)
 8007a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8007a2e:	60fb      	str	r3, [r7, #12]
                                                .revisionNumber = OD_PERSIST_COMM.x1018_identity.revisionNumber,
 8007a30:	4b68      	ldr	r3, [pc, #416]	; (8007bd4 <canopen_app_resetCommunication+0x210>)
 8007a32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8007a34:	613b      	str	r3, [r7, #16]
                                                .serialNumber = OD_PERSIST_COMM.x1018_identity.serialNumber}};
 8007a36:	4b67      	ldr	r3, [pc, #412]	; (8007bd4 <canopen_app_resetCommunication+0x210>)
 8007a38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    CO_LSS_address_t lssAddress = {.identity = {.vendorID = OD_PERSIST_COMM.x1018_identity.vendor_ID,
 8007a3a:	617b      	str	r3, [r7, #20]
    err = CO_LSSinit(CO, &lssAddress, &canopenNodeSTM32->desiredNodeID, &canopenNodeSTM32->baudrate);
 8007a3c:	4b61      	ldr	r3, [pc, #388]	; (8007bc4 <canopen_app_resetCommunication+0x200>)
 8007a3e:	6818      	ldr	r0, [r3, #0]
 8007a40:	4b61      	ldr	r3, [pc, #388]	; (8007bc8 <canopen_app_resetCommunication+0x204>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	461a      	mov	r2, r3
 8007a46:	4b60      	ldr	r3, [pc, #384]	; (8007bc8 <canopen_app_resetCommunication+0x204>)
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	3302      	adds	r3, #2
 8007a4c:	f107 0108 	add.w	r1, r7, #8
 8007a50:	f7ff fb43 	bl	80070da <CO_LSSinit>
 8007a54:	4603      	mov	r3, r0
 8007a56:	461a      	mov	r2, r3
 8007a58:	4b5c      	ldr	r3, [pc, #368]	; (8007bcc <canopen_app_resetCommunication+0x208>)
 8007a5a:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 8007a5c:	4b5b      	ldr	r3, [pc, #364]	; (8007bcc <canopen_app_resetCommunication+0x208>)
 8007a5e:	f993 3000 	ldrsb.w	r3, [r3]
 8007a62:	2b00      	cmp	r3, #0
 8007a64:	d008      	beq.n	8007a78 <canopen_app_resetCommunication+0xb4>
        log_printf("Error: LSS slave initialization failed: %d\n", err);
 8007a66:	4b59      	ldr	r3, [pc, #356]	; (8007bcc <canopen_app_resetCommunication+0x208>)
 8007a68:	f993 3000 	ldrsb.w	r3, [r3]
 8007a6c:	4619      	mov	r1, r3
 8007a6e:	485a      	ldr	r0, [pc, #360]	; (8007bd8 <canopen_app_resetCommunication+0x214>)
 8007a70:	f00c fc2c 	bl	80142cc <iprintf>
        return 2;
 8007a74:	2302      	movs	r3, #2
 8007a76:	e09e      	b.n	8007bb6 <canopen_app_resetCommunication+0x1f2>
    }

    canopenNodeSTM32->activeNodeID = canopenNodeSTM32->desiredNodeID;
 8007a78:	4b53      	ldr	r3, [pc, #332]	; (8007bc8 <canopen_app_resetCommunication+0x204>)
 8007a7a:	681a      	ldr	r2, [r3, #0]
 8007a7c:	4b52      	ldr	r3, [pc, #328]	; (8007bc8 <canopen_app_resetCommunication+0x204>)
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	7812      	ldrb	r2, [r2, #0]
 8007a82:	705a      	strb	r2, [r3, #1]
    uint32_t errInfo = 0;
 8007a84:	2300      	movs	r3, #0
 8007a86:	607b      	str	r3, [r7, #4]

    err = CO_CANopenInit(CO,                   /* CANopen object */
 8007a88:	4b4e      	ldr	r3, [pc, #312]	; (8007bc4 <canopen_app_resetCommunication+0x200>)
 8007a8a:	6818      	ldr	r0, [r3, #0]
 8007a8c:	4b53      	ldr	r3, [pc, #332]	; (8007bdc <canopen_app_resetCommunication+0x218>)
 8007a8e:	6819      	ldr	r1, [r3, #0]
                         NMT_CONTROL,          /* CO_NMT_control_t */
                         FIRST_HB_TIME,        /* firstHBTime_ms */
                         SDO_SRV_TIMEOUT_TIME, /* SDOserverTimeoutTime_ms */
                         SDO_CLI_TIMEOUT_TIME, /* SDOclientTimeoutTime_ms */
                         SDO_CLI_BLOCK,        /* SDOclientBlockTransfer */
                         canopenNodeSTM32->activeNodeID, &errInfo);
 8007a90:	4b4d      	ldr	r3, [pc, #308]	; (8007bc8 <canopen_app_resetCommunication+0x204>)
 8007a92:	681b      	ldr	r3, [r3, #0]
    err = CO_CANopenInit(CO,                   /* CANopen object */
 8007a94:	785b      	ldrb	r3, [r3, #1]
 8007a96:	1d3a      	adds	r2, r7, #4
 8007a98:	9207      	str	r2, [sp, #28]
 8007a9a:	9306      	str	r3, [sp, #24]
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	9305      	str	r3, [sp, #20]
 8007aa0:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007aa4:	9304      	str	r3, [sp, #16]
 8007aa6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007aaa:	9303      	str	r3, [sp, #12]
 8007aac:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8007ab0:	9302      	str	r3, [sp, #8]
 8007ab2:	f242 1311 	movw	r3, #8465	; 0x2111
 8007ab6:	9301      	str	r3, [sp, #4]
 8007ab8:	2300      	movs	r3, #0
 8007aba:	9300      	str	r3, [sp, #0]
 8007abc:	460b      	mov	r3, r1
 8007abe:	2200      	movs	r2, #0
 8007ac0:	2100      	movs	r1, #0
 8007ac2:	f7ff fb37 	bl	8007134 <CO_CANopenInit>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	461a      	mov	r2, r3
 8007aca:	4b40      	ldr	r3, [pc, #256]	; (8007bcc <canopen_app_resetCommunication+0x208>)
 8007acc:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO && err != CO_ERROR_NODE_ID_UNCONFIGURED_LSS) {
 8007ace:	4b3f      	ldr	r3, [pc, #252]	; (8007bcc <canopen_app_resetCommunication+0x208>)
 8007ad0:	f993 3000 	ldrsb.w	r3, [r3]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d01a      	beq.n	8007b0e <canopen_app_resetCommunication+0x14a>
 8007ad8:	4b3c      	ldr	r3, [pc, #240]	; (8007bcc <canopen_app_resetCommunication+0x208>)
 8007ada:	f993 3000 	ldrsb.w	r3, [r3]
 8007ade:	f113 0f13 	cmn.w	r3, #19
 8007ae2:	d014      	beq.n	8007b0e <canopen_app_resetCommunication+0x14a>
        if (err == CO_ERROR_OD_PARAMETERS) {
 8007ae4:	4b39      	ldr	r3, [pc, #228]	; (8007bcc <canopen_app_resetCommunication+0x208>)
 8007ae6:	f993 3000 	ldrsb.w	r3, [r3]
 8007aea:	f113 0f0c 	cmn.w	r3, #12
 8007aee:	d105      	bne.n	8007afc <canopen_app_resetCommunication+0x138>
            log_printf("Error: Object Dictionary entry 0x%X\n", errInfo);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	4619      	mov	r1, r3
 8007af4:	483a      	ldr	r0, [pc, #232]	; (8007be0 <canopen_app_resetCommunication+0x21c>)
 8007af6:	f00c fbe9 	bl	80142cc <iprintf>
 8007afa:	e006      	b.n	8007b0a <canopen_app_resetCommunication+0x146>
        } else {
            log_printf("Error: CANopen initialization failed: %d\n", err);
 8007afc:	4b33      	ldr	r3, [pc, #204]	; (8007bcc <canopen_app_resetCommunication+0x208>)
 8007afe:	f993 3000 	ldrsb.w	r3, [r3]
 8007b02:	4619      	mov	r1, r3
 8007b04:	4837      	ldr	r0, [pc, #220]	; (8007be4 <canopen_app_resetCommunication+0x220>)
 8007b06:	f00c fbe1 	bl	80142cc <iprintf>
        }
        return 3;
 8007b0a:	2303      	movs	r3, #3
 8007b0c:	e053      	b.n	8007bb6 <canopen_app_resetCommunication+0x1f2>
    }

    err = CO_CANopenInitPDO(CO, CO->em, OD, canopenNodeSTM32->activeNodeID, &errInfo);
 8007b0e:	4b2d      	ldr	r3, [pc, #180]	; (8007bc4 <canopen_app_resetCommunication+0x200>)
 8007b10:	6818      	ldr	r0, [r3, #0]
 8007b12:	4b2c      	ldr	r3, [pc, #176]	; (8007bc4 <canopen_app_resetCommunication+0x200>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	69d9      	ldr	r1, [r3, #28]
 8007b18:	4b30      	ldr	r3, [pc, #192]	; (8007bdc <canopen_app_resetCommunication+0x218>)
 8007b1a:	681a      	ldr	r2, [r3, #0]
 8007b1c:	4b2a      	ldr	r3, [pc, #168]	; (8007bc8 <canopen_app_resetCommunication+0x204>)
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	785c      	ldrb	r4, [r3, #1]
 8007b22:	1d3b      	adds	r3, r7, #4
 8007b24:	9300      	str	r3, [sp, #0]
 8007b26:	4623      	mov	r3, r4
 8007b28:	f7ff fc96 	bl	8007458 <CO_CANopenInitPDO>
 8007b2c:	4603      	mov	r3, r0
 8007b2e:	461a      	mov	r2, r3
 8007b30:	4b26      	ldr	r3, [pc, #152]	; (8007bcc <canopen_app_resetCommunication+0x208>)
 8007b32:	701a      	strb	r2, [r3, #0]
    if (err != CO_ERROR_NO) {
 8007b34:	4b25      	ldr	r3, [pc, #148]	; (8007bcc <canopen_app_resetCommunication+0x208>)
 8007b36:	f993 3000 	ldrsb.w	r3, [r3]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d014      	beq.n	8007b68 <canopen_app_resetCommunication+0x1a4>
        if (err == CO_ERROR_OD_PARAMETERS) {
 8007b3e:	4b23      	ldr	r3, [pc, #140]	; (8007bcc <canopen_app_resetCommunication+0x208>)
 8007b40:	f993 3000 	ldrsb.w	r3, [r3]
 8007b44:	f113 0f0c 	cmn.w	r3, #12
 8007b48:	d105      	bne.n	8007b56 <canopen_app_resetCommunication+0x192>
            log_printf("Error: Object Dictionary entry 0x%X\n", errInfo);
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	4619      	mov	r1, r3
 8007b4e:	4824      	ldr	r0, [pc, #144]	; (8007be0 <canopen_app_resetCommunication+0x21c>)
 8007b50:	f00c fbbc 	bl	80142cc <iprintf>
 8007b54:	e006      	b.n	8007b64 <canopen_app_resetCommunication+0x1a0>
        } else {
            log_printf("Error: PDO initialization failed: %d\n", err);
 8007b56:	4b1d      	ldr	r3, [pc, #116]	; (8007bcc <canopen_app_resetCommunication+0x208>)
 8007b58:	f993 3000 	ldrsb.w	r3, [r3]
 8007b5c:	4619      	mov	r1, r3
 8007b5e:	4822      	ldr	r0, [pc, #136]	; (8007be8 <canopen_app_resetCommunication+0x224>)
 8007b60:	f00c fbb4 	bl	80142cc <iprintf>
        }
        return 4;
 8007b64:	2304      	movs	r3, #4
 8007b66:	e026      	b.n	8007bb6 <canopen_app_resetCommunication+0x1f2>
    }

    /* Configure Timer interrupt function for execution every 1 millisecond */
    HAL_TIM_Base_Start_IT(canopenNodeSTM32->timerHandle); //1ms interrupt
 8007b68:	4b17      	ldr	r3, [pc, #92]	; (8007bc8 <canopen_app_resetCommunication+0x204>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	4618      	mov	r0, r3
 8007b70:	f006 feb8 	bl	800e8e4 <HAL_TIM_Base_Start_IT>

    /* Configure CAN transmit and receive interrupt */

    /* Configure CANopen callbacks, etc */
    if (!CO->nodeIdUnconfigured) {
 8007b74:	4b13      	ldr	r3, [pc, #76]	; (8007bc4 <canopen_app_resetCommunication+0x200>)
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d002      	beq.n	8007b84 <canopen_app_resetCommunication+0x1c0>
        if (storageInitError != 0) {
            CO_errorReport(CO->em, CO_EM_NON_VOLATILE_MEMORY, CO_EMC_HARDWARE, storageInitError);
        }
#endif
    } else {
        log_printf("CANopenNode - Node-id not initialized\n");
 8007b7e:	481b      	ldr	r0, [pc, #108]	; (8007bec <canopen_app_resetCommunication+0x228>)
 8007b80:	f00c fc2a 	bl	80143d8 <puts>
    }

    /* start CAN */
    CO_CANsetNormalMode(CO->CANmodule);
 8007b84:	4b0f      	ldr	r3, [pc, #60]	; (8007bc4 <canopen_app_resetCommunication+0x200>)
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	4618      	mov	r0, r3
 8007b8c:	f000 f8f6 	bl	8007d7c <CO_CANsetNormalMode>

    log_printf("CANopenNode - Running...\n");
 8007b90:	4817      	ldr	r0, [pc, #92]	; (8007bf0 <canopen_app_resetCommunication+0x22c>)
 8007b92:	f00c fc21 	bl	80143d8 <puts>
    fflush(stdout);
 8007b96:	4b17      	ldr	r3, [pc, #92]	; (8007bf4 <canopen_app_resetCommunication+0x230>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	689b      	ldr	r3, [r3, #8]
 8007b9c:	4618      	mov	r0, r3
 8007b9e:	f00c f92f 	bl	8013e00 <fflush>
    time_old = time_current = HAL_GetTick();
 8007ba2:	f001 fa2d 	bl	8009000 <HAL_GetTick>
 8007ba6:	4603      	mov	r3, r0
 8007ba8:	4a13      	ldr	r2, [pc, #76]	; (8007bf8 <canopen_app_resetCommunication+0x234>)
 8007baa:	6013      	str	r3, [r2, #0]
 8007bac:	4b12      	ldr	r3, [pc, #72]	; (8007bf8 <canopen_app_resetCommunication+0x234>)
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4a12      	ldr	r2, [pc, #72]	; (8007bfc <canopen_app_resetCommunication+0x238>)
 8007bb2:	6013      	str	r3, [r2, #0]
    return 0;
 8007bb4:	2300      	movs	r3, #0
}
 8007bb6:	4618      	mov	r0, r3
 8007bb8:	371c      	adds	r7, #28
 8007bba:	46bd      	mov	sp, r7
 8007bbc:	bd90      	pop	{r4, r7, pc}
 8007bbe:	bf00      	nop
 8007bc0:	08015430 	.word	0x08015430
 8007bc4:	24000554 	.word	0x24000554
 8007bc8:	24000550 	.word	0x24000550
 8007bcc:	24000560 	.word	0x24000560
 8007bd0:	08015458 	.word	0x08015458
 8007bd4:	24000000 	.word	0x24000000
 8007bd8:	08015480 	.word	0x08015480
 8007bdc:	240003cc 	.word	0x240003cc
 8007be0:	080154ac 	.word	0x080154ac
 8007be4:	080154d4 	.word	0x080154d4
 8007be8:	08015500 	.word	0x08015500
 8007bec:	08015528 	.word	0x08015528
 8007bf0:	08015550 	.word	0x08015550
 8007bf4:	240004d0 	.word	0x240004d0
 8007bf8:	2400055c 	.word	0x2400055c
 8007bfc:	24000558 	.word	0x24000558

08007c00 <canopen_app_process>:

void
canopen_app_process() {
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
    /* loop for normal program execution ******************************************/
    /* get time difference since last function call */
    time_current = HAL_GetTick();
 8007c06:	f001 f9fb 	bl	8009000 <HAL_GetTick>
 8007c0a:	4603      	mov	r3, r0
 8007c0c:	4a2c      	ldr	r2, [pc, #176]	; (8007cc0 <canopen_app_process+0xc0>)
 8007c0e:	6013      	str	r3, [r2, #0]

    if ((time_current - time_old) > 0) { // Make sure more than 1ms elapsed
 8007c10:	4b2b      	ldr	r3, [pc, #172]	; (8007cc0 <canopen_app_process+0xc0>)
 8007c12:	681a      	ldr	r2, [r3, #0]
 8007c14:	4b2b      	ldr	r3, [pc, #172]	; (8007cc4 <canopen_app_process+0xc4>)
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d04c      	beq.n	8007cb6 <canopen_app_process+0xb6>
        /* CANopen process */
        CO_NMT_reset_cmd_t reset_status;
        uint32_t timeDifference_us = (time_current - time_old) * 1000;
 8007c1c:	4b28      	ldr	r3, [pc, #160]	; (8007cc0 <canopen_app_process+0xc0>)
 8007c1e:	681a      	ldr	r2, [r3, #0]
 8007c20:	4b28      	ldr	r3, [pc, #160]	; (8007cc4 <canopen_app_process+0xc4>)
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	1ad3      	subs	r3, r2, r3
 8007c26:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8007c2a:	fb02 f303 	mul.w	r3, r2, r3
 8007c2e:	607b      	str	r3, [r7, #4]
        time_old = time_current;
 8007c30:	4b23      	ldr	r3, [pc, #140]	; (8007cc0 <canopen_app_process+0xc0>)
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	4a23      	ldr	r2, [pc, #140]	; (8007cc4 <canopen_app_process+0xc4>)
 8007c36:	6013      	str	r3, [r2, #0]
        reset_status = CO_process(CO, false, timeDifference_us, NULL);
 8007c38:	4b23      	ldr	r3, [pc, #140]	; (8007cc8 <canopen_app_process+0xc8>)
 8007c3a:	6818      	ldr	r0, [r3, #0]
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	2100      	movs	r1, #0
 8007c42:	f7ff fce1 	bl	8007608 <CO_process>
 8007c46:	4603      	mov	r3, r0
 8007c48:	70fb      	strb	r3, [r7, #3]
        canopenNodeSTM32->outStatusLEDRed = CO_LED_RED(CO->LEDs, CO_LED_CANopen);
 8007c4a:	4b1f      	ldr	r3, [pc, #124]	; (8007cc8 <canopen_app_process+0xc8>)
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c50:	7a5a      	ldrb	r2, [r3, #9]
 8007c52:	4b1e      	ldr	r3, [pc, #120]	; (8007ccc <canopen_app_process+0xcc>)
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	09d2      	lsrs	r2, r2, #7
 8007c58:	b2d2      	uxtb	r2, r2
 8007c5a:	745a      	strb	r2, [r3, #17]
        canopenNodeSTM32->outStatusLEDGreen = CO_LED_GREEN(CO->LEDs, CO_LED_CANopen);
 8007c5c:	4b1a      	ldr	r3, [pc, #104]	; (8007cc8 <canopen_app_process+0xc8>)
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007c62:	7a9a      	ldrb	r2, [r3, #10]
 8007c64:	4b19      	ldr	r3, [pc, #100]	; (8007ccc <canopen_app_process+0xcc>)
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	09d2      	lsrs	r2, r2, #7
 8007c6a:	b2d2      	uxtb	r2, r2
 8007c6c:	741a      	strb	r2, [r3, #16]

        if (reset_status == CO_RESET_COMM) {
 8007c6e:	78fb      	ldrb	r3, [r7, #3]
 8007c70:	2b01      	cmp	r3, #1
 8007c72:	d118      	bne.n	8007ca6 <canopen_app_process+0xa6>
            /* delete objects from memory */
        	HAL_TIM_Base_Stop_IT(canopenNodeSTM32->timerHandle);
 8007c74:	4b15      	ldr	r3, [pc, #84]	; (8007ccc <canopen_app_process+0xcc>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	4618      	mov	r0, r3
 8007c7c:	f006 feaa 	bl	800e9d4 <HAL_TIM_Base_Stop_IT>
            CO_CANsetConfigurationMode((void*)canopenNodeSTM32);
 8007c80:	4b12      	ldr	r3, [pc, #72]	; (8007ccc <canopen_app_process+0xcc>)
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	4618      	mov	r0, r3
 8007c86:	f000 f869 	bl	8007d5c <CO_CANsetConfigurationMode>
            CO_delete(CO);
 8007c8a:	4b0f      	ldr	r3, [pc, #60]	; (8007cc8 <canopen_app_process+0xc8>)
 8007c8c:	681b      	ldr	r3, [r3, #0]
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f7ff f993 	bl	8006fba <CO_delete>
            log_printf("CANopenNode Reset Communication request\n");
 8007c94:	480e      	ldr	r0, [pc, #56]	; (8007cd0 <canopen_app_process+0xd0>)
 8007c96:	f00c fb9f 	bl	80143d8 <puts>
            canopen_app_init(canopenNodeSTM32); // Reset Communication routine
 8007c9a:	4b0c      	ldr	r3, [pc, #48]	; (8007ccc <canopen_app_process+0xcc>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4618      	mov	r0, r3
 8007ca0:	f7ff fe5c 	bl	800795c <canopen_app_init>
        } else if (reset_status == CO_RESET_APP) {
            log_printf("CANopenNode Device Reset\n");
            HAL_NVIC_SystemReset(); // Reset the STM32 Microcontroller
        }
    }
}
 8007ca4:	e007      	b.n	8007cb6 <canopen_app_process+0xb6>
        } else if (reset_status == CO_RESET_APP) {
 8007ca6:	78fb      	ldrb	r3, [r7, #3]
 8007ca8:	2b02      	cmp	r3, #2
 8007caa:	d104      	bne.n	8007cb6 <canopen_app_process+0xb6>
            log_printf("CANopenNode Device Reset\n");
 8007cac:	4809      	ldr	r0, [pc, #36]	; (8007cd4 <canopen_app_process+0xd4>)
 8007cae:	f00c fb93 	bl	80143d8 <puts>
            HAL_NVIC_SystemReset(); // Reset the STM32 Microcontroller
 8007cb2:	f001 fafa 	bl	80092aa <HAL_NVIC_SystemReset>
}
 8007cb6:	bf00      	nop
 8007cb8:	3708      	adds	r7, #8
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	2400055c 	.word	0x2400055c
 8007cc4:	24000558 	.word	0x24000558
 8007cc8:	24000554 	.word	0x24000554
 8007ccc:	24000550 	.word	0x24000550
 8007cd0:	0801556c 	.word	0x0801556c
 8007cd4:	08015594 	.word	0x08015594

08007cd8 <canopen_app_interrupt>:

/* Thread function executes in constant intervals, this function can be called from FreeRTOS tasks or Timers ********/
void
canopen_app_interrupt(void) {
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b084      	sub	sp, #16
 8007cdc:	af00      	add	r7, sp, #0
    CO_LOCK_OD(CO->CANmodule);
 8007cde:	4b1e      	ldr	r3, [pc, #120]	; (8007d58 <canopen_app_interrupt+0x80>)
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	685b      	ldr	r3, [r3, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ce4:	f3ef 8210 	mrs	r2, PRIMASK
 8007ce8:	607a      	str	r2, [r7, #4]
  return(result);
 8007cea:	687a      	ldr	r2, [r7, #4]
 8007cec:	635a      	str	r2, [r3, #52]	; 0x34
  __ASM volatile ("cpsid i" : : : "memory");
 8007cee:	b672      	cpsid	i
}
 8007cf0:	bf00      	nop
    if (!CO->nodeIdUnconfigured && CO->CANmodule->CANnormal) {
 8007cf2:	4b19      	ldr	r3, [pc, #100]	; (8007d58 <canopen_app_interrupt+0x80>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d120      	bne.n	8007d3e <canopen_app_interrupt+0x66>
 8007cfc:	4b16      	ldr	r3, [pc, #88]	; (8007d58 <canopen_app_interrupt+0x80>)
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	695b      	ldr	r3, [r3, #20]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d01a      	beq.n	8007d3e <canopen_app_interrupt+0x66>
        bool_t syncWas = false;
 8007d08:	2300      	movs	r3, #0
 8007d0a:	60fb      	str	r3, [r7, #12]
        /* get time difference since last function call */
        uint32_t timeDifference_us = 1000; // 1ms second
 8007d0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007d10:	60bb      	str	r3, [r7, #8]

#if (CO_CONFIG_SYNC) & CO_CONFIG_SYNC_ENABLE
        syncWas = CO_process_SYNC(CO, timeDifference_us, NULL);
 8007d12:	4b11      	ldr	r3, [pc, #68]	; (8007d58 <canopen_app_interrupt+0x80>)
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	2200      	movs	r2, #0
 8007d18:	68b9      	ldr	r1, [r7, #8]
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	f7ff fd69 	bl	80077f2 <CO_process_SYNC>
 8007d20:	60f8      	str	r0, [r7, #12]
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_RPDO_ENABLE
        CO_process_RPDO(CO, syncWas, timeDifference_us, NULL);
 8007d22:	4b0d      	ldr	r3, [pc, #52]	; (8007d58 <canopen_app_interrupt+0x80>)
 8007d24:	6818      	ldr	r0, [r3, #0]
 8007d26:	2300      	movs	r3, #0
 8007d28:	68ba      	ldr	r2, [r7, #8]
 8007d2a:	68f9      	ldr	r1, [r7, #12]
 8007d2c:	f7ff fda3 	bl	8007876 <CO_process_RPDO>
#endif
#if (CO_CONFIG_PDO) & CO_CONFIG_TPDO_ENABLE
        CO_process_TPDO(CO, syncWas, timeDifference_us, NULL);
 8007d30:	4b09      	ldr	r3, [pc, #36]	; (8007d58 <canopen_app_interrupt+0x80>)
 8007d32:	6818      	ldr	r0, [r3, #0]
 8007d34:	2300      	movs	r3, #0
 8007d36:	68ba      	ldr	r2, [r7, #8]
 8007d38:	68f9      	ldr	r1, [r7, #12]
 8007d3a:	f7ff fdd5 	bl	80078e8 <CO_process_TPDO>
#endif

        /* Further I/O or nonblocking application code may go here. */
    }
    CO_UNLOCK_OD(CO->CANmodule);
 8007d3e:	4b06      	ldr	r3, [pc, #24]	; (8007d58 <canopen_app_interrupt+0x80>)
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	685b      	ldr	r3, [r3, #4]
 8007d44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007d46:	603b      	str	r3, [r7, #0]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d48:	683b      	ldr	r3, [r7, #0]
 8007d4a:	f383 8810 	msr	PRIMASK, r3
}
 8007d4e:	bf00      	nop
}
 8007d50:	bf00      	nop
 8007d52:	3710      	adds	r7, #16
 8007d54:	46bd      	mov	sp, r7
 8007d56:	bd80      	pop	{r7, pc}
 8007d58:	24000554 	.word	0x24000554

08007d5c <CO_CANsetConfigurationMode>:
#define CANID_MASK 0x07FF /*!< CAN standard ID mask */
#define FLAG_RTR   0x8000 /*!< RTR flag, part of identifier */

/******************************************************************************/
void
CO_CANsetConfigurationMode(void* CANptr) {
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
    /* Put CAN module in configuration mode */
    if (CANptr != NULL) {
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d004      	beq.n	8007d74 <CO_CANsetConfigurationMode+0x18>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f001 fd58 	bl	8009824 <HAL_FDCAN_Stop>
#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANptr)->CANHandle);
#endif
    }
}
 8007d74:	bf00      	nop
 8007d76:	3708      	adds	r7, #8
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	bd80      	pop	{r7, pc}

08007d7c <CO_CANsetNormalMode>:

/******************************************************************************/
void
CO_CANsetNormalMode(CO_CANmodule_t* CANmodule) {
 8007d7c:	b580      	push	{r7, lr}
 8007d7e:	b082      	sub	sp, #8
 8007d80:	af00      	add	r7, sp, #0
 8007d82:	6078      	str	r0, [r7, #4]
    /* Put CAN module in normal mode */
    if (CANmodule->CANptr != NULL) {
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d00b      	beq.n	8007da4 <CO_CANsetNormalMode+0x28>
#ifdef CO_STM32_FDCAN_Driver
        if (HAL_FDCAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	689b      	ldr	r3, [r3, #8]
 8007d92:	4618      	mov	r0, r3
 8007d94:	f001 fd1b 	bl	80097ce <HAL_FDCAN_Start>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d102      	bne.n	8007da4 <CO_CANsetNormalMode+0x28>
#else
        if (HAL_CAN_Start(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) == HAL_OK)
#endif
        {
            CANmodule->CANnormal = true;
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	2201      	movs	r2, #1
 8007da2:	615a      	str	r2, [r3, #20]
        }
    }
}
 8007da4:	bf00      	nop
 8007da6:	3708      	adds	r7, #8
 8007da8:	46bd      	mov	sp, r7
 8007daa:	bd80      	pop	{r7, pc}

08007dac <CO_CANmodule_init>:

/******************************************************************************/
CO_ReturnError_t
CO_CANmodule_init(CO_CANmodule_t* CANmodule, void* CANptr, CO_CANrx_t rxArray[], uint16_t rxSize, CO_CANtx_t txArray[],
                  uint16_t txSize, uint16_t CANbitRate) {
 8007dac:	b580      	push	{r7, lr}
 8007dae:	b088      	sub	sp, #32
 8007db0:	af02      	add	r7, sp, #8
 8007db2:	60f8      	str	r0, [r7, #12]
 8007db4:	60b9      	str	r1, [r7, #8]
 8007db6:	607a      	str	r2, [r7, #4]
 8007db8:	807b      	strh	r3, [r7, #2]

    /* verify arguments */
    if (CANmodule == NULL || rxArray == NULL || txArray == NULL) {
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d005      	beq.n	8007dcc <CO_CANmodule_init+0x20>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d002      	beq.n	8007dcc <CO_CANmodule_init+0x20>
 8007dc6:	6a3b      	ldr	r3, [r7, #32]
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d102      	bne.n	8007dd2 <CO_CANmodule_init+0x26>
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8007dcc:	f04f 33ff 	mov.w	r3, #4294967295
 8007dd0:	e08e      	b.n	8007ef0 <CO_CANmodule_init+0x144>
    }

    /* Hold CANModule variable */
    CANmodule->CANptr = CANptr;
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	68ba      	ldr	r2, [r7, #8]
 8007dd6:	601a      	str	r2, [r3, #0]

    /* Keep a local copy of CANModule */
    CANModule_local = CANmodule;
 8007dd8:	4a47      	ldr	r2, [pc, #284]	; (8007ef8 <CO_CANmodule_init+0x14c>)
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	6013      	str	r3, [r2, #0]

    /* Configure object variables */
    CANmodule->rxArray = rxArray;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	687a      	ldr	r2, [r7, #4]
 8007de2:	605a      	str	r2, [r3, #4]
    CANmodule->rxSize = rxSize;
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	887a      	ldrh	r2, [r7, #2]
 8007de8:	811a      	strh	r2, [r3, #8]
    CANmodule->txArray = txArray;
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	6a3a      	ldr	r2, [r7, #32]
 8007dee:	60da      	str	r2, [r3, #12]
    CANmodule->txSize = txSize;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007df4:	821a      	strh	r2, [r3, #16]
    CANmodule->CANerrorStatus = 0;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	2200      	movs	r2, #0
 8007dfa:	825a      	strh	r2, [r3, #18]
    CANmodule->CANnormal = false;
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	2200      	movs	r2, #0
 8007e00:	615a      	str	r2, [r3, #20]
    CANmodule->useCANrxFilters = false; /* Do not use HW filters */
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	2200      	movs	r2, #0
 8007e06:	619a      	str	r2, [r3, #24]
    CANmodule->bufferInhibitFlag = false;
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	61da      	str	r2, [r3, #28]
    CANmodule->firstCANtxMessage = true;
 8007e0e:	68fb      	ldr	r3, [r7, #12]
 8007e10:	2201      	movs	r2, #1
 8007e12:	621a      	str	r2, [r3, #32]
    CANmodule->CANtxCount = 0U;
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	2200      	movs	r2, #0
 8007e18:	849a      	strh	r2, [r3, #36]	; 0x24
    CANmodule->errOld = 0U;
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	2200      	movs	r2, #0
 8007e1e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset all variables */
    for (uint16_t i = 0U; i < rxSize; i++) {
 8007e20:	2300      	movs	r3, #0
 8007e22:	82fb      	strh	r3, [r7, #22]
 8007e24:	e02b      	b.n	8007e7e <CO_CANmodule_init+0xd2>
        rxArray[i].ident = 0U;
 8007e26:	8afa      	ldrh	r2, [r7, #22]
 8007e28:	4613      	mov	r3, r2
 8007e2a:	005b      	lsls	r3, r3, #1
 8007e2c:	4413      	add	r3, r2
 8007e2e:	009b      	lsls	r3, r3, #2
 8007e30:	461a      	mov	r2, r3
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	4413      	add	r3, r2
 8007e36:	2200      	movs	r2, #0
 8007e38:	801a      	strh	r2, [r3, #0]
        rxArray[i].mask = 0xFFFFU;
 8007e3a:	8afa      	ldrh	r2, [r7, #22]
 8007e3c:	4613      	mov	r3, r2
 8007e3e:	005b      	lsls	r3, r3, #1
 8007e40:	4413      	add	r3, r2
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	461a      	mov	r2, r3
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	4413      	add	r3, r2
 8007e4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007e4e:	805a      	strh	r2, [r3, #2]
        rxArray[i].object = NULL;
 8007e50:	8afa      	ldrh	r2, [r7, #22]
 8007e52:	4613      	mov	r3, r2
 8007e54:	005b      	lsls	r3, r3, #1
 8007e56:	4413      	add	r3, r2
 8007e58:	009b      	lsls	r3, r3, #2
 8007e5a:	461a      	mov	r2, r3
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	4413      	add	r3, r2
 8007e60:	2200      	movs	r2, #0
 8007e62:	605a      	str	r2, [r3, #4]
        rxArray[i].CANrx_callback = NULL;
 8007e64:	8afa      	ldrh	r2, [r7, #22]
 8007e66:	4613      	mov	r3, r2
 8007e68:	005b      	lsls	r3, r3, #1
 8007e6a:	4413      	add	r3, r2
 8007e6c:	009b      	lsls	r3, r3, #2
 8007e6e:	461a      	mov	r2, r3
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	4413      	add	r3, r2
 8007e74:	2200      	movs	r2, #0
 8007e76:	609a      	str	r2, [r3, #8]
    for (uint16_t i = 0U; i < rxSize; i++) {
 8007e78:	8afb      	ldrh	r3, [r7, #22]
 8007e7a:	3301      	adds	r3, #1
 8007e7c:	82fb      	strh	r3, [r7, #22]
 8007e7e:	8afa      	ldrh	r2, [r7, #22]
 8007e80:	887b      	ldrh	r3, [r7, #2]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d3cf      	bcc.n	8007e26 <CO_CANmodule_init+0x7a>
    }
    for (uint16_t i = 0U; i < txSize; i++) {
 8007e86:	2300      	movs	r3, #0
 8007e88:	82bb      	strh	r3, [r7, #20]
 8007e8a:	e00c      	b.n	8007ea6 <CO_CANmodule_init+0xfa>
        txArray[i].bufferFull = false;
 8007e8c:	8aba      	ldrh	r2, [r7, #20]
 8007e8e:	4613      	mov	r3, r2
 8007e90:	005b      	lsls	r3, r3, #1
 8007e92:	4413      	add	r3, r2
 8007e94:	00db      	lsls	r3, r3, #3
 8007e96:	461a      	mov	r2, r3
 8007e98:	6a3b      	ldr	r3, [r7, #32]
 8007e9a:	4413      	add	r3, r2
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	611a      	str	r2, [r3, #16]
    for (uint16_t i = 0U; i < txSize; i++) {
 8007ea0:	8abb      	ldrh	r3, [r7, #20]
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	82bb      	strh	r3, [r7, #20]
 8007ea6:	8aba      	ldrh	r2, [r7, #20]
 8007ea8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d3ee      	bcc.n	8007e8c <CO_CANmodule_init+0xe0>
    }

    /***************************************/
    /* STM32 related configuration */
    /***************************************/
    ((CANopenNodeSTM32*)CANptr)->HWInitFunction();
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	68db      	ldr	r3, [r3, #12]
 8007eb2:	4798      	blx	r3
     * Accept non-matching standard ID messages
     * Reject non-matching extended ID messages
     */

#ifdef CO_STM32_FDCAN_Driver
    if (HAL_FDCAN_ConfigGlobalFilter(((CANopenNodeSTM32*)CANptr)->CANHandle, FDCAN_ACCEPT_IN_RX_FIFO0, FDCAN_REJECT,
 8007eb4:	68bb      	ldr	r3, [r7, #8]
 8007eb6:	6898      	ldr	r0, [r3, #8]
 8007eb8:	2300      	movs	r3, #0
 8007eba:	9300      	str	r3, [sp, #0]
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	2202      	movs	r2, #2
 8007ec0:	2100      	movs	r1, #0
 8007ec2:	f001 fc57 	bl	8009774 <HAL_FDCAN_ConfigGlobalFilter>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d002      	beq.n	8007ed2 <CO_CANmodule_init+0x126>
                                     FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8007ecc:	f04f 33ff 	mov.w	r3, #4294967295
 8007ed0:	e00e      	b.n	8007ef0 <CO_CANmodule_init+0x144>
    }
#endif
    /* Enable notifications */
    /* Activate the CAN notification interrupts */
#ifdef CO_STM32_FDCAN_Driver
    if (HAL_FDCAN_ActivateNotification(((CANopenNodeSTM32*)CANptr)->CANHandle,
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	f04f 32ff 	mov.w	r2, #4294967295
 8007eda:	4908      	ldr	r1, [pc, #32]	; (8007efc <CO_CANmodule_init+0x150>)
 8007edc:	4618      	mov	r0, r3
 8007ede:	f001 fef3 	bl	8009cc8 <HAL_FDCAN_ActivateNotification>
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2b00      	cmp	r3, #0
 8007ee6:	d002      	beq.n	8007eee <CO_CANmodule_init+0x142>
                                           | FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_FIFO_EMPTY | FDCAN_IT_BUS_OFF
                                           | FDCAN_IT_ARB_PROTOCOL_ERROR | FDCAN_IT_DATA_PROTOCOL_ERROR
                                           | FDCAN_IT_ERROR_PASSIVE | FDCAN_IT_ERROR_WARNING,
                                       0xFFFFFFFF)
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
 8007ee8:	f04f 33ff 	mov.w	r3, #4294967295
 8007eec:	e000      	b.n	8007ef0 <CO_CANmodule_init+0x144>
        != HAL_OK) {
        return CO_ERROR_ILLEGAL_ARGUMENT;
    }
#endif

    return CO_ERROR_NO;
 8007eee:	2300      	movs	r3, #0
}
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	3718      	adds	r7, #24
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	24000564 	.word	0x24000564
 8007efc:	1b800a11 	.word	0x1b800a11

08007f00 <CO_CANmodule_disable>:

/******************************************************************************/
void
CO_CANmodule_disable(CO_CANmodule_t* CANmodule) {
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b082      	sub	sp, #8
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	6078      	str	r0, [r7, #4]
    if (CANmodule != NULL && CANmodule->CANptr != NULL) {
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2b00      	cmp	r3, #0
 8007f0c:	d009      	beq.n	8007f22 <CO_CANmodule_disable+0x22>
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d005      	beq.n	8007f22 <CO_CANmodule_disable+0x22>
#ifdef CO_STM32_FDCAN_Driver
        HAL_FDCAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f001 fc81 	bl	8009824 <HAL_FDCAN_Stop>

#else
        HAL_CAN_Stop(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle);
#endif
    }
}
 8007f22:	bf00      	nop
 8007f24:	3708      	adds	r7, #8
 8007f26:	46bd      	mov	sp, r7
 8007f28:	bd80      	pop	{r7, pc}
	...

08007f2c <CO_CANrxBufferInit>:

/******************************************************************************/
CO_ReturnError_t
CO_CANrxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, uint16_t mask, bool_t rtr, void* object,
                   void (*CANrx_callback)(void* object, void* message)) {
 8007f2c:	b480      	push	{r7}
 8007f2e:	b087      	sub	sp, #28
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	60f8      	str	r0, [r7, #12]
 8007f34:	4608      	mov	r0, r1
 8007f36:	4611      	mov	r1, r2
 8007f38:	461a      	mov	r2, r3
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	817b      	strh	r3, [r7, #10]
 8007f3e:	460b      	mov	r3, r1
 8007f40:	813b      	strh	r3, [r7, #8]
 8007f42:	4613      	mov	r3, r2
 8007f44:	80fb      	strh	r3, [r7, #6]
    CO_ReturnError_t ret = CO_ERROR_NO;
 8007f46:	2300      	movs	r3, #0
 8007f48:	75fb      	strb	r3, [r7, #23]

    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8007f4a:	68fb      	ldr	r3, [r7, #12]
 8007f4c:	2b00      	cmp	r3, #0
 8007f4e:	d03a      	beq.n	8007fc6 <CO_CANrxBufferInit+0x9a>
 8007f50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d037      	beq.n	8007fc6 <CO_CANrxBufferInit+0x9a>
 8007f56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	d034      	beq.n	8007fc6 <CO_CANrxBufferInit+0x9a>
 8007f5c:	68fb      	ldr	r3, [r7, #12]
 8007f5e:	891b      	ldrh	r3, [r3, #8]
 8007f60:	897a      	ldrh	r2, [r7, #10]
 8007f62:	429a      	cmp	r2, r3
 8007f64:	d22f      	bcs.n	8007fc6 <CO_CANrxBufferInit+0x9a>
        CO_CANrx_t* buffer = &CANmodule->rxArray[index];
 8007f66:	68fb      	ldr	r3, [r7, #12]
 8007f68:	6859      	ldr	r1, [r3, #4]
 8007f6a:	897a      	ldrh	r2, [r7, #10]
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	005b      	lsls	r3, r3, #1
 8007f70:	4413      	add	r3, r2
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	440b      	add	r3, r1
 8007f76:	613b      	str	r3, [r7, #16]

        /* Configure object variables */
        buffer->object = object;
 8007f78:	693b      	ldr	r3, [r7, #16]
 8007f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007f7c:	605a      	str	r2, [r3, #4]
        buffer->CANrx_callback = CANrx_callback;
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007f82:	609a      	str	r2, [r3, #8]
        /*
         * Configure global identifier, including RTR bit
         *
         * This is later used for RX operation match case
         */
        buffer->ident = (ident & CANID_MASK) | (rtr ? FLAG_RTR : 0x00);
 8007f84:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8007f88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007f8c:	b21b      	sxth	r3, r3
 8007f8e:	6a3a      	ldr	r2, [r7, #32]
 8007f90:	2a00      	cmp	r2, #0
 8007f92:	d001      	beq.n	8007f98 <CO_CANrxBufferInit+0x6c>
 8007f94:	4a12      	ldr	r2, [pc, #72]	; (8007fe0 <CO_CANrxBufferInit+0xb4>)
 8007f96:	e000      	b.n	8007f9a <CO_CANrxBufferInit+0x6e>
 8007f98:	2200      	movs	r2, #0
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	b21b      	sxth	r3, r3
 8007f9e:	b29a      	uxth	r2, r3
 8007fa0:	693b      	ldr	r3, [r7, #16]
 8007fa2:	801a      	strh	r2, [r3, #0]
        buffer->mask = (mask & CANID_MASK) | FLAG_RTR;
 8007fa4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8007fa8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007fac:	b21a      	sxth	r2, r3
 8007fae:	4b0c      	ldr	r3, [pc, #48]	; (8007fe0 <CO_CANrxBufferInit+0xb4>)
 8007fb0:	4313      	orrs	r3, r2
 8007fb2:	b21b      	sxth	r3, r3
 8007fb4:	b29a      	uxth	r2, r3
 8007fb6:	693b      	ldr	r3, [r7, #16]
 8007fb8:	805a      	strh	r2, [r3, #2]

        /* Set CAN hardware module filter and mask. */
        if (CANmodule->useCANrxFilters) {
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	699b      	ldr	r3, [r3, #24]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d004      	beq.n	8007fcc <CO_CANrxBufferInit+0xa0>
            __NOP();
 8007fc2:	bf00      	nop
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8007fc4:	e002      	b.n	8007fcc <CO_CANrxBufferInit+0xa0>
        }
    } else {
        ret = CO_ERROR_ILLEGAL_ARGUMENT;
 8007fc6:	23ff      	movs	r3, #255	; 0xff
 8007fc8:	75fb      	strb	r3, [r7, #23]
 8007fca:	e000      	b.n	8007fce <CO_CANrxBufferInit+0xa2>
    if (CANmodule != NULL && object != NULL && CANrx_callback != NULL && index < CANmodule->rxSize) {
 8007fcc:	bf00      	nop
    }

    return ret;
 8007fce:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007fd2:	4618      	mov	r0, r3
 8007fd4:	371c      	adds	r7, #28
 8007fd6:	46bd      	mov	sp, r7
 8007fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fdc:	4770      	bx	lr
 8007fde:	bf00      	nop
 8007fe0:	ffff8000 	.word	0xffff8000

08007fe4 <CO_CANtxBufferInit>:

/******************************************************************************/
CO_CANtx_t*
CO_CANtxBufferInit(CO_CANmodule_t* CANmodule, uint16_t index, uint16_t ident, bool_t rtr, uint8_t noOfBytes,
                   bool_t syncFlag) {
 8007fe4:	b480      	push	{r7}
 8007fe6:	b087      	sub	sp, #28
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	60f8      	str	r0, [r7, #12]
 8007fec:	607b      	str	r3, [r7, #4]
 8007fee:	460b      	mov	r3, r1
 8007ff0:	817b      	strh	r3, [r7, #10]
 8007ff2:	4613      	mov	r3, r2
 8007ff4:	813b      	strh	r3, [r7, #8]
    CO_CANtx_t* buffer = NULL;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	617b      	str	r3, [r7, #20]

    if (CANmodule != NULL && index < CANmodule->txSize) {
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d024      	beq.n	800804a <CO_CANtxBufferInit+0x66>
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	8a1b      	ldrh	r3, [r3, #16]
 8008004:	897a      	ldrh	r2, [r7, #10]
 8008006:	429a      	cmp	r2, r3
 8008008:	d21f      	bcs.n	800804a <CO_CANtxBufferInit+0x66>
        buffer = &CANmodule->txArray[index];
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	68d9      	ldr	r1, [r3, #12]
 800800e:	897a      	ldrh	r2, [r7, #10]
 8008010:	4613      	mov	r3, r2
 8008012:	005b      	lsls	r3, r3, #1
 8008014:	4413      	add	r3, r2
 8008016:	00db      	lsls	r3, r3, #3
 8008018:	440b      	add	r3, r1
 800801a:	617b      	str	r3, [r7, #20]

        /* CAN identifier, DLC and rtr, bit aligned with CAN module transmit buffer */
        buffer->ident = ((uint32_t)ident & CANID_MASK) | ((uint32_t)(rtr ? FLAG_RTR : 0x00));
 800801c:	893b      	ldrh	r3, [r7, #8]
 800801e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008022:	687a      	ldr	r2, [r7, #4]
 8008024:	2a00      	cmp	r2, #0
 8008026:	d002      	beq.n	800802e <CO_CANtxBufferInit+0x4a>
 8008028:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800802c:	e000      	b.n	8008030 <CO_CANtxBufferInit+0x4c>
 800802e:	2200      	movs	r2, #0
 8008030:	431a      	orrs	r2, r3
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	601a      	str	r2, [r3, #0]
        buffer->DLC = noOfBytes;
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	f897 2020 	ldrb.w	r2, [r7, #32]
 800803c:	711a      	strb	r2, [r3, #4]
        buffer->bufferFull = false;
 800803e:	697b      	ldr	r3, [r7, #20]
 8008040:	2200      	movs	r2, #0
 8008042:	611a      	str	r2, [r3, #16]
        buffer->syncFlag = syncFlag;
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008048:	615a      	str	r2, [r3, #20]
    }
    return buffer;
 800804a:	697b      	ldr	r3, [r7, #20]
}
 800804c:	4618      	mov	r0, r3
 800804e:	371c      	adds	r7, #28
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr

08008058 <prv_send_can_message>:
 *
 * \param[in]       CANmodule: CAN module instance
 * \param[in]       buffer: Pointer to buffer to transmit
 */
static uint8_t
prv_send_can_message(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 8008058:	b580      	push	{r7, lr}
 800805a:	b084      	sub	sp, #16
 800805c:	af00      	add	r7, sp, #0
 800805e:	6078      	str	r0, [r7, #4]
 8008060:	6039      	str	r1, [r7, #0]

    uint8_t success = 0;
 8008062:	2300      	movs	r3, #0
 8008064:	73fb      	strb	r3, [r7, #15]

    /* Check if TX FIFO is ready to accept more messages */
#ifdef CO_STM32_FDCAN_Driver
    static FDCAN_TxHeaderTypeDef tx_hdr;
    if (HAL_FDCAN_GetTxFifoFreeLevel(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle) > 0) {
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	689b      	ldr	r3, [r3, #8]
 800806c:	4618      	mov	r0, r3
 800806e:	f001 fe19 	bl	8009ca4 <HAL_FDCAN_GetTxFifoFreeLevel>
 8008072:	4603      	mov	r3, r0
 8008074:	2b00      	cmp	r3, #0
 8008076:	d074      	beq.n	8008162 <prv_send_can_message+0x10a>
        /*
         * RTR flag is part of identifier value
         * hence it needs to be properly decoded
         */
        tx_hdr.Identifier = buffer->ident & CANID_MASK;
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008080:	4a3a      	ldr	r2, [pc, #232]	; (800816c <prv_send_can_message+0x114>)
 8008082:	6013      	str	r3, [r2, #0]
        tx_hdr.TxFrameType = (buffer->ident & FLAG_RTR) ? FDCAN_REMOTE_FRAME : FDCAN_DATA_FRAME;
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	039b      	lsls	r3, r3, #14
 800808a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800808e:	4a37      	ldr	r2, [pc, #220]	; (800816c <prv_send_can_message+0x114>)
 8008090:	6093      	str	r3, [r2, #8]
        tx_hdr.IdType = FDCAN_STANDARD_ID;
 8008092:	4b36      	ldr	r3, [pc, #216]	; (800816c <prv_send_can_message+0x114>)
 8008094:	2200      	movs	r2, #0
 8008096:	605a      	str	r2, [r3, #4]
        tx_hdr.FDFormat = FDCAN_CLASSIC_CAN;
 8008098:	4b34      	ldr	r3, [pc, #208]	; (800816c <prv_send_can_message+0x114>)
 800809a:	2200      	movs	r2, #0
 800809c:	619a      	str	r2, [r3, #24]
        tx_hdr.BitRateSwitch = FDCAN_BRS_OFF;
 800809e:	4b33      	ldr	r3, [pc, #204]	; (800816c <prv_send_can_message+0x114>)
 80080a0:	2200      	movs	r2, #0
 80080a2:	615a      	str	r2, [r3, #20]
        tx_hdr.MessageMarker = 0;
 80080a4:	4b31      	ldr	r3, [pc, #196]	; (800816c <prv_send_can_message+0x114>)
 80080a6:	2200      	movs	r2, #0
 80080a8:	621a      	str	r2, [r3, #32]
        tx_hdr.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80080aa:	4b30      	ldr	r3, [pc, #192]	; (800816c <prv_send_can_message+0x114>)
 80080ac:	2200      	movs	r2, #0
 80080ae:	611a      	str	r2, [r3, #16]
        tx_hdr.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80080b0:	4b2e      	ldr	r3, [pc, #184]	; (800816c <prv_send_can_message+0x114>)
 80080b2:	2200      	movs	r2, #0
 80080b4:	61da      	str	r2, [r3, #28]

        switch (buffer->DLC) {
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	791b      	ldrb	r3, [r3, #4]
 80080ba:	2b08      	cmp	r3, #8
 80080bc:	d840      	bhi.n	8008140 <prv_send_can_message+0xe8>
 80080be:	a201      	add	r2, pc, #4	; (adr r2, 80080c4 <prv_send_can_message+0x6c>)
 80080c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080c4:	080080e9 	.word	0x080080e9
 80080c8:	080080f1 	.word	0x080080f1
 80080cc:	080080fb 	.word	0x080080fb
 80080d0:	08008105 	.word	0x08008105
 80080d4:	0800810f 	.word	0x0800810f
 80080d8:	08008119 	.word	0x08008119
 80080dc:	08008123 	.word	0x08008123
 80080e0:	0800812d 	.word	0x0800812d
 80080e4:	08008137 	.word	0x08008137
            case 0:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_0;
 80080e8:	4b20      	ldr	r3, [pc, #128]	; (800816c <prv_send_can_message+0x114>)
 80080ea:	2200      	movs	r2, #0
 80080ec:	60da      	str	r2, [r3, #12]
                break;
 80080ee:	e028      	b.n	8008142 <prv_send_can_message+0xea>
            case 1:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_1;
 80080f0:	4b1e      	ldr	r3, [pc, #120]	; (800816c <prv_send_can_message+0x114>)
 80080f2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80080f6:	60da      	str	r2, [r3, #12]
                break;
 80080f8:	e023      	b.n	8008142 <prv_send_can_message+0xea>
            case 2:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_2;
 80080fa:	4b1c      	ldr	r3, [pc, #112]	; (800816c <prv_send_can_message+0x114>)
 80080fc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008100:	60da      	str	r2, [r3, #12]
                break;
 8008102:	e01e      	b.n	8008142 <prv_send_can_message+0xea>
            case 3:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_3;
 8008104:	4b19      	ldr	r3, [pc, #100]	; (800816c <prv_send_can_message+0x114>)
 8008106:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800810a:	60da      	str	r2, [r3, #12]
                break;
 800810c:	e019      	b.n	8008142 <prv_send_can_message+0xea>
            case 4:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_4;
 800810e:	4b17      	ldr	r3, [pc, #92]	; (800816c <prv_send_can_message+0x114>)
 8008110:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8008114:	60da      	str	r2, [r3, #12]
                break;
 8008116:	e014      	b.n	8008142 <prv_send_can_message+0xea>
            case 5:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_5;
 8008118:	4b14      	ldr	r3, [pc, #80]	; (800816c <prv_send_can_message+0x114>)
 800811a:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
 800811e:	60da      	str	r2, [r3, #12]
                break;
 8008120:	e00f      	b.n	8008142 <prv_send_can_message+0xea>
            case 6:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_6;
 8008122:	4b12      	ldr	r3, [pc, #72]	; (800816c <prv_send_can_message+0x114>)
 8008124:	f44f 22c0 	mov.w	r2, #393216	; 0x60000
 8008128:	60da      	str	r2, [r3, #12]
                break;
 800812a:	e00a      	b.n	8008142 <prv_send_can_message+0xea>
            case 7:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_7;
 800812c:	4b0f      	ldr	r3, [pc, #60]	; (800816c <prv_send_can_message+0x114>)
 800812e:	f44f 22e0 	mov.w	r2, #458752	; 0x70000
 8008132:	60da      	str	r2, [r3, #12]
                break;
 8008134:	e005      	b.n	8008142 <prv_send_can_message+0xea>
            case 8:
                tx_hdr.DataLength = FDCAN_DLC_BYTES_8;
 8008136:	4b0d      	ldr	r3, [pc, #52]	; (800816c <prv_send_can_message+0x114>)
 8008138:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800813c:	60da      	str	r2, [r3, #12]
                break;
 800813e:	e000      	b.n	8008142 <prv_send_can_message+0xea>
            default: /* Hard error... */
                break;
 8008140:	bf00      	nop
        }

        /* Now add message to FIFO. Should not fail */
        success =
            HAL_FDCAN_AddMessageToTxFifoQ(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	6898      	ldr	r0, [r3, #8]
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	3305      	adds	r3, #5
 800814c:	461a      	mov	r2, r3
 800814e:	4907      	ldr	r1, [pc, #28]	; (800816c <prv_send_can_message+0x114>)
 8008150:	f001 fbdf 	bl	8009912 <HAL_FDCAN_AddMessageToTxFifoQ>
 8008154:	4603      	mov	r3, r0
            == HAL_OK;
 8008156:	2b00      	cmp	r3, #0
 8008158:	bf0c      	ite	eq
 800815a:	2301      	moveq	r3, #1
 800815c:	2300      	movne	r3, #0
 800815e:	b2db      	uxtb	r3, r3
        success =
 8008160:	73fb      	strb	r3, [r7, #15]
        success = HAL_CAN_AddTxMessage(((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle, &tx_hdr, buffer->data,
                                       &TxMailboxNum)
                  == HAL_OK;
    }
#endif
    return success;
 8008162:	7bfb      	ldrb	r3, [r7, #15]
}
 8008164:	4618      	mov	r0, r3
 8008166:	3710      	adds	r7, #16
 8008168:	46bd      	mov	sp, r7
 800816a:	bd80      	pop	{r7, pc}
 800816c:	24000568 	.word	0x24000568

08008170 <CO_CANsend>:

/******************************************************************************/
CO_ReturnError_t
CO_CANsend(CO_CANmodule_t* CANmodule, CO_CANtx_t* buffer) {
 8008170:	b580      	push	{r7, lr}
 8008172:	b086      	sub	sp, #24
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
    CO_ReturnError_t err = CO_ERROR_NO;
 800817a:	2300      	movs	r3, #0
 800817c:	75fb      	strb	r3, [r7, #23]

    /* Verify overflow */
    if (buffer->bufferFull) {
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	691b      	ldr	r3, [r3, #16]
 8008182:	2b00      	cmp	r3, #0
 8008184:	d00c      	beq.n	80081a0 <CO_CANsend+0x30>
        if (!CANmodule->firstCANtxMessage) {
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6a1b      	ldr	r3, [r3, #32]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d106      	bne.n	800819c <CO_CANsend+0x2c>
            /* don't set error, if bootup message is still on buffers */
            CANmodule->CANerrorStatus |= CO_CAN_ERRTX_OVERFLOW;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	8a5b      	ldrh	r3, [r3, #18]
 8008192:	f043 0308 	orr.w	r3, r3, #8
 8008196:	b29a      	uxth	r2, r3
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	825a      	strh	r2, [r3, #18]
        }
        err = CO_ERROR_TX_OVERFLOW;
 800819c:	23f7      	movs	r3, #247	; 0xf7
 800819e:	75fb      	strb	r3, [r7, #23]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80081a0:	f3ef 8310 	mrs	r3, PRIMASK
 80081a4:	613b      	str	r3, [r7, #16]
  return(result);
 80081a6:	693a      	ldr	r2, [r7, #16]
    /*
     * Send message to CAN network
     *
     * Lock interrupts for atomic operation
     */
    CO_LOCK_CAN_SEND(CANmodule);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 80081ac:	b672      	cpsid	i
}
 80081ae:	bf00      	nop
    if (prv_send_can_message(CANmodule, buffer)) {
 80081b0:	6839      	ldr	r1, [r7, #0]
 80081b2:	6878      	ldr	r0, [r7, #4]
 80081b4:	f7ff ff50 	bl	8008058 <prv_send_can_message>
 80081b8:	4603      	mov	r3, r0
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d004      	beq.n	80081c8 <CO_CANsend+0x58>
        CANmodule->bufferInhibitFlag = buffer->syncFlag;
 80081be:	683b      	ldr	r3, [r7, #0]
 80081c0:	695a      	ldr	r2, [r3, #20]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	61da      	str	r2, [r3, #28]
 80081c6:	e009      	b.n	80081dc <CO_CANsend+0x6c>
    } else {
        buffer->bufferFull = true;
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	2201      	movs	r2, #1
 80081cc:	611a      	str	r2, [r3, #16]
        CANmodule->CANtxCount++;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80081d2:	b29b      	uxth	r3, r3
 80081d4:	3301      	adds	r3, #1
 80081d6:	b29a      	uxth	r2, r3
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	849a      	strh	r2, [r3, #36]	; 0x24
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80081e2:	68fb      	ldr	r3, [r7, #12]
 80081e4:	f383 8810 	msr	PRIMASK, r3
}
 80081e8:	bf00      	nop

    return err;
 80081ea:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3718      	adds	r7, #24
 80081f2:	46bd      	mov	sp, r7
 80081f4:	bd80      	pop	{r7, pc}

080081f6 <CO_CANclearPendingSyncPDOs>:

/******************************************************************************/
void
CO_CANclearPendingSyncPDOs(CO_CANmodule_t* CANmodule) {
 80081f6:	b480      	push	{r7}
 80081f8:	b087      	sub	sp, #28
 80081fa:	af00      	add	r7, sp, #0
 80081fc:	6078      	str	r0, [r7, #4]
    uint32_t tpdoDeleted = 0U;
 80081fe:	2300      	movs	r3, #0
 8008200:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008202:	f3ef 8310 	mrs	r3, PRIMASK
 8008206:	60fb      	str	r3, [r7, #12]
  return(result);
 8008208:	68fa      	ldr	r2, [r7, #12]

    CO_LOCK_CAN_SEND(CANmodule);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 800820e:	b672      	cpsid	i
}
 8008210:	bf00      	nop
    /* Abort message from CAN module, if there is synchronous TPDO.
     * Take special care with this functionality. */
    if (/*messageIsOnCanBuffer && */ CANmodule->bufferInhibitFlag) {
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	69db      	ldr	r3, [r3, #28]
 8008216:	2b00      	cmp	r3, #0
 8008218:	d004      	beq.n	8008224 <CO_CANclearPendingSyncPDOs+0x2e>
        /* clear TXREQ */
        CANmodule->bufferInhibitFlag = false;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2200      	movs	r2, #0
 800821e:	61da      	str	r2, [r3, #28]
        tpdoDeleted = 1U;
 8008220:	2301      	movs	r3, #1
 8008222:	617b      	str	r3, [r7, #20]
    }
    /* delete also pending synchronous TPDOs in TX buffers */
    if (CANmodule->CANtxCount > 0) {
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008228:	b29b      	uxth	r3, r3
 800822a:	2b00      	cmp	r3, #0
 800822c:	d032      	beq.n	8008294 <CO_CANclearPendingSyncPDOs+0x9e>
        for (uint16_t i = CANmodule->txSize; i > 0U; --i) {
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	8a1b      	ldrh	r3, [r3, #16]
 8008232:	827b      	strh	r3, [r7, #18]
 8008234:	e02b      	b.n	800828e <CO_CANclearPendingSyncPDOs+0x98>
            if (CANmodule->txArray[i].bufferFull) {
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	68d9      	ldr	r1, [r3, #12]
 800823a:	8a7a      	ldrh	r2, [r7, #18]
 800823c:	4613      	mov	r3, r2
 800823e:	005b      	lsls	r3, r3, #1
 8008240:	4413      	add	r3, r2
 8008242:	00db      	lsls	r3, r3, #3
 8008244:	440b      	add	r3, r1
 8008246:	691b      	ldr	r3, [r3, #16]
 8008248:	2b00      	cmp	r3, #0
 800824a:	d01d      	beq.n	8008288 <CO_CANclearPendingSyncPDOs+0x92>
                if (CANmodule->txArray[i].syncFlag) {
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	68d9      	ldr	r1, [r3, #12]
 8008250:	8a7a      	ldrh	r2, [r7, #18]
 8008252:	4613      	mov	r3, r2
 8008254:	005b      	lsls	r3, r3, #1
 8008256:	4413      	add	r3, r2
 8008258:	00db      	lsls	r3, r3, #3
 800825a:	440b      	add	r3, r1
 800825c:	695b      	ldr	r3, [r3, #20]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d012      	beq.n	8008288 <CO_CANclearPendingSyncPDOs+0x92>
                    CANmodule->txArray[i].bufferFull = false;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	68d9      	ldr	r1, [r3, #12]
 8008266:	8a7a      	ldrh	r2, [r7, #18]
 8008268:	4613      	mov	r3, r2
 800826a:	005b      	lsls	r3, r3, #1
 800826c:	4413      	add	r3, r2
 800826e:	00db      	lsls	r3, r3, #3
 8008270:	440b      	add	r3, r1
 8008272:	2200      	movs	r2, #0
 8008274:	611a      	str	r2, [r3, #16]
                    CANmodule->CANtxCount--;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800827a:	b29b      	uxth	r3, r3
 800827c:	3b01      	subs	r3, #1
 800827e:	b29a      	uxth	r2, r3
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	849a      	strh	r2, [r3, #36]	; 0x24
                    tpdoDeleted = 2U;
 8008284:	2302      	movs	r3, #2
 8008286:	617b      	str	r3, [r7, #20]
        for (uint16_t i = CANmodule->txSize; i > 0U; --i) {
 8008288:	8a7b      	ldrh	r3, [r7, #18]
 800828a:	3b01      	subs	r3, #1
 800828c:	827b      	strh	r3, [r7, #18]
 800828e:	8a7b      	ldrh	r3, [r7, #18]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d1d0      	bne.n	8008236 <CO_CANclearPendingSyncPDOs+0x40>
                }
            }
        }
    }
    CO_UNLOCK_CAN_SEND(CANmodule);
 8008294:	687b      	ldr	r3, [r7, #4]
 8008296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008298:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800829a:	68bb      	ldr	r3, [r7, #8]
 800829c:	f383 8810 	msr	PRIMASK, r3
}
 80082a0:	bf00      	nop
    if (tpdoDeleted) {
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d006      	beq.n	80082b6 <CO_CANclearPendingSyncPDOs+0xc0>
        CANmodule->CANerrorStatus |= CO_CAN_ERRTX_PDO_LATE;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	8a5b      	ldrh	r3, [r3, #18]
 80082ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80082b0:	b29a      	uxth	r2, r3
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	825a      	strh	r2, [r3, #18]
    }
}
 80082b6:	bf00      	nop
 80082b8:	371c      	adds	r7, #28
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr

080082c2 <CO_CANmodule_process>:
/* Get error counters from the module. If necessary, function may use
    * different way to determine errors. */
static uint16_t rxErrors = 0, txErrors = 0, overflow = 0;

void
CO_CANmodule_process(CO_CANmodule_t* CANmodule) {
 80082c2:	b480      	push	{r7}
 80082c4:	b085      	sub	sp, #20
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
    uint32_t err = 0;
 80082ca:	2300      	movs	r3, #0
 80082cc:	60bb      	str	r3, [r7, #8]
    // CANOpen just care about Bus_off, Warning, Passive and Overflow
    // I didn't find overflow error register in STM32, if you find it please let me know

#ifdef CO_STM32_FDCAN_Driver

    err = ((FDCAN_HandleTypeDef*)((CANopenNodeSTM32*)CANmodule->CANptr)->CANHandle)->Instance->PSR
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	689b      	ldr	r3, [r3, #8]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082d8:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 80082dc:	60bb      	str	r3, [r7, #8]
          & (FDCAN_PSR_BO | FDCAN_PSR_EW | FDCAN_PSR_EP);

    if (CANmodule->errOld != err) {
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082e2:	68ba      	ldr	r2, [r7, #8]
 80082e4:	429a      	cmp	r2, r3
 80082e6:	d02e      	beq.n	8008346 <CO_CANmodule_process+0x84>

        uint16_t status = CANmodule->CANerrorStatus;
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	8a5b      	ldrh	r3, [r3, #18]
 80082ec:	81fb      	strh	r3, [r7, #14]

        CANmodule->errOld = err;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	68ba      	ldr	r2, [r7, #8]
 80082f2:	629a      	str	r2, [r3, #40]	; 0x28

        if (err & FDCAN_PSR_BO) {
 80082f4:	68bb      	ldr	r3, [r7, #8]
 80082f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082fa:	2b00      	cmp	r3, #0
 80082fc:	d004      	beq.n	8008308 <CO_CANmodule_process+0x46>
            status |= CO_CAN_ERRTX_BUS_OFF;
 80082fe:	89fb      	ldrh	r3, [r7, #14]
 8008300:	f043 0304 	orr.w	r3, r3, #4
 8008304:	81fb      	strh	r3, [r7, #14]
 8008306:	e01b      	b.n	8008340 <CO_CANmodule_process+0x7e>
            // In this driver we expect that the controller is automatically handling the protocol exceptions.

        } else {
            /* recalculate CANerrorStatus, first clear some flags */
            status &= 0xFFFF
 8008308:	89fb      	ldrh	r3, [r7, #14]
 800830a:	f423 7341 	bic.w	r3, r3, #772	; 0x304
 800830e:	f023 0303 	bic.w	r3, r3, #3
 8008312:	81fb      	strh	r3, [r7, #14]
                      ^ (CO_CAN_ERRTX_BUS_OFF | CO_CAN_ERRRX_WARNING | CO_CAN_ERRRX_PASSIVE | CO_CAN_ERRTX_WARNING
                         | CO_CAN_ERRTX_PASSIVE);

            if (err & FDCAN_PSR_EW) {
 8008314:	68bb      	ldr	r3, [r7, #8]
 8008316:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800831a:	2b00      	cmp	r3, #0
 800831c:	d005      	beq.n	800832a <CO_CANmodule_process+0x68>
                status |= CO_CAN_ERRRX_WARNING | CO_CAN_ERRTX_WARNING;
 800831e:	89fb      	ldrh	r3, [r7, #14]
 8008320:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008324:	f043 0301 	orr.w	r3, r3, #1
 8008328:	81fb      	strh	r3, [r7, #14]
            }

            if (err & FDCAN_PSR_EP) {
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	f003 0320 	and.w	r3, r3, #32
 8008330:	2b00      	cmp	r3, #0
 8008332:	d005      	beq.n	8008340 <CO_CANmodule_process+0x7e>
                status |= CO_CAN_ERRRX_PASSIVE | CO_CAN_ERRTX_PASSIVE;
 8008334:	89fb      	ldrh	r3, [r7, #14]
 8008336:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800833a:	f043 0302 	orr.w	r3, r3, #2
 800833e:	81fb      	strh	r3, [r7, #14]
            }
        }

        CANmodule->CANerrorStatus = status;
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	89fa      	ldrh	r2, [r7, #14]
 8008344:	825a      	strh	r2, [r3, #18]

        CANmodule->CANerrorStatus = status;
    }

#endif
}
 8008346:	bf00      	nop
 8008348:	3714      	adds	r7, #20
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr
	...

08008354 <prv_read_can_received_msg>:
prv_read_can_received_msg(FDCAN_HandleTypeDef* hfdcan, uint32_t fifo, uint32_t fifo_isrs)
#else
static void
prv_read_can_received_msg(CAN_HandleTypeDef* hcan, uint32_t fifo, uint32_t fifo_isrs)
#endif
{
 8008354:	b580      	push	{r7, lr}
 8008356:	b08c      	sub	sp, #48	; 0x30
 8008358:	af00      	add	r7, sp, #0
 800835a:	60f8      	str	r0, [r7, #12]
 800835c:	60b9      	str	r1, [r7, #8]
 800835e:	607a      	str	r2, [r7, #4]

    CO_CANrxMsg_t rcvMsg;
    CO_CANrx_t* buffer = NULL; /* receive message buffer from CO_CANmodule_t object. */
 8008360:	2300      	movs	r3, #0
 8008362:	62fb      	str	r3, [r7, #44]	; 0x2c
    uint16_t index;            /* index of received message */
    uint32_t rcvMsgIdent;      /* identifier of the received message */
    uint8_t messageFound = 0;
 8008364:	2300      	movs	r3, #0
 8008366:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29

#ifdef CO_STM32_FDCAN_Driver
    static FDCAN_RxHeaderTypeDef rx_hdr;
    /* Read received message from FIFO */
    if (HAL_FDCAN_GetRxMessage(hfdcan, fifo, &rx_hdr, rcvMsg.data) != HAL_OK) {
 800836a:	f107 0314 	add.w	r3, r7, #20
 800836e:	3305      	adds	r3, #5
 8008370:	4a53      	ldr	r2, [pc, #332]	; (80084c0 <prv_read_can_received_msg+0x16c>)
 8008372:	68b9      	ldr	r1, [r7, #8]
 8008374:	68f8      	ldr	r0, [r7, #12]
 8008376:	f001 fb27 	bl	80099c8 <HAL_FDCAN_GetRxMessage>
 800837a:	4603      	mov	r3, r0
 800837c:	2b00      	cmp	r3, #0
 800837e:	f040 809a 	bne.w	80084b6 <prv_read_can_received_msg+0x162>
        return;
    }
    /* Setup identifier (with RTR) and length */
    rcvMsg.ident = rx_hdr.Identifier | (rx_hdr.RxFrameType == FDCAN_REMOTE_FRAME ? FLAG_RTR : 0x00);
 8008382:	4b4f      	ldr	r3, [pc, #316]	; (80084c0 <prv_read_can_received_msg+0x16c>)
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	4a4e      	ldr	r2, [pc, #312]	; (80084c0 <prv_read_can_received_msg+0x16c>)
 8008388:	6892      	ldr	r2, [r2, #8]
 800838a:	f1b2 5f00 	cmp.w	r2, #536870912	; 0x20000000
 800838e:	d102      	bne.n	8008396 <prv_read_can_received_msg+0x42>
 8008390:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8008394:	e000      	b.n	8008398 <prv_read_can_received_msg+0x44>
 8008396:	2200      	movs	r2, #0
 8008398:	4313      	orrs	r3, r2
 800839a:	617b      	str	r3, [r7, #20]
    switch (rx_hdr.DataLength) {
 800839c:	4b48      	ldr	r3, [pc, #288]	; (80084c0 <prv_read_can_received_msg+0x16c>)
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80083a4:	d044      	beq.n	8008430 <prv_read_can_received_msg+0xdc>
 80083a6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80083aa:	d844      	bhi.n	8008436 <prv_read_can_received_msg+0xe2>
 80083ac:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 80083b0:	d03b      	beq.n	800842a <prv_read_can_received_msg+0xd6>
 80083b2:	f5b3 2fe0 	cmp.w	r3, #458752	; 0x70000
 80083b6:	d83e      	bhi.n	8008436 <prv_read_can_received_msg+0xe2>
 80083b8:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80083bc:	d032      	beq.n	8008424 <prv_read_can_received_msg+0xd0>
 80083be:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
 80083c2:	d838      	bhi.n	8008436 <prv_read_can_received_msg+0xe2>
 80083c4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80083c8:	d029      	beq.n	800841e <prv_read_can_received_msg+0xca>
 80083ca:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80083ce:	d832      	bhi.n	8008436 <prv_read_can_received_msg+0xe2>
 80083d0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80083d4:	d020      	beq.n	8008418 <prv_read_can_received_msg+0xc4>
 80083d6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80083da:	d82c      	bhi.n	8008436 <prv_read_can_received_msg+0xe2>
 80083dc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80083e0:	d017      	beq.n	8008412 <prv_read_can_received_msg+0xbe>
 80083e2:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80083e6:	d826      	bhi.n	8008436 <prv_read_can_received_msg+0xe2>
 80083e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083ec:	d00e      	beq.n	800840c <prv_read_can_received_msg+0xb8>
 80083ee:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80083f2:	d820      	bhi.n	8008436 <prv_read_can_received_msg+0xe2>
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d003      	beq.n	8008400 <prv_read_can_received_msg+0xac>
 80083f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80083fc:	d003      	beq.n	8008406 <prv_read_can_received_msg+0xb2>
 80083fe:	e01a      	b.n	8008436 <prv_read_can_received_msg+0xe2>
        case FDCAN_DLC_BYTES_0:
            rcvMsg.dlc = 0;
 8008400:	2300      	movs	r3, #0
 8008402:	763b      	strb	r3, [r7, #24]
            break;
 8008404:	e01a      	b.n	800843c <prv_read_can_received_msg+0xe8>
        case FDCAN_DLC_BYTES_1:
            rcvMsg.dlc = 1;
 8008406:	2301      	movs	r3, #1
 8008408:	763b      	strb	r3, [r7, #24]
            break;
 800840a:	e017      	b.n	800843c <prv_read_can_received_msg+0xe8>
        case FDCAN_DLC_BYTES_2:
            rcvMsg.dlc = 2;
 800840c:	2302      	movs	r3, #2
 800840e:	763b      	strb	r3, [r7, #24]
            break;
 8008410:	e014      	b.n	800843c <prv_read_can_received_msg+0xe8>
        case FDCAN_DLC_BYTES_3:
            rcvMsg.dlc = 3;
 8008412:	2303      	movs	r3, #3
 8008414:	763b      	strb	r3, [r7, #24]
            break;
 8008416:	e011      	b.n	800843c <prv_read_can_received_msg+0xe8>
        case FDCAN_DLC_BYTES_4:
            rcvMsg.dlc = 4;
 8008418:	2304      	movs	r3, #4
 800841a:	763b      	strb	r3, [r7, #24]
            break;
 800841c:	e00e      	b.n	800843c <prv_read_can_received_msg+0xe8>
        case FDCAN_DLC_BYTES_5:
            rcvMsg.dlc = 5;
 800841e:	2305      	movs	r3, #5
 8008420:	763b      	strb	r3, [r7, #24]
            break;
 8008422:	e00b      	b.n	800843c <prv_read_can_received_msg+0xe8>
        case FDCAN_DLC_BYTES_6:
            rcvMsg.dlc = 6;
 8008424:	2306      	movs	r3, #6
 8008426:	763b      	strb	r3, [r7, #24]
            break;
 8008428:	e008      	b.n	800843c <prv_read_can_received_msg+0xe8>
        case FDCAN_DLC_BYTES_7:
            rcvMsg.dlc = 7;
 800842a:	2307      	movs	r3, #7
 800842c:	763b      	strb	r3, [r7, #24]
            break;
 800842e:	e005      	b.n	800843c <prv_read_can_received_msg+0xe8>
        case FDCAN_DLC_BYTES_8:
            rcvMsg.dlc = 8;
 8008430:	2308      	movs	r3, #8
 8008432:	763b      	strb	r3, [r7, #24]
            break;
 8008434:	e002      	b.n	800843c <prv_read_can_received_msg+0xe8>
        default:
            rcvMsg.dlc = 0;
 8008436:	2300      	movs	r3, #0
 8008438:	763b      	strb	r3, [r7, #24]
            break; /* Invalid length when more than 8 */
 800843a:	bf00      	nop
    }
    rcvMsgIdent = rcvMsg.ident;
 800843c:	697b      	ldr	r3, [r7, #20]
 800843e:	627b      	str	r3, [r7, #36]	; 0x24

    /*
     * Hardware filters are not used for the moment
     * \todo: Implement hardware filters...
     */
    if (CANModule_local->useCANrxFilters) {
 8008440:	4b20      	ldr	r3, [pc, #128]	; (80084c4 <prv_read_can_received_msg+0x170>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	699b      	ldr	r3, [r3, #24]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d001      	beq.n	800844e <prv_read_can_received_msg+0xfa>
        __BKPT(0);
 800844a:	be00      	bkpt	0x0000
 800844c:	e01f      	b.n	800848e <prv_read_can_received_msg+0x13a>
    } else {
        /*
         * We are not using hardware filters, hence it is necessary
         * to manually match received message ID with all buffers
         */
        buffer = CANModule_local->rxArray;
 800844e:	4b1d      	ldr	r3, [pc, #116]	; (80084c4 <prv_read_can_received_msg+0x170>)
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	62fb      	str	r3, [r7, #44]	; 0x2c
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 8008456:	4b1b      	ldr	r3, [pc, #108]	; (80084c4 <prv_read_can_received_msg+0x170>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	891b      	ldrh	r3, [r3, #8]
 800845c:	857b      	strh	r3, [r7, #42]	; 0x2a
 800845e:	e013      	b.n	8008488 <prv_read_can_received_msg+0x134>
            if (((rcvMsgIdent ^ buffer->ident) & buffer->mask) == 0U) {
 8008460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008462:	881b      	ldrh	r3, [r3, #0]
 8008464:	461a      	mov	r2, r3
 8008466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008468:	4053      	eors	r3, r2
 800846a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800846c:	8852      	ldrh	r2, [r2, #2]
 800846e:	4013      	ands	r3, r2
 8008470:	2b00      	cmp	r3, #0
 8008472:	d103      	bne.n	800847c <prv_read_can_received_msg+0x128>
                messageFound = 1;
 8008474:	2301      	movs	r3, #1
 8008476:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
                break;
 800847a:	e008      	b.n	800848e <prv_read_can_received_msg+0x13a>
        for (index = CANModule_local->rxSize; index > 0U; --index, ++buffer) {
 800847c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800847e:	3b01      	subs	r3, #1
 8008480:	857b      	strh	r3, [r7, #42]	; 0x2a
 8008482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008484:	330c      	adds	r3, #12
 8008486:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008488:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800848a:	2b00      	cmp	r3, #0
 800848c:	d1e8      	bne.n	8008460 <prv_read_can_received_msg+0x10c>
            }
        }
    }

    /* Call specific function, which will process the message */
    if (messageFound && buffer != NULL && buffer->CANrx_callback != NULL) {
 800848e:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8008492:	2b00      	cmp	r3, #0
 8008494:	d010      	beq.n	80084b8 <prv_read_can_received_msg+0x164>
 8008496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008498:	2b00      	cmp	r3, #0
 800849a:	d00d      	beq.n	80084b8 <prv_read_can_received_msg+0x164>
 800849c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800849e:	689b      	ldr	r3, [r3, #8]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d009      	beq.n	80084b8 <prv_read_can_received_msg+0x164>
        buffer->CANrx_callback(buffer->object, (void*)&rcvMsg);
 80084a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084a6:	689b      	ldr	r3, [r3, #8]
 80084a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80084aa:	6852      	ldr	r2, [r2, #4]
 80084ac:	f107 0114 	add.w	r1, r7, #20
 80084b0:	4610      	mov	r0, r2
 80084b2:	4798      	blx	r3
 80084b4:	e000      	b.n	80084b8 <prv_read_can_received_msg+0x164>
        return;
 80084b6:	bf00      	nop
    }
}
 80084b8:	3730      	adds	r7, #48	; 0x30
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}
 80084be:	bf00      	nop
 80084c0:	2400058c 	.word	0x2400058c
 80084c4:	24000564 	.word	0x24000564

080084c8 <HAL_FDCAN_RxFifo0Callback>:
 * \param[in]       hfdcan: pointer to an FDCAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified FDCAN.
 * \param[in]       RxFifo0ITs: indicates which Rx FIFO 0 interrupts are signaled.
 */
void
HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef* hfdcan, uint32_t RxFifo0ITs) {
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b082      	sub	sp, #8
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	6039      	str	r1, [r7, #0]
    if (RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) {
 80084d2:	683b      	ldr	r3, [r7, #0]
 80084d4:	f003 0301 	and.w	r3, r3, #1
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d004      	beq.n	80084e6 <HAL_FDCAN_RxFifo0Callback+0x1e>
        prv_read_can_received_msg(hfdcan, FDCAN_RX_FIFO0, RxFifo0ITs);
 80084dc:	683a      	ldr	r2, [r7, #0]
 80084de:	2140      	movs	r1, #64	; 0x40
 80084e0:	6878      	ldr	r0, [r7, #4]
 80084e2:	f7ff ff37 	bl	8008354 <prv_read_can_received_msg>
    }
}
 80084e6:	bf00      	nop
 80084e8:	3708      	adds	r7, #8
 80084ea:	46bd      	mov	sp, r7
 80084ec:	bd80      	pop	{r7, pc}
	...

080084f0 <HAL_FDCAN_TxBufferCompleteCallback>:
 * \param[in]       hfdcan: pointer to an FDCAN_HandleTypeDef structure that contains
 *                      the configuration information for the specified FDCAN.
 * \param[in]       BufferIndexes: Bits of successfully sent TX buffers
 */
void
HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef* hfdcan, uint32_t BufferIndexes) {
 80084f0:	b580      	push	{r7, lr}
 80084f2:	b086      	sub	sp, #24
 80084f4:	af00      	add	r7, sp, #0
 80084f6:	6078      	str	r0, [r7, #4]
 80084f8:	6039      	str	r1, [r7, #0]
    CANModule_local->firstCANtxMessage = false;            /* First CAN message (bootup) was sent successfully */
 80084fa:	4b2c      	ldr	r3, [pc, #176]	; (80085ac <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	2200      	movs	r2, #0
 8008500:	621a      	str	r2, [r3, #32]
    CANModule_local->bufferInhibitFlag = false;            /* Clear flag from previous message */
 8008502:	4b2a      	ldr	r3, [pc, #168]	; (80085ac <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 8008504:	681b      	ldr	r3, [r3, #0]
 8008506:	2200      	movs	r2, #0
 8008508:	61da      	str	r2, [r3, #28]
    if (CANModule_local->CANtxCount > 0U) {                /* Are there any new messages waiting to be send */
 800850a:	4b28      	ldr	r3, [pc, #160]	; (80085ac <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008510:	b29b      	uxth	r3, r3
 8008512:	2b00      	cmp	r3, #0
 8008514:	d045      	beq.n	80085a2 <HAL_FDCAN_TxBufferCompleteCallback+0xb2>
        CO_CANtx_t* buffer = &CANModule_local->txArray[0]; /* Start with first buffer handle */
 8008516:	4b25      	ldr	r3, [pc, #148]	; (80085ac <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	68db      	ldr	r3, [r3, #12]
 800851c:	617b      	str	r3, [r7, #20]
         * This function is always called from interrupt,
         * however to make sure no preemption can happen, interrupts are anyway locked
         * (unless you can guarantee no higher priority interrupt will try to access to FDCAN instance and send data,
         *  then no need to lock interrupts..)
         */
        CO_LOCK_CAN_SEND(CANModule_local);
 800851e:	4b23      	ldr	r3, [pc, #140]	; (80085ac <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 8008520:	681b      	ldr	r3, [r3, #0]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008522:	f3ef 8210 	mrs	r2, PRIMASK
 8008526:	60fa      	str	r2, [r7, #12]
  return(result);
 8008528:	68fa      	ldr	r2, [r7, #12]
 800852a:	62da      	str	r2, [r3, #44]	; 0x2c
  __ASM volatile ("cpsid i" : : : "memory");
 800852c:	b672      	cpsid	i
}
 800852e:	bf00      	nop
        for (i = CANModule_local->txSize; i > 0U; --i, ++buffer) {
 8008530:	4b1e      	ldr	r3, [pc, #120]	; (80085ac <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	8a1b      	ldrh	r3, [r3, #16]
 8008536:	827b      	strh	r3, [r7, #18]
 8008538:	e021      	b.n	800857e <HAL_FDCAN_TxBufferCompleteCallback+0x8e>
            /* Try to send message */
            if (buffer->bufferFull) {
 800853a:	697b      	ldr	r3, [r7, #20]
 800853c:	691b      	ldr	r3, [r3, #16]
 800853e:	2b00      	cmp	r3, #0
 8008540:	d017      	beq.n	8008572 <HAL_FDCAN_TxBufferCompleteCallback+0x82>
                if (prv_send_can_message(CANModule_local, buffer)) {
 8008542:	4b1a      	ldr	r3, [pc, #104]	; (80085ac <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	6979      	ldr	r1, [r7, #20]
 8008548:	4618      	mov	r0, r3
 800854a:	f7ff fd85 	bl	8008058 <prv_send_can_message>
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	d00e      	beq.n	8008572 <HAL_FDCAN_TxBufferCompleteCallback+0x82>
                    buffer->bufferFull = false;
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	2200      	movs	r2, #0
 8008558:	611a      	str	r2, [r3, #16]
                    CANModule_local->CANtxCount--;
 800855a:	4b14      	ldr	r3, [pc, #80]	; (80085ac <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8008560:	b292      	uxth	r2, r2
 8008562:	3a01      	subs	r2, #1
 8008564:	b292      	uxth	r2, r2
 8008566:	849a      	strh	r2, [r3, #36]	; 0x24
                    CANModule_local->bufferInhibitFlag = buffer->syncFlag;
 8008568:	4b10      	ldr	r3, [pc, #64]	; (80085ac <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	697a      	ldr	r2, [r7, #20]
 800856e:	6952      	ldr	r2, [r2, #20]
 8008570:	61da      	str	r2, [r3, #28]
        for (i = CANModule_local->txSize; i > 0U; --i, ++buffer) {
 8008572:	8a7b      	ldrh	r3, [r7, #18]
 8008574:	3b01      	subs	r3, #1
 8008576:	827b      	strh	r3, [r7, #18]
 8008578:	697b      	ldr	r3, [r7, #20]
 800857a:	3318      	adds	r3, #24
 800857c:	617b      	str	r3, [r7, #20]
 800857e:	8a7b      	ldrh	r3, [r7, #18]
 8008580:	2b00      	cmp	r3, #0
 8008582:	d1da      	bne.n	800853a <HAL_FDCAN_TxBufferCompleteCallback+0x4a>
                }
            }
        }
        /* Clear counter if no more messages */
        if (i == 0U) {
 8008584:	8a7b      	ldrh	r3, [r7, #18]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d103      	bne.n	8008592 <HAL_FDCAN_TxBufferCompleteCallback+0xa2>
            CANModule_local->CANtxCount = 0U;
 800858a:	4b08      	ldr	r3, [pc, #32]	; (80085ac <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 800858c:	681b      	ldr	r3, [r3, #0]
 800858e:	2200      	movs	r2, #0
 8008590:	849a      	strh	r2, [r3, #36]	; 0x24
        }
        CO_UNLOCK_CAN_SEND(CANModule_local);
 8008592:	4b06      	ldr	r3, [pc, #24]	; (80085ac <HAL_FDCAN_TxBufferCompleteCallback+0xbc>)
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008598:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	f383 8810 	msr	PRIMASK, r3
}
 80085a0:	bf00      	nop
    }
}
 80085a2:	bf00      	nop
 80085a4:	3718      	adds	r7, #24
 80085a6:	46bd      	mov	sp, r7
 80085a8:	bd80      	pop	{r7, pc}
 80085aa:	bf00      	nop
 80085ac:	24000564 	.word	0x24000564

080085b0 <HAL_TIM_PeriodElapsedCallback>:

uint32_t tmp = 0x00;
uint8_t amount_read = 0;
/* Timer interrupt function executes every 1 ms */
void
HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef* htim) {
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b082      	sub	sp, #8
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	6078      	str	r0, [r7, #4]
    if (htim == canopenNodeSTM32->timerHandle) {
 80085b8:	4b05      	ldr	r3, [pc, #20]	; (80085d0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	687a      	ldr	r2, [r7, #4]
 80085c0:	429a      	cmp	r2, r3
 80085c2:	d101      	bne.n	80085c8 <HAL_TIM_PeriodElapsedCallback+0x18>
        canopen_app_interrupt();
 80085c4:	f7ff fb88 	bl	8007cd8 <canopen_app_interrupt>
    }
}
 80085c8:	bf00      	nop
 80085ca:	3708      	adds	r7, #8
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}
 80085d0:	24000550 	.word	0x24000550

080085d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80085d4:	b580      	push	{r7, lr}
 80085d6:	b086      	sub	sp, #24
 80085d8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80085da:	f000 fc8b 	bl	8008ef4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80085de:	f000 f821 	bl	8008624 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80085e2:	f000 f95d 	bl	80088a0 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80085e6:	f000 f89f 	bl	8008728 <MX_FDCAN1_Init>
  MX_TIM14_Init();
 80085ea:	f000 f935 	bl	8008858 <MX_TIM14_Init>
  MX_RNG_Init();
 80085ee:	f000 f91d 	bl	800882c <MX_RNG_Init>
  MX_USB_DEVICE_Init();
 80085f2:	f00a fdc3 	bl	801317c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  CANopenNodeSTM32 canopenNode_1;

  canopen_app_user_init(&canopenNode_1,
 80085f6:	4638      	mov	r0, r7
 80085f8:	4b07      	ldr	r3, [pc, #28]	; (8008618 <main+0x44>)
 80085fa:	4a08      	ldr	r2, [pc, #32]	; (800861c <main+0x48>)
 80085fc:	4908      	ldr	r1, [pc, #32]	; (8008620 <main+0x4c>)
 80085fe:	f007 ff6d 	bl	80104dc <canopen_app_user_init>
  							&hfdcan1,
							&MX_FDCAN1_Init,
							&htim14);


canopen_app_user_config(&canopenNode_1);
 8008602:	463b      	mov	r3, r7
 8008604:	4618      	mov	r0, r3
 8008606:	f007 ff87 	bl	8010518 <canopen_app_user_config>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  canopen_app_process();
 800860a:	f7ff faf9 	bl	8007c00 <canopen_app_process>
	  CO_PDO_execute(&canopenNode_1);
 800860e:	463b      	mov	r3, r7
 8008610:	4618      	mov	r0, r3
 8008612:	f008 f885 	bl	8010720 <CO_PDO_execute>
	  canopen_app_process();
 8008616:	e7f8      	b.n	800860a <main+0x36>
 8008618:	24000668 	.word	0x24000668
 800861c:	08008729 	.word	0x08008729
 8008620:	240005b4 	.word	0x240005b4

08008624 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8008624:	b580      	push	{r7, lr}
 8008626:	b09c      	sub	sp, #112	; 0x70
 8008628:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800862a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800862e:	224c      	movs	r2, #76	; 0x4c
 8008630:	2100      	movs	r1, #0
 8008632:	4618      	mov	r0, r3
 8008634:	f00b fd4c 	bl	80140d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8008638:	1d3b      	adds	r3, r7, #4
 800863a:	2220      	movs	r2, #32
 800863c:	2100      	movs	r1, #0
 800863e:	4618      	mov	r0, r3
 8008640:	f00b fd46 	bl	80140d0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8008644:	2002      	movs	r0, #2
 8008646:	f003 fd3d 	bl	800c0c4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800864a:	2300      	movs	r3, #0
 800864c:	603b      	str	r3, [r7, #0]
 800864e:	4b34      	ldr	r3, [pc, #208]	; (8008720 <SystemClock_Config+0xfc>)
 8008650:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008652:	4a33      	ldr	r2, [pc, #204]	; (8008720 <SystemClock_Config+0xfc>)
 8008654:	f023 0301 	bic.w	r3, r3, #1
 8008658:	62d3      	str	r3, [r2, #44]	; 0x2c
 800865a:	4b31      	ldr	r3, [pc, #196]	; (8008720 <SystemClock_Config+0xfc>)
 800865c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800865e:	f003 0301 	and.w	r3, r3, #1
 8008662:	603b      	str	r3, [r7, #0]
 8008664:	4b2f      	ldr	r3, [pc, #188]	; (8008724 <SystemClock_Config+0x100>)
 8008666:	699b      	ldr	r3, [r3, #24]
 8008668:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800866c:	4a2d      	ldr	r2, [pc, #180]	; (8008724 <SystemClock_Config+0x100>)
 800866e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008672:	6193      	str	r3, [r2, #24]
 8008674:	4b2b      	ldr	r3, [pc, #172]	; (8008724 <SystemClock_Config+0x100>)
 8008676:	699b      	ldr	r3, [r3, #24]
 8008678:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800867c:	603b      	str	r3, [r7, #0]
 800867e:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8008680:	bf00      	nop
 8008682:	4b28      	ldr	r3, [pc, #160]	; (8008724 <SystemClock_Config+0x100>)
 8008684:	699b      	ldr	r3, [r3, #24]
 8008686:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800868a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800868e:	d1f8      	bne.n	8008682 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSI
 8008690:	2323      	movs	r3, #35	; 0x23
 8008692:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8008694:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8008698:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800869a:	2301      	movs	r3, #1
 800869c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800869e:	2340      	movs	r3, #64	; 0x40
 80086a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80086a2:	2301      	movs	r3, #1
 80086a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80086a6:	2302      	movs	r3, #2
 80086a8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80086aa:	2302      	movs	r3, #2
 80086ac:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 80086ae:	2302      	movs	r3, #2
 80086b0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 80086b2:	230c      	movs	r3, #12
 80086b4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80086b6:	2302      	movs	r3, #2
 80086b8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80086ba:	2303      	movs	r3, #3
 80086bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80086be:	2302      	movs	r3, #2
 80086c0:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80086c2:	230c      	movs	r3, #12
 80086c4:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80086c6:	2302      	movs	r3, #2
 80086c8:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80086ca:	2300      	movs	r3, #0
 80086cc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80086ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80086d2:	4618      	mov	r0, r3
 80086d4:	f003 fd40 	bl	800c158 <HAL_RCC_OscConfig>
 80086d8:	4603      	mov	r3, r0
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d001      	beq.n	80086e2 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 80086de:	f000 f943 	bl	8008968 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80086e2:	233f      	movs	r3, #63	; 0x3f
 80086e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80086e6:	2300      	movs	r3, #0
 80086e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80086ea:	2300      	movs	r3, #0
 80086ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80086ee:	2300      	movs	r3, #0
 80086f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80086f2:	2300      	movs	r3, #0
 80086f4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80086f6:	2300      	movs	r3, #0
 80086f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80086fa:	2300      	movs	r3, #0
 80086fc:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80086fe:	2300      	movs	r3, #0
 8008700:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8008702:	1d3b      	adds	r3, r7, #4
 8008704:	2101      	movs	r1, #1
 8008706:	4618      	mov	r0, r3
 8008708:	f004 f980 	bl	800ca0c <HAL_RCC_ClockConfig>
 800870c:	4603      	mov	r3, r0
 800870e:	2b00      	cmp	r3, #0
 8008710:	d001      	beq.n	8008716 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 8008712:	f000 f929 	bl	8008968 <Error_Handler>
  }
}
 8008716:	bf00      	nop
 8008718:	3770      	adds	r7, #112	; 0x70
 800871a:	46bd      	mov	sp, r7
 800871c:	bd80      	pop	{r7, pc}
 800871e:	bf00      	nop
 8008720:	58000400 	.word	0x58000400
 8008724:	58024800 	.word	0x58024800

08008728 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8008728:	b580      	push	{r7, lr}
 800872a:	b088      	sub	sp, #32
 800872c:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800872e:	4b3d      	ldr	r3, [pc, #244]	; (8008824 <MX_FDCAN1_Init+0xfc>)
 8008730:	4a3d      	ldr	r2, [pc, #244]	; (8008828 <MX_FDCAN1_Init+0x100>)
 8008732:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8008734:	4b3b      	ldr	r3, [pc, #236]	; (8008824 <MX_FDCAN1_Init+0xfc>)
 8008736:	f44f 7280 	mov.w	r2, #256	; 0x100
 800873a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800873c:	4b39      	ldr	r3, [pc, #228]	; (8008824 <MX_FDCAN1_Init+0xfc>)
 800873e:	2200      	movs	r2, #0
 8008740:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8008742:	4b38      	ldr	r3, [pc, #224]	; (8008824 <MX_FDCAN1_Init+0xfc>)
 8008744:	2201      	movs	r2, #1
 8008746:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8008748:	4b36      	ldr	r3, [pc, #216]	; (8008824 <MX_FDCAN1_Init+0xfc>)
 800874a:	2200      	movs	r2, #0
 800874c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800874e:	4b35      	ldr	r3, [pc, #212]	; (8008824 <MX_FDCAN1_Init+0xfc>)
 8008750:	2200      	movs	r2, #0
 8008752:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8008754:	4b33      	ldr	r3, [pc, #204]	; (8008824 <MX_FDCAN1_Init+0xfc>)
 8008756:	2201      	movs	r2, #1
 8008758:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 7;
 800875a:	4b32      	ldr	r3, [pc, #200]	; (8008824 <MX_FDCAN1_Init+0xfc>)
 800875c:	2207      	movs	r2, #7
 800875e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 42;
 8008760:	4b30      	ldr	r3, [pc, #192]	; (8008824 <MX_FDCAN1_Init+0xfc>)
 8008762:	222a      	movs	r2, #42	; 0x2a
 8008764:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 7;
 8008766:	4b2f      	ldr	r3, [pc, #188]	; (8008824 <MX_FDCAN1_Init+0xfc>)
 8008768:	2207      	movs	r2, #7
 800876a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 10;
 800876c:	4b2d      	ldr	r3, [pc, #180]	; (8008824 <MX_FDCAN1_Init+0xfc>)
 800876e:	220a      	movs	r2, #10
 8008770:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8008772:	4b2c      	ldr	r3, [pc, #176]	; (8008824 <MX_FDCAN1_Init+0xfc>)
 8008774:	2201      	movs	r2, #1
 8008776:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 3;
 8008778:	4b2a      	ldr	r3, [pc, #168]	; (8008824 <MX_FDCAN1_Init+0xfc>)
 800877a:	2203      	movs	r2, #3
 800877c:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800877e:	4b29      	ldr	r3, [pc, #164]	; (8008824 <MX_FDCAN1_Init+0xfc>)
 8008780:	2201      	movs	r2, #1
 8008782:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8008784:	4b27      	ldr	r3, [pc, #156]	; (8008824 <MX_FDCAN1_Init+0xfc>)
 8008786:	2200      	movs	r2, #0
 8008788:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 800878a:	4b26      	ldr	r3, [pc, #152]	; (8008824 <MX_FDCAN1_Init+0xfc>)
 800878c:	2201      	movs	r2, #1
 800878e:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 8008790:	4b24      	ldr	r3, [pc, #144]	; (8008824 <MX_FDCAN1_Init+0xfc>)
 8008792:	2200      	movs	r2, #0
 8008794:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 8008796:	4b23      	ldr	r3, [pc, #140]	; (8008824 <MX_FDCAN1_Init+0xfc>)
 8008798:	2240      	movs	r2, #64	; 0x40
 800879a:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_12;
 800879c:	4b21      	ldr	r3, [pc, #132]	; (8008824 <MX_FDCAN1_Init+0xfc>)
 800879e:	2205      	movs	r2, #5
 80087a0:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80087a2:	4b20      	ldr	r3, [pc, #128]	; (8008824 <MX_FDCAN1_Init+0xfc>)
 80087a4:	2200      	movs	r2, #0
 80087a6:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80087a8:	4b1e      	ldr	r3, [pc, #120]	; (8008824 <MX_FDCAN1_Init+0xfc>)
 80087aa:	2204      	movs	r2, #4
 80087ac:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80087ae:	4b1d      	ldr	r3, [pc, #116]	; (8008824 <MX_FDCAN1_Init+0xfc>)
 80087b0:	2200      	movs	r2, #0
 80087b2:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80087b4:	4b1b      	ldr	r3, [pc, #108]	; (8008824 <MX_FDCAN1_Init+0xfc>)
 80087b6:	2204      	movs	r2, #4
 80087b8:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80087ba:	4b1a      	ldr	r3, [pc, #104]	; (8008824 <MX_FDCAN1_Init+0xfc>)
 80087bc:	2200      	movs	r2, #0
 80087be:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80087c0:	4b18      	ldr	r3, [pc, #96]	; (8008824 <MX_FDCAN1_Init+0xfc>)
 80087c2:	2200      	movs	r2, #0
 80087c4:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 80087c6:	4b17      	ldr	r3, [pc, #92]	; (8008824 <MX_FDCAN1_Init+0xfc>)
 80087c8:	2201      	movs	r2, #1
 80087ca:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80087cc:	4b15      	ldr	r3, [pc, #84]	; (8008824 <MX_FDCAN1_Init+0xfc>)
 80087ce:	2200      	movs	r2, #0
 80087d0:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_12;
 80087d2:	4b14      	ldr	r3, [pc, #80]	; (8008824 <MX_FDCAN1_Init+0xfc>)
 80087d4:	2205      	movs	r2, #5
 80087d6:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80087d8:	4812      	ldr	r0, [pc, #72]	; (8008824 <MX_FDCAN1_Init+0xfc>)
 80087da:	f000 fd77 	bl	80092cc <HAL_FDCAN_Init>
 80087de:	4603      	mov	r3, r0
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d001      	beq.n	80087e8 <MX_FDCAN1_Init+0xc0>
  {
    Error_Handler();
 80087e4:	f000 f8c0 	bl	8008968 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
FDCAN_FilterTypeDef sFilterConfig;

  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80087e8:	2300      	movs	r3, #0
 80087ea:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 80087ec:	2300      	movs	r3, #0
 80087ee:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80087f0:	2302      	movs	r3, #2
 80087f2:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_DISABLE; //FDCAN_FILTER_TO_RXFIFO0
 80087f4:	2300      	movs	r3, #0
 80087f6:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x0;
 80087f8:	2300      	movs	r3, #0
 80087fa:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x7FF;
 80087fc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8008800:	617b      	str	r3, [r7, #20]
  sFilterConfig.RxBufferIndex = 0;
 8008802:	2300      	movs	r3, #0
 8008804:	61bb      	str	r3, [r7, #24]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8008806:	463b      	mov	r3, r7
 8008808:	4619      	mov	r1, r3
 800880a:	4806      	ldr	r0, [pc, #24]	; (8008824 <MX_FDCAN1_Init+0xfc>)
 800880c:	f000 ff3c 	bl	8009688 <HAL_FDCAN_ConfigFilter>
 8008810:	4603      	mov	r3, r0
 8008812:	2b00      	cmp	r3, #0
 8008814:	d001      	beq.n	800881a <MX_FDCAN1_Init+0xf2>
  {
    /* Filter configuration Error */
    Error_Handler();
 8008816:	f000 f8a7 	bl	8008968 <Error_Handler>
  }
  /* USER CODE END FDCAN1_Init 2 */

}
 800881a:	bf00      	nop
 800881c:	3720      	adds	r7, #32
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
 8008822:	bf00      	nop
 8008824:	240005b4 	.word	0x240005b4
 8008828:	4000a000 	.word	0x4000a000

0800882c <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 800882c:	b580      	push	{r7, lr}
 800882e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8008830:	4b07      	ldr	r3, [pc, #28]	; (8008850 <MX_RNG_Init+0x24>)
 8008832:	4a08      	ldr	r2, [pc, #32]	; (8008854 <MX_RNG_Init+0x28>)
 8008834:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 8008836:	4b06      	ldr	r3, [pc, #24]	; (8008850 <MX_RNG_Init+0x24>)
 8008838:	2200      	movs	r2, #0
 800883a:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800883c:	4804      	ldr	r0, [pc, #16]	; (8008850 <MX_RNG_Init+0x24>)
 800883e:	f005 ff97 	bl	800e770 <HAL_RNG_Init>
 8008842:	4603      	mov	r3, r0
 8008844:	2b00      	cmp	r3, #0
 8008846:	d001      	beq.n	800884c <MX_RNG_Init+0x20>
  {
    Error_Handler();
 8008848:	f000 f88e 	bl	8008968 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800884c:	bf00      	nop
 800884e:	bd80      	pop	{r7, pc}
 8008850:	24000654 	.word	0x24000654
 8008854:	48021800 	.word	0x48021800

08008858 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 800885c:	4b0e      	ldr	r3, [pc, #56]	; (8008898 <MX_TIM14_Init+0x40>)
 800885e:	4a0f      	ldr	r2, [pc, #60]	; (800889c <MX_TIM14_Init+0x44>)
 8008860:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 63;
 8008862:	4b0d      	ldr	r3, [pc, #52]	; (8008898 <MX_TIM14_Init+0x40>)
 8008864:	223f      	movs	r2, #63	; 0x3f
 8008866:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008868:	4b0b      	ldr	r3, [pc, #44]	; (8008898 <MX_TIM14_Init+0x40>)
 800886a:	2200      	movs	r2, #0
 800886c:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 1000;
 800886e:	4b0a      	ldr	r3, [pc, #40]	; (8008898 <MX_TIM14_Init+0x40>)
 8008870:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008874:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8008876:	4b08      	ldr	r3, [pc, #32]	; (8008898 <MX_TIM14_Init+0x40>)
 8008878:	2200      	movs	r2, #0
 800887a:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800887c:	4b06      	ldr	r3, [pc, #24]	; (8008898 <MX_TIM14_Init+0x40>)
 800887e:	2200      	movs	r2, #0
 8008880:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8008882:	4805      	ldr	r0, [pc, #20]	; (8008898 <MX_TIM14_Init+0x40>)
 8008884:	f005 ffd6 	bl	800e834 <HAL_TIM_Base_Init>
 8008888:	4603      	mov	r3, r0
 800888a:	2b00      	cmp	r3, #0
 800888c:	d001      	beq.n	8008892 <MX_TIM14_Init+0x3a>
  {
    Error_Handler();
 800888e:	f000 f86b 	bl	8008968 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8008892:	bf00      	nop
 8008894:	bd80      	pop	{r7, pc}
 8008896:	bf00      	nop
 8008898:	24000668 	.word	0x24000668
 800889c:	40002000 	.word	0x40002000

080088a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b08a      	sub	sp, #40	; 0x28
 80088a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088a6:	f107 0314 	add.w	r3, r7, #20
 80088aa:	2200      	movs	r2, #0
 80088ac:	601a      	str	r2, [r3, #0]
 80088ae:	605a      	str	r2, [r3, #4]
 80088b0:	609a      	str	r2, [r3, #8]
 80088b2:	60da      	str	r2, [r3, #12]
 80088b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80088b6:	4b2a      	ldr	r3, [pc, #168]	; (8008960 <MX_GPIO_Init+0xc0>)
 80088b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80088bc:	4a28      	ldr	r2, [pc, #160]	; (8008960 <MX_GPIO_Init+0xc0>)
 80088be:	f043 0304 	orr.w	r3, r3, #4
 80088c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80088c6:	4b26      	ldr	r3, [pc, #152]	; (8008960 <MX_GPIO_Init+0xc0>)
 80088c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80088cc:	f003 0304 	and.w	r3, r3, #4
 80088d0:	613b      	str	r3, [r7, #16]
 80088d2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80088d4:	4b22      	ldr	r3, [pc, #136]	; (8008960 <MX_GPIO_Init+0xc0>)
 80088d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80088da:	4a21      	ldr	r2, [pc, #132]	; (8008960 <MX_GPIO_Init+0xc0>)
 80088dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80088e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80088e4:	4b1e      	ldr	r3, [pc, #120]	; (8008960 <MX_GPIO_Init+0xc0>)
 80088e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80088ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80088ee:	60fb      	str	r3, [r7, #12]
 80088f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80088f2:	4b1b      	ldr	r3, [pc, #108]	; (8008960 <MX_GPIO_Init+0xc0>)
 80088f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80088f8:	4a19      	ldr	r2, [pc, #100]	; (8008960 <MX_GPIO_Init+0xc0>)
 80088fa:	f043 0308 	orr.w	r3, r3, #8
 80088fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008902:	4b17      	ldr	r3, [pc, #92]	; (8008960 <MX_GPIO_Init+0xc0>)
 8008904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008908:	f003 0308 	and.w	r3, r3, #8
 800890c:	60bb      	str	r3, [r7, #8]
 800890e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8008910:	4b13      	ldr	r3, [pc, #76]	; (8008960 <MX_GPIO_Init+0xc0>)
 8008912:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008916:	4a12      	ldr	r2, [pc, #72]	; (8008960 <MX_GPIO_Init+0xc0>)
 8008918:	f043 0301 	orr.w	r3, r3, #1
 800891c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008920:	4b0f      	ldr	r3, [pc, #60]	; (8008960 <MX_GPIO_Init+0xc0>)
 8008922:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008926:	f003 0301 	and.w	r3, r3, #1
 800892a:	607b      	str	r3, [r7, #4]
 800892c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 800892e:	2200      	movs	r2, #0
 8008930:	f44f 7180 	mov.w	r1, #256	; 0x100
 8008934:	480b      	ldr	r0, [pc, #44]	; (8008964 <MX_GPIO_Init+0xc4>)
 8008936:	f002 f8f3 	bl	800ab20 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800893a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800893e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8008940:	2301      	movs	r3, #1
 8008942:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008944:	2300      	movs	r3, #0
 8008946:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008948:	2300      	movs	r3, #0
 800894a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800894c:	f107 0314 	add.w	r3, r7, #20
 8008950:	4619      	mov	r1, r3
 8008952:	4804      	ldr	r0, [pc, #16]	; (8008964 <MX_GPIO_Init+0xc4>)
 8008954:	f001 ff34 	bl	800a7c0 <HAL_GPIO_Init>

}
 8008958:	bf00      	nop
 800895a:	3728      	adds	r7, #40	; 0x28
 800895c:	46bd      	mov	sp, r7
 800895e:	bd80      	pop	{r7, pc}
 8008960:	58024400 	.word	0x58024400
 8008964:	58020c00 	.word	0x58020c00

08008968 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008968:	b480      	push	{r7}
 800896a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800896c:	b672      	cpsid	i
}
 800896e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8008970:	e7fe      	b.n	8008970 <Error_Handler+0x8>
	...

08008974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008974:	b480      	push	{r7}
 8008976:	b083      	sub	sp, #12
 8008978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800897a:	4b0a      	ldr	r3, [pc, #40]	; (80089a4 <HAL_MspInit+0x30>)
 800897c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008980:	4a08      	ldr	r2, [pc, #32]	; (80089a4 <HAL_MspInit+0x30>)
 8008982:	f043 0302 	orr.w	r3, r3, #2
 8008986:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800898a:	4b06      	ldr	r3, [pc, #24]	; (80089a4 <HAL_MspInit+0x30>)
 800898c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8008990:	f003 0302 	and.w	r3, r3, #2
 8008994:	607b      	str	r3, [r7, #4]
 8008996:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8008998:	bf00      	nop
 800899a:	370c      	adds	r7, #12
 800899c:	46bd      	mov	sp, r7
 800899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a2:	4770      	bx	lr
 80089a4:	58024400 	.word	0x58024400

080089a8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80089a8:	b580      	push	{r7, lr}
 80089aa:	b0ba      	sub	sp, #232	; 0xe8
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80089b0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80089b4:	2200      	movs	r2, #0
 80089b6:	601a      	str	r2, [r3, #0]
 80089b8:	605a      	str	r2, [r3, #4]
 80089ba:	609a      	str	r2, [r3, #8]
 80089bc:	60da      	str	r2, [r3, #12]
 80089be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80089c0:	f107 0310 	add.w	r3, r7, #16
 80089c4:	22c0      	movs	r2, #192	; 0xc0
 80089c6:	2100      	movs	r1, #0
 80089c8:	4618      	mov	r0, r3
 80089ca:	f00b fb81 	bl	80140d0 <memset>
  if(hfdcan->Instance==FDCAN1)
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	4a2f      	ldr	r2, [pc, #188]	; (8008a90 <HAL_FDCAN_MspInit+0xe8>)
 80089d4:	4293      	cmp	r3, r2
 80089d6:	d156      	bne.n	8008a86 <HAL_FDCAN_MspInit+0xde>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80089d8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80089dc:	f04f 0300 	mov.w	r3, #0
 80089e0:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 80089e4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80089e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80089ec:	f107 0310 	add.w	r3, r7, #16
 80089f0:	4618      	mov	r0, r3
 80089f2:	f004 fb6b 	bl	800d0cc <HAL_RCCEx_PeriphCLKConfig>
 80089f6:	4603      	mov	r3, r0
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d001      	beq.n	8008a00 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 80089fc:	f7ff ffb4 	bl	8008968 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8008a00:	4b24      	ldr	r3, [pc, #144]	; (8008a94 <HAL_FDCAN_MspInit+0xec>)
 8008a02:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8008a06:	4a23      	ldr	r2, [pc, #140]	; (8008a94 <HAL_FDCAN_MspInit+0xec>)
 8008a08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008a0c:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 8008a10:	4b20      	ldr	r3, [pc, #128]	; (8008a94 <HAL_FDCAN_MspInit+0xec>)
 8008a12:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8008a16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a1a:	60fb      	str	r3, [r7, #12]
 8008a1c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8008a1e:	4b1d      	ldr	r3, [pc, #116]	; (8008a94 <HAL_FDCAN_MspInit+0xec>)
 8008a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008a24:	4a1b      	ldr	r2, [pc, #108]	; (8008a94 <HAL_FDCAN_MspInit+0xec>)
 8008a26:	f043 0308 	orr.w	r3, r3, #8
 8008a2a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8008a2e:	4b19      	ldr	r3, [pc, #100]	; (8008a94 <HAL_FDCAN_MspInit+0xec>)
 8008a30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008a34:	f003 0308 	and.w	r3, r3, #8
 8008a38:	60bb      	str	r3, [r7, #8]
 8008a3a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8008a3c:	2303      	movs	r3, #3
 8008a3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008a42:	2302      	movs	r3, #2
 8008a44:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008a48:	2300      	movs	r3, #0
 8008a4a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008a4e:	2300      	movs	r3, #0
 8008a50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8008a54:	2309      	movs	r3, #9
 8008a56:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8008a5a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8008a5e:	4619      	mov	r1, r3
 8008a60:	480d      	ldr	r0, [pc, #52]	; (8008a98 <HAL_FDCAN_MspInit+0xf0>)
 8008a62:	f001 fead 	bl	800a7c0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8008a66:	2200      	movs	r2, #0
 8008a68:	2100      	movs	r1, #0
 8008a6a:	2013      	movs	r0, #19
 8008a6c:	f000 fbf5 	bl	800925a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8008a70:	2013      	movs	r0, #19
 8008a72:	f000 fc0c 	bl	800928e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8008a76:	2200      	movs	r2, #0
 8008a78:	2100      	movs	r1, #0
 8008a7a:	2015      	movs	r0, #21
 8008a7c:	f000 fbed 	bl	800925a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8008a80:	2015      	movs	r0, #21
 8008a82:	f000 fc04 	bl	800928e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8008a86:	bf00      	nop
 8008a88:	37e8      	adds	r7, #232	; 0xe8
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	bd80      	pop	{r7, pc}
 8008a8e:	bf00      	nop
 8008a90:	4000a000 	.word	0x4000a000
 8008a94:	58024400 	.word	0x58024400
 8008a98:	58020c00 	.word	0x58020c00

08008a9c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b0b4      	sub	sp, #208	; 0xd0
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8008aa4:	f107 0310 	add.w	r3, r7, #16
 8008aa8:	22c0      	movs	r2, #192	; 0xc0
 8008aaa:	2100      	movs	r1, #0
 8008aac:	4618      	mov	r0, r3
 8008aae:	f00b fb0f 	bl	80140d0 <memset>
  if(hrng->Instance==RNG)
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	4a14      	ldr	r2, [pc, #80]	; (8008b08 <HAL_RNG_MspInit+0x6c>)
 8008ab8:	4293      	cmp	r3, r2
 8008aba:	d121      	bne.n	8008b00 <HAL_RNG_MspInit+0x64>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 8008abc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8008ac0:	f04f 0300 	mov.w	r3, #0
 8008ac4:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 8008ac8:	2300      	movs	r3, #0
 8008aca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8008ace:	f107 0310 	add.w	r3, r7, #16
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	f004 fafa 	bl	800d0cc <HAL_RCCEx_PeriphCLKConfig>
 8008ad8:	4603      	mov	r3, r0
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	d001      	beq.n	8008ae2 <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 8008ade:	f7ff ff43 	bl	8008968 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 8008ae2:	4b0a      	ldr	r3, [pc, #40]	; (8008b0c <HAL_RNG_MspInit+0x70>)
 8008ae4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008ae8:	4a08      	ldr	r2, [pc, #32]	; (8008b0c <HAL_RNG_MspInit+0x70>)
 8008aea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008aee:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 8008af2:	4b06      	ldr	r3, [pc, #24]	; (8008b0c <HAL_RNG_MspInit+0x70>)
 8008af4:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8008af8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008afc:	60fb      	str	r3, [r7, #12]
 8008afe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 8008b00:	bf00      	nop
 8008b02:	37d0      	adds	r7, #208	; 0xd0
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}
 8008b08:	48021800 	.word	0x48021800
 8008b0c:	58024400 	.word	0x58024400

08008b10 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8008b10:	b580      	push	{r7, lr}
 8008b12:	b084      	sub	sp, #16
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a0e      	ldr	r2, [pc, #56]	; (8008b58 <HAL_TIM_Base_MspInit+0x48>)
 8008b1e:	4293      	cmp	r3, r2
 8008b20:	d116      	bne.n	8008b50 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 8008b22:	4b0e      	ldr	r3, [pc, #56]	; (8008b5c <HAL_TIM_Base_MspInit+0x4c>)
 8008b24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008b28:	4a0c      	ldr	r2, [pc, #48]	; (8008b5c <HAL_TIM_Base_MspInit+0x4c>)
 8008b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b2e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8008b32:	4b0a      	ldr	r3, [pc, #40]	; (8008b5c <HAL_TIM_Base_MspInit+0x4c>)
 8008b34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8008b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b3c:	60fb      	str	r3, [r7, #12]
 8008b3e:	68fb      	ldr	r3, [r7, #12]
    /* TIM14 interrupt Init */
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8008b40:	2200      	movs	r2, #0
 8008b42:	2100      	movs	r1, #0
 8008b44:	202d      	movs	r0, #45	; 0x2d
 8008b46:	f000 fb88 	bl	800925a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8008b4a:	202d      	movs	r0, #45	; 0x2d
 8008b4c:	f000 fb9f 	bl	800928e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 8008b50:	bf00      	nop
 8008b52:	3710      	adds	r7, #16
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}
 8008b58:	40002000 	.word	0x40002000
 8008b5c:	58024400 	.word	0x58024400

08008b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008b60:	b480      	push	{r7}
 8008b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8008b64:	e7fe      	b.n	8008b64 <NMI_Handler+0x4>

08008b66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008b66:	b480      	push	{r7}
 8008b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008b6a:	e7fe      	b.n	8008b6a <HardFault_Handler+0x4>

08008b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008b6c:	b480      	push	{r7}
 8008b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008b70:	e7fe      	b.n	8008b70 <MemManage_Handler+0x4>

08008b72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008b72:	b480      	push	{r7}
 8008b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008b76:	e7fe      	b.n	8008b76 <BusFault_Handler+0x4>

08008b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008b78:	b480      	push	{r7}
 8008b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008b7c:	e7fe      	b.n	8008b7c <UsageFault_Handler+0x4>

08008b7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8008b7e:	b480      	push	{r7}
 8008b80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8008b82:	bf00      	nop
 8008b84:	46bd      	mov	sp, r7
 8008b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b8a:	4770      	bx	lr

08008b8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008b90:	bf00      	nop
 8008b92:	46bd      	mov	sp, r7
 8008b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b98:	4770      	bx	lr

08008b9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008b9a:	b480      	push	{r7}
 8008b9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8008b9e:	bf00      	nop
 8008ba0:	46bd      	mov	sp, r7
 8008ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba6:	4770      	bx	lr

08008ba8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008ba8:	b580      	push	{r7, lr}
 8008baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008bac:	f000 fa14 	bl	8008fd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8008bb0:	bf00      	nop
 8008bb2:	bd80      	pop	{r7, pc}

08008bb4 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8008bb8:	4802      	ldr	r0, [pc, #8]	; (8008bc4 <FDCAN1_IT0_IRQHandler+0x10>)
 8008bba:	f001 f8ff 	bl	8009dbc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8008bbe:	bf00      	nop
 8008bc0:	bd80      	pop	{r7, pc}
 8008bc2:	bf00      	nop
 8008bc4:	240005b4 	.word	0x240005b4

08008bc8 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8008bc8:	b580      	push	{r7, lr}
 8008bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8008bcc:	4802      	ldr	r0, [pc, #8]	; (8008bd8 <FDCAN1_IT1_IRQHandler+0x10>)
 8008bce:	f001 f8f5 	bl	8009dbc <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8008bd2:	bf00      	nop
 8008bd4:	bd80      	pop	{r7, pc}
 8008bd6:	bf00      	nop
 8008bd8:	240005b4 	.word	0x240005b4

08008bdc <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 8008bdc:	b580      	push	{r7, lr}
 8008bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8008be0:	4802      	ldr	r0, [pc, #8]	; (8008bec <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 8008be2:	f005 ff26 	bl	800ea32 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 8008be6:	bf00      	nop
 8008be8:	bd80      	pop	{r7, pc}
 8008bea:	bf00      	nop
 8008bec:	24000668 	.word	0x24000668

08008bf0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8008bf0:	b580      	push	{r7, lr}
 8008bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8008bf4:	4802      	ldr	r0, [pc, #8]	; (8008c00 <OTG_FS_IRQHandler+0x10>)
 8008bf6:	f002 f905 	bl	800ae04 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8008bfa:	bf00      	nop
 8008bfc:	bd80      	pop	{r7, pc}
 8008bfe:	bf00      	nop
 8008c00:	24001c18 	.word	0x24001c18

08008c04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8008c04:	b480      	push	{r7}
 8008c06:	af00      	add	r7, sp, #0
  return 1;
 8008c08:	2301      	movs	r3, #1
}
 8008c0a:	4618      	mov	r0, r3
 8008c0c:	46bd      	mov	sp, r7
 8008c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c12:	4770      	bx	lr

08008c14 <_kill>:

int _kill(int pid, int sig)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b082      	sub	sp, #8
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8008c1e:	f00b f827 	bl	8013c70 <__errno>
 8008c22:	4603      	mov	r3, r0
 8008c24:	2216      	movs	r2, #22
 8008c26:	601a      	str	r2, [r3, #0]
  return -1;
 8008c28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008c2c:	4618      	mov	r0, r3
 8008c2e:	3708      	adds	r7, #8
 8008c30:	46bd      	mov	sp, r7
 8008c32:	bd80      	pop	{r7, pc}

08008c34 <_exit>:

void _exit (int status)
{
 8008c34:	b580      	push	{r7, lr}
 8008c36:	b082      	sub	sp, #8
 8008c38:	af00      	add	r7, sp, #0
 8008c3a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8008c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8008c40:	6878      	ldr	r0, [r7, #4]
 8008c42:	f7ff ffe7 	bl	8008c14 <_kill>
  while (1) {}    /* Make sure we hang here */
 8008c46:	e7fe      	b.n	8008c46 <_exit+0x12>

08008c48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b086      	sub	sp, #24
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	60f8      	str	r0, [r7, #12]
 8008c50:	60b9      	str	r1, [r7, #8]
 8008c52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c54:	2300      	movs	r3, #0
 8008c56:	617b      	str	r3, [r7, #20]
 8008c58:	e00a      	b.n	8008c70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8008c5a:	f3af 8000 	nop.w
 8008c5e:	4601      	mov	r1, r0
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	1c5a      	adds	r2, r3, #1
 8008c64:	60ba      	str	r2, [r7, #8]
 8008c66:	b2ca      	uxtb	r2, r1
 8008c68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c6a:	697b      	ldr	r3, [r7, #20]
 8008c6c:	3301      	adds	r3, #1
 8008c6e:	617b      	str	r3, [r7, #20]
 8008c70:	697a      	ldr	r2, [r7, #20]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	429a      	cmp	r2, r3
 8008c76:	dbf0      	blt.n	8008c5a <_read+0x12>
  }

  return len;
 8008c78:	687b      	ldr	r3, [r7, #4]
}
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	3718      	adds	r7, #24
 8008c7e:	46bd      	mov	sp, r7
 8008c80:	bd80      	pop	{r7, pc}

08008c82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8008c82:	b580      	push	{r7, lr}
 8008c84:	b086      	sub	sp, #24
 8008c86:	af00      	add	r7, sp, #0
 8008c88:	60f8      	str	r0, [r7, #12]
 8008c8a:	60b9      	str	r1, [r7, #8]
 8008c8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008c8e:	2300      	movs	r3, #0
 8008c90:	617b      	str	r3, [r7, #20]
 8008c92:	e009      	b.n	8008ca8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8008c94:	68bb      	ldr	r3, [r7, #8]
 8008c96:	1c5a      	adds	r2, r3, #1
 8008c98:	60ba      	str	r2, [r7, #8]
 8008c9a:	781b      	ldrb	r3, [r3, #0]
 8008c9c:	4618      	mov	r0, r3
 8008c9e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8008ca2:	697b      	ldr	r3, [r7, #20]
 8008ca4:	3301      	adds	r3, #1
 8008ca6:	617b      	str	r3, [r7, #20]
 8008ca8:	697a      	ldr	r2, [r7, #20]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	429a      	cmp	r2, r3
 8008cae:	dbf1      	blt.n	8008c94 <_write+0x12>
  }
  return len;
 8008cb0:	687b      	ldr	r3, [r7, #4]
}
 8008cb2:	4618      	mov	r0, r3
 8008cb4:	3718      	adds	r7, #24
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}

08008cba <_close>:

int _close(int file)
{
 8008cba:	b480      	push	{r7}
 8008cbc:	b083      	sub	sp, #12
 8008cbe:	af00      	add	r7, sp, #0
 8008cc0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8008cc2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	370c      	adds	r7, #12
 8008cca:	46bd      	mov	sp, r7
 8008ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd0:	4770      	bx	lr

08008cd2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8008cd2:	b480      	push	{r7}
 8008cd4:	b083      	sub	sp, #12
 8008cd6:	af00      	add	r7, sp, #0
 8008cd8:	6078      	str	r0, [r7, #4]
 8008cda:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8008ce2:	605a      	str	r2, [r3, #4]
  return 0;
 8008ce4:	2300      	movs	r3, #0
}
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	370c      	adds	r7, #12
 8008cea:	46bd      	mov	sp, r7
 8008cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf0:	4770      	bx	lr

08008cf2 <_isatty>:

int _isatty(int file)
{
 8008cf2:	b480      	push	{r7}
 8008cf4:	b083      	sub	sp, #12
 8008cf6:	af00      	add	r7, sp, #0
 8008cf8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8008cfa:	2301      	movs	r3, #1
}
 8008cfc:	4618      	mov	r0, r3
 8008cfe:	370c      	adds	r7, #12
 8008d00:	46bd      	mov	sp, r7
 8008d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d06:	4770      	bx	lr

08008d08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8008d08:	b480      	push	{r7}
 8008d0a:	b085      	sub	sp, #20
 8008d0c:	af00      	add	r7, sp, #0
 8008d0e:	60f8      	str	r0, [r7, #12]
 8008d10:	60b9      	str	r1, [r7, #8]
 8008d12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8008d14:	2300      	movs	r3, #0
}
 8008d16:	4618      	mov	r0, r3
 8008d18:	3714      	adds	r7, #20
 8008d1a:	46bd      	mov	sp, r7
 8008d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d20:	4770      	bx	lr
	...

08008d24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8008d24:	b580      	push	{r7, lr}
 8008d26:	b086      	sub	sp, #24
 8008d28:	af00      	add	r7, sp, #0
 8008d2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8008d2c:	4a14      	ldr	r2, [pc, #80]	; (8008d80 <_sbrk+0x5c>)
 8008d2e:	4b15      	ldr	r3, [pc, #84]	; (8008d84 <_sbrk+0x60>)
 8008d30:	1ad3      	subs	r3, r2, r3
 8008d32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8008d34:	697b      	ldr	r3, [r7, #20]
 8008d36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8008d38:	4b13      	ldr	r3, [pc, #76]	; (8008d88 <_sbrk+0x64>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d102      	bne.n	8008d46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8008d40:	4b11      	ldr	r3, [pc, #68]	; (8008d88 <_sbrk+0x64>)
 8008d42:	4a12      	ldr	r2, [pc, #72]	; (8008d8c <_sbrk+0x68>)
 8008d44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8008d46:	4b10      	ldr	r3, [pc, #64]	; (8008d88 <_sbrk+0x64>)
 8008d48:	681a      	ldr	r2, [r3, #0]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	4413      	add	r3, r2
 8008d4e:	693a      	ldr	r2, [r7, #16]
 8008d50:	429a      	cmp	r2, r3
 8008d52:	d207      	bcs.n	8008d64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8008d54:	f00a ff8c 	bl	8013c70 <__errno>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	220c      	movs	r2, #12
 8008d5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8008d5e:	f04f 33ff 	mov.w	r3, #4294967295
 8008d62:	e009      	b.n	8008d78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8008d64:	4b08      	ldr	r3, [pc, #32]	; (8008d88 <_sbrk+0x64>)
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8008d6a:	4b07      	ldr	r3, [pc, #28]	; (8008d88 <_sbrk+0x64>)
 8008d6c:	681a      	ldr	r2, [r3, #0]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	4413      	add	r3, r2
 8008d72:	4a05      	ldr	r2, [pc, #20]	; (8008d88 <_sbrk+0x64>)
 8008d74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8008d76:	68fb      	ldr	r3, [r7, #12]
}
 8008d78:	4618      	mov	r0, r3
 8008d7a:	3718      	adds	r7, #24
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	bd80      	pop	{r7, pc}
 8008d80:	24060000 	.word	0x24060000
 8008d84:	00000400 	.word	0x00000400
 8008d88:	2400071c 	.word	0x2400071c
 8008d8c:	24002358 	.word	0x24002358

08008d90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8008d90:	b480      	push	{r7}
 8008d92:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8008d94:	4b37      	ldr	r3, [pc, #220]	; (8008e74 <SystemInit+0xe4>)
 8008d96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d9a:	4a36      	ldr	r2, [pc, #216]	; (8008e74 <SystemInit+0xe4>)
 8008d9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008da0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008da4:	4b34      	ldr	r3, [pc, #208]	; (8008e78 <SystemInit+0xe8>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f003 030f 	and.w	r3, r3, #15
 8008dac:	2b06      	cmp	r3, #6
 8008dae:	d807      	bhi.n	8008dc0 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008db0:	4b31      	ldr	r3, [pc, #196]	; (8008e78 <SystemInit+0xe8>)
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	f023 030f 	bic.w	r3, r3, #15
 8008db8:	4a2f      	ldr	r2, [pc, #188]	; (8008e78 <SystemInit+0xe8>)
 8008dba:	f043 0307 	orr.w	r3, r3, #7
 8008dbe:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8008dc0:	4b2e      	ldr	r3, [pc, #184]	; (8008e7c <SystemInit+0xec>)
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	4a2d      	ldr	r2, [pc, #180]	; (8008e7c <SystemInit+0xec>)
 8008dc6:	f043 0301 	orr.w	r3, r3, #1
 8008dca:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008dcc:	4b2b      	ldr	r3, [pc, #172]	; (8008e7c <SystemInit+0xec>)
 8008dce:	2200      	movs	r2, #0
 8008dd0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8008dd2:	4b2a      	ldr	r3, [pc, #168]	; (8008e7c <SystemInit+0xec>)
 8008dd4:	681a      	ldr	r2, [r3, #0]
 8008dd6:	4929      	ldr	r1, [pc, #164]	; (8008e7c <SystemInit+0xec>)
 8008dd8:	4b29      	ldr	r3, [pc, #164]	; (8008e80 <SystemInit+0xf0>)
 8008dda:	4013      	ands	r3, r2
 8008ddc:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8008dde:	4b26      	ldr	r3, [pc, #152]	; (8008e78 <SystemInit+0xe8>)
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	f003 0308 	and.w	r3, r3, #8
 8008de6:	2b00      	cmp	r3, #0
 8008de8:	d007      	beq.n	8008dfa <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8008dea:	4b23      	ldr	r3, [pc, #140]	; (8008e78 <SystemInit+0xe8>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f023 030f 	bic.w	r3, r3, #15
 8008df2:	4a21      	ldr	r2, [pc, #132]	; (8008e78 <SystemInit+0xe8>)
 8008df4:	f043 0307 	orr.w	r3, r3, #7
 8008df8:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8008dfa:	4b20      	ldr	r3, [pc, #128]	; (8008e7c <SystemInit+0xec>)
 8008dfc:	2200      	movs	r2, #0
 8008dfe:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8008e00:	4b1e      	ldr	r3, [pc, #120]	; (8008e7c <SystemInit+0xec>)
 8008e02:	2200      	movs	r2, #0
 8008e04:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8008e06:	4b1d      	ldr	r3, [pc, #116]	; (8008e7c <SystemInit+0xec>)
 8008e08:	2200      	movs	r2, #0
 8008e0a:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8008e0c:	4b1b      	ldr	r3, [pc, #108]	; (8008e7c <SystemInit+0xec>)
 8008e0e:	4a1d      	ldr	r2, [pc, #116]	; (8008e84 <SystemInit+0xf4>)
 8008e10:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8008e12:	4b1a      	ldr	r3, [pc, #104]	; (8008e7c <SystemInit+0xec>)
 8008e14:	4a1c      	ldr	r2, [pc, #112]	; (8008e88 <SystemInit+0xf8>)
 8008e16:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8008e18:	4b18      	ldr	r3, [pc, #96]	; (8008e7c <SystemInit+0xec>)
 8008e1a:	4a1c      	ldr	r2, [pc, #112]	; (8008e8c <SystemInit+0xfc>)
 8008e1c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8008e1e:	4b17      	ldr	r3, [pc, #92]	; (8008e7c <SystemInit+0xec>)
 8008e20:	2200      	movs	r2, #0
 8008e22:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8008e24:	4b15      	ldr	r3, [pc, #84]	; (8008e7c <SystemInit+0xec>)
 8008e26:	4a19      	ldr	r2, [pc, #100]	; (8008e8c <SystemInit+0xfc>)
 8008e28:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8008e2a:	4b14      	ldr	r3, [pc, #80]	; (8008e7c <SystemInit+0xec>)
 8008e2c:	2200      	movs	r2, #0
 8008e2e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8008e30:	4b12      	ldr	r3, [pc, #72]	; (8008e7c <SystemInit+0xec>)
 8008e32:	4a16      	ldr	r2, [pc, #88]	; (8008e8c <SystemInit+0xfc>)
 8008e34:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8008e36:	4b11      	ldr	r3, [pc, #68]	; (8008e7c <SystemInit+0xec>)
 8008e38:	2200      	movs	r2, #0
 8008e3a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8008e3c:	4b0f      	ldr	r3, [pc, #60]	; (8008e7c <SystemInit+0xec>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a0e      	ldr	r2, [pc, #56]	; (8008e7c <SystemInit+0xec>)
 8008e42:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008e46:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8008e48:	4b0c      	ldr	r3, [pc, #48]	; (8008e7c <SystemInit+0xec>)
 8008e4a:	2200      	movs	r2, #0
 8008e4c:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8008e4e:	4b10      	ldr	r3, [pc, #64]	; (8008e90 <SystemInit+0x100>)
 8008e50:	681a      	ldr	r2, [r3, #0]
 8008e52:	4b10      	ldr	r3, [pc, #64]	; (8008e94 <SystemInit+0x104>)
 8008e54:	4013      	ands	r3, r2
 8008e56:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008e5a:	d202      	bcs.n	8008e62 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8008e5c:	4b0e      	ldr	r3, [pc, #56]	; (8008e98 <SystemInit+0x108>)
 8008e5e:	2201      	movs	r2, #1
 8008e60:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8008e62:	4b0e      	ldr	r3, [pc, #56]	; (8008e9c <SystemInit+0x10c>)
 8008e64:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8008e68:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8008e6a:	bf00      	nop
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr
 8008e74:	e000ed00 	.word	0xe000ed00
 8008e78:	52002000 	.word	0x52002000
 8008e7c:	58024400 	.word	0x58024400
 8008e80:	eaf6ed7f 	.word	0xeaf6ed7f
 8008e84:	02020200 	.word	0x02020200
 8008e88:	01ff0000 	.word	0x01ff0000
 8008e8c:	01010280 	.word	0x01010280
 8008e90:	5c001000 	.word	0x5c001000
 8008e94:	ffff0000 	.word	0xffff0000
 8008e98:	51008108 	.word	0x51008108
 8008e9c:	52004000 	.word	0x52004000

08008ea0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8008ea0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008ed8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8008ea4:	f7ff ff74 	bl	8008d90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8008ea8:	480c      	ldr	r0, [pc, #48]	; (8008edc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8008eaa:	490d      	ldr	r1, [pc, #52]	; (8008ee0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8008eac:	4a0d      	ldr	r2, [pc, #52]	; (8008ee4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8008eae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8008eb0:	e002      	b.n	8008eb8 <LoopCopyDataInit>

08008eb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8008eb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8008eb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8008eb6:	3304      	adds	r3, #4

08008eb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8008eb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8008eba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8008ebc:	d3f9      	bcc.n	8008eb2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8008ebe:	4a0a      	ldr	r2, [pc, #40]	; (8008ee8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8008ec0:	4c0a      	ldr	r4, [pc, #40]	; (8008eec <LoopFillZerobss+0x22>)
  movs r3, #0
 8008ec2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8008ec4:	e001      	b.n	8008eca <LoopFillZerobss>

08008ec6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8008ec6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8008ec8:	3204      	adds	r2, #4

08008eca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8008eca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8008ecc:	d3fb      	bcc.n	8008ec6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8008ece:	f00b f89f 	bl	8014010 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008ed2:	f7ff fb7f 	bl	80085d4 <main>
  bx  lr
 8008ed6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8008ed8:	24060000 	.word	0x24060000
  ldr r0, =_sdata
 8008edc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8008ee0:	24000534 	.word	0x24000534
  ldr r2, =_sidata
 8008ee4:	08016074 	.word	0x08016074
  ldr r2, =_sbss
 8008ee8:	24000534 	.word	0x24000534
  ldr r4, =_ebss
 8008eec:	24002354 	.word	0x24002354

08008ef0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008ef0:	e7fe      	b.n	8008ef0 <ADC3_IRQHandler>
	...

08008ef4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008ef4:	b580      	push	{r7, lr}
 8008ef6:	b082      	sub	sp, #8
 8008ef8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008efa:	2003      	movs	r0, #3
 8008efc:	f000 f9a2 	bl	8009244 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8008f00:	f003 ff3a 	bl	800cd78 <HAL_RCC_GetSysClockFreq>
 8008f04:	4602      	mov	r2, r0
 8008f06:	4b15      	ldr	r3, [pc, #84]	; (8008f5c <HAL_Init+0x68>)
 8008f08:	699b      	ldr	r3, [r3, #24]
 8008f0a:	0a1b      	lsrs	r3, r3, #8
 8008f0c:	f003 030f 	and.w	r3, r3, #15
 8008f10:	4913      	ldr	r1, [pc, #76]	; (8008f60 <HAL_Init+0x6c>)
 8008f12:	5ccb      	ldrb	r3, [r1, r3]
 8008f14:	f003 031f 	and.w	r3, r3, #31
 8008f18:	fa22 f303 	lsr.w	r3, r2, r3
 8008f1c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8008f1e:	4b0f      	ldr	r3, [pc, #60]	; (8008f5c <HAL_Init+0x68>)
 8008f20:	699b      	ldr	r3, [r3, #24]
 8008f22:	f003 030f 	and.w	r3, r3, #15
 8008f26:	4a0e      	ldr	r2, [pc, #56]	; (8008f60 <HAL_Init+0x6c>)
 8008f28:	5cd3      	ldrb	r3, [r2, r3]
 8008f2a:	f003 031f 	and.w	r3, r3, #31
 8008f2e:	687a      	ldr	r2, [r7, #4]
 8008f30:	fa22 f303 	lsr.w	r3, r2, r3
 8008f34:	4a0b      	ldr	r2, [pc, #44]	; (8008f64 <HAL_Init+0x70>)
 8008f36:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8008f38:	4a0b      	ldr	r2, [pc, #44]	; (8008f68 <HAL_Init+0x74>)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8008f3e:	200f      	movs	r0, #15
 8008f40:	f000 f814 	bl	8008f6c <HAL_InitTick>
 8008f44:	4603      	mov	r3, r0
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d001      	beq.n	8008f4e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	e002      	b.n	8008f54 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8008f4e:	f7ff fd11 	bl	8008974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008f52:	2300      	movs	r3, #0
}
 8008f54:	4618      	mov	r0, r3
 8008f56:	3708      	adds	r7, #8
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	58024400 	.word	0x58024400
 8008f60:	08015dec 	.word	0x08015dec
 8008f64:	240003d4 	.word	0x240003d4
 8008f68:	240003d0 	.word	0x240003d0

08008f6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	af00      	add	r7, sp, #0
 8008f72:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8008f74:	4b15      	ldr	r3, [pc, #84]	; (8008fcc <HAL_InitTick+0x60>)
 8008f76:	781b      	ldrb	r3, [r3, #0]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d101      	bne.n	8008f80 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	e021      	b.n	8008fc4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8008f80:	4b13      	ldr	r3, [pc, #76]	; (8008fd0 <HAL_InitTick+0x64>)
 8008f82:	681a      	ldr	r2, [r3, #0]
 8008f84:	4b11      	ldr	r3, [pc, #68]	; (8008fcc <HAL_InitTick+0x60>)
 8008f86:	781b      	ldrb	r3, [r3, #0]
 8008f88:	4619      	mov	r1, r3
 8008f8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8008f8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8008f92:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f96:	4618      	mov	r0, r3
 8008f98:	f000 f98b 	bl	80092b2 <HAL_SYSTICK_Config>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	2b00      	cmp	r3, #0
 8008fa0:	d001      	beq.n	8008fa6 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8008fa2:	2301      	movs	r3, #1
 8008fa4:	e00e      	b.n	8008fc4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	2b0f      	cmp	r3, #15
 8008faa:	d80a      	bhi.n	8008fc2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8008fac:	2200      	movs	r2, #0
 8008fae:	6879      	ldr	r1, [r7, #4]
 8008fb0:	f04f 30ff 	mov.w	r0, #4294967295
 8008fb4:	f000 f951 	bl	800925a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008fb8:	4a06      	ldr	r2, [pc, #24]	; (8008fd4 <HAL_InitTick+0x68>)
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8008fbe:	2300      	movs	r3, #0
 8008fc0:	e000      	b.n	8008fc4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8008fc2:	2301      	movs	r3, #1
}
 8008fc4:	4618      	mov	r0, r3
 8008fc6:	3708      	adds	r7, #8
 8008fc8:	46bd      	mov	sp, r7
 8008fca:	bd80      	pop	{r7, pc}
 8008fcc:	240003dc 	.word	0x240003dc
 8008fd0:	240003d0 	.word	0x240003d0
 8008fd4:	240003d8 	.word	0x240003d8

08008fd8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008fd8:	b480      	push	{r7}
 8008fda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8008fdc:	4b06      	ldr	r3, [pc, #24]	; (8008ff8 <HAL_IncTick+0x20>)
 8008fde:	781b      	ldrb	r3, [r3, #0]
 8008fe0:	461a      	mov	r2, r3
 8008fe2:	4b06      	ldr	r3, [pc, #24]	; (8008ffc <HAL_IncTick+0x24>)
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	4413      	add	r3, r2
 8008fe8:	4a04      	ldr	r2, [pc, #16]	; (8008ffc <HAL_IncTick+0x24>)
 8008fea:	6013      	str	r3, [r2, #0]
}
 8008fec:	bf00      	nop
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ff4:	4770      	bx	lr
 8008ff6:	bf00      	nop
 8008ff8:	240003dc 	.word	0x240003dc
 8008ffc:	24000720 	.word	0x24000720

08009000 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8009000:	b480      	push	{r7}
 8009002:	af00      	add	r7, sp, #0
  return uwTick;
 8009004:	4b03      	ldr	r3, [pc, #12]	; (8009014 <HAL_GetTick+0x14>)
 8009006:	681b      	ldr	r3, [r3, #0]
}
 8009008:	4618      	mov	r0, r3
 800900a:	46bd      	mov	sp, r7
 800900c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009010:	4770      	bx	lr
 8009012:	bf00      	nop
 8009014:	24000720 	.word	0x24000720

08009018 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8009018:	b580      	push	{r7, lr}
 800901a:	b084      	sub	sp, #16
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8009020:	f7ff ffee 	bl	8009000 <HAL_GetTick>
 8009024:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8009026:	687b      	ldr	r3, [r7, #4]
 8009028:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009030:	d005      	beq.n	800903e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8009032:	4b0a      	ldr	r3, [pc, #40]	; (800905c <HAL_Delay+0x44>)
 8009034:	781b      	ldrb	r3, [r3, #0]
 8009036:	461a      	mov	r2, r3
 8009038:	68fb      	ldr	r3, [r7, #12]
 800903a:	4413      	add	r3, r2
 800903c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800903e:	bf00      	nop
 8009040:	f7ff ffde 	bl	8009000 <HAL_GetTick>
 8009044:	4602      	mov	r2, r0
 8009046:	68bb      	ldr	r3, [r7, #8]
 8009048:	1ad3      	subs	r3, r2, r3
 800904a:	68fa      	ldr	r2, [r7, #12]
 800904c:	429a      	cmp	r2, r3
 800904e:	d8f7      	bhi.n	8009040 <HAL_Delay+0x28>
  {
  }
}
 8009050:	bf00      	nop
 8009052:	bf00      	nop
 8009054:	3710      	adds	r7, #16
 8009056:	46bd      	mov	sp, r7
 8009058:	bd80      	pop	{r7, pc}
 800905a:	bf00      	nop
 800905c:	240003dc 	.word	0x240003dc

08009060 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8009060:	b480      	push	{r7}
 8009062:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8009064:	4b03      	ldr	r3, [pc, #12]	; (8009074 <HAL_GetREVID+0x14>)
 8009066:	681b      	ldr	r3, [r3, #0]
 8009068:	0c1b      	lsrs	r3, r3, #16
}
 800906a:	4618      	mov	r0, r3
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr
 8009074:	5c001000 	.word	0x5c001000

08009078 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009078:	b480      	push	{r7}
 800907a:	b085      	sub	sp, #20
 800907c:	af00      	add	r7, sp, #0
 800907e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	f003 0307 	and.w	r3, r3, #7
 8009086:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009088:	4b0b      	ldr	r3, [pc, #44]	; (80090b8 <__NVIC_SetPriorityGrouping+0x40>)
 800908a:	68db      	ldr	r3, [r3, #12]
 800908c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800908e:	68ba      	ldr	r2, [r7, #8]
 8009090:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8009094:	4013      	ands	r3, r2
 8009096:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800909c:	68bb      	ldr	r3, [r7, #8]
 800909e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80090a0:	4b06      	ldr	r3, [pc, #24]	; (80090bc <__NVIC_SetPriorityGrouping+0x44>)
 80090a2:	4313      	orrs	r3, r2
 80090a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80090a6:	4a04      	ldr	r2, [pc, #16]	; (80090b8 <__NVIC_SetPriorityGrouping+0x40>)
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	60d3      	str	r3, [r2, #12]
}
 80090ac:	bf00      	nop
 80090ae:	3714      	adds	r7, #20
 80090b0:	46bd      	mov	sp, r7
 80090b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b6:	4770      	bx	lr
 80090b8:	e000ed00 	.word	0xe000ed00
 80090bc:	05fa0000 	.word	0x05fa0000

080090c0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80090c0:	b480      	push	{r7}
 80090c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80090c4:	4b04      	ldr	r3, [pc, #16]	; (80090d8 <__NVIC_GetPriorityGrouping+0x18>)
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	0a1b      	lsrs	r3, r3, #8
 80090ca:	f003 0307 	and.w	r3, r3, #7
}
 80090ce:	4618      	mov	r0, r3
 80090d0:	46bd      	mov	sp, r7
 80090d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090d6:	4770      	bx	lr
 80090d8:	e000ed00 	.word	0xe000ed00

080090dc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80090dc:	b480      	push	{r7}
 80090de:	b083      	sub	sp, #12
 80090e0:	af00      	add	r7, sp, #0
 80090e2:	4603      	mov	r3, r0
 80090e4:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80090e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	db0b      	blt.n	8009106 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80090ee:	88fb      	ldrh	r3, [r7, #6]
 80090f0:	f003 021f 	and.w	r2, r3, #31
 80090f4:	4907      	ldr	r1, [pc, #28]	; (8009114 <__NVIC_EnableIRQ+0x38>)
 80090f6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80090fa:	095b      	lsrs	r3, r3, #5
 80090fc:	2001      	movs	r0, #1
 80090fe:	fa00 f202 	lsl.w	r2, r0, r2
 8009102:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8009106:	bf00      	nop
 8009108:	370c      	adds	r7, #12
 800910a:	46bd      	mov	sp, r7
 800910c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009110:	4770      	bx	lr
 8009112:	bf00      	nop
 8009114:	e000e100 	.word	0xe000e100

08009118 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8009118:	b480      	push	{r7}
 800911a:	b083      	sub	sp, #12
 800911c:	af00      	add	r7, sp, #0
 800911e:	4603      	mov	r3, r0
 8009120:	6039      	str	r1, [r7, #0]
 8009122:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8009124:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009128:	2b00      	cmp	r3, #0
 800912a:	db0a      	blt.n	8009142 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	b2da      	uxtb	r2, r3
 8009130:	490c      	ldr	r1, [pc, #48]	; (8009164 <__NVIC_SetPriority+0x4c>)
 8009132:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009136:	0112      	lsls	r2, r2, #4
 8009138:	b2d2      	uxtb	r2, r2
 800913a:	440b      	add	r3, r1
 800913c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009140:	e00a      	b.n	8009158 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	b2da      	uxtb	r2, r3
 8009146:	4908      	ldr	r1, [pc, #32]	; (8009168 <__NVIC_SetPriority+0x50>)
 8009148:	88fb      	ldrh	r3, [r7, #6]
 800914a:	f003 030f 	and.w	r3, r3, #15
 800914e:	3b04      	subs	r3, #4
 8009150:	0112      	lsls	r2, r2, #4
 8009152:	b2d2      	uxtb	r2, r2
 8009154:	440b      	add	r3, r1
 8009156:	761a      	strb	r2, [r3, #24]
}
 8009158:	bf00      	nop
 800915a:	370c      	adds	r7, #12
 800915c:	46bd      	mov	sp, r7
 800915e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009162:	4770      	bx	lr
 8009164:	e000e100 	.word	0xe000e100
 8009168:	e000ed00 	.word	0xe000ed00

0800916c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800916c:	b480      	push	{r7}
 800916e:	b089      	sub	sp, #36	; 0x24
 8009170:	af00      	add	r7, sp, #0
 8009172:	60f8      	str	r0, [r7, #12]
 8009174:	60b9      	str	r1, [r7, #8]
 8009176:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f003 0307 	and.w	r3, r3, #7
 800917e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009180:	69fb      	ldr	r3, [r7, #28]
 8009182:	f1c3 0307 	rsb	r3, r3, #7
 8009186:	2b04      	cmp	r3, #4
 8009188:	bf28      	it	cs
 800918a:	2304      	movcs	r3, #4
 800918c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800918e:	69fb      	ldr	r3, [r7, #28]
 8009190:	3304      	adds	r3, #4
 8009192:	2b06      	cmp	r3, #6
 8009194:	d902      	bls.n	800919c <NVIC_EncodePriority+0x30>
 8009196:	69fb      	ldr	r3, [r7, #28]
 8009198:	3b03      	subs	r3, #3
 800919a:	e000      	b.n	800919e <NVIC_EncodePriority+0x32>
 800919c:	2300      	movs	r3, #0
 800919e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80091a0:	f04f 32ff 	mov.w	r2, #4294967295
 80091a4:	69bb      	ldr	r3, [r7, #24]
 80091a6:	fa02 f303 	lsl.w	r3, r2, r3
 80091aa:	43da      	mvns	r2, r3
 80091ac:	68bb      	ldr	r3, [r7, #8]
 80091ae:	401a      	ands	r2, r3
 80091b0:	697b      	ldr	r3, [r7, #20]
 80091b2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80091b4:	f04f 31ff 	mov.w	r1, #4294967295
 80091b8:	697b      	ldr	r3, [r7, #20]
 80091ba:	fa01 f303 	lsl.w	r3, r1, r3
 80091be:	43d9      	mvns	r1, r3
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80091c4:	4313      	orrs	r3, r2
         );
}
 80091c6:	4618      	mov	r0, r3
 80091c8:	3724      	adds	r7, #36	; 0x24
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr
	...

080091d4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80091d4:	b480      	push	{r7}
 80091d6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80091d8:	f3bf 8f4f 	dsb	sy
}
 80091dc:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80091de:	4b06      	ldr	r3, [pc, #24]	; (80091f8 <__NVIC_SystemReset+0x24>)
 80091e0:	68db      	ldr	r3, [r3, #12]
 80091e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 80091e6:	4904      	ldr	r1, [pc, #16]	; (80091f8 <__NVIC_SystemReset+0x24>)
 80091e8:	4b04      	ldr	r3, [pc, #16]	; (80091fc <__NVIC_SystemReset+0x28>)
 80091ea:	4313      	orrs	r3, r2
 80091ec:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80091ee:	f3bf 8f4f 	dsb	sy
}
 80091f2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80091f4:	bf00      	nop
 80091f6:	e7fd      	b.n	80091f4 <__NVIC_SystemReset+0x20>
 80091f8:	e000ed00 	.word	0xe000ed00
 80091fc:	05fa0004 	.word	0x05fa0004

08009200 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b082      	sub	sp, #8
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	3b01      	subs	r3, #1
 800920c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009210:	d301      	bcc.n	8009216 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8009212:	2301      	movs	r3, #1
 8009214:	e00f      	b.n	8009236 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8009216:	4a0a      	ldr	r2, [pc, #40]	; (8009240 <SysTick_Config+0x40>)
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	3b01      	subs	r3, #1
 800921c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800921e:	210f      	movs	r1, #15
 8009220:	f04f 30ff 	mov.w	r0, #4294967295
 8009224:	f7ff ff78 	bl	8009118 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8009228:	4b05      	ldr	r3, [pc, #20]	; (8009240 <SysTick_Config+0x40>)
 800922a:	2200      	movs	r2, #0
 800922c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800922e:	4b04      	ldr	r3, [pc, #16]	; (8009240 <SysTick_Config+0x40>)
 8009230:	2207      	movs	r2, #7
 8009232:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8009234:	2300      	movs	r3, #0
}
 8009236:	4618      	mov	r0, r3
 8009238:	3708      	adds	r7, #8
 800923a:	46bd      	mov	sp, r7
 800923c:	bd80      	pop	{r7, pc}
 800923e:	bf00      	nop
 8009240:	e000e010 	.word	0xe000e010

08009244 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009244:	b580      	push	{r7, lr}
 8009246:	b082      	sub	sp, #8
 8009248:	af00      	add	r7, sp, #0
 800924a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800924c:	6878      	ldr	r0, [r7, #4]
 800924e:	f7ff ff13 	bl	8009078 <__NVIC_SetPriorityGrouping>
}
 8009252:	bf00      	nop
 8009254:	3708      	adds	r7, #8
 8009256:	46bd      	mov	sp, r7
 8009258:	bd80      	pop	{r7, pc}

0800925a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800925a:	b580      	push	{r7, lr}
 800925c:	b086      	sub	sp, #24
 800925e:	af00      	add	r7, sp, #0
 8009260:	4603      	mov	r3, r0
 8009262:	60b9      	str	r1, [r7, #8]
 8009264:	607a      	str	r2, [r7, #4]
 8009266:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009268:	f7ff ff2a 	bl	80090c0 <__NVIC_GetPriorityGrouping>
 800926c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800926e:	687a      	ldr	r2, [r7, #4]
 8009270:	68b9      	ldr	r1, [r7, #8]
 8009272:	6978      	ldr	r0, [r7, #20]
 8009274:	f7ff ff7a 	bl	800916c <NVIC_EncodePriority>
 8009278:	4602      	mov	r2, r0
 800927a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800927e:	4611      	mov	r1, r2
 8009280:	4618      	mov	r0, r3
 8009282:	f7ff ff49 	bl	8009118 <__NVIC_SetPriority>
}
 8009286:	bf00      	nop
 8009288:	3718      	adds	r7, #24
 800928a:	46bd      	mov	sp, r7
 800928c:	bd80      	pop	{r7, pc}

0800928e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800928e:	b580      	push	{r7, lr}
 8009290:	b082      	sub	sp, #8
 8009292:	af00      	add	r7, sp, #0
 8009294:	4603      	mov	r3, r0
 8009296:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009298:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800929c:	4618      	mov	r0, r3
 800929e:	f7ff ff1d 	bl	80090dc <__NVIC_EnableIRQ>
}
 80092a2:	bf00      	nop
 80092a4:	3708      	adds	r7, #8
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bd80      	pop	{r7, pc}

080092aa <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80092aa:	b580      	push	{r7, lr}
 80092ac:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80092ae:	f7ff ff91 	bl	80091d4 <__NVIC_SystemReset>

080092b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80092b2:	b580      	push	{r7, lr}
 80092b4:	b082      	sub	sp, #8
 80092b6:	af00      	add	r7, sp, #0
 80092b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80092ba:	6878      	ldr	r0, [r7, #4]
 80092bc:	f7ff ffa0 	bl	8009200 <SysTick_Config>
 80092c0:	4603      	mov	r3, r0
}
 80092c2:	4618      	mov	r0, r3
 80092c4:	3708      	adds	r7, #8
 80092c6:	46bd      	mov	sp, r7
 80092c8:	bd80      	pop	{r7, pc}
	...

080092cc <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b098      	sub	sp, #96	; 0x60
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 80092d4:	4a84      	ldr	r2, [pc, #528]	; (80094e8 <HAL_FDCAN_Init+0x21c>)
 80092d6:	f107 030c 	add.w	r3, r7, #12
 80092da:	4611      	mov	r1, r2
 80092dc:	224c      	movs	r2, #76	; 0x4c
 80092de:	4618      	mov	r0, r3
 80092e0:	f00a fece 	bl	8014080 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d101      	bne.n	80092ee <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 80092ea:	2301      	movs	r3, #1
 80092ec:	e1c6      	b.n	800967c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	4a7e      	ldr	r2, [pc, #504]	; (80094ec <HAL_FDCAN_Init+0x220>)
 80092f4:	4293      	cmp	r3, r2
 80092f6:	d106      	bne.n	8009306 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8009300:	461a      	mov	r2, r3
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800930c:	b2db      	uxtb	r3, r3
 800930e:	2b00      	cmp	r3, #0
 8009310:	d106      	bne.n	8009320 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	2200      	movs	r2, #0
 8009316:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800931a:	6878      	ldr	r0, [r7, #4]
 800931c:	f7ff fb44 	bl	80089a8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	699a      	ldr	r2, [r3, #24]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f022 0210 	bic.w	r2, r2, #16
 800932e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009330:	f7ff fe66 	bl	8009000 <HAL_GetTick>
 8009334:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8009336:	e014      	b.n	8009362 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8009338:	f7ff fe62 	bl	8009000 <HAL_GetTick>
 800933c:	4602      	mov	r2, r0
 800933e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009340:	1ad3      	subs	r3, r2, r3
 8009342:	2b0a      	cmp	r3, #10
 8009344:	d90d      	bls.n	8009362 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800934c:	f043 0201 	orr.w	r2, r3, #1
 8009350:	687b      	ldr	r3, [r7, #4]
 8009352:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2203      	movs	r2, #3
 800935a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 800935e:	2301      	movs	r3, #1
 8009360:	e18c      	b.n	800967c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	699b      	ldr	r3, [r3, #24]
 8009368:	f003 0308 	and.w	r3, r3, #8
 800936c:	2b08      	cmp	r3, #8
 800936e:	d0e3      	beq.n	8009338 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	699a      	ldr	r2, [r3, #24]
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f042 0201 	orr.w	r2, r2, #1
 800937e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8009380:	f7ff fe3e 	bl	8009000 <HAL_GetTick>
 8009384:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8009386:	e014      	b.n	80093b2 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8009388:	f7ff fe3a 	bl	8009000 <HAL_GetTick>
 800938c:	4602      	mov	r2, r0
 800938e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009390:	1ad3      	subs	r3, r2, r3
 8009392:	2b0a      	cmp	r3, #10
 8009394:	d90d      	bls.n	80093b2 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800939c:	f043 0201 	orr.w	r2, r3, #1
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	2203      	movs	r2, #3
 80093aa:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 80093ae:	2301      	movs	r3, #1
 80093b0:	e164      	b.n	800967c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	699b      	ldr	r3, [r3, #24]
 80093b8:	f003 0301 	and.w	r3, r3, #1
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d0e3      	beq.n	8009388 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	699a      	ldr	r2, [r3, #24]
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	681b      	ldr	r3, [r3, #0]
 80093ca:	f042 0202 	orr.w	r2, r2, #2
 80093ce:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	7c1b      	ldrb	r3, [r3, #16]
 80093d4:	2b01      	cmp	r3, #1
 80093d6:	d108      	bne.n	80093ea <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	699a      	ldr	r2, [r3, #24]
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	681b      	ldr	r3, [r3, #0]
 80093e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093e6:	619a      	str	r2, [r3, #24]
 80093e8:	e007      	b.n	80093fa <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	699a      	ldr	r2, [r3, #24]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80093f8:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	7c5b      	ldrb	r3, [r3, #17]
 80093fe:	2b01      	cmp	r3, #1
 8009400:	d108      	bne.n	8009414 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	699a      	ldr	r2, [r3, #24]
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009410:	619a      	str	r2, [r3, #24]
 8009412:	e007      	b.n	8009424 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	699a      	ldr	r2, [r3, #24]
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009422:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	7c9b      	ldrb	r3, [r3, #18]
 8009428:	2b01      	cmp	r3, #1
 800942a:	d108      	bne.n	800943e <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	699a      	ldr	r2, [r3, #24]
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	681b      	ldr	r3, [r3, #0]
 8009436:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800943a:	619a      	str	r2, [r3, #24]
 800943c:	e007      	b.n	800944e <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	699a      	ldr	r2, [r3, #24]
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800944c:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 800944e:	687b      	ldr	r3, [r7, #4]
 8009450:	681b      	ldr	r3, [r3, #0]
 8009452:	699b      	ldr	r3, [r3, #24]
 8009454:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	689a      	ldr	r2, [r3, #8]
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	430a      	orrs	r2, r1
 8009462:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8009464:	687b      	ldr	r3, [r7, #4]
 8009466:	681b      	ldr	r3, [r3, #0]
 8009468:	699a      	ldr	r2, [r3, #24]
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8009472:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	691a      	ldr	r2, [r3, #16]
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f022 0210 	bic.w	r2, r2, #16
 8009482:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	68db      	ldr	r3, [r3, #12]
 8009488:	2b01      	cmp	r3, #1
 800948a:	d108      	bne.n	800949e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	681b      	ldr	r3, [r3, #0]
 8009490:	699a      	ldr	r2, [r3, #24]
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	f042 0204 	orr.w	r2, r2, #4
 800949a:	619a      	str	r2, [r3, #24]
 800949c:	e030      	b.n	8009500 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	68db      	ldr	r3, [r3, #12]
 80094a2:	2b00      	cmp	r3, #0
 80094a4:	d02c      	beq.n	8009500 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	68db      	ldr	r3, [r3, #12]
 80094aa:	2b02      	cmp	r3, #2
 80094ac:	d020      	beq.n	80094f0 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681b      	ldr	r3, [r3, #0]
 80094b2:	699a      	ldr	r2, [r3, #24]
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80094bc:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	691a      	ldr	r2, [r3, #16]
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	f042 0210 	orr.w	r2, r2, #16
 80094cc:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	68db      	ldr	r3, [r3, #12]
 80094d2:	2b03      	cmp	r3, #3
 80094d4:	d114      	bne.n	8009500 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	699a      	ldr	r2, [r3, #24]
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	f042 0220 	orr.w	r2, r2, #32
 80094e4:	619a      	str	r2, [r3, #24]
 80094e6:	e00b      	b.n	8009500 <HAL_FDCAN_Init+0x234>
 80094e8:	080155b0 	.word	0x080155b0
 80094ec:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	699a      	ldr	r2, [r3, #24]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f042 0220 	orr.w	r2, r2, #32
 80094fe:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	699b      	ldr	r3, [r3, #24]
 8009504:	3b01      	subs	r3, #1
 8009506:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	69db      	ldr	r3, [r3, #28]
 800950c:	3b01      	subs	r3, #1
 800950e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8009510:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	6a1b      	ldr	r3, [r3, #32]
 8009516:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8009518:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	695b      	ldr	r3, [r3, #20]
 8009520:	3b01      	subs	r3, #1
 8009522:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8009528:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800952a:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	689b      	ldr	r3, [r3, #8]
 8009530:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009534:	d115      	bne.n	8009562 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800953a:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009540:	3b01      	subs	r3, #1
 8009542:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8009544:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800954a:	3b01      	subs	r3, #1
 800954c:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 800954e:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009556:	3b01      	subs	r3, #1
 8009558:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800955e:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8009560:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009566:	2b00      	cmp	r3, #0
 8009568:	d00a      	beq.n	8009580 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	430a      	orrs	r2, r1
 800957c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009588:	4413      	add	r3, r2
 800958a:	2b00      	cmp	r3, #0
 800958c:	d011      	beq.n	80095b2 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8009596:	f023 0107 	bic.w	r1, r3, #7
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800959e:	009b      	lsls	r3, r3, #2
 80095a0:	3360      	adds	r3, #96	; 0x60
 80095a2:	443b      	add	r3, r7
 80095a4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	681b      	ldr	r3, [r3, #0]
 80095ac:	430a      	orrs	r2, r1
 80095ae:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b6:	2b00      	cmp	r3, #0
 80095b8:	d011      	beq.n	80095de <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80095c2:	f023 0107 	bic.w	r1, r3, #7
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80095ca:	009b      	lsls	r3, r3, #2
 80095cc:	3360      	adds	r3, #96	; 0x60
 80095ce:	443b      	add	r3, r7
 80095d0:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	430a      	orrs	r2, r1
 80095da:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80095de:	687b      	ldr	r3, [r7, #4]
 80095e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80095e2:	2b00      	cmp	r3, #0
 80095e4:	d012      	beq.n	800960c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	681b      	ldr	r3, [r3, #0]
 80095ea:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80095ee:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095f6:	009b      	lsls	r3, r3, #2
 80095f8:	3360      	adds	r3, #96	; 0x60
 80095fa:	443b      	add	r3, r7
 80095fc:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8009600:	011a      	lsls	r2, r3, #4
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	681b      	ldr	r3, [r3, #0]
 8009606:	430a      	orrs	r2, r1
 8009608:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009610:	2b00      	cmp	r3, #0
 8009612:	d012      	beq.n	800963a <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800961c:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009624:	009b      	lsls	r3, r3, #2
 8009626:	3360      	adds	r3, #96	; 0x60
 8009628:	443b      	add	r3, r7
 800962a:	f853 3c54 	ldr.w	r3, [r3, #-84]
 800962e:	021a      	lsls	r2, r3, #8
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	430a      	orrs	r2, r1
 8009636:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	4a11      	ldr	r2, [pc, #68]	; (8009684 <HAL_FDCAN_Init+0x3b8>)
 8009640:	4293      	cmp	r3, r2
 8009642:	d107      	bne.n	8009654 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	685b      	ldr	r3, [r3, #4]
 8009648:	689a      	ldr	r2, [r3, #8]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	685b      	ldr	r3, [r3, #4]
 800964e:	f022 0203 	bic.w	r2, r2, #3
 8009652:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	2200      	movs	r2, #0
 8009658:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2200      	movs	r2, #0
 8009660:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	2201      	movs	r2, #1
 8009668:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 800966c:	6878      	ldr	r0, [r7, #4]
 800966e:	f000 fea3 	bl	800a3b8 <FDCAN_CalcultateRamBlockAddresses>
 8009672:	4603      	mov	r3, r0
 8009674:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8009678:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 800967c:	4618      	mov	r0, r3
 800967e:	3760      	adds	r7, #96	; 0x60
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}
 8009684:	4000a000 	.word	0x4000a000

08009688 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8009688:	b480      	push	{r7}
 800968a:	b087      	sub	sp, #28
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009698:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800969a:	7bfb      	ldrb	r3, [r7, #15]
 800969c:	2b01      	cmp	r3, #1
 800969e:	d002      	beq.n	80096a6 <HAL_FDCAN_ConfigFilter+0x1e>
 80096a0:	7bfb      	ldrb	r3, [r7, #15]
 80096a2:	2b02      	cmp	r3, #2
 80096a4:	d157      	bne.n	8009756 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 80096a6:	683b      	ldr	r3, [r7, #0]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d12b      	bne.n	8009706 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80096ae:	683b      	ldr	r3, [r7, #0]
 80096b0:	68db      	ldr	r3, [r3, #12]
 80096b2:	2b07      	cmp	r3, #7
 80096b4:	d10d      	bne.n	80096d2 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 80096b6:	683b      	ldr	r3, [r7, #0]
 80096b8:	691b      	ldr	r3, [r3, #16]
 80096ba:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80096bc:	683b      	ldr	r3, [r7, #0]
 80096be:	69db      	ldr	r3, [r3, #28]
 80096c0:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 80096c2:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80096c8:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 80096ca:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 80096ce:	617b      	str	r3, [r7, #20]
 80096d0:	e00e      	b.n	80096f0 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	689b      	ldr	r3, [r3, #8]
 80096d6:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 80096d8:	683b      	ldr	r3, [r7, #0]
 80096da:	68db      	ldr	r3, [r3, #12]
 80096dc:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80096de:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 80096e0:	683b      	ldr	r3, [r7, #0]
 80096e2:	691b      	ldr	r3, [r3, #16]
 80096e4:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 80096e6:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80096ec:	4313      	orrs	r3, r2
 80096ee:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80096f4:	683b      	ldr	r3, [r7, #0]
 80096f6:	685b      	ldr	r3, [r3, #4]
 80096f8:	009b      	lsls	r3, r3, #2
 80096fa:	4413      	add	r3, r2
 80096fc:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80096fe:	68bb      	ldr	r3, [r7, #8]
 8009700:	697a      	ldr	r2, [r7, #20]
 8009702:	601a      	str	r2, [r3, #0]
 8009704:	e025      	b.n	8009752 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	68db      	ldr	r3, [r3, #12]
 800970a:	075a      	lsls	r2, r3, #29
 800970c:	683b      	ldr	r3, [r7, #0]
 800970e:	691b      	ldr	r3, [r3, #16]
 8009710:	4313      	orrs	r3, r2
 8009712:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	68db      	ldr	r3, [r3, #12]
 8009718:	2b07      	cmp	r3, #7
 800971a:	d103      	bne.n	8009724 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 800971c:	683b      	ldr	r3, [r7, #0]
 800971e:	699b      	ldr	r3, [r3, #24]
 8009720:	613b      	str	r3, [r7, #16]
 8009722:	e006      	b.n	8009732 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8009724:	683b      	ldr	r3, [r7, #0]
 8009726:	689b      	ldr	r3, [r3, #8]
 8009728:	079a      	lsls	r2, r3, #30
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	695b      	ldr	r3, [r3, #20]
 800972e:	4313      	orrs	r3, r2
 8009730:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009736:	683b      	ldr	r3, [r7, #0]
 8009738:	685b      	ldr	r3, [r3, #4]
 800973a:	00db      	lsls	r3, r3, #3
 800973c:	4413      	add	r3, r2
 800973e:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8009740:	68bb      	ldr	r3, [r7, #8]
 8009742:	697a      	ldr	r2, [r7, #20]
 8009744:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	3304      	adds	r3, #4
 800974a:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	693a      	ldr	r2, [r7, #16]
 8009750:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8009752:	2300      	movs	r3, #0
 8009754:	e008      	b.n	8009768 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800975c:	f043 0202 	orr.w	r2, r3, #2
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8009766:	2301      	movs	r3, #1
  }
}
 8009768:	4618      	mov	r0, r3
 800976a:	371c      	adds	r7, #28
 800976c:	46bd      	mov	sp, r7
 800976e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009772:	4770      	bx	lr

08009774 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 8009774:	b480      	push	{r7}
 8009776:	b085      	sub	sp, #20
 8009778:	af00      	add	r7, sp, #0
 800977a:	60f8      	str	r0, [r7, #12]
 800977c:	60b9      	str	r1, [r7, #8]
 800977e:	607a      	str	r2, [r7, #4]
 8009780:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009788:	b2db      	uxtb	r3, r3
 800978a:	2b01      	cmp	r3, #1
 800978c:	d110      	bne.n	80097b0 <HAL_FDCAN_ConfigGlobalFilter+0x3c>
  {
    /* Configure global filter */
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	011a      	lsls	r2, r3, #4
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	009b      	lsls	r3, r3, #2
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 8009796:	431a      	orrs	r2, r3
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 8009798:	683b      	ldr	r3, [r7, #0]
 800979a:	005b      	lsls	r3, r3, #1
                             (NonMatchingExt << FDCAN_GFC_ANFE_Pos)  |
 800979c:	ea42 0103 	orr.w	r1, r2, r3
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	681b      	ldr	r3, [r3, #0]
                             (RejectRemoteStd << FDCAN_GFC_RRFS_Pos) |
 80097a4:	69ba      	ldr	r2, [r7, #24]
 80097a6:	430a      	orrs	r2, r1
    hfdcan->Instance->GFC = ((NonMatchingStd << FDCAN_GFC_ANFS_Pos)  |
 80097a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
                             (RejectRemoteExt << FDCAN_GFC_RRFE_Pos));

    /* Return function status */
    return HAL_OK;
 80097ac:	2300      	movs	r3, #0
 80097ae:	e008      	b.n	80097c2 <HAL_FDCAN_ConfigGlobalFilter+0x4e>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80097b0:	68fb      	ldr	r3, [r7, #12]
 80097b2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80097b6:	f043 0204 	orr.w	r2, r3, #4
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80097c0:	2301      	movs	r3, #1
  }
}
 80097c2:	4618      	mov	r0, r3
 80097c4:	3714      	adds	r7, #20
 80097c6:	46bd      	mov	sp, r7
 80097c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097cc:	4770      	bx	lr

080097ce <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 80097ce:	b480      	push	{r7}
 80097d0:	b083      	sub	sp, #12
 80097d2:	af00      	add	r7, sp, #0
 80097d4:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80097dc:	b2db      	uxtb	r3, r3
 80097de:	2b01      	cmp	r3, #1
 80097e0:	d111      	bne.n	8009806 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	2202      	movs	r2, #2
 80097e6:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	699a      	ldr	r2, [r3, #24]
 80097f0:	687b      	ldr	r3, [r7, #4]
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	f022 0201 	bic.w	r2, r2, #1
 80097f8:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	2200      	movs	r2, #0
 80097fe:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8009802:	2300      	movs	r3, #0
 8009804:	e008      	b.n	8009818 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800980c:	f043 0204 	orr.w	r2, r3, #4
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8009816:	2301      	movs	r3, #1
  }
}
 8009818:	4618      	mov	r0, r3
 800981a:	370c      	adds	r7, #12
 800981c:	46bd      	mov	sp, r7
 800981e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009822:	4770      	bx	lr

08009824 <HAL_FDCAN_Stop>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Stop(FDCAN_HandleTypeDef *hfdcan)
{
 8009824:	b480      	push	{r7}
 8009826:	b085      	sub	sp, #20
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
  uint32_t Counter = 0U;
 800982c:	2300      	movs	r3, #0
 800982e:	60fb      	str	r3, [r7, #12]

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009836:	b2db      	uxtb	r3, r3
 8009838:	2b02      	cmp	r3, #2
 800983a:	d15b      	bne.n	80098f4 <HAL_FDCAN_Stop+0xd0>
  {
    /* Request initialisation */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	681b      	ldr	r3, [r3, #0]
 8009840:	699a      	ldr	r2, [r3, #24]
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f042 0201 	orr.w	r2, r2, #1
 800984a:	619a      	str	r2, [r3, #24]

    /* Wait until the INIT bit into CCCR register is set */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800984c:	e013      	b.n	8009876 <HAL_FDCAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_COUNT)
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	2b32      	cmp	r3, #50	; 0x32
 8009852:	d90d      	bls.n	8009870 <HAL_FDCAN_Stop+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800985a:	f043 0201 	orr.w	r2, r3, #1
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	2203      	movs	r2, #3
 8009868:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

        return HAL_ERROR;
 800986c:	2301      	movs	r3, #1
 800986e:	e04a      	b.n	8009906 <HAL_FDCAN_Stop+0xe2>
      }

      /* Increment counter */
      Counter++;
 8009870:	68fb      	ldr	r3, [r7, #12]
 8009872:	3301      	adds	r3, #1
 8009874:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	699b      	ldr	r3, [r3, #24]
 800987c:	f003 0301 	and.w	r3, r3, #1
 8009880:	2b00      	cmp	r3, #0
 8009882:	d0e4      	beq.n	800984e <HAL_FDCAN_Stop+0x2a>
    }

    /* Reset counter */
    Counter = 0U;
 8009884:	2300      	movs	r3, #0
 8009886:	60fb      	str	r3, [r7, #12]

    /* Exit from Sleep mode */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	699a      	ldr	r2, [r3, #24]
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	f022 0210 	bic.w	r2, r2, #16
 8009896:	619a      	str	r2, [r3, #24]

    /* Wait until FDCAN exits sleep mode */
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8009898:	e013      	b.n	80098c2 <HAL_FDCAN_Stop+0x9e>
    {
      /* Check for the Timeout */
      if (Counter > FDCAN_TIMEOUT_COUNT)
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	2b32      	cmp	r3, #50	; 0x32
 800989e:	d90d      	bls.n	80098bc <HAL_FDCAN_Stop+0x98>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80098a6:	f043 0201 	orr.w	r2, r3, #1
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        /* Change FDCAN state */
        hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	2203      	movs	r2, #3
 80098b4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

        return HAL_ERROR;
 80098b8:	2301      	movs	r3, #1
 80098ba:	e024      	b.n	8009906 <HAL_FDCAN_Stop+0xe2>
      }

      /* Increment counter */
      Counter++;
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	3301      	adds	r3, #1
 80098c0:	60fb      	str	r3, [r7, #12]
    while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	699b      	ldr	r3, [r3, #24]
 80098c8:	f003 0308 	and.w	r3, r3, #8
 80098cc:	2b08      	cmp	r3, #8
 80098ce:	d0e4      	beq.n	800989a <HAL_FDCAN_Stop+0x76>
    }

    /* Enable configuration change */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	699a      	ldr	r2, [r3, #24]
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	681b      	ldr	r3, [r3, #0]
 80098da:	f042 0202 	orr.w	r2, r2, #2
 80098de:	619a      	str	r2, [r3, #24]

    /* Reset Latest Tx FIFO/Queue Request Buffer Index */
    hfdcan->LatestTxFifoQRequest = 0U;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2200      	movs	r2, #0
 80098e4:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_READY;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2201      	movs	r2, #1
 80098ec:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Return function status */
    return HAL_OK;
 80098f0:	2300      	movs	r3, #0
 80098f2:	e008      	b.n	8009906 <HAL_FDCAN_Stop+0xe2>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80098fa:	f043 0208 	orr.w	r2, r3, #8
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8009904:	2301      	movs	r3, #1
  }
}
 8009906:	4618      	mov	r0, r3
 8009908:	3714      	adds	r7, #20
 800990a:	46bd      	mov	sp, r7
 800990c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009910:	4770      	bx	lr

08009912 <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 8009912:	b580      	push	{r7, lr}
 8009914:	b086      	sub	sp, #24
 8009916:	af00      	add	r7, sp, #0
 8009918:	60f8      	str	r0, [r7, #12]
 800991a:	60b9      	str	r1, [r7, #8]
 800991c:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009924:	b2db      	uxtb	r3, r3
 8009926:	2b02      	cmp	r3, #2
 8009928:	d141      	bne.n	80099ae <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8009932:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 8009936:	2b00      	cmp	r3, #0
 8009938:	d109      	bne.n	800994e <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009940:	f043 0220 	orr.w	r2, r3, #32
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 800994a:	2301      	movs	r3, #1
 800994c:	e038      	b.n	80099c0 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8009956:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800995a:	2b00      	cmp	r3, #0
 800995c:	d009      	beq.n	8009972 <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009964:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 800996e:	2301      	movs	r3, #1
 8009970:	e026      	b.n	80099c0 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800997a:	0c1b      	lsrs	r3, r3, #16
 800997c:	f003 031f 	and.w	r3, r3, #31
 8009980:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 8009982:	697b      	ldr	r3, [r7, #20]
 8009984:	687a      	ldr	r2, [r7, #4]
 8009986:	68b9      	ldr	r1, [r7, #8]
 8009988:	68f8      	ldr	r0, [r7, #12]
 800998a:	f000 fe9b 	bl	800a6c4 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	2101      	movs	r1, #1
 8009994:	697a      	ldr	r2, [r7, #20]
 8009996:	fa01 f202 	lsl.w	r2, r1, r2
 800999a:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800999e:	2201      	movs	r2, #1
 80099a0:	697b      	ldr	r3, [r7, #20]
 80099a2:	409a      	lsls	r2, r3
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 80099aa:	2300      	movs	r3, #0
 80099ac:	e008      	b.n	80099c0 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80099b4:	f043 0208 	orr.w	r2, r3, #8
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80099be:	2301      	movs	r3, #1
  }
}
 80099c0:	4618      	mov	r0, r3
 80099c2:	3718      	adds	r7, #24
 80099c4:	46bd      	mov	sp, r7
 80099c6:	bd80      	pop	{r7, pc}

080099c8 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 80099c8:	b480      	push	{r7}
 80099ca:	b08b      	sub	sp, #44	; 0x2c
 80099cc:	af00      	add	r7, sp, #0
 80099ce:	60f8      	str	r0, [r7, #12]
 80099d0:	60b9      	str	r1, [r7, #8]
 80099d2:	607a      	str	r2, [r7, #4]
 80099d4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80099d6:	2300      	movs	r3, #0
 80099d8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80099e0:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 80099e2:	7efb      	ldrb	r3, [r7, #27]
 80099e4:	2b02      	cmp	r3, #2
 80099e6:	f040 814b 	bne.w	8009c80 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	2b40      	cmp	r3, #64	; 0x40
 80099ee:	d14d      	bne.n	8009a8c <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80099f8:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d109      	bne.n	8009a14 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009a06:	f043 0220 	orr.w	r2, r3, #32
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8009a10:	2301      	movs	r3, #1
 8009a12:	e13e      	b.n	8009c92 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009a1c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009a20:	2b00      	cmp	r3, #0
 8009a22:	d109      	bne.n	8009a38 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8009a24:	68fb      	ldr	r3, [r7, #12]
 8009a26:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009a2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8009a34:	2301      	movs	r3, #1
 8009a36:	e12c      	b.n	8009c92 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009a40:	0e1b      	lsrs	r3, r3, #24
 8009a42:	f003 0301 	and.w	r3, r3, #1
 8009a46:	2b01      	cmp	r3, #1
 8009a48:	d10b      	bne.n	8009a62 <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8009a52:	0fdb      	lsrs	r3, r3, #31
 8009a54:	f003 0301 	and.w	r3, r3, #1
 8009a58:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009a5c:	d101      	bne.n	8009a62 <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8009a5e:	2301      	movs	r3, #1
 8009a60:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8009a6a:	0a1b      	lsrs	r3, r3, #8
 8009a6c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009a70:	69fa      	ldr	r2, [r7, #28]
 8009a72:	4413      	add	r3, r2
 8009a74:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a7e:	69f9      	ldr	r1, [r7, #28]
 8009a80:	fb01 f303 	mul.w	r3, r1, r3
 8009a84:	009b      	lsls	r3, r3, #2
 8009a86:	4413      	add	r3, r2
 8009a88:	627b      	str	r3, [r7, #36]	; 0x24
 8009a8a:	e069      	b.n	8009b60 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8009a8c:	68bb      	ldr	r3, [r7, #8]
 8009a8e:	2b41      	cmp	r3, #65	; 0x41
 8009a90:	d14d      	bne.n	8009b2e <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009a9a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d109      	bne.n	8009ab6 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009aa8:	f043 0220 	orr.w	r2, r3, #32
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8009ab2:	2301      	movs	r3, #1
 8009ab4:	e0ed      	b.n	8009c92 <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8009ab6:	68fb      	ldr	r3, [r7, #12]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009abe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	d109      	bne.n	8009ada <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009acc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8009ad6:	2301      	movs	r3, #1
 8009ad8:	e0db      	b.n	8009c92 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009ae2:	0e1b      	lsrs	r3, r3, #24
 8009ae4:	f003 0301 	and.w	r3, r3, #1
 8009ae8:	2b01      	cmp	r3, #1
 8009aea:	d10b      	bne.n	8009b04 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8009af4:	0fdb      	lsrs	r3, r3, #31
 8009af6:	f003 0301 	and.w	r3, r3, #1
 8009afa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8009afe:	d101      	bne.n	8009b04 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8009b00:	2301      	movs	r3, #1
 8009b02:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8009b04:	68fb      	ldr	r3, [r7, #12]
 8009b06:	681b      	ldr	r3, [r3, #0]
 8009b08:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8009b0c:	0a1b      	lsrs	r3, r3, #8
 8009b0e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009b12:	69fa      	ldr	r2, [r7, #28]
 8009b14:	4413      	add	r3, r2
 8009b16:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b20:	69f9      	ldr	r1, [r7, #28]
 8009b22:	fb01 f303 	mul.w	r3, r1, r3
 8009b26:	009b      	lsls	r3, r3, #2
 8009b28:	4413      	add	r3, r2
 8009b2a:	627b      	str	r3, [r7, #36]	; 0x24
 8009b2c:	e018      	b.n	8009b60 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8009b2e:	68fb      	ldr	r3, [r7, #12]
 8009b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009b32:	68ba      	ldr	r2, [r7, #8]
 8009b34:	429a      	cmp	r2, r3
 8009b36:	d309      	bcc.n	8009b4c <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009b3e:	f043 0220 	orr.w	r2, r3, #32
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8009b48:	2301      	movs	r3, #1
 8009b4a:	e0a2      	b.n	8009c92 <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009b54:	68b9      	ldr	r1, [r7, #8]
 8009b56:	fb01 f303 	mul.w	r3, r1, r3
 8009b5a:	009b      	lsls	r3, r3, #2
 8009b5c:	4413      	add	r3, r2
 8009b5e:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 8009b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	685b      	ldr	r3, [r3, #4]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d107      	bne.n	8009b84 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8009b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b76:	681b      	ldr	r3, [r3, #0]
 8009b78:	0c9b      	lsrs	r3, r3, #18
 8009b7a:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	601a      	str	r2, [r3, #0]
 8009b82:	e005      	b.n	8009b90 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8009b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b86:	681b      	ldr	r3, [r3, #0]
 8009b88:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 8009b90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8009b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8009ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009baa:	3304      	adds	r3, #4
 8009bac:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 8009bae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	b29a      	uxth	r2, r3
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8009bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8009bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8009bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8009bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	0e1b      	lsrs	r3, r3, #24
 8009be2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8009bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	0fda      	lsrs	r2, r3, #31
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8009bf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bf6:	3304      	adds	r3, #4
 8009bf8:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8009bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bfc:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8009bfe:	2300      	movs	r3, #0
 8009c00:	623b      	str	r3, [r7, #32]
 8009c02:	e00a      	b.n	8009c1a <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8009c04:	697a      	ldr	r2, [r7, #20]
 8009c06:	6a3b      	ldr	r3, [r7, #32]
 8009c08:	441a      	add	r2, r3
 8009c0a:	6839      	ldr	r1, [r7, #0]
 8009c0c:	6a3b      	ldr	r3, [r7, #32]
 8009c0e:	440b      	add	r3, r1
 8009c10:	7812      	ldrb	r2, [r2, #0]
 8009c12:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8009c14:	6a3b      	ldr	r3, [r7, #32]
 8009c16:	3301      	adds	r3, #1
 8009c18:	623b      	str	r3, [r7, #32]
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	68db      	ldr	r3, [r3, #12]
 8009c1e:	0c1b      	lsrs	r3, r3, #16
 8009c20:	4a1f      	ldr	r2, [pc, #124]	; (8009ca0 <HAL_FDCAN_GetRxMessage+0x2d8>)
 8009c22:	5cd3      	ldrb	r3, [r2, r3]
 8009c24:	461a      	mov	r2, r3
 8009c26:	6a3b      	ldr	r3, [r7, #32]
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d3eb      	bcc.n	8009c04 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8009c2c:	68bb      	ldr	r3, [r7, #8]
 8009c2e:	2b40      	cmp	r3, #64	; 0x40
 8009c30:	d105      	bne.n	8009c3e <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	681b      	ldr	r3, [r3, #0]
 8009c36:	69fa      	ldr	r2, [r7, #28]
 8009c38:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8009c3c:	e01e      	b.n	8009c7c <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	2b41      	cmp	r3, #65	; 0x41
 8009c42:	d105      	bne.n	8009c50 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	69fa      	ldr	r2, [r7, #28]
 8009c4a:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8009c4e:	e015      	b.n	8009c7c <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	2b1f      	cmp	r3, #31
 8009c54:	d808      	bhi.n	8009c68 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	2101      	movs	r1, #1
 8009c5c:	68ba      	ldr	r2, [r7, #8]
 8009c5e:	fa01 f202 	lsl.w	r2, r1, r2
 8009c62:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8009c66:	e009      	b.n	8009c7c <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	f003 021f 	and.w	r2, r3, #31
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	681b      	ldr	r3, [r3, #0]
 8009c72:	2101      	movs	r1, #1
 8009c74:	fa01 f202 	lsl.w	r2, r1, r2
 8009c78:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8009c7c:	2300      	movs	r3, #0
 8009c7e:	e008      	b.n	8009c92 <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009c86:	f043 0208 	orr.w	r2, r3, #8
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8009c90:	2301      	movs	r3, #1
  }
}
 8009c92:	4618      	mov	r0, r3
 8009c94:	372c      	adds	r7, #44	; 0x2c
 8009c96:	46bd      	mov	sp, r7
 8009c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c9c:	4770      	bx	lr
 8009c9e:	bf00      	nop
 8009ca0:	08015dfc 	.word	0x08015dfc

08009ca4 <HAL_FDCAN_GetTxFifoFreeLevel>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval Level Tx FIFO free level.
  */
uint32_t HAL_FDCAN_GetTxFifoFreeLevel(FDCAN_HandleTypeDef *hfdcan)
{
 8009ca4:	b480      	push	{r7}
 8009ca6:	b085      	sub	sp, #20
 8009ca8:	af00      	add	r7, sp, #0
 8009caa:	6078      	str	r0, [r7, #4]
  uint32_t FreeLevel;

  FreeLevel = hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFFL;
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8009cb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009cb8:	60fb      	str	r3, [r7, #12]

  /* Return Tx FIFO free level */
  return FreeLevel;
 8009cba:	68fb      	ldr	r3, [r7, #12]
}
 8009cbc:	4618      	mov	r0, r3
 8009cbe:	3714      	adds	r7, #20
 8009cc0:	46bd      	mov	sp, r7
 8009cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cc6:	4770      	bx	lr

08009cc8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8009cc8:	b480      	push	{r7}
 8009cca:	b087      	sub	sp, #28
 8009ccc:	af00      	add	r7, sp, #0
 8009cce:	60f8      	str	r0, [r7, #12]
 8009cd0:	60b9      	str	r1, [r7, #8]
 8009cd2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8009cda:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8009cdc:	7dfb      	ldrb	r3, [r7, #23]
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d002      	beq.n	8009ce8 <HAL_FDCAN_ActivateNotification+0x20>
 8009ce2:	7dfb      	ldrb	r3, [r7, #23]
 8009ce4:	2b02      	cmp	r3, #2
 8009ce6:	d155      	bne.n	8009d94 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	681b      	ldr	r3, [r3, #0]
 8009cec:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	4013      	ands	r3, r2
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d108      	bne.n	8009d08 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 8009cf6:	68fb      	ldr	r3, [r7, #12]
 8009cf8:	681b      	ldr	r3, [r3, #0]
 8009cfa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	681b      	ldr	r3, [r3, #0]
 8009d00:	f042 0201 	orr.w	r2, r2, #1
 8009d04:	65da      	str	r2, [r3, #92]	; 0x5c
 8009d06:	e014      	b.n	8009d32 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	681b      	ldr	r3, [r3, #0]
 8009d0c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	4013      	ands	r3, r2
 8009d12:	68ba      	ldr	r2, [r7, #8]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d108      	bne.n	8009d2a <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f042 0202 	orr.w	r2, r2, #2
 8009d26:	65da      	str	r2, [r3, #92]	; 0x5c
 8009d28:	e003      	b.n	8009d32 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	2203      	movs	r2, #3
 8009d30:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d009      	beq.n	8009d50 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	687a      	ldr	r2, [r7, #4]
 8009d4a:	430a      	orrs	r2, r1
 8009d4c:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8009d50:	68bb      	ldr	r3, [r7, #8]
 8009d52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	d009      	beq.n	8009d6e <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	681b      	ldr	r3, [r3, #0]
 8009d5e:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8009d62:	68fb      	ldr	r3, [r7, #12]
 8009d64:	681b      	ldr	r3, [r3, #0]
 8009d66:	687a      	ldr	r2, [r7, #4]
 8009d68:	430a      	orrs	r2, r1
 8009d6a:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009d74:	68ba      	ldr	r2, [r7, #8]
 8009d76:	4b0f      	ldr	r3, [pc, #60]	; (8009db4 <HAL_FDCAN_ActivateNotification+0xec>)
 8009d78:	4013      	ands	r3, r2
 8009d7a:	68fa      	ldr	r2, [r7, #12]
 8009d7c:	6812      	ldr	r2, [r2, #0]
 8009d7e:	430b      	orrs	r3, r1
 8009d80:	6553      	str	r3, [r2, #84]	; 0x54
 8009d82:	4b0d      	ldr	r3, [pc, #52]	; (8009db8 <HAL_FDCAN_ActivateNotification+0xf0>)
 8009d84:	695a      	ldr	r2, [r3, #20]
 8009d86:	68bb      	ldr	r3, [r7, #8]
 8009d88:	0f9b      	lsrs	r3, r3, #30
 8009d8a:	490b      	ldr	r1, [pc, #44]	; (8009db8 <HAL_FDCAN_ActivateNotification+0xf0>)
 8009d8c:	4313      	orrs	r3, r2
 8009d8e:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8009d90:	2300      	movs	r3, #0
 8009d92:	e008      	b.n	8009da6 <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8009d9a:	f043 0202 	orr.w	r2, r3, #2
 8009d9e:	68fb      	ldr	r3, [r7, #12]
 8009da0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8009da4:	2301      	movs	r3, #1
  }
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	371c      	adds	r7, #28
 8009daa:	46bd      	mov	sp, r7
 8009dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db0:	4770      	bx	lr
 8009db2:	bf00      	nop
 8009db4:	3fcfffff 	.word	0x3fcfffff
 8009db8:	4000a800 	.word	0x4000a800

08009dbc <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8009dbc:	b580      	push	{r7, lr}
 8009dbe:	b096      	sub	sp, #88	; 0x58
 8009dc0:	af00      	add	r7, sp, #0
 8009dc2:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 8009dc4:	4b9a      	ldr	r3, [pc, #616]	; (800a030 <HAL_FDCAN_IRQHandler+0x274>)
 8009dc6:	691b      	ldr	r3, [r3, #16]
 8009dc8:	079b      	lsls	r3, r3, #30
 8009dca:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8009dcc:	4b98      	ldr	r3, [pc, #608]	; (800a030 <HAL_FDCAN_IRQHandler+0x274>)
 8009dce:	695b      	ldr	r3, [r3, #20]
 8009dd0:	079b      	lsls	r3, r3, #30
 8009dd2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8009dd4:	4013      	ands	r3, r2
 8009dd6:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	681b      	ldr	r3, [r3, #0]
 8009ddc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009dde:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8009de2:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8009dec:	4013      	ands	r3, r2
 8009dee:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009df6:	f003 030f 	and.w	r3, r3, #15
 8009dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009e04:	4013      	ands	r3, r2
 8009e06:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	681b      	ldr	r3, [r3, #0]
 8009e0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009e12:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8009e14:	687b      	ldr	r3, [r7, #4]
 8009e16:	681b      	ldr	r3, [r3, #0]
 8009e18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e1a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009e1c:	4013      	ands	r3, r2
 8009e1e:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e26:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 8009e2a:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e32:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009e34:	4013      	ands	r3, r2
 8009e36:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e3e:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8009e42:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e4a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009e4c:	4013      	ands	r3, r2
 8009e4e:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e56:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 8009e58:	687b      	ldr	r3, [r7, #4]
 8009e5a:	681b      	ldr	r3, [r3, #0]
 8009e5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009e5e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8009e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e62:	0a1b      	lsrs	r3, r3, #8
 8009e64:	f003 0301 	and.w	r3, r3, #1
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d010      	beq.n	8009e8e <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8009e6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e6e:	0a1b      	lsrs	r3, r3, #8
 8009e70:	f003 0301 	and.w	r3, r3, #1
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d00a      	beq.n	8009e8e <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8009e78:	687b      	ldr	r3, [r7, #4]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8009e80:	651a      	str	r2, [r3, #80]	; 0x50
 8009e82:	4b6b      	ldr	r3, [pc, #428]	; (800a030 <HAL_FDCAN_IRQHandler+0x274>)
 8009e84:	2200      	movs	r2, #0
 8009e86:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 fa49 	bl	800a320 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8009e8e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e90:	0a9b      	lsrs	r3, r3, #10
 8009e92:	f003 0301 	and.w	r3, r3, #1
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d01d      	beq.n	8009ed6 <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8009e9a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e9c:	0a9b      	lsrs	r3, r3, #10
 8009e9e:	f003 0301 	and.w	r3, r3, #1
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d017      	beq.n	8009ed6 <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009eae:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8009eb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009eba:	4013      	ands	r3, r2
 8009ebc:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8009ec6:	651a      	str	r2, [r3, #80]	; 0x50
 8009ec8:	4b59      	ldr	r3, [pc, #356]	; (800a030 <HAL_FDCAN_IRQHandler+0x274>)
 8009eca:	2200      	movs	r2, #0
 8009ecc:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8009ece:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f000 f9fc 	bl	800a2ce <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 8009ed6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d00d      	beq.n	8009ef8 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009ee2:	4b54      	ldr	r3, [pc, #336]	; (800a034 <HAL_FDCAN_IRQHandler+0x278>)
 8009ee4:	400b      	ands	r3, r1
 8009ee6:	6513      	str	r3, [r2, #80]	; 0x50
 8009ee8:	4a51      	ldr	r2, [pc, #324]	; (800a030 <HAL_FDCAN_IRQHandler+0x274>)
 8009eea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009eec:	0f9b      	lsrs	r3, r3, #30
 8009eee:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8009ef0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009ef2:	6878      	ldr	r0, [r7, #4]
 8009ef4:	f000 f9c0 	bl	800a278 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8009ef8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d00d      	beq.n	8009f1a <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681a      	ldr	r2, [r3, #0]
 8009f02:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009f04:	4b4b      	ldr	r3, [pc, #300]	; (800a034 <HAL_FDCAN_IRQHandler+0x278>)
 8009f06:	400b      	ands	r3, r1
 8009f08:	6513      	str	r3, [r2, #80]	; 0x50
 8009f0a:	4a49      	ldr	r2, [pc, #292]	; (800a030 <HAL_FDCAN_IRQHandler+0x274>)
 8009f0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009f0e:	0f9b      	lsrs	r3, r3, #30
 8009f10:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8009f12:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8009f14:	6878      	ldr	r0, [r7, #4]
 8009f16:	f000 f9ba 	bl	800a28e <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8009f1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d00d      	beq.n	8009f3c <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	681a      	ldr	r2, [r3, #0]
 8009f24:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009f26:	4b43      	ldr	r3, [pc, #268]	; (800a034 <HAL_FDCAN_IRQHandler+0x278>)
 8009f28:	400b      	ands	r3, r1
 8009f2a:	6513      	str	r3, [r2, #80]	; 0x50
 8009f2c:	4a40      	ldr	r2, [pc, #256]	; (800a030 <HAL_FDCAN_IRQHandler+0x274>)
 8009f2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009f30:	0f9b      	lsrs	r3, r3, #30
 8009f32:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8009f34:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8009f36:	6878      	ldr	r0, [r7, #4]
 8009f38:	f7fe fac6 	bl	80084c8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8009f3c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f3e:	2b00      	cmp	r3, #0
 8009f40:	d00d      	beq.n	8009f5e <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681a      	ldr	r2, [r3, #0]
 8009f46:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009f48:	4b3a      	ldr	r3, [pc, #232]	; (800a034 <HAL_FDCAN_IRQHandler+0x278>)
 8009f4a:	400b      	ands	r3, r1
 8009f4c:	6513      	str	r3, [r2, #80]	; 0x50
 8009f4e:	4a38      	ldr	r2, [pc, #224]	; (800a030 <HAL_FDCAN_IRQHandler+0x274>)
 8009f50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009f52:	0f9b      	lsrs	r3, r3, #30
 8009f54:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8009f56:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8009f58:	6878      	ldr	r0, [r7, #4]
 8009f5a:	f000 f9a3 	bl	800a2a4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8009f5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f60:	0adb      	lsrs	r3, r3, #11
 8009f62:	f003 0301 	and.w	r3, r3, #1
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d010      	beq.n	8009f8c <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 8009f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f6c:	0adb      	lsrs	r3, r3, #11
 8009f6e:	f003 0301 	and.w	r3, r3, #1
 8009f72:	2b00      	cmp	r3, #0
 8009f74:	d00a      	beq.n	8009f8c <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009f7e:	651a      	str	r2, [r3, #80]	; 0x50
 8009f80:	4b2b      	ldr	r3, [pc, #172]	; (800a030 <HAL_FDCAN_IRQHandler+0x274>)
 8009f82:	2200      	movs	r2, #0
 8009f84:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8009f86:	6878      	ldr	r0, [r7, #4]
 8009f88:	f000 f997 	bl	800a2ba <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8009f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009f8e:	0a5b      	lsrs	r3, r3, #9
 8009f90:	f003 0301 	and.w	r3, r3, #1
 8009f94:	2b00      	cmp	r3, #0
 8009f96:	d01d      	beq.n	8009fd4 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8009f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f9a:	0a5b      	lsrs	r3, r3, #9
 8009f9c:	f003 0301 	and.w	r3, r3, #1
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d017      	beq.n	8009fd4 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	681b      	ldr	r3, [r3, #0]
 8009fa8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009fac:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009fb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009fb8:	4013      	ands	r3, r2
 8009fba:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009fc4:	651a      	str	r2, [r3, #80]	; 0x50
 8009fc6:	4b1a      	ldr	r3, [pc, #104]	; (800a030 <HAL_FDCAN_IRQHandler+0x274>)
 8009fc8:	2200      	movs	r2, #0
 8009fca:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8009fcc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009fce:	6878      	ldr	r0, [r7, #4]
 8009fd0:	f7fe fa8e 	bl	80084f0 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8009fd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009fd6:	0cdb      	lsrs	r3, r3, #19
 8009fd8:	f003 0301 	and.w	r3, r3, #1
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d010      	beq.n	800a002 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8009fe0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fe2:	0cdb      	lsrs	r3, r3, #19
 8009fe4:	f003 0301 	and.w	r3, r3, #1
 8009fe8:	2b00      	cmp	r3, #0
 8009fea:	d00a      	beq.n	800a002 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8009ff4:	651a      	str	r2, [r3, #80]	; 0x50
 8009ff6:	4b0e      	ldr	r3, [pc, #56]	; (800a030 <HAL_FDCAN_IRQHandler+0x274>)
 8009ff8:	2200      	movs	r2, #0
 8009ffa:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8009ffc:	6878      	ldr	r0, [r7, #4]
 8009ffe:	f000 f971 	bl	800a2e4 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 800a002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a004:	0c1b      	lsrs	r3, r3, #16
 800a006:	f003 0301 	and.w	r3, r3, #1
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d016      	beq.n	800a03c <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 800a00e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a010:	0c1b      	lsrs	r3, r3, #16
 800a012:	f003 0301 	and.w	r3, r3, #1
 800a016:	2b00      	cmp	r3, #0
 800a018:	d010      	beq.n	800a03c <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800a01a:	687b      	ldr	r3, [r7, #4]
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a022:	651a      	str	r2, [r3, #80]	; 0x50
 800a024:	4b02      	ldr	r3, [pc, #8]	; (800a030 <HAL_FDCAN_IRQHandler+0x274>)
 800a026:	2200      	movs	r2, #0
 800a028:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	e004      	b.n	800a038 <HAL_FDCAN_IRQHandler+0x27c>
 800a02e:	bf00      	nop
 800a030:	4000a800 	.word	0x4000a800
 800a034:	3fcfffff 	.word	0x3fcfffff
 800a038:	f000 f95e 	bl	800a2f8 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 800a03c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a03e:	0c9b      	lsrs	r3, r3, #18
 800a040:	f003 0301 	and.w	r3, r3, #1
 800a044:	2b00      	cmp	r3, #0
 800a046:	d010      	beq.n	800a06a <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800a048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a04a:	0c9b      	lsrs	r3, r3, #18
 800a04c:	f003 0301 	and.w	r3, r3, #1
 800a050:	2b00      	cmp	r3, #0
 800a052:	d00a      	beq.n	800a06a <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800a05c:	651a      	str	r2, [r3, #80]	; 0x50
 800a05e:	4b83      	ldr	r3, [pc, #524]	; (800a26c <HAL_FDCAN_IRQHandler+0x4b0>)
 800a060:	2200      	movs	r2, #0
 800a062:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 800a064:	6878      	ldr	r0, [r7, #4]
 800a066:	f000 f951 	bl	800a30c <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800a06a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a06c:	0c5b      	lsrs	r3, r3, #17
 800a06e:	f003 0301 	and.w	r3, r3, #1
 800a072:	2b00      	cmp	r3, #0
 800a074:	d015      	beq.n	800a0a2 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800a076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a078:	0c5b      	lsrs	r3, r3, #17
 800a07a:	f003 0301 	and.w	r3, r3, #1
 800a07e:	2b00      	cmp	r3, #0
 800a080:	d00f      	beq.n	800a0a2 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	681b      	ldr	r3, [r3, #0]
 800a086:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800a08a:	651a      	str	r2, [r3, #80]	; 0x50
 800a08c:	4b77      	ldr	r3, [pc, #476]	; (800a26c <HAL_FDCAN_IRQHandler+0x4b0>)
 800a08e:	2200      	movs	r2, #0
 800a090:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a098:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800a09c:	687b      	ldr	r3, [r7, #4]
 800a09e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 800a0a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	d00d      	beq.n	800a0c4 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681a      	ldr	r2, [r3, #0]
 800a0ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a0ae:	4b70      	ldr	r3, [pc, #448]	; (800a270 <HAL_FDCAN_IRQHandler+0x4b4>)
 800a0b0:	400b      	ands	r3, r1
 800a0b2:	6513      	str	r3, [r2, #80]	; 0x50
 800a0b4:	4a6d      	ldr	r2, [pc, #436]	; (800a26c <HAL_FDCAN_IRQHandler+0x4b0>)
 800a0b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a0b8:	0f9b      	lsrs	r3, r3, #30
 800a0ba:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 800a0bc:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f000 f942 	bl	800a348 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 800a0c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d011      	beq.n	800a0ee <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	681a      	ldr	r2, [r3, #0]
 800a0ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800a0d0:	4b67      	ldr	r3, [pc, #412]	; (800a270 <HAL_FDCAN_IRQHandler+0x4b4>)
 800a0d2:	400b      	ands	r3, r1
 800a0d4:	6513      	str	r3, [r2, #80]	; 0x50
 800a0d6:	4a65      	ldr	r2, [pc, #404]	; (800a26c <HAL_FDCAN_IRQHandler+0x4b0>)
 800a0d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0da:	0f9b      	lsrs	r3, r3, #30
 800a0dc:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800a0e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a0e6:	431a      	orrs	r2, r3
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	4a60      	ldr	r2, [pc, #384]	; (800a274 <HAL_FDCAN_IRQHandler+0x4b8>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	f040 80ac 	bne.w	800a252 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	685b      	ldr	r3, [r3, #4]
 800a0fe:	689b      	ldr	r3, [r3, #8]
 800a100:	f003 0303 	and.w	r3, r3, #3
 800a104:	2b00      	cmp	r3, #0
 800a106:	f000 80a4 	beq.w	800a252 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 800a10a:	687b      	ldr	r3, [r7, #4]
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	6a1b      	ldr	r3, [r3, #32]
 800a110:	f003 030f 	and.w	r3, r3, #15
 800a114:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	685b      	ldr	r3, [r3, #4]
 800a11a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a11c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a11e:	4013      	ands	r3, r2
 800a120:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	685b      	ldr	r3, [r3, #4]
 800a126:	6a1b      	ldr	r3, [r3, #32]
 800a128:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a12c:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	685b      	ldr	r3, [r3, #4]
 800a132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a134:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a136:	4013      	ands	r3, r2
 800a138:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 800a13a:	687b      	ldr	r3, [r7, #4]
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	6a1b      	ldr	r3, [r3, #32]
 800a140:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800a144:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	685b      	ldr	r3, [r3, #4]
 800a14a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a14c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a14e:	4013      	ands	r3, r2
 800a150:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	685b      	ldr	r3, [r3, #4]
 800a156:	6a1b      	ldr	r3, [r3, #32]
 800a158:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 800a15c:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	685b      	ldr	r3, [r3, #4]
 800a162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a164:	6a3a      	ldr	r2, [r7, #32]
 800a166:	4013      	ands	r3, r2
 800a168:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	685b      	ldr	r3, [r3, #4]
 800a16e:	6a1b      	ldr	r3, [r3, #32]
 800a170:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 800a174:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	685b      	ldr	r3, [r3, #4]
 800a17a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a17c:	69fa      	ldr	r2, [r7, #28]
 800a17e:	4013      	ands	r3, r2
 800a180:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a188:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	6a1b      	ldr	r3, [r3, #32]
 800a190:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 800a192:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a194:	2b00      	cmp	r3, #0
 800a196:	d007      	beq.n	800a1a8 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	685b      	ldr	r3, [r3, #4]
 800a19c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a19e:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 800a1a0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f000 f8db 	bl	800a35e <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 800a1a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1aa:	2b00      	cmp	r3, #0
 800a1ac:	d007      	beq.n	800a1be <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	685b      	ldr	r3, [r3, #4]
 800a1b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a1b4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 800a1b6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a1b8:	6878      	ldr	r0, [r7, #4]
 800a1ba:	f000 f8db 	bl	800a374 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 800a1be:	69bb      	ldr	r3, [r7, #24]
 800a1c0:	099b      	lsrs	r3, r3, #6
 800a1c2:	f003 0301 	and.w	r3, r3, #1
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d01a      	beq.n	800a200 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	099b      	lsrs	r3, r3, #6
 800a1ce:	f003 0301 	and.w	r3, r3, #1
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d014      	beq.n	800a200 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	685b      	ldr	r3, [r3, #4]
 800a1da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1dc:	0c1b      	lsrs	r3, r3, #16
 800a1de:	b29b      	uxth	r3, r3
 800a1e0:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	685b      	ldr	r3, [r3, #4]
 800a1e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a1e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800a1ec:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	685b      	ldr	r3, [r3, #4]
 800a1f2:	2240      	movs	r2, #64	; 0x40
 800a1f4:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 800a1f6:	68fa      	ldr	r2, [r7, #12]
 800a1f8:	6939      	ldr	r1, [r7, #16]
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f000 f8c5 	bl	800a38a <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 800a200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a202:	2b00      	cmp	r3, #0
 800a204:	d007      	beq.n	800a216 <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	685b      	ldr	r3, [r3, #4]
 800a20a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a20c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 800a20e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a210:	6878      	ldr	r0, [r7, #4]
 800a212:	f000 f8c6 	bl	800a3a2 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 800a216:	6a3b      	ldr	r3, [r7, #32]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d00b      	beq.n	800a234 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	685b      	ldr	r3, [r3, #4]
 800a220:	6a3a      	ldr	r2, [r7, #32]
 800a222:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800a22a:	6a3b      	ldr	r3, [r7, #32]
 800a22c:	431a      	orrs	r2, r3
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 800a234:	69fb      	ldr	r3, [r7, #28]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d00b      	beq.n	800a252 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	685b      	ldr	r3, [r3, #4]
 800a23e:	69fa      	ldr	r2, [r7, #28]
 800a240:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800a248:	69fb      	ldr	r3, [r7, #28]
 800a24a:	431a      	orrs	r2, r3
 800a24c:	687b      	ldr	r3, [r7, #4]
 800a24e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800a252:	687b      	ldr	r3, [r7, #4]
 800a254:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d002      	beq.n	800a262 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 800a25c:	6878      	ldr	r0, [r7, #4]
 800a25e:	f000 f869 	bl	800a334 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800a262:	bf00      	nop
 800a264:	3758      	adds	r7, #88	; 0x58
 800a266:	46bd      	mov	sp, r7
 800a268:	bd80      	pop	{r7, pc}
 800a26a:	bf00      	nop
 800a26c:	4000a800 	.word	0x4000a800
 800a270:	3fcfffff 	.word	0x3fcfffff
 800a274:	4000a000 	.word	0x4000a000

0800a278 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 800a278:	b480      	push	{r7}
 800a27a:	b083      	sub	sp, #12
 800a27c:	af00      	add	r7, sp, #0
 800a27e:	6078      	str	r0, [r7, #4]
 800a280:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 800a282:	bf00      	nop
 800a284:	370c      	adds	r7, #12
 800a286:	46bd      	mov	sp, r7
 800a288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28c:	4770      	bx	lr

0800a28e <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 800a28e:	b480      	push	{r7}
 800a290:	b083      	sub	sp, #12
 800a292:	af00      	add	r7, sp, #0
 800a294:	6078      	str	r0, [r7, #4]
 800a296:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800a298:	bf00      	nop
 800a29a:	370c      	adds	r7, #12
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr

0800a2a4 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b083      	sub	sp, #12
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800a2ae:	bf00      	nop
 800a2b0:	370c      	adds	r7, #12
 800a2b2:	46bd      	mov	sp, r7
 800a2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b8:	4770      	bx	lr

0800a2ba <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800a2ba:	b480      	push	{r7}
 800a2bc:	b083      	sub	sp, #12
 800a2be:	af00      	add	r7, sp, #0
 800a2c0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800a2c2:	bf00      	nop
 800a2c4:	370c      	adds	r7, #12
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2cc:	4770      	bx	lr

0800a2ce <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800a2ce:	b480      	push	{r7}
 800a2d0:	b083      	sub	sp, #12
 800a2d2:	af00      	add	r7, sp, #0
 800a2d4:	6078      	str	r0, [r7, #4]
 800a2d6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800a2d8:	bf00      	nop
 800a2da:	370c      	adds	r7, #12
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr

0800a2e4 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b083      	sub	sp, #12
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 800a2ec:	bf00      	nop
 800a2ee:	370c      	adds	r7, #12
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr

0800a2f8 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800a2f8:	b480      	push	{r7}
 800a2fa:	b083      	sub	sp, #12
 800a2fc:	af00      	add	r7, sp, #0
 800a2fe:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 800a300:	bf00      	nop
 800a302:	370c      	adds	r7, #12
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr

0800a30c <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800a30c:	b480      	push	{r7}
 800a30e:	b083      	sub	sp, #12
 800a310:	af00      	add	r7, sp, #0
 800a312:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 800a314:	bf00      	nop
 800a316:	370c      	adds	r7, #12
 800a318:	46bd      	mov	sp, r7
 800a31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a31e:	4770      	bx	lr

0800a320 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800a320:	b480      	push	{r7}
 800a322:	b083      	sub	sp, #12
 800a324:	af00      	add	r7, sp, #0
 800a326:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 800a328:	bf00      	nop
 800a32a:	370c      	adds	r7, #12
 800a32c:	46bd      	mov	sp, r7
 800a32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a332:	4770      	bx	lr

0800a334 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800a334:	b480      	push	{r7}
 800a336:	b083      	sub	sp, #12
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 800a33c:	bf00      	nop
 800a33e:	370c      	adds	r7, #12
 800a340:	46bd      	mov	sp, r7
 800a342:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a346:	4770      	bx	lr

0800a348 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 800a348:	b480      	push	{r7}
 800a34a:	b083      	sub	sp, #12
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	6078      	str	r0, [r7, #4]
 800a350:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800a352:	bf00      	nop
 800a354:	370c      	adds	r7, #12
 800a356:	46bd      	mov	sp, r7
 800a358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35c:	4770      	bx	lr

0800a35e <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 800a35e:	b480      	push	{r7}
 800a360:	b083      	sub	sp, #12
 800a362:	af00      	add	r7, sp, #0
 800a364:	6078      	str	r0, [r7, #4]
 800a366:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 800a368:	bf00      	nop
 800a36a:	370c      	adds	r7, #12
 800a36c:	46bd      	mov	sp, r7
 800a36e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a372:	4770      	bx	lr

0800a374 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 800a374:	b480      	push	{r7}
 800a376:	b083      	sub	sp, #12
 800a378:	af00      	add	r7, sp, #0
 800a37a:	6078      	str	r0, [r7, #4]
 800a37c:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 800a37e:	bf00      	nop
 800a380:	370c      	adds	r7, #12
 800a382:	46bd      	mov	sp, r7
 800a384:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a388:	4770      	bx	lr

0800a38a <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 800a38a:	b480      	push	{r7}
 800a38c:	b085      	sub	sp, #20
 800a38e:	af00      	add	r7, sp, #0
 800a390:	60f8      	str	r0, [r7, #12]
 800a392:	60b9      	str	r1, [r7, #8]
 800a394:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 800a396:	bf00      	nop
 800a398:	3714      	adds	r7, #20
 800a39a:	46bd      	mov	sp, r7
 800a39c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a0:	4770      	bx	lr

0800a3a2 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 800a3a2:	b480      	push	{r7}
 800a3a4:	b083      	sub	sp, #12
 800a3a6:	af00      	add	r7, sp, #0
 800a3a8:	6078      	str	r0, [r7, #4]
 800a3aa:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 800a3ac:	bf00      	nop
 800a3ae:	370c      	adds	r7, #12
 800a3b0:	46bd      	mov	sp, r7
 800a3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3b6:	4770      	bx	lr

0800a3b8 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b085      	sub	sp, #20
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a3c4:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 800a3c6:	687b      	ldr	r3, [r7, #4]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800a3ce:	4ba7      	ldr	r3, [pc, #668]	; (800a66c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a3d0:	4013      	ands	r3, r2
 800a3d2:	68ba      	ldr	r2, [r7, #8]
 800a3d4:	0091      	lsls	r1, r2, #2
 800a3d6:	687a      	ldr	r2, [r7, #4]
 800a3d8:	6812      	ldr	r2, [r2, #0]
 800a3da:	430b      	orrs	r3, r1
 800a3dc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800a3e8:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3f0:	041a      	lsls	r2, r3, #16
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	430a      	orrs	r2, r1
 800a3f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a400:	68ba      	ldr	r2, [r7, #8]
 800a402:	4413      	add	r3, r2
 800a404:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a40e:	4b97      	ldr	r3, [pc, #604]	; (800a66c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a410:	4013      	ands	r3, r2
 800a412:	68ba      	ldr	r2, [r7, #8]
 800a414:	0091      	lsls	r1, r2, #2
 800a416:	687a      	ldr	r2, [r7, #4]
 800a418:	6812      	ldr	r2, [r2, #0]
 800a41a:	430b      	orrs	r3, r1
 800a41c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a428:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a430:	041a      	lsls	r2, r3, #16
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	430a      	orrs	r2, r1
 800a438:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a440:	005b      	lsls	r3, r3, #1
 800a442:	68ba      	ldr	r2, [r7, #8]
 800a444:	4413      	add	r3, r2
 800a446:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	681b      	ldr	r3, [r3, #0]
 800a44c:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 800a450:	4b86      	ldr	r3, [pc, #536]	; (800a66c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a452:	4013      	ands	r3, r2
 800a454:	68ba      	ldr	r2, [r7, #8]
 800a456:	0091      	lsls	r1, r2, #2
 800a458:	687a      	ldr	r2, [r7, #4]
 800a45a:	6812      	ldr	r2, [r2, #0]
 800a45c:	430b      	orrs	r3, r1
 800a45e:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	681b      	ldr	r3, [r3, #0]
 800a466:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800a46a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a472:	041a      	lsls	r2, r3, #16
 800a474:	687b      	ldr	r3, [r7, #4]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	430a      	orrs	r2, r1
 800a47a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a482:	687a      	ldr	r2, [r7, #4]
 800a484:	6c52      	ldr	r2, [r2, #68]	; 0x44
 800a486:	fb02 f303 	mul.w	r3, r2, r3
 800a48a:	68ba      	ldr	r2, [r7, #8]
 800a48c:	4413      	add	r3, r2
 800a48e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800a498:	4b74      	ldr	r3, [pc, #464]	; (800a66c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a49a:	4013      	ands	r3, r2
 800a49c:	68ba      	ldr	r2, [r7, #8]
 800a49e:	0091      	lsls	r1, r2, #2
 800a4a0:	687a      	ldr	r2, [r7, #4]
 800a4a2:	6812      	ldr	r2, [r2, #0]
 800a4a4:	430b      	orrs	r3, r1
 800a4a6:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800a4b2:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4ba:	041a      	lsls	r2, r3, #16
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	430a      	orrs	r2, r1
 800a4c2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a4ca:	687a      	ldr	r2, [r7, #4]
 800a4cc:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800a4ce:	fb02 f303 	mul.w	r3, r2, r3
 800a4d2:	68ba      	ldr	r2, [r7, #8]
 800a4d4:	4413      	add	r3, r2
 800a4d6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 800a4e0:	4b62      	ldr	r3, [pc, #392]	; (800a66c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a4e2:	4013      	ands	r3, r2
 800a4e4:	68ba      	ldr	r2, [r7, #8]
 800a4e6:	0091      	lsls	r1, r2, #2
 800a4e8:	687a      	ldr	r2, [r7, #4]
 800a4ea:	6812      	ldr	r2, [r2, #0]
 800a4ec:	430b      	orrs	r3, r1
 800a4ee:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4f6:	687a      	ldr	r2, [r7, #4]
 800a4f8:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800a4fa:	fb02 f303 	mul.w	r3, r2, r3
 800a4fe:	68ba      	ldr	r2, [r7, #8]
 800a500:	4413      	add	r3, r2
 800a502:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800a50c:	4b57      	ldr	r3, [pc, #348]	; (800a66c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a50e:	4013      	ands	r3, r2
 800a510:	68ba      	ldr	r2, [r7, #8]
 800a512:	0091      	lsls	r1, r2, #2
 800a514:	687a      	ldr	r2, [r7, #4]
 800a516:	6812      	ldr	r2, [r2, #0]
 800a518:	430b      	orrs	r3, r1
 800a51a:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	681b      	ldr	r3, [r3, #0]
 800a522:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 800a526:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a52e:	041a      	lsls	r2, r3, #16
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	430a      	orrs	r2, r1
 800a536:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a53e:	005b      	lsls	r3, r3, #1
 800a540:	68ba      	ldr	r2, [r7, #8]
 800a542:	4413      	add	r3, r2
 800a544:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800a54e:	4b47      	ldr	r3, [pc, #284]	; (800a66c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 800a550:	4013      	ands	r3, r2
 800a552:	68ba      	ldr	r2, [r7, #8]
 800a554:	0091      	lsls	r1, r2, #2
 800a556:	687a      	ldr	r2, [r7, #4]
 800a558:	6812      	ldr	r2, [r2, #0]
 800a55a:	430b      	orrs	r3, r1
 800a55c:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a568:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a570:	041a      	lsls	r2, r3, #16
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	430a      	orrs	r2, r1
 800a578:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	681b      	ldr	r3, [r3, #0]
 800a580:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800a584:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a58c:	061a      	lsls	r2, r3, #24
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	430a      	orrs	r2, r1
 800a594:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a59c:	4b34      	ldr	r3, [pc, #208]	; (800a670 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800a59e:	4413      	add	r3, r2
 800a5a0:	009a      	lsls	r2, r3, #2
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ae:	009b      	lsls	r3, r3, #2
 800a5b0:	441a      	add	r2, r3
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a5be:	00db      	lsls	r3, r3, #3
 800a5c0:	441a      	add	r2, r3
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5ce:	6879      	ldr	r1, [r7, #4]
 800a5d0:	6c49      	ldr	r1, [r1, #68]	; 0x44
 800a5d2:	fb01 f303 	mul.w	r3, r1, r3
 800a5d6:	009b      	lsls	r3, r3, #2
 800a5d8:	441a      	add	r2, r3
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a5e6:	6879      	ldr	r1, [r7, #4]
 800a5e8:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800a5ea:	fb01 f303 	mul.w	r3, r1, r3
 800a5ee:	009b      	lsls	r3, r3, #2
 800a5f0:	441a      	add	r2, r3
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a5fe:	6879      	ldr	r1, [r7, #4]
 800a600:	6d49      	ldr	r1, [r1, #84]	; 0x54
 800a602:	fb01 f303 	mul.w	r3, r1, r3
 800a606:	009b      	lsls	r3, r3, #2
 800a608:	441a      	add	r2, r3
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a61a:	00db      	lsls	r3, r3, #3
 800a61c:	441a      	add	r2, r3
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a62e:	6879      	ldr	r1, [r7, #4]
 800a630:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800a632:	fb01 f303 	mul.w	r3, r1, r3
 800a636:	009b      	lsls	r3, r3, #2
 800a638:	441a      	add	r2, r3
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a64a:	6879      	ldr	r1, [r7, #4]
 800a64c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 800a64e:	fb01 f303 	mul.w	r3, r1, r3
 800a652:	009b      	lsls	r3, r3, #2
 800a654:	441a      	add	r2, r3
 800a656:	687b      	ldr	r3, [r7, #4]
 800a658:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a662:	4a04      	ldr	r2, [pc, #16]	; (800a674 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 800a664:	4293      	cmp	r3, r2
 800a666:	d915      	bls.n	800a694 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 800a668:	e006      	b.n	800a678 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800a66a:	bf00      	nop
 800a66c:	ffff0003 	.word	0xffff0003
 800a670:	10002b00 	.word	0x10002b00
 800a674:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800a67e:	f043 0220 	orr.w	r2, r3, #32
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2203      	movs	r2, #3
 800a68c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 800a690:	2301      	movs	r3, #1
 800a692:	e010      	b.n	800a6b6 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a698:	60fb      	str	r3, [r7, #12]
 800a69a:	e005      	b.n	800a6a8 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	2200      	movs	r2, #0
 800a6a0:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	3304      	adds	r3, #4
 800a6a6:	60fb      	str	r3, [r7, #12]
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a6ae:	68fa      	ldr	r2, [r7, #12]
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d3f3      	bcc.n	800a69c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 800a6b4:	2300      	movs	r3, #0
}
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	3714      	adds	r7, #20
 800a6ba:	46bd      	mov	sp, r7
 800a6bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6c0:	4770      	bx	lr
 800a6c2:	bf00      	nop

0800a6c4 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b089      	sub	sp, #36	; 0x24
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	60f8      	str	r0, [r7, #12]
 800a6cc:	60b9      	str	r1, [r7, #8]
 800a6ce:	607a      	str	r2, [r7, #4]
 800a6d0:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	685b      	ldr	r3, [r3, #4]
 800a6d6:	2b00      	cmp	r3, #0
 800a6d8:	d10a      	bne.n	800a6f0 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800a6da:	68bb      	ldr	r3, [r7, #8]
 800a6dc:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800a6e2:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 800a6e4:	68bb      	ldr	r3, [r7, #8]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800a6ea:	4313      	orrs	r3, r2
 800a6ec:	61fb      	str	r3, [r7, #28]
 800a6ee:	e00a      	b.n	800a706 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800a6f0:	68bb      	ldr	r3, [r7, #8]
 800a6f2:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 800a6f4:	68bb      	ldr	r3, [r7, #8]
 800a6f6:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 800a6f8:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800a6fa:	68bb      	ldr	r3, [r7, #8]
 800a6fc:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800a6fe:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800a700:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800a704:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	6a1b      	ldr	r3, [r3, #32]
 800a70a:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 800a70c:	68bb      	ldr	r3, [r7, #8]
 800a70e:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800a710:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800a712:	68bb      	ldr	r3, [r7, #8]
 800a714:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 800a716:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 800a718:	68bb      	ldr	r3, [r7, #8]
 800a71a:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 800a71c:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800a71e:	68bb      	ldr	r3, [r7, #8]
 800a720:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800a722:	4313      	orrs	r3, r2
 800a724:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800a730:	6839      	ldr	r1, [r7, #0]
 800a732:	fb01 f303 	mul.w	r3, r1, r3
 800a736:	009b      	lsls	r3, r3, #2
 800a738:	4413      	add	r3, r2
 800a73a:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 800a73c:	69bb      	ldr	r3, [r7, #24]
 800a73e:	69fa      	ldr	r2, [r7, #28]
 800a740:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800a742:	69bb      	ldr	r3, [r7, #24]
 800a744:	3304      	adds	r3, #4
 800a746:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 800a748:	69bb      	ldr	r3, [r7, #24]
 800a74a:	693a      	ldr	r2, [r7, #16]
 800a74c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800a74e:	69bb      	ldr	r3, [r7, #24]
 800a750:	3304      	adds	r3, #4
 800a752:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 800a754:	2300      	movs	r3, #0
 800a756:	617b      	str	r3, [r7, #20]
 800a758:	e020      	b.n	800a79c <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800a75a:	697b      	ldr	r3, [r7, #20]
 800a75c:	3303      	adds	r3, #3
 800a75e:	687a      	ldr	r2, [r7, #4]
 800a760:	4413      	add	r3, r2
 800a762:	781b      	ldrb	r3, [r3, #0]
 800a764:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 800a766:	697b      	ldr	r3, [r7, #20]
 800a768:	3302      	adds	r3, #2
 800a76a:	6879      	ldr	r1, [r7, #4]
 800a76c:	440b      	add	r3, r1
 800a76e:	781b      	ldrb	r3, [r3, #0]
 800a770:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800a772:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 800a774:	697b      	ldr	r3, [r7, #20]
 800a776:	3301      	adds	r3, #1
 800a778:	6879      	ldr	r1, [r7, #4]
 800a77a:	440b      	add	r3, r1
 800a77c:	781b      	ldrb	r3, [r3, #0]
 800a77e:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 800a780:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 800a782:	6879      	ldr	r1, [r7, #4]
 800a784:	697a      	ldr	r2, [r7, #20]
 800a786:	440a      	add	r2, r1
 800a788:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 800a78a:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800a78c:	69bb      	ldr	r3, [r7, #24]
 800a78e:	601a      	str	r2, [r3, #0]
    TxAddress++;
 800a790:	69bb      	ldr	r3, [r7, #24]
 800a792:	3304      	adds	r3, #4
 800a794:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 800a796:	697b      	ldr	r3, [r7, #20]
 800a798:	3304      	adds	r3, #4
 800a79a:	617b      	str	r3, [r7, #20]
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	68db      	ldr	r3, [r3, #12]
 800a7a0:	0c1b      	lsrs	r3, r3, #16
 800a7a2:	4a06      	ldr	r2, [pc, #24]	; (800a7bc <FDCAN_CopyMessageToRAM+0xf8>)
 800a7a4:	5cd3      	ldrb	r3, [r2, r3]
 800a7a6:	461a      	mov	r2, r3
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	4293      	cmp	r3, r2
 800a7ac:	d3d5      	bcc.n	800a75a <FDCAN_CopyMessageToRAM+0x96>
  }
}
 800a7ae:	bf00      	nop
 800a7b0:	bf00      	nop
 800a7b2:	3724      	adds	r7, #36	; 0x24
 800a7b4:	46bd      	mov	sp, r7
 800a7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7ba:	4770      	bx	lr
 800a7bc:	08015dfc 	.word	0x08015dfc

0800a7c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b089      	sub	sp, #36	; 0x24
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a7ce:	4b89      	ldr	r3, [pc, #548]	; (800a9f4 <HAL_GPIO_Init+0x234>)
 800a7d0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a7d2:	e194      	b.n	800aafe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a7d4:	683b      	ldr	r3, [r7, #0]
 800a7d6:	681a      	ldr	r2, [r3, #0]
 800a7d8:	2101      	movs	r1, #1
 800a7da:	69fb      	ldr	r3, [r7, #28]
 800a7dc:	fa01 f303 	lsl.w	r3, r1, r3
 800a7e0:	4013      	ands	r3, r2
 800a7e2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	f000 8186 	beq.w	800aaf8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	685b      	ldr	r3, [r3, #4]
 800a7f0:	f003 0303 	and.w	r3, r3, #3
 800a7f4:	2b01      	cmp	r3, #1
 800a7f6:	d005      	beq.n	800a804 <HAL_GPIO_Init+0x44>
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	685b      	ldr	r3, [r3, #4]
 800a7fc:	f003 0303 	and.w	r3, r3, #3
 800a800:	2b02      	cmp	r3, #2
 800a802:	d130      	bne.n	800a866 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	689b      	ldr	r3, [r3, #8]
 800a808:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a80a:	69fb      	ldr	r3, [r7, #28]
 800a80c:	005b      	lsls	r3, r3, #1
 800a80e:	2203      	movs	r2, #3
 800a810:	fa02 f303 	lsl.w	r3, r2, r3
 800a814:	43db      	mvns	r3, r3
 800a816:	69ba      	ldr	r2, [r7, #24]
 800a818:	4013      	ands	r3, r2
 800a81a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a81c:	683b      	ldr	r3, [r7, #0]
 800a81e:	68da      	ldr	r2, [r3, #12]
 800a820:	69fb      	ldr	r3, [r7, #28]
 800a822:	005b      	lsls	r3, r3, #1
 800a824:	fa02 f303 	lsl.w	r3, r2, r3
 800a828:	69ba      	ldr	r2, [r7, #24]
 800a82a:	4313      	orrs	r3, r2
 800a82c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a82e:	687b      	ldr	r3, [r7, #4]
 800a830:	69ba      	ldr	r2, [r7, #24]
 800a832:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	685b      	ldr	r3, [r3, #4]
 800a838:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a83a:	2201      	movs	r2, #1
 800a83c:	69fb      	ldr	r3, [r7, #28]
 800a83e:	fa02 f303 	lsl.w	r3, r2, r3
 800a842:	43db      	mvns	r3, r3
 800a844:	69ba      	ldr	r2, [r7, #24]
 800a846:	4013      	ands	r3, r2
 800a848:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	685b      	ldr	r3, [r3, #4]
 800a84e:	091b      	lsrs	r3, r3, #4
 800a850:	f003 0201 	and.w	r2, r3, #1
 800a854:	69fb      	ldr	r3, [r7, #28]
 800a856:	fa02 f303 	lsl.w	r3, r2, r3
 800a85a:	69ba      	ldr	r2, [r7, #24]
 800a85c:	4313      	orrs	r3, r2
 800a85e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	69ba      	ldr	r2, [r7, #24]
 800a864:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800a866:	683b      	ldr	r3, [r7, #0]
 800a868:	685b      	ldr	r3, [r3, #4]
 800a86a:	f003 0303 	and.w	r3, r3, #3
 800a86e:	2b03      	cmp	r3, #3
 800a870:	d017      	beq.n	800a8a2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	68db      	ldr	r3, [r3, #12]
 800a876:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800a878:	69fb      	ldr	r3, [r7, #28]
 800a87a:	005b      	lsls	r3, r3, #1
 800a87c:	2203      	movs	r2, #3
 800a87e:	fa02 f303 	lsl.w	r3, r2, r3
 800a882:	43db      	mvns	r3, r3
 800a884:	69ba      	ldr	r2, [r7, #24]
 800a886:	4013      	ands	r3, r2
 800a888:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a88a:	683b      	ldr	r3, [r7, #0]
 800a88c:	689a      	ldr	r2, [r3, #8]
 800a88e:	69fb      	ldr	r3, [r7, #28]
 800a890:	005b      	lsls	r3, r3, #1
 800a892:	fa02 f303 	lsl.w	r3, r2, r3
 800a896:	69ba      	ldr	r2, [r7, #24]
 800a898:	4313      	orrs	r3, r2
 800a89a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	69ba      	ldr	r2, [r7, #24]
 800a8a0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	685b      	ldr	r3, [r3, #4]
 800a8a6:	f003 0303 	and.w	r3, r3, #3
 800a8aa:	2b02      	cmp	r3, #2
 800a8ac:	d123      	bne.n	800a8f6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a8ae:	69fb      	ldr	r3, [r7, #28]
 800a8b0:	08da      	lsrs	r2, r3, #3
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	3208      	adds	r2, #8
 800a8b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800a8bc:	69fb      	ldr	r3, [r7, #28]
 800a8be:	f003 0307 	and.w	r3, r3, #7
 800a8c2:	009b      	lsls	r3, r3, #2
 800a8c4:	220f      	movs	r2, #15
 800a8c6:	fa02 f303 	lsl.w	r3, r2, r3
 800a8ca:	43db      	mvns	r3, r3
 800a8cc:	69ba      	ldr	r2, [r7, #24]
 800a8ce:	4013      	ands	r3, r2
 800a8d0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800a8d2:	683b      	ldr	r3, [r7, #0]
 800a8d4:	691a      	ldr	r2, [r3, #16]
 800a8d6:	69fb      	ldr	r3, [r7, #28]
 800a8d8:	f003 0307 	and.w	r3, r3, #7
 800a8dc:	009b      	lsls	r3, r3, #2
 800a8de:	fa02 f303 	lsl.w	r3, r2, r3
 800a8e2:	69ba      	ldr	r2, [r7, #24]
 800a8e4:	4313      	orrs	r3, r2
 800a8e6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a8e8:	69fb      	ldr	r3, [r7, #28]
 800a8ea:	08da      	lsrs	r2, r3, #3
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	3208      	adds	r2, #8
 800a8f0:	69b9      	ldr	r1, [r7, #24]
 800a8f2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800a8fc:	69fb      	ldr	r3, [r7, #28]
 800a8fe:	005b      	lsls	r3, r3, #1
 800a900:	2203      	movs	r2, #3
 800a902:	fa02 f303 	lsl.w	r3, r2, r3
 800a906:	43db      	mvns	r3, r3
 800a908:	69ba      	ldr	r2, [r7, #24]
 800a90a:	4013      	ands	r3, r2
 800a90c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a90e:	683b      	ldr	r3, [r7, #0]
 800a910:	685b      	ldr	r3, [r3, #4]
 800a912:	f003 0203 	and.w	r2, r3, #3
 800a916:	69fb      	ldr	r3, [r7, #28]
 800a918:	005b      	lsls	r3, r3, #1
 800a91a:	fa02 f303 	lsl.w	r3, r2, r3
 800a91e:	69ba      	ldr	r2, [r7, #24]
 800a920:	4313      	orrs	r3, r2
 800a922:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	69ba      	ldr	r2, [r7, #24]
 800a928:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800a92a:	683b      	ldr	r3, [r7, #0]
 800a92c:	685b      	ldr	r3, [r3, #4]
 800a92e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800a932:	2b00      	cmp	r3, #0
 800a934:	f000 80e0 	beq.w	800aaf8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a938:	4b2f      	ldr	r3, [pc, #188]	; (800a9f8 <HAL_GPIO_Init+0x238>)
 800a93a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a93e:	4a2e      	ldr	r2, [pc, #184]	; (800a9f8 <HAL_GPIO_Init+0x238>)
 800a940:	f043 0302 	orr.w	r3, r3, #2
 800a944:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800a948:	4b2b      	ldr	r3, [pc, #172]	; (800a9f8 <HAL_GPIO_Init+0x238>)
 800a94a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800a94e:	f003 0302 	and.w	r3, r3, #2
 800a952:	60fb      	str	r3, [r7, #12]
 800a954:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a956:	4a29      	ldr	r2, [pc, #164]	; (800a9fc <HAL_GPIO_Init+0x23c>)
 800a958:	69fb      	ldr	r3, [r7, #28]
 800a95a:	089b      	lsrs	r3, r3, #2
 800a95c:	3302      	adds	r3, #2
 800a95e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a962:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800a964:	69fb      	ldr	r3, [r7, #28]
 800a966:	f003 0303 	and.w	r3, r3, #3
 800a96a:	009b      	lsls	r3, r3, #2
 800a96c:	220f      	movs	r2, #15
 800a96e:	fa02 f303 	lsl.w	r3, r2, r3
 800a972:	43db      	mvns	r3, r3
 800a974:	69ba      	ldr	r2, [r7, #24]
 800a976:	4013      	ands	r3, r2
 800a978:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	4a20      	ldr	r2, [pc, #128]	; (800aa00 <HAL_GPIO_Init+0x240>)
 800a97e:	4293      	cmp	r3, r2
 800a980:	d052      	beq.n	800aa28 <HAL_GPIO_Init+0x268>
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	4a1f      	ldr	r2, [pc, #124]	; (800aa04 <HAL_GPIO_Init+0x244>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d031      	beq.n	800a9ee <HAL_GPIO_Init+0x22e>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	4a1e      	ldr	r2, [pc, #120]	; (800aa08 <HAL_GPIO_Init+0x248>)
 800a98e:	4293      	cmp	r3, r2
 800a990:	d02b      	beq.n	800a9ea <HAL_GPIO_Init+0x22a>
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	4a1d      	ldr	r2, [pc, #116]	; (800aa0c <HAL_GPIO_Init+0x24c>)
 800a996:	4293      	cmp	r3, r2
 800a998:	d025      	beq.n	800a9e6 <HAL_GPIO_Init+0x226>
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	4a1c      	ldr	r2, [pc, #112]	; (800aa10 <HAL_GPIO_Init+0x250>)
 800a99e:	4293      	cmp	r3, r2
 800a9a0:	d01f      	beq.n	800a9e2 <HAL_GPIO_Init+0x222>
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	4a1b      	ldr	r2, [pc, #108]	; (800aa14 <HAL_GPIO_Init+0x254>)
 800a9a6:	4293      	cmp	r3, r2
 800a9a8:	d019      	beq.n	800a9de <HAL_GPIO_Init+0x21e>
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	4a1a      	ldr	r2, [pc, #104]	; (800aa18 <HAL_GPIO_Init+0x258>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d013      	beq.n	800a9da <HAL_GPIO_Init+0x21a>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	4a19      	ldr	r2, [pc, #100]	; (800aa1c <HAL_GPIO_Init+0x25c>)
 800a9b6:	4293      	cmp	r3, r2
 800a9b8:	d00d      	beq.n	800a9d6 <HAL_GPIO_Init+0x216>
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	4a18      	ldr	r2, [pc, #96]	; (800aa20 <HAL_GPIO_Init+0x260>)
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	d007      	beq.n	800a9d2 <HAL_GPIO_Init+0x212>
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	4a17      	ldr	r2, [pc, #92]	; (800aa24 <HAL_GPIO_Init+0x264>)
 800a9c6:	4293      	cmp	r3, r2
 800a9c8:	d101      	bne.n	800a9ce <HAL_GPIO_Init+0x20e>
 800a9ca:	2309      	movs	r3, #9
 800a9cc:	e02d      	b.n	800aa2a <HAL_GPIO_Init+0x26a>
 800a9ce:	230a      	movs	r3, #10
 800a9d0:	e02b      	b.n	800aa2a <HAL_GPIO_Init+0x26a>
 800a9d2:	2308      	movs	r3, #8
 800a9d4:	e029      	b.n	800aa2a <HAL_GPIO_Init+0x26a>
 800a9d6:	2307      	movs	r3, #7
 800a9d8:	e027      	b.n	800aa2a <HAL_GPIO_Init+0x26a>
 800a9da:	2306      	movs	r3, #6
 800a9dc:	e025      	b.n	800aa2a <HAL_GPIO_Init+0x26a>
 800a9de:	2305      	movs	r3, #5
 800a9e0:	e023      	b.n	800aa2a <HAL_GPIO_Init+0x26a>
 800a9e2:	2304      	movs	r3, #4
 800a9e4:	e021      	b.n	800aa2a <HAL_GPIO_Init+0x26a>
 800a9e6:	2303      	movs	r3, #3
 800a9e8:	e01f      	b.n	800aa2a <HAL_GPIO_Init+0x26a>
 800a9ea:	2302      	movs	r3, #2
 800a9ec:	e01d      	b.n	800aa2a <HAL_GPIO_Init+0x26a>
 800a9ee:	2301      	movs	r3, #1
 800a9f0:	e01b      	b.n	800aa2a <HAL_GPIO_Init+0x26a>
 800a9f2:	bf00      	nop
 800a9f4:	58000080 	.word	0x58000080
 800a9f8:	58024400 	.word	0x58024400
 800a9fc:	58000400 	.word	0x58000400
 800aa00:	58020000 	.word	0x58020000
 800aa04:	58020400 	.word	0x58020400
 800aa08:	58020800 	.word	0x58020800
 800aa0c:	58020c00 	.word	0x58020c00
 800aa10:	58021000 	.word	0x58021000
 800aa14:	58021400 	.word	0x58021400
 800aa18:	58021800 	.word	0x58021800
 800aa1c:	58021c00 	.word	0x58021c00
 800aa20:	58022000 	.word	0x58022000
 800aa24:	58022400 	.word	0x58022400
 800aa28:	2300      	movs	r3, #0
 800aa2a:	69fa      	ldr	r2, [r7, #28]
 800aa2c:	f002 0203 	and.w	r2, r2, #3
 800aa30:	0092      	lsls	r2, r2, #2
 800aa32:	4093      	lsls	r3, r2
 800aa34:	69ba      	ldr	r2, [r7, #24]
 800aa36:	4313      	orrs	r3, r2
 800aa38:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800aa3a:	4938      	ldr	r1, [pc, #224]	; (800ab1c <HAL_GPIO_Init+0x35c>)
 800aa3c:	69fb      	ldr	r3, [r7, #28]
 800aa3e:	089b      	lsrs	r3, r3, #2
 800aa40:	3302      	adds	r3, #2
 800aa42:	69ba      	ldr	r2, [r7, #24]
 800aa44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800aa48:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	43db      	mvns	r3, r3
 800aa54:	69ba      	ldr	r2, [r7, #24]
 800aa56:	4013      	ands	r3, r2
 800aa58:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800aa5a:	683b      	ldr	r3, [r7, #0]
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800aa62:	2b00      	cmp	r3, #0
 800aa64:	d003      	beq.n	800aa6e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800aa66:	69ba      	ldr	r2, [r7, #24]
 800aa68:	693b      	ldr	r3, [r7, #16]
 800aa6a:	4313      	orrs	r3, r2
 800aa6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800aa6e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800aa72:	69bb      	ldr	r3, [r7, #24]
 800aa74:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800aa76:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800aa7a:	685b      	ldr	r3, [r3, #4]
 800aa7c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800aa7e:	693b      	ldr	r3, [r7, #16]
 800aa80:	43db      	mvns	r3, r3
 800aa82:	69ba      	ldr	r2, [r7, #24]
 800aa84:	4013      	ands	r3, r2
 800aa86:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800aa88:	683b      	ldr	r3, [r7, #0]
 800aa8a:	685b      	ldr	r3, [r3, #4]
 800aa8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d003      	beq.n	800aa9c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800aa94:	69ba      	ldr	r2, [r7, #24]
 800aa96:	693b      	ldr	r3, [r7, #16]
 800aa98:	4313      	orrs	r3, r2
 800aa9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800aa9c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800aaa0:	69bb      	ldr	r3, [r7, #24]
 800aaa2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800aaa4:	697b      	ldr	r3, [r7, #20]
 800aaa6:	685b      	ldr	r3, [r3, #4]
 800aaa8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800aaaa:	693b      	ldr	r3, [r7, #16]
 800aaac:	43db      	mvns	r3, r3
 800aaae:	69ba      	ldr	r2, [r7, #24]
 800aab0:	4013      	ands	r3, r2
 800aab2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800aab4:	683b      	ldr	r3, [r7, #0]
 800aab6:	685b      	ldr	r3, [r3, #4]
 800aab8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d003      	beq.n	800aac8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800aac0:	69ba      	ldr	r2, [r7, #24]
 800aac2:	693b      	ldr	r3, [r7, #16]
 800aac4:	4313      	orrs	r3, r2
 800aac6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	69ba      	ldr	r2, [r7, #24]
 800aacc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800aace:	697b      	ldr	r3, [r7, #20]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	43db      	mvns	r3, r3
 800aad8:	69ba      	ldr	r2, [r7, #24]
 800aada:	4013      	ands	r3, r2
 800aadc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800aade:	683b      	ldr	r3, [r7, #0]
 800aae0:	685b      	ldr	r3, [r3, #4]
 800aae2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800aae6:	2b00      	cmp	r3, #0
 800aae8:	d003      	beq.n	800aaf2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800aaea:	69ba      	ldr	r2, [r7, #24]
 800aaec:	693b      	ldr	r3, [r7, #16]
 800aaee:	4313      	orrs	r3, r2
 800aaf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800aaf2:	697b      	ldr	r3, [r7, #20]
 800aaf4:	69ba      	ldr	r2, [r7, #24]
 800aaf6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800aaf8:	69fb      	ldr	r3, [r7, #28]
 800aafa:	3301      	adds	r3, #1
 800aafc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	681a      	ldr	r2, [r3, #0]
 800ab02:	69fb      	ldr	r3, [r7, #28]
 800ab04:	fa22 f303 	lsr.w	r3, r2, r3
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	f47f ae63 	bne.w	800a7d4 <HAL_GPIO_Init+0x14>
  }
}
 800ab0e:	bf00      	nop
 800ab10:	bf00      	nop
 800ab12:	3724      	adds	r7, #36	; 0x24
 800ab14:	46bd      	mov	sp, r7
 800ab16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1a:	4770      	bx	lr
 800ab1c:	58000400 	.word	0x58000400

0800ab20 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b083      	sub	sp, #12
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
 800ab28:	460b      	mov	r3, r1
 800ab2a:	807b      	strh	r3, [r7, #2]
 800ab2c:	4613      	mov	r3, r2
 800ab2e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800ab30:	787b      	ldrb	r3, [r7, #1]
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	d003      	beq.n	800ab3e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800ab36:	887a      	ldrh	r2, [r7, #2]
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800ab3c:	e003      	b.n	800ab46 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800ab3e:	887b      	ldrh	r3, [r7, #2]
 800ab40:	041a      	lsls	r2, r3, #16
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	619a      	str	r2, [r3, #24]
}
 800ab46:	bf00      	nop
 800ab48:	370c      	adds	r7, #12
 800ab4a:	46bd      	mov	sp, r7
 800ab4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab50:	4770      	bx	lr

0800ab52 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800ab52:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab54:	b08f      	sub	sp, #60	; 0x3c
 800ab56:	af0a      	add	r7, sp, #40	; 0x28
 800ab58:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d101      	bne.n	800ab64 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800ab60:	2301      	movs	r3, #1
 800ab62:	e116      	b.n	800ad92 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800ab70:	b2db      	uxtb	r3, r3
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	d106      	bne.n	800ab84 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800ab7e:	6878      	ldr	r0, [r7, #4]
 800ab80:	f008 fd32 	bl	80135e8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	2203      	movs	r2, #3
 800ab88:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800ab8c:	68bb      	ldr	r3, [r7, #8]
 800ab8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ab90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab94:	2b00      	cmp	r3, #0
 800ab96:	d102      	bne.n	800ab9e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	2200      	movs	r2, #0
 800ab9c:	60da      	str	r2, [r3, #12]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	681b      	ldr	r3, [r3, #0]
 800aba2:	4618      	mov	r0, r3
 800aba4:	f004 fa65 	bl	800f072 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	603b      	str	r3, [r7, #0]
 800abae:	687e      	ldr	r6, [r7, #4]
 800abb0:	466d      	mov	r5, sp
 800abb2:	f106 0410 	add.w	r4, r6, #16
 800abb6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800abb8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800abba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800abbc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800abbe:	e894 0003 	ldmia.w	r4, {r0, r1}
 800abc2:	e885 0003 	stmia.w	r5, {r0, r1}
 800abc6:	1d33      	adds	r3, r6, #4
 800abc8:	cb0e      	ldmia	r3, {r1, r2, r3}
 800abca:	6838      	ldr	r0, [r7, #0]
 800abcc:	f004 f930 	bl	800ee30 <USB_CoreInit>
 800abd0:	4603      	mov	r3, r0
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d005      	beq.n	800abe2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	2202      	movs	r2, #2
 800abda:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800abde:	2301      	movs	r3, #1
 800abe0:	e0d7      	b.n	800ad92 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	2100      	movs	r1, #0
 800abe8:	4618      	mov	r0, r3
 800abea:	f004 fa53 	bl	800f094 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800abee:	2300      	movs	r3, #0
 800abf0:	73fb      	strb	r3, [r7, #15]
 800abf2:	e04a      	b.n	800ac8a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800abf4:	7bfa      	ldrb	r2, [r7, #15]
 800abf6:	6879      	ldr	r1, [r7, #4]
 800abf8:	4613      	mov	r3, r2
 800abfa:	00db      	lsls	r3, r3, #3
 800abfc:	4413      	add	r3, r2
 800abfe:	009b      	lsls	r3, r3, #2
 800ac00:	440b      	add	r3, r1
 800ac02:	333d      	adds	r3, #61	; 0x3d
 800ac04:	2201      	movs	r2, #1
 800ac06:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800ac08:	7bfa      	ldrb	r2, [r7, #15]
 800ac0a:	6879      	ldr	r1, [r7, #4]
 800ac0c:	4613      	mov	r3, r2
 800ac0e:	00db      	lsls	r3, r3, #3
 800ac10:	4413      	add	r3, r2
 800ac12:	009b      	lsls	r3, r3, #2
 800ac14:	440b      	add	r3, r1
 800ac16:	333c      	adds	r3, #60	; 0x3c
 800ac18:	7bfa      	ldrb	r2, [r7, #15]
 800ac1a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800ac1c:	7bfa      	ldrb	r2, [r7, #15]
 800ac1e:	7bfb      	ldrb	r3, [r7, #15]
 800ac20:	b298      	uxth	r0, r3
 800ac22:	6879      	ldr	r1, [r7, #4]
 800ac24:	4613      	mov	r3, r2
 800ac26:	00db      	lsls	r3, r3, #3
 800ac28:	4413      	add	r3, r2
 800ac2a:	009b      	lsls	r3, r3, #2
 800ac2c:	440b      	add	r3, r1
 800ac2e:	3356      	adds	r3, #86	; 0x56
 800ac30:	4602      	mov	r2, r0
 800ac32:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800ac34:	7bfa      	ldrb	r2, [r7, #15]
 800ac36:	6879      	ldr	r1, [r7, #4]
 800ac38:	4613      	mov	r3, r2
 800ac3a:	00db      	lsls	r3, r3, #3
 800ac3c:	4413      	add	r3, r2
 800ac3e:	009b      	lsls	r3, r3, #2
 800ac40:	440b      	add	r3, r1
 800ac42:	3340      	adds	r3, #64	; 0x40
 800ac44:	2200      	movs	r2, #0
 800ac46:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800ac48:	7bfa      	ldrb	r2, [r7, #15]
 800ac4a:	6879      	ldr	r1, [r7, #4]
 800ac4c:	4613      	mov	r3, r2
 800ac4e:	00db      	lsls	r3, r3, #3
 800ac50:	4413      	add	r3, r2
 800ac52:	009b      	lsls	r3, r3, #2
 800ac54:	440b      	add	r3, r1
 800ac56:	3344      	adds	r3, #68	; 0x44
 800ac58:	2200      	movs	r2, #0
 800ac5a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800ac5c:	7bfa      	ldrb	r2, [r7, #15]
 800ac5e:	6879      	ldr	r1, [r7, #4]
 800ac60:	4613      	mov	r3, r2
 800ac62:	00db      	lsls	r3, r3, #3
 800ac64:	4413      	add	r3, r2
 800ac66:	009b      	lsls	r3, r3, #2
 800ac68:	440b      	add	r3, r1
 800ac6a:	3348      	adds	r3, #72	; 0x48
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800ac70:	7bfa      	ldrb	r2, [r7, #15]
 800ac72:	6879      	ldr	r1, [r7, #4]
 800ac74:	4613      	mov	r3, r2
 800ac76:	00db      	lsls	r3, r3, #3
 800ac78:	4413      	add	r3, r2
 800ac7a:	009b      	lsls	r3, r3, #2
 800ac7c:	440b      	add	r3, r1
 800ac7e:	334c      	adds	r3, #76	; 0x4c
 800ac80:	2200      	movs	r2, #0
 800ac82:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ac84:	7bfb      	ldrb	r3, [r7, #15]
 800ac86:	3301      	adds	r3, #1
 800ac88:	73fb      	strb	r3, [r7, #15]
 800ac8a:	7bfa      	ldrb	r2, [r7, #15]
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	685b      	ldr	r3, [r3, #4]
 800ac90:	429a      	cmp	r2, r3
 800ac92:	d3af      	bcc.n	800abf4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ac94:	2300      	movs	r3, #0
 800ac96:	73fb      	strb	r3, [r7, #15]
 800ac98:	e044      	b.n	800ad24 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800ac9a:	7bfa      	ldrb	r2, [r7, #15]
 800ac9c:	6879      	ldr	r1, [r7, #4]
 800ac9e:	4613      	mov	r3, r2
 800aca0:	00db      	lsls	r3, r3, #3
 800aca2:	4413      	add	r3, r2
 800aca4:	009b      	lsls	r3, r3, #2
 800aca6:	440b      	add	r3, r1
 800aca8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800acac:	2200      	movs	r2, #0
 800acae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800acb0:	7bfa      	ldrb	r2, [r7, #15]
 800acb2:	6879      	ldr	r1, [r7, #4]
 800acb4:	4613      	mov	r3, r2
 800acb6:	00db      	lsls	r3, r3, #3
 800acb8:	4413      	add	r3, r2
 800acba:	009b      	lsls	r3, r3, #2
 800acbc:	440b      	add	r3, r1
 800acbe:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800acc2:	7bfa      	ldrb	r2, [r7, #15]
 800acc4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800acc6:	7bfa      	ldrb	r2, [r7, #15]
 800acc8:	6879      	ldr	r1, [r7, #4]
 800acca:	4613      	mov	r3, r2
 800accc:	00db      	lsls	r3, r3, #3
 800acce:	4413      	add	r3, r2
 800acd0:	009b      	lsls	r3, r3, #2
 800acd2:	440b      	add	r3, r1
 800acd4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800acd8:	2200      	movs	r2, #0
 800acda:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800acdc:	7bfa      	ldrb	r2, [r7, #15]
 800acde:	6879      	ldr	r1, [r7, #4]
 800ace0:	4613      	mov	r3, r2
 800ace2:	00db      	lsls	r3, r3, #3
 800ace4:	4413      	add	r3, r2
 800ace6:	009b      	lsls	r3, r3, #2
 800ace8:	440b      	add	r3, r1
 800acea:	f503 7321 	add.w	r3, r3, #644	; 0x284
 800acee:	2200      	movs	r2, #0
 800acf0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800acf2:	7bfa      	ldrb	r2, [r7, #15]
 800acf4:	6879      	ldr	r1, [r7, #4]
 800acf6:	4613      	mov	r3, r2
 800acf8:	00db      	lsls	r3, r3, #3
 800acfa:	4413      	add	r3, r2
 800acfc:	009b      	lsls	r3, r3, #2
 800acfe:	440b      	add	r3, r1
 800ad00:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800ad04:	2200      	movs	r2, #0
 800ad06:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800ad08:	7bfa      	ldrb	r2, [r7, #15]
 800ad0a:	6879      	ldr	r1, [r7, #4]
 800ad0c:	4613      	mov	r3, r2
 800ad0e:	00db      	lsls	r3, r3, #3
 800ad10:	4413      	add	r3, r2
 800ad12:	009b      	lsls	r3, r3, #2
 800ad14:	440b      	add	r3, r1
 800ad16:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800ad1e:	7bfb      	ldrb	r3, [r7, #15]
 800ad20:	3301      	adds	r3, #1
 800ad22:	73fb      	strb	r3, [r7, #15]
 800ad24:	7bfa      	ldrb	r2, [r7, #15]
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	685b      	ldr	r3, [r3, #4]
 800ad2a:	429a      	cmp	r2, r3
 800ad2c:	d3b5      	bcc.n	800ac9a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	603b      	str	r3, [r7, #0]
 800ad34:	687e      	ldr	r6, [r7, #4]
 800ad36:	466d      	mov	r5, sp
 800ad38:	f106 0410 	add.w	r4, r6, #16
 800ad3c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ad3e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ad40:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800ad42:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800ad44:	e894 0003 	ldmia.w	r4, {r0, r1}
 800ad48:	e885 0003 	stmia.w	r5, {r0, r1}
 800ad4c:	1d33      	adds	r3, r6, #4
 800ad4e:	cb0e      	ldmia	r3, {r1, r2, r3}
 800ad50:	6838      	ldr	r0, [r7, #0]
 800ad52:	f004 f9eb 	bl	800f12c <USB_DevInit>
 800ad56:	4603      	mov	r3, r0
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d005      	beq.n	800ad68 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	2202      	movs	r2, #2
 800ad60:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800ad64:	2301      	movs	r3, #1
 800ad66:	e014      	b.n	800ad92 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	2200      	movs	r2, #0
 800ad6c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	2201      	movs	r2, #1
 800ad74:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ad7c:	2b01      	cmp	r3, #1
 800ad7e:	d102      	bne.n	800ad86 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f001 f96f 	bl	800c064 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	f005 fa2d 	bl	80101ea <USB_DevDisconnect>

  return HAL_OK;
 800ad90:	2300      	movs	r3, #0
}
 800ad92:	4618      	mov	r0, r3
 800ad94:	3714      	adds	r7, #20
 800ad96:	46bd      	mov	sp, r7
 800ad98:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ad9a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800ad9a:	b580      	push	{r7, lr}
 800ad9c:	b084      	sub	sp, #16
 800ad9e:	af00      	add	r7, sp, #0
 800ada0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	681b      	ldr	r3, [r3, #0]
 800ada6:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800ada8:	687b      	ldr	r3, [r7, #4]
 800adaa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800adae:	2b01      	cmp	r3, #1
 800adb0:	d101      	bne.n	800adb6 <HAL_PCD_Start+0x1c>
 800adb2:	2302      	movs	r3, #2
 800adb4:	e022      	b.n	800adfc <HAL_PCD_Start+0x62>
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	2201      	movs	r2, #1
 800adba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800adc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d109      	bne.n	800adde <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  if (((USBx->CID & (0x1U << 8)) == 0U) &&
 800adce:	2b01      	cmp	r3, #1
 800add0:	d105      	bne.n	800adde <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800add2:	68fb      	ldr	r3, [r7, #12]
 800add4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800add6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800adda:	68fb      	ldr	r3, [r7, #12]
 800addc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	4618      	mov	r0, r3
 800ade4:	f004 f934 	bl	800f050 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	681b      	ldr	r3, [r3, #0]
 800adec:	4618      	mov	r0, r3
 800adee:	f005 f9db 	bl	80101a8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	2200      	movs	r2, #0
 800adf6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800adfa:	2300      	movs	r3, #0
}
 800adfc:	4618      	mov	r0, r3
 800adfe:	3710      	adds	r7, #16
 800ae00:	46bd      	mov	sp, r7
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800ae04:	b590      	push	{r4, r7, lr}
 800ae06:	b08d      	sub	sp, #52	; 0x34
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ae12:	6a3b      	ldr	r3, [r7, #32]
 800ae14:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	4618      	mov	r0, r3
 800ae1c:	f005 fa99 	bl	8010352 <USB_GetMode>
 800ae20:	4603      	mov	r3, r0
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	f040 84b7 	bne.w	800b796 <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	f005 f9fd 	bl	801022c <USB_ReadInterrupts>
 800ae32:	4603      	mov	r3, r0
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	f000 84ad 	beq.w	800b794 <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800ae3a:	69fb      	ldr	r3, [r7, #28]
 800ae3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800ae40:	689b      	ldr	r3, [r3, #8]
 800ae42:	0a1b      	lsrs	r3, r3, #8
 800ae44:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800ae4e:	687b      	ldr	r3, [r7, #4]
 800ae50:	681b      	ldr	r3, [r3, #0]
 800ae52:	4618      	mov	r0, r3
 800ae54:	f005 f9ea 	bl	801022c <USB_ReadInterrupts>
 800ae58:	4603      	mov	r3, r0
 800ae5a:	f003 0302 	and.w	r3, r3, #2
 800ae5e:	2b02      	cmp	r3, #2
 800ae60:	d107      	bne.n	800ae72 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	681b      	ldr	r3, [r3, #0]
 800ae66:	695a      	ldr	r2, [r3, #20]
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	f002 0202 	and.w	r2, r2, #2
 800ae70:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	4618      	mov	r0, r3
 800ae78:	f005 f9d8 	bl	801022c <USB_ReadInterrupts>
 800ae7c:	4603      	mov	r3, r0
 800ae7e:	f003 0310 	and.w	r3, r3, #16
 800ae82:	2b10      	cmp	r3, #16
 800ae84:	d161      	bne.n	800af4a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	699a      	ldr	r2, [r3, #24]
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	681b      	ldr	r3, [r3, #0]
 800ae90:	f022 0210 	bic.w	r2, r2, #16
 800ae94:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800ae96:	6a3b      	ldr	r3, [r7, #32]
 800ae98:	6a1b      	ldr	r3, [r3, #32]
 800ae9a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800ae9c:	69bb      	ldr	r3, [r7, #24]
 800ae9e:	f003 020f 	and.w	r2, r3, #15
 800aea2:	4613      	mov	r3, r2
 800aea4:	00db      	lsls	r3, r3, #3
 800aea6:	4413      	add	r3, r2
 800aea8:	009b      	lsls	r3, r3, #2
 800aeaa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800aeae:	687a      	ldr	r2, [r7, #4]
 800aeb0:	4413      	add	r3, r2
 800aeb2:	3304      	adds	r3, #4
 800aeb4:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800aeb6:	69bb      	ldr	r3, [r7, #24]
 800aeb8:	0c5b      	lsrs	r3, r3, #17
 800aeba:	f003 030f 	and.w	r3, r3, #15
 800aebe:	2b02      	cmp	r3, #2
 800aec0:	d124      	bne.n	800af0c <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800aec2:	69ba      	ldr	r2, [r7, #24]
 800aec4:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800aec8:	4013      	ands	r3, r2
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d035      	beq.n	800af3a <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800aed2:	69bb      	ldr	r3, [r7, #24]
 800aed4:	091b      	lsrs	r3, r3, #4
 800aed6:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800aed8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aedc:	b29b      	uxth	r3, r3
 800aede:	461a      	mov	r2, r3
 800aee0:	6a38      	ldr	r0, [r7, #32]
 800aee2:	f005 f80f 	bl	800ff04 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	68da      	ldr	r2, [r3, #12]
 800aeea:	69bb      	ldr	r3, [r7, #24]
 800aeec:	091b      	lsrs	r3, r3, #4
 800aeee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800aef2:	441a      	add	r2, r3
 800aef4:	697b      	ldr	r3, [r7, #20]
 800aef6:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800aef8:	697b      	ldr	r3, [r7, #20]
 800aefa:	695a      	ldr	r2, [r3, #20]
 800aefc:	69bb      	ldr	r3, [r7, #24]
 800aefe:	091b      	lsrs	r3, r3, #4
 800af00:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af04:	441a      	add	r2, r3
 800af06:	697b      	ldr	r3, [r7, #20]
 800af08:	615a      	str	r2, [r3, #20]
 800af0a:	e016      	b.n	800af3a <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800af0c:	69bb      	ldr	r3, [r7, #24]
 800af0e:	0c5b      	lsrs	r3, r3, #17
 800af10:	f003 030f 	and.w	r3, r3, #15
 800af14:	2b06      	cmp	r3, #6
 800af16:	d110      	bne.n	800af3a <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800af18:	687b      	ldr	r3, [r7, #4]
 800af1a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800af1e:	2208      	movs	r2, #8
 800af20:	4619      	mov	r1, r3
 800af22:	6a38      	ldr	r0, [r7, #32]
 800af24:	f004 ffee 	bl	800ff04 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800af28:	697b      	ldr	r3, [r7, #20]
 800af2a:	695a      	ldr	r2, [r3, #20]
 800af2c:	69bb      	ldr	r3, [r7, #24]
 800af2e:	091b      	lsrs	r3, r3, #4
 800af30:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800af34:	441a      	add	r2, r3
 800af36:	697b      	ldr	r3, [r7, #20]
 800af38:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	681b      	ldr	r3, [r3, #0]
 800af3e:	699a      	ldr	r2, [r3, #24]
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	f042 0210 	orr.w	r2, r2, #16
 800af48:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800af4a:	687b      	ldr	r3, [r7, #4]
 800af4c:	681b      	ldr	r3, [r3, #0]
 800af4e:	4618      	mov	r0, r3
 800af50:	f005 f96c 	bl	801022c <USB_ReadInterrupts>
 800af54:	4603      	mov	r3, r0
 800af56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800af5a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800af5e:	f040 80a7 	bne.w	800b0b0 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800af62:	2300      	movs	r3, #0
 800af64:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	681b      	ldr	r3, [r3, #0]
 800af6a:	4618      	mov	r0, r3
 800af6c:	f005 f971 	bl	8010252 <USB_ReadDevAllOutEpInterrupt>
 800af70:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800af72:	e099      	b.n	800b0a8 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800af74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af76:	f003 0301 	and.w	r3, r3, #1
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	f000 808e 	beq.w	800b09c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	681b      	ldr	r3, [r3, #0]
 800af84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800af86:	b2d2      	uxtb	r2, r2
 800af88:	4611      	mov	r1, r2
 800af8a:	4618      	mov	r0, r3
 800af8c:	f005 f995 	bl	80102ba <USB_ReadDevOutEPInterrupt>
 800af90:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800af92:	693b      	ldr	r3, [r7, #16]
 800af94:	f003 0301 	and.w	r3, r3, #1
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d00c      	beq.n	800afb6 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800af9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800af9e:	015a      	lsls	r2, r3, #5
 800afa0:	69fb      	ldr	r3, [r7, #28]
 800afa2:	4413      	add	r3, r2
 800afa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afa8:	461a      	mov	r2, r3
 800afaa:	2301      	movs	r3, #1
 800afac:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800afae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800afb0:	6878      	ldr	r0, [r7, #4]
 800afb2:	f000 fed1 	bl	800bd58 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	f003 0308 	and.w	r3, r3, #8
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d00c      	beq.n	800afda <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800afc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afc2:	015a      	lsls	r2, r3, #5
 800afc4:	69fb      	ldr	r3, [r7, #28]
 800afc6:	4413      	add	r3, r2
 800afc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800afcc:	461a      	mov	r2, r3
 800afce:	2308      	movs	r3, #8
 800afd0:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800afd2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800afd4:	6878      	ldr	r0, [r7, #4]
 800afd6:	f000 ffa7 	bl	800bf28 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800afda:	693b      	ldr	r3, [r7, #16]
 800afdc:	f003 0310 	and.w	r3, r3, #16
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d008      	beq.n	800aff6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800afe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800afe6:	015a      	lsls	r2, r3, #5
 800afe8:	69fb      	ldr	r3, [r7, #28]
 800afea:	4413      	add	r3, r2
 800afec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800aff0:	461a      	mov	r2, r3
 800aff2:	2310      	movs	r3, #16
 800aff4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	f003 0302 	and.w	r3, r3, #2
 800affc:	2b00      	cmp	r3, #0
 800affe:	d030      	beq.n	800b062 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800b000:	6a3b      	ldr	r3, [r7, #32]
 800b002:	695b      	ldr	r3, [r3, #20]
 800b004:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b008:	2b80      	cmp	r3, #128	; 0x80
 800b00a:	d109      	bne.n	800b020 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800b00c:	69fb      	ldr	r3, [r7, #28]
 800b00e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b012:	685b      	ldr	r3, [r3, #4]
 800b014:	69fa      	ldr	r2, [r7, #28]
 800b016:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b01a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800b01e:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800b020:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b022:	4613      	mov	r3, r2
 800b024:	00db      	lsls	r3, r3, #3
 800b026:	4413      	add	r3, r2
 800b028:	009b      	lsls	r3, r3, #2
 800b02a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b02e:	687a      	ldr	r2, [r7, #4]
 800b030:	4413      	add	r3, r2
 800b032:	3304      	adds	r3, #4
 800b034:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b036:	697b      	ldr	r3, [r7, #20]
 800b038:	78db      	ldrb	r3, [r3, #3]
 800b03a:	2b01      	cmp	r3, #1
 800b03c:	d108      	bne.n	800b050 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800b03e:	697b      	ldr	r3, [r7, #20]
 800b040:	2200      	movs	r2, #0
 800b042:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800b044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b046:	b2db      	uxtb	r3, r3
 800b048:	4619      	mov	r1, r3
 800b04a:	6878      	ldr	r0, [r7, #4]
 800b04c:	f008 fbf2 	bl	8013834 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800b050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b052:	015a      	lsls	r2, r3, #5
 800b054:	69fb      	ldr	r3, [r7, #28]
 800b056:	4413      	add	r3, r2
 800b058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b05c:	461a      	mov	r2, r3
 800b05e:	2302      	movs	r3, #2
 800b060:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800b062:	693b      	ldr	r3, [r7, #16]
 800b064:	f003 0320 	and.w	r3, r3, #32
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d008      	beq.n	800b07e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800b06c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b06e:	015a      	lsls	r2, r3, #5
 800b070:	69fb      	ldr	r3, [r7, #28]
 800b072:	4413      	add	r3, r2
 800b074:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b078:	461a      	mov	r2, r3
 800b07a:	2320      	movs	r3, #32
 800b07c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800b07e:	693b      	ldr	r3, [r7, #16]
 800b080:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b084:	2b00      	cmp	r3, #0
 800b086:	d009      	beq.n	800b09c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800b088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b08a:	015a      	lsls	r2, r3, #5
 800b08c:	69fb      	ldr	r3, [r7, #28]
 800b08e:	4413      	add	r3, r2
 800b090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b094:	461a      	mov	r2, r3
 800b096:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800b09a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800b09c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b09e:	3301      	adds	r3, #1
 800b0a0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b0a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0a4:	085b      	lsrs	r3, r3, #1
 800b0a6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b0a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	f47f af62 	bne.w	800af74 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	4618      	mov	r0, r3
 800b0b6:	f005 f8b9 	bl	801022c <USB_ReadInterrupts>
 800b0ba:	4603      	mov	r3, r0
 800b0bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800b0c0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800b0c4:	f040 80db 	bne.w	800b27e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	4618      	mov	r0, r3
 800b0ce:	f005 f8da 	bl	8010286 <USB_ReadDevAllInEpInterrupt>
 800b0d2:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800b0d4:	2300      	movs	r3, #0
 800b0d6:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800b0d8:	e0cd      	b.n	800b276 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800b0da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0dc:	f003 0301 	and.w	r3, r3, #1
 800b0e0:	2b00      	cmp	r3, #0
 800b0e2:	f000 80c2 	beq.w	800b26a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	681b      	ldr	r3, [r3, #0]
 800b0ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b0ec:	b2d2      	uxtb	r2, r2
 800b0ee:	4611      	mov	r1, r2
 800b0f0:	4618      	mov	r0, r3
 800b0f2:	f005 f900 	bl	80102f6 <USB_ReadDevInEPInterrupt>
 800b0f6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800b0f8:	693b      	ldr	r3, [r7, #16]
 800b0fa:	f003 0301 	and.w	r3, r3, #1
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d057      	beq.n	800b1b2 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800b102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b104:	f003 030f 	and.w	r3, r3, #15
 800b108:	2201      	movs	r2, #1
 800b10a:	fa02 f303 	lsl.w	r3, r2, r3
 800b10e:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800b110:	69fb      	ldr	r3, [r7, #28]
 800b112:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b116:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	43db      	mvns	r3, r3
 800b11c:	69f9      	ldr	r1, [r7, #28]
 800b11e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800b122:	4013      	ands	r3, r2
 800b124:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800b126:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b128:	015a      	lsls	r2, r3, #5
 800b12a:	69fb      	ldr	r3, [r7, #28]
 800b12c:	4413      	add	r3, r2
 800b12e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b132:	461a      	mov	r2, r3
 800b134:	2301      	movs	r3, #1
 800b136:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	68db      	ldr	r3, [r3, #12]
 800b13c:	2b01      	cmp	r3, #1
 800b13e:	d132      	bne.n	800b1a6 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800b140:	6879      	ldr	r1, [r7, #4]
 800b142:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b144:	4613      	mov	r3, r2
 800b146:	00db      	lsls	r3, r3, #3
 800b148:	4413      	add	r3, r2
 800b14a:	009b      	lsls	r3, r3, #2
 800b14c:	440b      	add	r3, r1
 800b14e:	3348      	adds	r3, #72	; 0x48
 800b150:	6819      	ldr	r1, [r3, #0]
 800b152:	6878      	ldr	r0, [r7, #4]
 800b154:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b156:	4613      	mov	r3, r2
 800b158:	00db      	lsls	r3, r3, #3
 800b15a:	4413      	add	r3, r2
 800b15c:	009b      	lsls	r3, r3, #2
 800b15e:	4403      	add	r3, r0
 800b160:	3344      	adds	r3, #68	; 0x44
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	4419      	add	r1, r3
 800b166:	6878      	ldr	r0, [r7, #4]
 800b168:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b16a:	4613      	mov	r3, r2
 800b16c:	00db      	lsls	r3, r3, #3
 800b16e:	4413      	add	r3, r2
 800b170:	009b      	lsls	r3, r3, #2
 800b172:	4403      	add	r3, r0
 800b174:	3348      	adds	r3, #72	; 0x48
 800b176:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800b178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d113      	bne.n	800b1a6 <HAL_PCD_IRQHandler+0x3a2>
 800b17e:	6879      	ldr	r1, [r7, #4]
 800b180:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b182:	4613      	mov	r3, r2
 800b184:	00db      	lsls	r3, r3, #3
 800b186:	4413      	add	r3, r2
 800b188:	009b      	lsls	r3, r3, #2
 800b18a:	440b      	add	r3, r1
 800b18c:	334c      	adds	r3, #76	; 0x4c
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	2b00      	cmp	r3, #0
 800b192:	d108      	bne.n	800b1a6 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6818      	ldr	r0, [r3, #0]
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800b19e:	461a      	mov	r2, r3
 800b1a0:	2101      	movs	r1, #1
 800b1a2:	f005 f909 	bl	80103b8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800b1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1a8:	b2db      	uxtb	r3, r3
 800b1aa:	4619      	mov	r1, r3
 800b1ac:	6878      	ldr	r0, [r7, #4]
 800b1ae:	f008 fabc 	bl	801372a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800b1b2:	693b      	ldr	r3, [r7, #16]
 800b1b4:	f003 0308 	and.w	r3, r3, #8
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d008      	beq.n	800b1ce <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800b1bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1be:	015a      	lsls	r2, r3, #5
 800b1c0:	69fb      	ldr	r3, [r7, #28]
 800b1c2:	4413      	add	r3, r2
 800b1c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1c8:	461a      	mov	r2, r3
 800b1ca:	2308      	movs	r3, #8
 800b1cc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	f003 0310 	and.w	r3, r3, #16
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d008      	beq.n	800b1ea <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800b1d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1da:	015a      	lsls	r2, r3, #5
 800b1dc:	69fb      	ldr	r3, [r7, #28]
 800b1de:	4413      	add	r3, r2
 800b1e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b1e4:	461a      	mov	r2, r3
 800b1e6:	2310      	movs	r3, #16
 800b1e8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800b1ea:	693b      	ldr	r3, [r7, #16]
 800b1ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	d008      	beq.n	800b206 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800b1f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f6:	015a      	lsls	r2, r3, #5
 800b1f8:	69fb      	ldr	r3, [r7, #28]
 800b1fa:	4413      	add	r3, r2
 800b1fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b200:	461a      	mov	r2, r3
 800b202:	2340      	movs	r3, #64	; 0x40
 800b204:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800b206:	693b      	ldr	r3, [r7, #16]
 800b208:	f003 0302 	and.w	r3, r3, #2
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d023      	beq.n	800b258 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800b210:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b212:	6a38      	ldr	r0, [r7, #32]
 800b214:	f004 f8e8 	bl	800f3e8 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800b218:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b21a:	4613      	mov	r3, r2
 800b21c:	00db      	lsls	r3, r3, #3
 800b21e:	4413      	add	r3, r2
 800b220:	009b      	lsls	r3, r3, #2
 800b222:	3338      	adds	r3, #56	; 0x38
 800b224:	687a      	ldr	r2, [r7, #4]
 800b226:	4413      	add	r3, r2
 800b228:	3304      	adds	r3, #4
 800b22a:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800b22c:	697b      	ldr	r3, [r7, #20]
 800b22e:	78db      	ldrb	r3, [r3, #3]
 800b230:	2b01      	cmp	r3, #1
 800b232:	d108      	bne.n	800b246 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	2200      	movs	r2, #0
 800b238:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800b23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b23c:	b2db      	uxtb	r3, r3
 800b23e:	4619      	mov	r1, r3
 800b240:	6878      	ldr	r0, [r7, #4]
 800b242:	f008 fb09 	bl	8013858 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800b246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b248:	015a      	lsls	r2, r3, #5
 800b24a:	69fb      	ldr	r3, [r7, #28]
 800b24c:	4413      	add	r3, r2
 800b24e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b252:	461a      	mov	r2, r3
 800b254:	2302      	movs	r3, #2
 800b256:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b25e:	2b00      	cmp	r3, #0
 800b260:	d003      	beq.n	800b26a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800b262:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b264:	6878      	ldr	r0, [r7, #4]
 800b266:	f000 fcea 	bl	800bc3e <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800b26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b26c:	3301      	adds	r3, #1
 800b26e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800b270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b272:	085b      	lsrs	r3, r3, #1
 800b274:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800b276:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b278:	2b00      	cmp	r3, #0
 800b27a:	f47f af2e 	bne.w	800b0da <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	4618      	mov	r0, r3
 800b284:	f004 ffd2 	bl	801022c <USB_ReadInterrupts>
 800b288:	4603      	mov	r3, r0
 800b28a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800b28e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800b292:	d122      	bne.n	800b2da <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b294:	69fb      	ldr	r3, [r7, #28]
 800b296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b29a:	685b      	ldr	r3, [r3, #4]
 800b29c:	69fa      	ldr	r2, [r7, #28]
 800b29e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b2a2:	f023 0301 	bic.w	r3, r3, #1
 800b2a6:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800b2ae:	2b01      	cmp	r3, #1
 800b2b0:	d108      	bne.n	800b2c4 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800b2b2:	687b      	ldr	r3, [r7, #4]
 800b2b4:	2200      	movs	r2, #0
 800b2b6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800b2ba:	2100      	movs	r1, #0
 800b2bc:	6878      	ldr	r0, [r7, #4]
 800b2be:	f000 fef5 	bl	800c0ac <HAL_PCDEx_LPM_Callback>
 800b2c2:	e002      	b.n	800b2ca <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f008 faa7 	bl	8013818 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	695a      	ldr	r2, [r3, #20]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800b2d8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	4618      	mov	r0, r3
 800b2e0:	f004 ffa4 	bl	801022c <USB_ReadInterrupts>
 800b2e4:	4603      	mov	r3, r0
 800b2e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b2ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b2ee:	d112      	bne.n	800b316 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800b2f0:	69fb      	ldr	r3, [r7, #28]
 800b2f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b2f6:	689b      	ldr	r3, [r3, #8]
 800b2f8:	f003 0301 	and.w	r3, r3, #1
 800b2fc:	2b01      	cmp	r3, #1
 800b2fe:	d102      	bne.n	800b306 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b300:	6878      	ldr	r0, [r7, #4]
 800b302:	f008 fa63 	bl	80137cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	695a      	ldr	r2, [r3, #20]
 800b30c:	687b      	ldr	r3, [r7, #4]
 800b30e:	681b      	ldr	r3, [r3, #0]
 800b310:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800b314:	615a      	str	r2, [r3, #20]
    }

    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	4618      	mov	r0, r3
 800b31c:	f004 ff86 	bl	801022c <USB_ReadInterrupts>
 800b320:	4603      	mov	r3, r0
 800b322:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b326:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800b32a:	d121      	bne.n	800b370 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	681b      	ldr	r3, [r3, #0]
 800b330:	695a      	ldr	r2, [r3, #20]
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 800b33a:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800b342:	2b00      	cmp	r3, #0
 800b344:	d111      	bne.n	800b36a <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	2201      	movs	r2, #1
 800b34a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b354:	089b      	lsrs	r3, r3, #2
 800b356:	f003 020f 	and.w	r2, r3, #15
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800b360:	2101      	movs	r1, #1
 800b362:	6878      	ldr	r0, [r7, #4]
 800b364:	f000 fea2 	bl	800c0ac <HAL_PCDEx_LPM_Callback>
 800b368:	e002      	b.n	800b370 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800b36a:	6878      	ldr	r0, [r7, #4]
 800b36c:	f008 fa2e 	bl	80137cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	4618      	mov	r0, r3
 800b376:	f004 ff59 	bl	801022c <USB_ReadInterrupts>
 800b37a:	4603      	mov	r3, r0
 800b37c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b380:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b384:	f040 80b7 	bne.w	800b4f6 <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800b388:	69fb      	ldr	r3, [r7, #28]
 800b38a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b38e:	685b      	ldr	r3, [r3, #4]
 800b390:	69fa      	ldr	r2, [r7, #28]
 800b392:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b396:	f023 0301 	bic.w	r3, r3, #1
 800b39a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	2110      	movs	r1, #16
 800b3a2:	4618      	mov	r0, r3
 800b3a4:	f004 f820 	bl	800f3e8 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b3ac:	e046      	b.n	800b43c <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800b3ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3b0:	015a      	lsls	r2, r3, #5
 800b3b2:	69fb      	ldr	r3, [r7, #28]
 800b3b4:	4413      	add	r3, r2
 800b3b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3ba:	461a      	mov	r2, r3
 800b3bc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b3c0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800b3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3c4:	015a      	lsls	r2, r3, #5
 800b3c6:	69fb      	ldr	r3, [r7, #28]
 800b3c8:	4413      	add	r3, r2
 800b3ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b3d2:	0151      	lsls	r1, r2, #5
 800b3d4:	69fa      	ldr	r2, [r7, #28]
 800b3d6:	440a      	add	r2, r1
 800b3d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800b3dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b3e0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800b3e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3e4:	015a      	lsls	r2, r3, #5
 800b3e6:	69fb      	ldr	r3, [r7, #28]
 800b3e8:	4413      	add	r3, r2
 800b3ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b3ee:	461a      	mov	r2, r3
 800b3f0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800b3f4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800b3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3f8:	015a      	lsls	r2, r3, #5
 800b3fa:	69fb      	ldr	r3, [r7, #28]
 800b3fc:	4413      	add	r3, r2
 800b3fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b406:	0151      	lsls	r1, r2, #5
 800b408:	69fa      	ldr	r2, [r7, #28]
 800b40a:	440a      	add	r2, r1
 800b40c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b410:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b414:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800b416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b418:	015a      	lsls	r2, r3, #5
 800b41a:	69fb      	ldr	r3, [r7, #28]
 800b41c:	4413      	add	r3, r2
 800b41e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b426:	0151      	lsls	r1, r2, #5
 800b428:	69fa      	ldr	r2, [r7, #28]
 800b42a:	440a      	add	r2, r1
 800b42c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800b430:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800b434:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800b436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b438:	3301      	adds	r3, #1
 800b43a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	685b      	ldr	r3, [r3, #4]
 800b440:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b442:	429a      	cmp	r2, r3
 800b444:	d3b3      	bcc.n	800b3ae <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800b446:	69fb      	ldr	r3, [r7, #28]
 800b448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b44c:	69db      	ldr	r3, [r3, #28]
 800b44e:	69fa      	ldr	r2, [r7, #28]
 800b450:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b454:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800b458:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b45e:	2b00      	cmp	r3, #0
 800b460:	d016      	beq.n	800b490 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800b462:	69fb      	ldr	r3, [r7, #28]
 800b464:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b468:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800b46c:	69fa      	ldr	r2, [r7, #28]
 800b46e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b472:	f043 030b 	orr.w	r3, r3, #11
 800b476:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800b47a:	69fb      	ldr	r3, [r7, #28]
 800b47c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b482:	69fa      	ldr	r2, [r7, #28]
 800b484:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b488:	f043 030b 	orr.w	r3, r3, #11
 800b48c:	6453      	str	r3, [r2, #68]	; 0x44
 800b48e:	e015      	b.n	800b4bc <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800b490:	69fb      	ldr	r3, [r7, #28]
 800b492:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b496:	695a      	ldr	r2, [r3, #20]
 800b498:	69fb      	ldr	r3, [r7, #28]
 800b49a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b49e:	4619      	mov	r1, r3
 800b4a0:	f242 032b 	movw	r3, #8235	; 0x202b
 800b4a4:	4313      	orrs	r3, r2
 800b4a6:	614b      	str	r3, [r1, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800b4a8:	69fb      	ldr	r3, [r7, #28]
 800b4aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4ae:	691b      	ldr	r3, [r3, #16]
 800b4b0:	69fa      	ldr	r2, [r7, #28]
 800b4b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b4b6:	f043 030b 	orr.w	r3, r3, #11
 800b4ba:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800b4bc:	69fb      	ldr	r3, [r7, #28]
 800b4be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	69fa      	ldr	r2, [r7, #28]
 800b4c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b4ca:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800b4ce:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	6818      	ldr	r0, [r3, #0]
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	68db      	ldr	r3, [r3, #12]
 800b4d8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800b4e0:	461a      	mov	r2, r3
 800b4e2:	f004 ff69 	bl	80103b8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	695a      	ldr	r2, [r3, #20]
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	681b      	ldr	r3, [r3, #0]
 800b4f0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800b4f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	4618      	mov	r0, r3
 800b4fc:	f004 fe96 	bl	801022c <USB_ReadInterrupts>
 800b500:	4603      	mov	r3, r0
 800b502:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b506:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b50a:	d124      	bne.n	800b556 <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	4618      	mov	r0, r3
 800b512:	f004 ff2d 	bl	8010370 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	681b      	ldr	r3, [r3, #0]
 800b51a:	4618      	mov	r0, r3
 800b51c:	f003 ffe1 	bl	800f4e2 <USB_GetDevSpeed>
 800b520:	4603      	mov	r3, r0
 800b522:	461a      	mov	r2, r3
 800b524:	687b      	ldr	r3, [r7, #4]
 800b526:	611a      	str	r2, [r3, #16]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681c      	ldr	r4, [r3, #0]
 800b52c:	f001 fd9e 	bl	800d06c <HAL_RCC_GetHCLKFreq>
 800b530:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	691b      	ldr	r3, [r3, #16]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800b536:	b2db      	uxtb	r3, r3
 800b538:	461a      	mov	r2, r3
 800b53a:	4620      	mov	r0, r4
 800b53c:	f003 fce6 	bl	800ef0c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800b540:	6878      	ldr	r0, [r7, #4]
 800b542:	f008 f91a 	bl	801377a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	695a      	ldr	r2, [r3, #20]
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800b554:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	4618      	mov	r0, r3
 800b55c:	f004 fe66 	bl	801022c <USB_ReadInterrupts>
 800b560:	4603      	mov	r3, r0
 800b562:	f003 0308 	and.w	r3, r3, #8
 800b566:	2b08      	cmp	r3, #8
 800b568:	d10a      	bne.n	800b580 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800b56a:	6878      	ldr	r0, [r7, #4]
 800b56c:	f008 f8f7 	bl	801375e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800b570:	687b      	ldr	r3, [r7, #4]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	695a      	ldr	r2, [r3, #20]
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	681b      	ldr	r3, [r3, #0]
 800b57a:	f002 0208 	and.w	r2, r2, #8
 800b57e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800b580:	687b      	ldr	r3, [r7, #4]
 800b582:	681b      	ldr	r3, [r3, #0]
 800b584:	4618      	mov	r0, r3
 800b586:	f004 fe51 	bl	801022c <USB_ReadInterrupts>
 800b58a:	4603      	mov	r3, r0
 800b58c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b590:	2b80      	cmp	r3, #128	; 0x80
 800b592:	d122      	bne.n	800b5da <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800b594:	6a3b      	ldr	r3, [r7, #32]
 800b596:	699b      	ldr	r3, [r3, #24]
 800b598:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800b59c:	6a3b      	ldr	r3, [r7, #32]
 800b59e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	627b      	str	r3, [r7, #36]	; 0x24
 800b5a4:	e014      	b.n	800b5d0 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800b5a6:	6879      	ldr	r1, [r7, #4]
 800b5a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5aa:	4613      	mov	r3, r2
 800b5ac:	00db      	lsls	r3, r3, #3
 800b5ae:	4413      	add	r3, r2
 800b5b0:	009b      	lsls	r3, r3, #2
 800b5b2:	440b      	add	r3, r1
 800b5b4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800b5b8:	781b      	ldrb	r3, [r3, #0]
 800b5ba:	2b01      	cmp	r3, #1
 800b5bc:	d105      	bne.n	800b5ca <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800b5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5c0:	b2db      	uxtb	r3, r3
 800b5c2:	4619      	mov	r1, r3
 800b5c4:	6878      	ldr	r0, [r7, #4]
 800b5c6:	f000 fb09 	bl	800bbdc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b5ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5cc:	3301      	adds	r3, #1
 800b5ce:	627b      	str	r3, [r7, #36]	; 0x24
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	685b      	ldr	r3, [r3, #4]
 800b5d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5d6:	429a      	cmp	r2, r3
 800b5d8:	d3e5      	bcc.n	800b5a6 <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	681b      	ldr	r3, [r3, #0]
 800b5de:	4618      	mov	r0, r3
 800b5e0:	f004 fe24 	bl	801022c <USB_ReadInterrupts>
 800b5e4:	4603      	mov	r3, r0
 800b5e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800b5ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b5ee:	d13b      	bne.n	800b668 <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b5f0:	2301      	movs	r3, #1
 800b5f2:	627b      	str	r3, [r7, #36]	; 0x24
 800b5f4:	e02b      	b.n	800b64e <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800b5f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5f8:	015a      	lsls	r2, r3, #5
 800b5fa:	69fb      	ldr	r3, [r7, #28]
 800b5fc:	4413      	add	r3, r2
 800b5fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800b606:	6879      	ldr	r1, [r7, #4]
 800b608:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b60a:	4613      	mov	r3, r2
 800b60c:	00db      	lsls	r3, r3, #3
 800b60e:	4413      	add	r3, r2
 800b610:	009b      	lsls	r3, r3, #2
 800b612:	440b      	add	r3, r1
 800b614:	3340      	adds	r3, #64	; 0x40
 800b616:	781b      	ldrb	r3, [r3, #0]
 800b618:	2b01      	cmp	r3, #1
 800b61a:	d115      	bne.n	800b648 <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800b61c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800b61e:	2b00      	cmp	r3, #0
 800b620:	da12      	bge.n	800b648 <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800b622:	6879      	ldr	r1, [r7, #4]
 800b624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b626:	4613      	mov	r3, r2
 800b628:	00db      	lsls	r3, r3, #3
 800b62a:	4413      	add	r3, r2
 800b62c:	009b      	lsls	r3, r3, #2
 800b62e:	440b      	add	r3, r1
 800b630:	333f      	adds	r3, #63	; 0x3f
 800b632:	2201      	movs	r2, #1
 800b634:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800b636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b638:	b2db      	uxtb	r3, r3
 800b63a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800b63e:	b2db      	uxtb	r3, r3
 800b640:	4619      	mov	r1, r3
 800b642:	6878      	ldr	r0, [r7, #4]
 800b644:	f000 faca 	bl	800bbdc <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b64a:	3301      	adds	r3, #1
 800b64c:	627b      	str	r3, [r7, #36]	; 0x24
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	685b      	ldr	r3, [r3, #4]
 800b652:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b654:	429a      	cmp	r2, r3
 800b656:	d3ce      	bcc.n	800b5f6 <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	695a      	ldr	r2, [r3, #20]
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800b666:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	681b      	ldr	r3, [r3, #0]
 800b66c:	4618      	mov	r0, r3
 800b66e:	f004 fddd 	bl	801022c <USB_ReadInterrupts>
 800b672:	4603      	mov	r3, r0
 800b674:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800b678:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800b67c:	d155      	bne.n	800b72a <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b67e:	2301      	movs	r3, #1
 800b680:	627b      	str	r3, [r7, #36]	; 0x24
 800b682:	e045      	b.n	800b710 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800b684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b686:	015a      	lsls	r2, r3, #5
 800b688:	69fb      	ldr	r3, [r7, #28]
 800b68a:	4413      	add	r3, r2
 800b68c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800b694:	6879      	ldr	r1, [r7, #4]
 800b696:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b698:	4613      	mov	r3, r2
 800b69a:	00db      	lsls	r3, r3, #3
 800b69c:	4413      	add	r3, r2
 800b69e:	009b      	lsls	r3, r3, #2
 800b6a0:	440b      	add	r3, r1
 800b6a2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800b6a6:	781b      	ldrb	r3, [r3, #0]
 800b6a8:	2b01      	cmp	r3, #1
 800b6aa:	d12e      	bne.n	800b70a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800b6ac:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	da2b      	bge.n	800b70a <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800b6b2:	69bb      	ldr	r3, [r7, #24]
 800b6b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800b6be:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800b6c2:	429a      	cmp	r2, r3
 800b6c4:	d121      	bne.n	800b70a <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800b6c6:	6879      	ldr	r1, [r7, #4]
 800b6c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6ca:	4613      	mov	r3, r2
 800b6cc:	00db      	lsls	r3, r3, #3
 800b6ce:	4413      	add	r3, r2
 800b6d0:	009b      	lsls	r3, r3, #2
 800b6d2:	440b      	add	r3, r1
 800b6d4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800b6d8:	2201      	movs	r2, #1
 800b6da:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800b6dc:	6a3b      	ldr	r3, [r7, #32]
 800b6de:	699b      	ldr	r3, [r3, #24]
 800b6e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800b6e4:	6a3b      	ldr	r3, [r7, #32]
 800b6e6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800b6e8:	6a3b      	ldr	r3, [r7, #32]
 800b6ea:	695b      	ldr	r3, [r3, #20]
 800b6ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b6f0:	2b00      	cmp	r3, #0
 800b6f2:	d10a      	bne.n	800b70a <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800b6f4:	69fb      	ldr	r3, [r7, #28]
 800b6f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800b6fa:	685b      	ldr	r3, [r3, #4]
 800b6fc:	69fa      	ldr	r2, [r7, #28]
 800b6fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800b702:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800b706:	6053      	str	r3, [r2, #4]
            break;
 800b708:	e007      	b.n	800b71a <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800b70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b70c:	3301      	adds	r3, #1
 800b70e:	627b      	str	r3, [r7, #36]	; 0x24
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	685b      	ldr	r3, [r3, #4]
 800b714:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b716:	429a      	cmp	r2, r3
 800b718:	d3b4      	bcc.n	800b684 <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800b71a:	687b      	ldr	r3, [r7, #4]
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	695a      	ldr	r2, [r3, #20]
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800b728:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	681b      	ldr	r3, [r3, #0]
 800b72e:	4618      	mov	r0, r3
 800b730:	f004 fd7c 	bl	801022c <USB_ReadInterrupts>
 800b734:	4603      	mov	r3, r0
 800b736:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800b73a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b73e:	d10a      	bne.n	800b756 <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f008 f89b 	bl	801387c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800b746:	687b      	ldr	r3, [r7, #4]
 800b748:	681b      	ldr	r3, [r3, #0]
 800b74a:	695a      	ldr	r2, [r3, #20]
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	681b      	ldr	r3, [r3, #0]
 800b750:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800b754:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	4618      	mov	r0, r3
 800b75c:	f004 fd66 	bl	801022c <USB_ReadInterrupts>
 800b760:	4603      	mov	r3, r0
 800b762:	f003 0304 	and.w	r3, r3, #4
 800b766:	2b04      	cmp	r3, #4
 800b768:	d115      	bne.n	800b796 <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	685b      	ldr	r3, [r3, #4]
 800b770:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800b772:	69bb      	ldr	r3, [r7, #24]
 800b774:	f003 0304 	and.w	r3, r3, #4
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d002      	beq.n	800b782 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800b77c:	6878      	ldr	r0, [r7, #4]
 800b77e:	f008 f88b 	bl	8013898 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	6859      	ldr	r1, [r3, #4]
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	69ba      	ldr	r2, [r7, #24]
 800b78e:	430a      	orrs	r2, r1
 800b790:	605a      	str	r2, [r3, #4]
 800b792:	e000      	b.n	800b796 <HAL_PCD_IRQHandler+0x992>
      return;
 800b794:	bf00      	nop
    }
  }
}
 800b796:	3734      	adds	r7, #52	; 0x34
 800b798:	46bd      	mov	sp, r7
 800b79a:	bd90      	pop	{r4, r7, pc}

0800b79c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800b79c:	b580      	push	{r7, lr}
 800b79e:	b082      	sub	sp, #8
 800b7a0:	af00      	add	r7, sp, #0
 800b7a2:	6078      	str	r0, [r7, #4]
 800b7a4:	460b      	mov	r3, r1
 800b7a6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800b7a8:	687b      	ldr	r3, [r7, #4]
 800b7aa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800b7ae:	2b01      	cmp	r3, #1
 800b7b0:	d101      	bne.n	800b7b6 <HAL_PCD_SetAddress+0x1a>
 800b7b2:	2302      	movs	r3, #2
 800b7b4:	e013      	b.n	800b7de <HAL_PCD_SetAddress+0x42>
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	2201      	movs	r2, #1
 800b7ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	78fa      	ldrb	r2, [r7, #3]
 800b7c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	681b      	ldr	r3, [r3, #0]
 800b7ca:	78fa      	ldrb	r2, [r7, #3]
 800b7cc:	4611      	mov	r1, r2
 800b7ce:	4618      	mov	r0, r3
 800b7d0:	f004 fcc4 	bl	801015c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	2200      	movs	r2, #0
 800b7d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800b7dc:	2300      	movs	r3, #0
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3708      	adds	r7, #8
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}

0800b7e6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800b7e6:	b580      	push	{r7, lr}
 800b7e8:	b084      	sub	sp, #16
 800b7ea:	af00      	add	r7, sp, #0
 800b7ec:	6078      	str	r0, [r7, #4]
 800b7ee:	4608      	mov	r0, r1
 800b7f0:	4611      	mov	r1, r2
 800b7f2:	461a      	mov	r2, r3
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	70fb      	strb	r3, [r7, #3]
 800b7f8:	460b      	mov	r3, r1
 800b7fa:	803b      	strh	r3, [r7, #0]
 800b7fc:	4613      	mov	r3, r2
 800b7fe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800b800:	2300      	movs	r3, #0
 800b802:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b804:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b808:	2b00      	cmp	r3, #0
 800b80a:	da0f      	bge.n	800b82c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b80c:	78fb      	ldrb	r3, [r7, #3]
 800b80e:	f003 020f 	and.w	r2, r3, #15
 800b812:	4613      	mov	r3, r2
 800b814:	00db      	lsls	r3, r3, #3
 800b816:	4413      	add	r3, r2
 800b818:	009b      	lsls	r3, r3, #2
 800b81a:	3338      	adds	r3, #56	; 0x38
 800b81c:	687a      	ldr	r2, [r7, #4]
 800b81e:	4413      	add	r3, r2
 800b820:	3304      	adds	r3, #4
 800b822:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b824:	68fb      	ldr	r3, [r7, #12]
 800b826:	2201      	movs	r2, #1
 800b828:	705a      	strb	r2, [r3, #1]
 800b82a:	e00f      	b.n	800b84c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b82c:	78fb      	ldrb	r3, [r7, #3]
 800b82e:	f003 020f 	and.w	r2, r3, #15
 800b832:	4613      	mov	r3, r2
 800b834:	00db      	lsls	r3, r3, #3
 800b836:	4413      	add	r3, r2
 800b838:	009b      	lsls	r3, r3, #2
 800b83a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b83e:	687a      	ldr	r2, [r7, #4]
 800b840:	4413      	add	r3, r2
 800b842:	3304      	adds	r3, #4
 800b844:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	2200      	movs	r2, #0
 800b84a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800b84c:	78fb      	ldrb	r3, [r7, #3]
 800b84e:	f003 030f 	and.w	r3, r3, #15
 800b852:	b2da      	uxtb	r2, r3
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800b858:	883a      	ldrh	r2, [r7, #0]
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	78ba      	ldrb	r2, [r7, #2]
 800b862:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800b864:	68fb      	ldr	r3, [r7, #12]
 800b866:	785b      	ldrb	r3, [r3, #1]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d004      	beq.n	800b876 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	781b      	ldrb	r3, [r3, #0]
 800b870:	b29a      	uxth	r2, r3
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800b876:	78bb      	ldrb	r3, [r7, #2]
 800b878:	2b02      	cmp	r3, #2
 800b87a:	d102      	bne.n	800b882 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800b87c:	68fb      	ldr	r3, [r7, #12]
 800b87e:	2200      	movs	r2, #0
 800b880:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800b888:	2b01      	cmp	r3, #1
 800b88a:	d101      	bne.n	800b890 <HAL_PCD_EP_Open+0xaa>
 800b88c:	2302      	movs	r3, #2
 800b88e:	e00e      	b.n	800b8ae <HAL_PCD_EP_Open+0xc8>
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2201      	movs	r2, #1
 800b894:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	68f9      	ldr	r1, [r7, #12]
 800b89e:	4618      	mov	r0, r3
 800b8a0:	f003 fe44 	bl	800f52c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	2200      	movs	r2, #0
 800b8a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800b8ac:	7afb      	ldrb	r3, [r7, #11]
}
 800b8ae:	4618      	mov	r0, r3
 800b8b0:	3710      	adds	r7, #16
 800b8b2:	46bd      	mov	sp, r7
 800b8b4:	bd80      	pop	{r7, pc}

0800b8b6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b8b6:	b580      	push	{r7, lr}
 800b8b8:	b084      	sub	sp, #16
 800b8ba:	af00      	add	r7, sp, #0
 800b8bc:	6078      	str	r0, [r7, #4]
 800b8be:	460b      	mov	r3, r1
 800b8c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800b8c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800b8c6:	2b00      	cmp	r3, #0
 800b8c8:	da0f      	bge.n	800b8ea <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800b8ca:	78fb      	ldrb	r3, [r7, #3]
 800b8cc:	f003 020f 	and.w	r2, r3, #15
 800b8d0:	4613      	mov	r3, r2
 800b8d2:	00db      	lsls	r3, r3, #3
 800b8d4:	4413      	add	r3, r2
 800b8d6:	009b      	lsls	r3, r3, #2
 800b8d8:	3338      	adds	r3, #56	; 0x38
 800b8da:	687a      	ldr	r2, [r7, #4]
 800b8dc:	4413      	add	r3, r2
 800b8de:	3304      	adds	r3, #4
 800b8e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800b8e2:	68fb      	ldr	r3, [r7, #12]
 800b8e4:	2201      	movs	r2, #1
 800b8e6:	705a      	strb	r2, [r3, #1]
 800b8e8:	e00f      	b.n	800b90a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b8ea:	78fb      	ldrb	r3, [r7, #3]
 800b8ec:	f003 020f 	and.w	r2, r3, #15
 800b8f0:	4613      	mov	r3, r2
 800b8f2:	00db      	lsls	r3, r3, #3
 800b8f4:	4413      	add	r3, r2
 800b8f6:	009b      	lsls	r3, r3, #2
 800b8f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b8fc:	687a      	ldr	r2, [r7, #4]
 800b8fe:	4413      	add	r3, r2
 800b900:	3304      	adds	r3, #4
 800b902:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	2200      	movs	r2, #0
 800b908:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800b90a:	78fb      	ldrb	r3, [r7, #3]
 800b90c:	f003 030f 	and.w	r3, r3, #15
 800b910:	b2da      	uxtb	r2, r3
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800b91c:	2b01      	cmp	r3, #1
 800b91e:	d101      	bne.n	800b924 <HAL_PCD_EP_Close+0x6e>
 800b920:	2302      	movs	r3, #2
 800b922:	e00e      	b.n	800b942 <HAL_PCD_EP_Close+0x8c>
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2201      	movs	r2, #1
 800b928:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800b92c:	687b      	ldr	r3, [r7, #4]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	68f9      	ldr	r1, [r7, #12]
 800b932:	4618      	mov	r0, r3
 800b934:	f003 fe82 	bl	800f63c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	2200      	movs	r2, #0
 800b93c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800b940:	2300      	movs	r3, #0
}
 800b942:	4618      	mov	r0, r3
 800b944:	3710      	adds	r7, #16
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}

0800b94a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b94a:	b580      	push	{r7, lr}
 800b94c:	b086      	sub	sp, #24
 800b94e:	af00      	add	r7, sp, #0
 800b950:	60f8      	str	r0, [r7, #12]
 800b952:	607a      	str	r2, [r7, #4]
 800b954:	603b      	str	r3, [r7, #0]
 800b956:	460b      	mov	r3, r1
 800b958:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800b95a:	7afb      	ldrb	r3, [r7, #11]
 800b95c:	f003 020f 	and.w	r2, r3, #15
 800b960:	4613      	mov	r3, r2
 800b962:	00db      	lsls	r3, r3, #3
 800b964:	4413      	add	r3, r2
 800b966:	009b      	lsls	r3, r3, #2
 800b968:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800b96c:	68fa      	ldr	r2, [r7, #12]
 800b96e:	4413      	add	r3, r2
 800b970:	3304      	adds	r3, #4
 800b972:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800b974:	697b      	ldr	r3, [r7, #20]
 800b976:	687a      	ldr	r2, [r7, #4]
 800b978:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800b97a:	697b      	ldr	r3, [r7, #20]
 800b97c:	683a      	ldr	r2, [r7, #0]
 800b97e:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	2200      	movs	r2, #0
 800b984:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 800b986:	697b      	ldr	r3, [r7, #20]
 800b988:	2200      	movs	r2, #0
 800b98a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800b98c:	7afb      	ldrb	r3, [r7, #11]
 800b98e:	f003 030f 	and.w	r3, r3, #15
 800b992:	b2da      	uxtb	r2, r3
 800b994:	697b      	ldr	r3, [r7, #20]
 800b996:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	68db      	ldr	r3, [r3, #12]
 800b99c:	2b01      	cmp	r3, #1
 800b99e:	d102      	bne.n	800b9a6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800b9a0:	687a      	ldr	r2, [r7, #4]
 800b9a2:	697b      	ldr	r3, [r7, #20]
 800b9a4:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	6818      	ldr	r0, [r3, #0]
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	68db      	ldr	r3, [r3, #12]
 800b9ae:	b2db      	uxtb	r3, r3
 800b9b0:	461a      	mov	r2, r3
 800b9b2:	6979      	ldr	r1, [r7, #20]
 800b9b4:	f003 ff1e 	bl	800f7f4 <USB_EPStartXfer>

  return HAL_OK;
 800b9b8:	2300      	movs	r3, #0
}
 800b9ba:	4618      	mov	r0, r3
 800b9bc:	3718      	adds	r7, #24
 800b9be:	46bd      	mov	sp, r7
 800b9c0:	bd80      	pop	{r7, pc}

0800b9c2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800b9c2:	b480      	push	{r7}
 800b9c4:	b083      	sub	sp, #12
 800b9c6:	af00      	add	r7, sp, #0
 800b9c8:	6078      	str	r0, [r7, #4]
 800b9ca:	460b      	mov	r3, r1
 800b9cc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800b9ce:	78fb      	ldrb	r3, [r7, #3]
 800b9d0:	f003 020f 	and.w	r2, r3, #15
 800b9d4:	6879      	ldr	r1, [r7, #4]
 800b9d6:	4613      	mov	r3, r2
 800b9d8:	00db      	lsls	r3, r3, #3
 800b9da:	4413      	add	r3, r2
 800b9dc:	009b      	lsls	r3, r3, #2
 800b9de:	440b      	add	r3, r1
 800b9e0:	f503 7324 	add.w	r3, r3, #656	; 0x290
 800b9e4:	681b      	ldr	r3, [r3, #0]
}
 800b9e6:	4618      	mov	r0, r3
 800b9e8:	370c      	adds	r7, #12
 800b9ea:	46bd      	mov	sp, r7
 800b9ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9f0:	4770      	bx	lr

0800b9f2 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800b9f2:	b580      	push	{r7, lr}
 800b9f4:	b086      	sub	sp, #24
 800b9f6:	af00      	add	r7, sp, #0
 800b9f8:	60f8      	str	r0, [r7, #12]
 800b9fa:	607a      	str	r2, [r7, #4]
 800b9fc:	603b      	str	r3, [r7, #0]
 800b9fe:	460b      	mov	r3, r1
 800ba00:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ba02:	7afb      	ldrb	r3, [r7, #11]
 800ba04:	f003 020f 	and.w	r2, r3, #15
 800ba08:	4613      	mov	r3, r2
 800ba0a:	00db      	lsls	r3, r3, #3
 800ba0c:	4413      	add	r3, r2
 800ba0e:	009b      	lsls	r3, r3, #2
 800ba10:	3338      	adds	r3, #56	; 0x38
 800ba12:	68fa      	ldr	r2, [r7, #12]
 800ba14:	4413      	add	r3, r2
 800ba16:	3304      	adds	r3, #4
 800ba18:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ba1a:	697b      	ldr	r3, [r7, #20]
 800ba1c:	687a      	ldr	r2, [r7, #4]
 800ba1e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800ba20:	697b      	ldr	r3, [r7, #20]
 800ba22:	683a      	ldr	r2, [r7, #0]
 800ba24:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 800ba26:	697b      	ldr	r3, [r7, #20]
 800ba28:	2200      	movs	r2, #0
 800ba2a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 800ba2c:	697b      	ldr	r3, [r7, #20]
 800ba2e:	2201      	movs	r2, #1
 800ba30:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ba32:	7afb      	ldrb	r3, [r7, #11]
 800ba34:	f003 030f 	and.w	r3, r3, #15
 800ba38:	b2da      	uxtb	r2, r3
 800ba3a:	697b      	ldr	r3, [r7, #20]
 800ba3c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ba3e:	68fb      	ldr	r3, [r7, #12]
 800ba40:	68db      	ldr	r3, [r3, #12]
 800ba42:	2b01      	cmp	r3, #1
 800ba44:	d102      	bne.n	800ba4c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ba46:	687a      	ldr	r2, [r7, #4]
 800ba48:	697b      	ldr	r3, [r7, #20]
 800ba4a:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ba4c:	68fb      	ldr	r3, [r7, #12]
 800ba4e:	6818      	ldr	r0, [r3, #0]
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	68db      	ldr	r3, [r3, #12]
 800ba54:	b2db      	uxtb	r3, r3
 800ba56:	461a      	mov	r2, r3
 800ba58:	6979      	ldr	r1, [r7, #20]
 800ba5a:	f003 fecb 	bl	800f7f4 <USB_EPStartXfer>

  return HAL_OK;
 800ba5e:	2300      	movs	r3, #0
}
 800ba60:	4618      	mov	r0, r3
 800ba62:	3718      	adds	r7, #24
 800ba64:	46bd      	mov	sp, r7
 800ba66:	bd80      	pop	{r7, pc}

0800ba68 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ba68:	b580      	push	{r7, lr}
 800ba6a:	b084      	sub	sp, #16
 800ba6c:	af00      	add	r7, sp, #0
 800ba6e:	6078      	str	r0, [r7, #4]
 800ba70:	460b      	mov	r3, r1
 800ba72:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800ba74:	78fb      	ldrb	r3, [r7, #3]
 800ba76:	f003 020f 	and.w	r2, r3, #15
 800ba7a:	687b      	ldr	r3, [r7, #4]
 800ba7c:	685b      	ldr	r3, [r3, #4]
 800ba7e:	429a      	cmp	r2, r3
 800ba80:	d901      	bls.n	800ba86 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800ba82:	2301      	movs	r3, #1
 800ba84:	e050      	b.n	800bb28 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ba86:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	da0f      	bge.n	800baae <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ba8e:	78fb      	ldrb	r3, [r7, #3]
 800ba90:	f003 020f 	and.w	r2, r3, #15
 800ba94:	4613      	mov	r3, r2
 800ba96:	00db      	lsls	r3, r3, #3
 800ba98:	4413      	add	r3, r2
 800ba9a:	009b      	lsls	r3, r3, #2
 800ba9c:	3338      	adds	r3, #56	; 0x38
 800ba9e:	687a      	ldr	r2, [r7, #4]
 800baa0:	4413      	add	r3, r2
 800baa2:	3304      	adds	r3, #4
 800baa4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	2201      	movs	r2, #1
 800baaa:	705a      	strb	r2, [r3, #1]
 800baac:	e00d      	b.n	800baca <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800baae:	78fa      	ldrb	r2, [r7, #3]
 800bab0:	4613      	mov	r3, r2
 800bab2:	00db      	lsls	r3, r3, #3
 800bab4:	4413      	add	r3, r2
 800bab6:	009b      	lsls	r3, r3, #2
 800bab8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800babc:	687a      	ldr	r2, [r7, #4]
 800babe:	4413      	add	r3, r2
 800bac0:	3304      	adds	r3, #4
 800bac2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	2200      	movs	r2, #0
 800bac8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800baca:	68fb      	ldr	r3, [r7, #12]
 800bacc:	2201      	movs	r2, #1
 800bace:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bad0:	78fb      	ldrb	r3, [r7, #3]
 800bad2:	f003 030f 	and.w	r3, r3, #15
 800bad6:	b2da      	uxtb	r2, r3
 800bad8:	68fb      	ldr	r3, [r7, #12]
 800bada:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800bae2:	2b01      	cmp	r3, #1
 800bae4:	d101      	bne.n	800baea <HAL_PCD_EP_SetStall+0x82>
 800bae6:	2302      	movs	r3, #2
 800bae8:	e01e      	b.n	800bb28 <HAL_PCD_EP_SetStall+0xc0>
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	2201      	movs	r2, #1
 800baee:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	68f9      	ldr	r1, [r7, #12]
 800baf8:	4618      	mov	r0, r3
 800bafa:	f004 fa5b 	bl	800ffb4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800bafe:	78fb      	ldrb	r3, [r7, #3]
 800bb00:	f003 030f 	and.w	r3, r3, #15
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d10a      	bne.n	800bb1e <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800bb08:	687b      	ldr	r3, [r7, #4]
 800bb0a:	6818      	ldr	r0, [r3, #0]
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	68db      	ldr	r3, [r3, #12]
 800bb10:	b2d9      	uxtb	r1, r3
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bb18:	461a      	mov	r2, r3
 800bb1a:	f004 fc4d 	bl	80103b8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2200      	movs	r2, #0
 800bb22:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800bb26:	2300      	movs	r3, #0
}
 800bb28:	4618      	mov	r0, r3
 800bb2a:	3710      	adds	r7, #16
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}

0800bb30 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b084      	sub	sp, #16
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	460b      	mov	r3, r1
 800bb3a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800bb3c:	78fb      	ldrb	r3, [r7, #3]
 800bb3e:	f003 020f 	and.w	r2, r3, #15
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	685b      	ldr	r3, [r3, #4]
 800bb46:	429a      	cmp	r2, r3
 800bb48:	d901      	bls.n	800bb4e <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800bb4a:	2301      	movs	r3, #1
 800bb4c:	e042      	b.n	800bbd4 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800bb4e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bb52:	2b00      	cmp	r3, #0
 800bb54:	da0f      	bge.n	800bb76 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bb56:	78fb      	ldrb	r3, [r7, #3]
 800bb58:	f003 020f 	and.w	r2, r3, #15
 800bb5c:	4613      	mov	r3, r2
 800bb5e:	00db      	lsls	r3, r3, #3
 800bb60:	4413      	add	r3, r2
 800bb62:	009b      	lsls	r3, r3, #2
 800bb64:	3338      	adds	r3, #56	; 0x38
 800bb66:	687a      	ldr	r2, [r7, #4]
 800bb68:	4413      	add	r3, r2
 800bb6a:	3304      	adds	r3, #4
 800bb6c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
 800bb70:	2201      	movs	r2, #1
 800bb72:	705a      	strb	r2, [r3, #1]
 800bb74:	e00f      	b.n	800bb96 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bb76:	78fb      	ldrb	r3, [r7, #3]
 800bb78:	f003 020f 	and.w	r2, r3, #15
 800bb7c:	4613      	mov	r3, r2
 800bb7e:	00db      	lsls	r3, r3, #3
 800bb80:	4413      	add	r3, r2
 800bb82:	009b      	lsls	r3, r3, #2
 800bb84:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800bb88:	687a      	ldr	r2, [r7, #4]
 800bb8a:	4413      	add	r3, r2
 800bb8c:	3304      	adds	r3, #4
 800bb8e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800bb90:	68fb      	ldr	r3, [r7, #12]
 800bb92:	2200      	movs	r2, #0
 800bb94:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800bb96:	68fb      	ldr	r3, [r7, #12]
 800bb98:	2200      	movs	r2, #0
 800bb9a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800bb9c:	78fb      	ldrb	r3, [r7, #3]
 800bb9e:	f003 030f 	and.w	r3, r3, #15
 800bba2:	b2da      	uxtb	r2, r3
 800bba4:	68fb      	ldr	r3, [r7, #12]
 800bba6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800bbae:	2b01      	cmp	r3, #1
 800bbb0:	d101      	bne.n	800bbb6 <HAL_PCD_EP_ClrStall+0x86>
 800bbb2:	2302      	movs	r3, #2
 800bbb4:	e00e      	b.n	800bbd4 <HAL_PCD_EP_ClrStall+0xa4>
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	2201      	movs	r2, #1
 800bbba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	68f9      	ldr	r1, [r7, #12]
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	f004 fa63 	bl	8010090 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	2200      	movs	r2, #0
 800bbce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800bbd2:	2300      	movs	r3, #0
}
 800bbd4:	4618      	mov	r0, r3
 800bbd6:	3710      	adds	r7, #16
 800bbd8:	46bd      	mov	sp, r7
 800bbda:	bd80      	pop	{r7, pc}

0800bbdc <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800bbdc:	b580      	push	{r7, lr}
 800bbde:	b084      	sub	sp, #16
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
 800bbe4:	460b      	mov	r3, r1
 800bbe6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800bbe8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800bbec:	2b00      	cmp	r3, #0
 800bbee:	da0c      	bge.n	800bc0a <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800bbf0:	78fb      	ldrb	r3, [r7, #3]
 800bbf2:	f003 020f 	and.w	r2, r3, #15
 800bbf6:	4613      	mov	r3, r2
 800bbf8:	00db      	lsls	r3, r3, #3
 800bbfa:	4413      	add	r3, r2
 800bbfc:	009b      	lsls	r3, r3, #2
 800bbfe:	3338      	adds	r3, #56	; 0x38
 800bc00:	687a      	ldr	r2, [r7, #4]
 800bc02:	4413      	add	r3, r2
 800bc04:	3304      	adds	r3, #4
 800bc06:	60fb      	str	r3, [r7, #12]
 800bc08:	e00c      	b.n	800bc24 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800bc0a:	78fb      	ldrb	r3, [r7, #3]
 800bc0c:	f003 020f 	and.w	r2, r3, #15
 800bc10:	4613      	mov	r3, r2
 800bc12:	00db      	lsls	r3, r3, #3
 800bc14:	4413      	add	r3, r2
 800bc16:	009b      	lsls	r3, r3, #2
 800bc18:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800bc1c:	687a      	ldr	r2, [r7, #4]
 800bc1e:	4413      	add	r3, r2
 800bc20:	3304      	adds	r3, #4
 800bc22:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	681b      	ldr	r3, [r3, #0]
 800bc28:	68f9      	ldr	r1, [r7, #12]
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f004 f882 	bl	800fd34 <USB_EPStopXfer>
 800bc30:	4603      	mov	r3, r0
 800bc32:	72fb      	strb	r3, [r7, #11]

  return ret;
 800bc34:	7afb      	ldrb	r3, [r7, #11]
}
 800bc36:	4618      	mov	r0, r3
 800bc38:	3710      	adds	r7, #16
 800bc3a:	46bd      	mov	sp, r7
 800bc3c:	bd80      	pop	{r7, pc}

0800bc3e <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bc3e:	b580      	push	{r7, lr}
 800bc40:	b08a      	sub	sp, #40	; 0x28
 800bc42:	af02      	add	r7, sp, #8
 800bc44:	6078      	str	r0, [r7, #4]
 800bc46:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bc4e:	697b      	ldr	r3, [r7, #20]
 800bc50:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800bc52:	683a      	ldr	r2, [r7, #0]
 800bc54:	4613      	mov	r3, r2
 800bc56:	00db      	lsls	r3, r3, #3
 800bc58:	4413      	add	r3, r2
 800bc5a:	009b      	lsls	r3, r3, #2
 800bc5c:	3338      	adds	r3, #56	; 0x38
 800bc5e:	687a      	ldr	r2, [r7, #4]
 800bc60:	4413      	add	r3, r2
 800bc62:	3304      	adds	r3, #4
 800bc64:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800bc66:	68fb      	ldr	r3, [r7, #12]
 800bc68:	695a      	ldr	r2, [r3, #20]
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	691b      	ldr	r3, [r3, #16]
 800bc6e:	429a      	cmp	r2, r3
 800bc70:	d901      	bls.n	800bc76 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800bc72:	2301      	movs	r3, #1
 800bc74:	e06c      	b.n	800bd50 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	691a      	ldr	r2, [r3, #16]
 800bc7a:	68fb      	ldr	r3, [r7, #12]
 800bc7c:	695b      	ldr	r3, [r3, #20]
 800bc7e:	1ad3      	subs	r3, r2, r3
 800bc80:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	689b      	ldr	r3, [r3, #8]
 800bc86:	69fa      	ldr	r2, [r7, #28]
 800bc88:	429a      	cmp	r2, r3
 800bc8a:	d902      	bls.n	800bc92 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800bc8c:	68fb      	ldr	r3, [r7, #12]
 800bc8e:	689b      	ldr	r3, [r3, #8]
 800bc90:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800bc92:	69fb      	ldr	r3, [r7, #28]
 800bc94:	3303      	adds	r3, #3
 800bc96:	089b      	lsrs	r3, r3, #2
 800bc98:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bc9a:	e02b      	b.n	800bcf4 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800bc9c:	68fb      	ldr	r3, [r7, #12]
 800bc9e:	691a      	ldr	r2, [r3, #16]
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	695b      	ldr	r3, [r3, #20]
 800bca4:	1ad3      	subs	r3, r2, r3
 800bca6:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800bca8:	68fb      	ldr	r3, [r7, #12]
 800bcaa:	689b      	ldr	r3, [r3, #8]
 800bcac:	69fa      	ldr	r2, [r7, #28]
 800bcae:	429a      	cmp	r2, r3
 800bcb0:	d902      	bls.n	800bcb8 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	689b      	ldr	r3, [r3, #8]
 800bcb6:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800bcb8:	69fb      	ldr	r3, [r7, #28]
 800bcba:	3303      	adds	r3, #3
 800bcbc:	089b      	lsrs	r3, r3, #2
 800bcbe:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	68d9      	ldr	r1, [r3, #12]
 800bcc4:	683b      	ldr	r3, [r7, #0]
 800bcc6:	b2da      	uxtb	r2, r3
 800bcc8:	69fb      	ldr	r3, [r7, #28]
 800bcca:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	68db      	ldr	r3, [r3, #12]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800bcd0:	b2db      	uxtb	r3, r3
 800bcd2:	9300      	str	r3, [sp, #0]
 800bcd4:	4603      	mov	r3, r0
 800bcd6:	6978      	ldr	r0, [r7, #20]
 800bcd8:	f004 f8d6 	bl	800fe88 <USB_WritePacket>

    ep->xfer_buff  += len;
 800bcdc:	68fb      	ldr	r3, [r7, #12]
 800bcde:	68da      	ldr	r2, [r3, #12]
 800bce0:	69fb      	ldr	r3, [r7, #28]
 800bce2:	441a      	add	r2, r3
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	695a      	ldr	r2, [r3, #20]
 800bcec:	69fb      	ldr	r3, [r7, #28]
 800bcee:	441a      	add	r2, r3
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bcf4:	683b      	ldr	r3, [r7, #0]
 800bcf6:	015a      	lsls	r2, r3, #5
 800bcf8:	693b      	ldr	r3, [r7, #16]
 800bcfa:	4413      	add	r3, r2
 800bcfc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800bd00:	699b      	ldr	r3, [r3, #24]
 800bd02:	b29b      	uxth	r3, r3
 800bd04:	69ba      	ldr	r2, [r7, #24]
 800bd06:	429a      	cmp	r2, r3
 800bd08:	d809      	bhi.n	800bd1e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	695a      	ldr	r2, [r3, #20]
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800bd12:	429a      	cmp	r2, r3
 800bd14:	d203      	bcs.n	800bd1e <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	691b      	ldr	r3, [r3, #16]
 800bd1a:	2b00      	cmp	r3, #0
 800bd1c:	d1be      	bne.n	800bc9c <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	691a      	ldr	r2, [r3, #16]
 800bd22:	68fb      	ldr	r3, [r7, #12]
 800bd24:	695b      	ldr	r3, [r3, #20]
 800bd26:	429a      	cmp	r2, r3
 800bd28:	d811      	bhi.n	800bd4e <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800bd2a:	683b      	ldr	r3, [r7, #0]
 800bd2c:	f003 030f 	and.w	r3, r3, #15
 800bd30:	2201      	movs	r2, #1
 800bd32:	fa02 f303 	lsl.w	r3, r2, r3
 800bd36:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800bd38:	693b      	ldr	r3, [r7, #16]
 800bd3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800bd3e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bd40:	68bb      	ldr	r3, [r7, #8]
 800bd42:	43db      	mvns	r3, r3
 800bd44:	6939      	ldr	r1, [r7, #16]
 800bd46:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800bd4a:	4013      	ands	r3, r2
 800bd4c:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800bd4e:	2300      	movs	r3, #0
}
 800bd50:	4618      	mov	r0, r3
 800bd52:	3720      	adds	r7, #32
 800bd54:	46bd      	mov	sp, r7
 800bd56:	bd80      	pop	{r7, pc}

0800bd58 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bd58:	b580      	push	{r7, lr}
 800bd5a:	b088      	sub	sp, #32
 800bd5c:	af00      	add	r7, sp, #0
 800bd5e:	6078      	str	r0, [r7, #4]
 800bd60:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bd68:	69fb      	ldr	r3, [r7, #28]
 800bd6a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bd6c:	69fb      	ldr	r3, [r7, #28]
 800bd6e:	333c      	adds	r3, #60	; 0x3c
 800bd70:	3304      	adds	r3, #4
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bd76:	683b      	ldr	r3, [r7, #0]
 800bd78:	015a      	lsls	r2, r3, #5
 800bd7a:	69bb      	ldr	r3, [r7, #24]
 800bd7c:	4413      	add	r3, r2
 800bd7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bd82:	689b      	ldr	r3, [r3, #8]
 800bd84:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	68db      	ldr	r3, [r3, #12]
 800bd8a:	2b01      	cmp	r3, #1
 800bd8c:	d17b      	bne.n	800be86 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800bd8e:	693b      	ldr	r3, [r7, #16]
 800bd90:	f003 0308 	and.w	r3, r3, #8
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d015      	beq.n	800bdc4 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bd98:	697b      	ldr	r3, [r7, #20]
 800bd9a:	4a61      	ldr	r2, [pc, #388]	; (800bf20 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800bd9c:	4293      	cmp	r3, r2
 800bd9e:	f240 80b9 	bls.w	800bf14 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bda2:	693b      	ldr	r3, [r7, #16]
 800bda4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	f000 80b3 	beq.w	800bf14 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bdae:	683b      	ldr	r3, [r7, #0]
 800bdb0:	015a      	lsls	r2, r3, #5
 800bdb2:	69bb      	ldr	r3, [r7, #24]
 800bdb4:	4413      	add	r3, r2
 800bdb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdba:	461a      	mov	r2, r3
 800bdbc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bdc0:	6093      	str	r3, [r2, #8]
 800bdc2:	e0a7      	b.n	800bf14 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800bdc4:	693b      	ldr	r3, [r7, #16]
 800bdc6:	f003 0320 	and.w	r3, r3, #32
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d009      	beq.n	800bde2 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800bdce:	683b      	ldr	r3, [r7, #0]
 800bdd0:	015a      	lsls	r2, r3, #5
 800bdd2:	69bb      	ldr	r3, [r7, #24]
 800bdd4:	4413      	add	r3, r2
 800bdd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bdda:	461a      	mov	r2, r3
 800bddc:	2320      	movs	r3, #32
 800bdde:	6093      	str	r3, [r2, #8]
 800bde0:	e098      	b.n	800bf14 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800bde2:	693b      	ldr	r3, [r7, #16]
 800bde4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	f040 8093 	bne.w	800bf14 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bdee:	697b      	ldr	r3, [r7, #20]
 800bdf0:	4a4b      	ldr	r2, [pc, #300]	; (800bf20 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800bdf2:	4293      	cmp	r3, r2
 800bdf4:	d90f      	bls.n	800be16 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bdf6:	693b      	ldr	r3, [r7, #16]
 800bdf8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d00a      	beq.n	800be16 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800be00:	683b      	ldr	r3, [r7, #0]
 800be02:	015a      	lsls	r2, r3, #5
 800be04:	69bb      	ldr	r3, [r7, #24]
 800be06:	4413      	add	r3, r2
 800be08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be0c:	461a      	mov	r2, r3
 800be0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800be12:	6093      	str	r3, [r2, #8]
 800be14:	e07e      	b.n	800bf14 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800be16:	683a      	ldr	r2, [r7, #0]
 800be18:	4613      	mov	r3, r2
 800be1a:	00db      	lsls	r3, r3, #3
 800be1c:	4413      	add	r3, r2
 800be1e:	009b      	lsls	r3, r3, #2
 800be20:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800be24:	687a      	ldr	r2, [r7, #4]
 800be26:	4413      	add	r3, r2
 800be28:	3304      	adds	r3, #4
 800be2a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	6a1a      	ldr	r2, [r3, #32]
 800be30:	683b      	ldr	r3, [r7, #0]
 800be32:	0159      	lsls	r1, r3, #5
 800be34:	69bb      	ldr	r3, [r7, #24]
 800be36:	440b      	add	r3, r1
 800be38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800be3c:	691b      	ldr	r3, [r3, #16]
 800be3e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800be42:	1ad2      	subs	r2, r2, r3
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 800be48:	683b      	ldr	r3, [r7, #0]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d114      	bne.n	800be78 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800be4e:	68fb      	ldr	r3, [r7, #12]
 800be50:	691b      	ldr	r3, [r3, #16]
 800be52:	2b00      	cmp	r3, #0
 800be54:	d109      	bne.n	800be6a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800be56:	687b      	ldr	r3, [r7, #4]
 800be58:	6818      	ldr	r0, [r3, #0]
 800be5a:	687b      	ldr	r3, [r7, #4]
 800be5c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800be60:	461a      	mov	r2, r3
 800be62:	2101      	movs	r1, #1
 800be64:	f004 faa8 	bl	80103b8 <USB_EP0_OutStart>
 800be68:	e006      	b.n	800be78 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	68da      	ldr	r2, [r3, #12]
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	695b      	ldr	r3, [r3, #20]
 800be72:	441a      	add	r2, r3
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800be78:	683b      	ldr	r3, [r7, #0]
 800be7a:	b2db      	uxtb	r3, r3
 800be7c:	4619      	mov	r1, r3
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	f007 fc38 	bl	80136f4 <HAL_PCD_DataOutStageCallback>
 800be84:	e046      	b.n	800bf14 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 800be86:	697b      	ldr	r3, [r7, #20]
 800be88:	4a26      	ldr	r2, [pc, #152]	; (800bf24 <PCD_EP_OutXfrComplete_int+0x1cc>)
 800be8a:	4293      	cmp	r3, r2
 800be8c:	d124      	bne.n	800bed8 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800be8e:	693b      	ldr	r3, [r7, #16]
 800be90:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800be94:	2b00      	cmp	r3, #0
 800be96:	d00a      	beq.n	800beae <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800be98:	683b      	ldr	r3, [r7, #0]
 800be9a:	015a      	lsls	r2, r3, #5
 800be9c:	69bb      	ldr	r3, [r7, #24]
 800be9e:	4413      	add	r3, r2
 800bea0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bea4:	461a      	mov	r2, r3
 800bea6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800beaa:	6093      	str	r3, [r2, #8]
 800beac:	e032      	b.n	800bf14 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800beae:	693b      	ldr	r3, [r7, #16]
 800beb0:	f003 0320 	and.w	r3, r3, #32
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d008      	beq.n	800beca <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800beb8:	683b      	ldr	r3, [r7, #0]
 800beba:	015a      	lsls	r2, r3, #5
 800bebc:	69bb      	ldr	r3, [r7, #24]
 800bebe:	4413      	add	r3, r2
 800bec0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bec4:	461a      	mov	r2, r3
 800bec6:	2320      	movs	r3, #32
 800bec8:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800beca:	683b      	ldr	r3, [r7, #0]
 800becc:	b2db      	uxtb	r3, r3
 800bece:	4619      	mov	r1, r3
 800bed0:	6878      	ldr	r0, [r7, #4]
 800bed2:	f007 fc0f 	bl	80136f4 <HAL_PCD_DataOutStageCallback>
 800bed6:	e01d      	b.n	800bf14 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800bed8:	683b      	ldr	r3, [r7, #0]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	d114      	bne.n	800bf08 <PCD_EP_OutXfrComplete_int+0x1b0>
 800bede:	6879      	ldr	r1, [r7, #4]
 800bee0:	683a      	ldr	r2, [r7, #0]
 800bee2:	4613      	mov	r3, r2
 800bee4:	00db      	lsls	r3, r3, #3
 800bee6:	4413      	add	r3, r2
 800bee8:	009b      	lsls	r3, r3, #2
 800beea:	440b      	add	r3, r1
 800beec:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800bef0:	681b      	ldr	r3, [r3, #0]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d108      	bne.n	800bf08 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6818      	ldr	r0, [r3, #0]
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bf00:	461a      	mov	r2, r3
 800bf02:	2100      	movs	r1, #0
 800bf04:	f004 fa58 	bl	80103b8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800bf08:	683b      	ldr	r3, [r7, #0]
 800bf0a:	b2db      	uxtb	r3, r3
 800bf0c:	4619      	mov	r1, r3
 800bf0e:	6878      	ldr	r0, [r7, #4]
 800bf10:	f007 fbf0 	bl	80136f4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800bf14:	2300      	movs	r3, #0
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3720      	adds	r7, #32
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}
 800bf1e:	bf00      	nop
 800bf20:	4f54300a 	.word	0x4f54300a
 800bf24:	4f54310a 	.word	0x4f54310a

0800bf28 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800bf28:	b580      	push	{r7, lr}
 800bf2a:	b086      	sub	sp, #24
 800bf2c:	af00      	add	r7, sp, #0
 800bf2e:	6078      	str	r0, [r7, #4]
 800bf30:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	681b      	ldr	r3, [r3, #0]
 800bf36:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800bf38:	697b      	ldr	r3, [r7, #20]
 800bf3a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800bf3c:	697b      	ldr	r3, [r7, #20]
 800bf3e:	333c      	adds	r3, #60	; 0x3c
 800bf40:	3304      	adds	r3, #4
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800bf46:	683b      	ldr	r3, [r7, #0]
 800bf48:	015a      	lsls	r2, r3, #5
 800bf4a:	693b      	ldr	r3, [r7, #16]
 800bf4c:	4413      	add	r3, r2
 800bf4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf52:	689b      	ldr	r3, [r3, #8]
 800bf54:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	4a15      	ldr	r2, [pc, #84]	; (800bfb0 <PCD_EP_OutSetupPacket_int+0x88>)
 800bf5a:	4293      	cmp	r3, r2
 800bf5c:	d90e      	bls.n	800bf7c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800bf5e:	68bb      	ldr	r3, [r7, #8]
 800bf60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d009      	beq.n	800bf7c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800bf68:	683b      	ldr	r3, [r7, #0]
 800bf6a:	015a      	lsls	r2, r3, #5
 800bf6c:	693b      	ldr	r3, [r7, #16]
 800bf6e:	4413      	add	r3, r2
 800bf70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800bf74:	461a      	mov	r2, r3
 800bf76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800bf7a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 800bf7c:	6878      	ldr	r0, [r7, #4]
 800bf7e:	f007 fba7 	bl	80136d0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800bf82:	68fb      	ldr	r3, [r7, #12]
 800bf84:	4a0a      	ldr	r2, [pc, #40]	; (800bfb0 <PCD_EP_OutSetupPacket_int+0x88>)
 800bf86:	4293      	cmp	r3, r2
 800bf88:	d90c      	bls.n	800bfa4 <PCD_EP_OutSetupPacket_int+0x7c>
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	68db      	ldr	r3, [r3, #12]
 800bf8e:	2b01      	cmp	r3, #1
 800bf90:	d108      	bne.n	800bfa4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	6818      	ldr	r0, [r3, #0]
 800bf96:	687b      	ldr	r3, [r7, #4]
 800bf98:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800bf9c:	461a      	mov	r2, r3
 800bf9e:	2101      	movs	r1, #1
 800bfa0:	f004 fa0a 	bl	80103b8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 800bfa4:	2300      	movs	r3, #0
}
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	3718      	adds	r7, #24
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bd80      	pop	{r7, pc}
 800bfae:	bf00      	nop
 800bfb0:	4f54300a 	.word	0x4f54300a

0800bfb4 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800bfb4:	b480      	push	{r7}
 800bfb6:	b085      	sub	sp, #20
 800bfb8:	af00      	add	r7, sp, #0
 800bfba:	6078      	str	r0, [r7, #4]
 800bfbc:	460b      	mov	r3, r1
 800bfbe:	70fb      	strb	r3, [r7, #3]
 800bfc0:	4613      	mov	r3, r2
 800bfc2:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfca:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 800bfcc:	78fb      	ldrb	r3, [r7, #3]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d107      	bne.n	800bfe2 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800bfd2:	883b      	ldrh	r3, [r7, #0]
 800bfd4:	0419      	lsls	r1, r3, #16
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	68ba      	ldr	r2, [r7, #8]
 800bfdc:	430a      	orrs	r2, r1
 800bfde:	629a      	str	r2, [r3, #40]	; 0x28
 800bfe0:	e028      	b.n	800c034 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bfe8:	0c1b      	lsrs	r3, r3, #16
 800bfea:	68ba      	ldr	r2, [r7, #8]
 800bfec:	4413      	add	r3, r2
 800bfee:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800bff0:	2300      	movs	r3, #0
 800bff2:	73fb      	strb	r3, [r7, #15]
 800bff4:	e00d      	b.n	800c012 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	681a      	ldr	r2, [r3, #0]
 800bffa:	7bfb      	ldrb	r3, [r7, #15]
 800bffc:	3340      	adds	r3, #64	; 0x40
 800bffe:	009b      	lsls	r3, r3, #2
 800c000:	4413      	add	r3, r2
 800c002:	685b      	ldr	r3, [r3, #4]
 800c004:	0c1b      	lsrs	r3, r3, #16
 800c006:	68ba      	ldr	r2, [r7, #8]
 800c008:	4413      	add	r3, r2
 800c00a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800c00c:	7bfb      	ldrb	r3, [r7, #15]
 800c00e:	3301      	adds	r3, #1
 800c010:	73fb      	strb	r3, [r7, #15]
 800c012:	7bfa      	ldrb	r2, [r7, #15]
 800c014:	78fb      	ldrb	r3, [r7, #3]
 800c016:	3b01      	subs	r3, #1
 800c018:	429a      	cmp	r2, r3
 800c01a:	d3ec      	bcc.n	800bff6 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 800c01c:	883b      	ldrh	r3, [r7, #0]
 800c01e:	0418      	lsls	r0, r3, #16
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	6819      	ldr	r1, [r3, #0]
 800c024:	78fb      	ldrb	r3, [r7, #3]
 800c026:	3b01      	subs	r3, #1
 800c028:	68ba      	ldr	r2, [r7, #8]
 800c02a:	4302      	orrs	r2, r0
 800c02c:	3340      	adds	r3, #64	; 0x40
 800c02e:	009b      	lsls	r3, r3, #2
 800c030:	440b      	add	r3, r1
 800c032:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800c034:	2300      	movs	r3, #0
}
 800c036:	4618      	mov	r0, r3
 800c038:	3714      	adds	r7, #20
 800c03a:	46bd      	mov	sp, r7
 800c03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c040:	4770      	bx	lr

0800c042 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800c042:	b480      	push	{r7}
 800c044:	b083      	sub	sp, #12
 800c046:	af00      	add	r7, sp, #0
 800c048:	6078      	str	r0, [r7, #4]
 800c04a:	460b      	mov	r3, r1
 800c04c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	887a      	ldrh	r2, [r7, #2]
 800c054:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800c056:	2300      	movs	r3, #0
}
 800c058:	4618      	mov	r0, r3
 800c05a:	370c      	adds	r7, #12
 800c05c:	46bd      	mov	sp, r7
 800c05e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c062:	4770      	bx	lr

0800c064 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800c064:	b480      	push	{r7}
 800c066:	b085      	sub	sp, #20
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	2201      	movs	r2, #1
 800c076:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	2200      	movs	r2, #0
 800c07e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	699b      	ldr	r3, [r3, #24]
 800c086:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800c08e:	68fb      	ldr	r3, [r7, #12]
 800c090:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800c092:	4b05      	ldr	r3, [pc, #20]	; (800c0a8 <HAL_PCDEx_ActivateLPM+0x44>)
 800c094:	4313      	orrs	r3, r2
 800c096:	68fa      	ldr	r2, [r7, #12]
 800c098:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800c09a:	2300      	movs	r3, #0
}
 800c09c:	4618      	mov	r0, r3
 800c09e:	3714      	adds	r7, #20
 800c0a0:	46bd      	mov	sp, r7
 800c0a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0a6:	4770      	bx	lr
 800c0a8:	10000003 	.word	0x10000003

0800c0ac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 800c0ac:	b480      	push	{r7}
 800c0ae:	b083      	sub	sp, #12
 800c0b0:	af00      	add	r7, sp, #0
 800c0b2:	6078      	str	r0, [r7, #4]
 800c0b4:	460b      	mov	r3, r1
 800c0b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800c0b8:	bf00      	nop
 800c0ba:	370c      	adds	r7, #12
 800c0bc:	46bd      	mov	sp, r7
 800c0be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c2:	4770      	bx	lr

0800c0c4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800c0c4:	b580      	push	{r7, lr}
 800c0c6:	b084      	sub	sp, #16
 800c0c8:	af00      	add	r7, sp, #0
 800c0ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800c0cc:	4b19      	ldr	r3, [pc, #100]	; (800c134 <HAL_PWREx_ConfigSupply+0x70>)
 800c0ce:	68db      	ldr	r3, [r3, #12]
 800c0d0:	f003 0304 	and.w	r3, r3, #4
 800c0d4:	2b04      	cmp	r3, #4
 800c0d6:	d00a      	beq.n	800c0ee <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800c0d8:	4b16      	ldr	r3, [pc, #88]	; (800c134 <HAL_PWREx_ConfigSupply+0x70>)
 800c0da:	68db      	ldr	r3, [r3, #12]
 800c0dc:	f003 0307 	and.w	r3, r3, #7
 800c0e0:	687a      	ldr	r2, [r7, #4]
 800c0e2:	429a      	cmp	r2, r3
 800c0e4:	d001      	beq.n	800c0ea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	e01f      	b.n	800c12a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800c0ea:	2300      	movs	r3, #0
 800c0ec:	e01d      	b.n	800c12a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800c0ee:	4b11      	ldr	r3, [pc, #68]	; (800c134 <HAL_PWREx_ConfigSupply+0x70>)
 800c0f0:	68db      	ldr	r3, [r3, #12]
 800c0f2:	f023 0207 	bic.w	r2, r3, #7
 800c0f6:	490f      	ldr	r1, [pc, #60]	; (800c134 <HAL_PWREx_ConfigSupply+0x70>)
 800c0f8:	687b      	ldr	r3, [r7, #4]
 800c0fa:	4313      	orrs	r3, r2
 800c0fc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800c0fe:	f7fc ff7f 	bl	8009000 <HAL_GetTick>
 800c102:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c104:	e009      	b.n	800c11a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800c106:	f7fc ff7b 	bl	8009000 <HAL_GetTick>
 800c10a:	4602      	mov	r2, r0
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	1ad3      	subs	r3, r2, r3
 800c110:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800c114:	d901      	bls.n	800c11a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800c116:	2301      	movs	r3, #1
 800c118:	e007      	b.n	800c12a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800c11a:	4b06      	ldr	r3, [pc, #24]	; (800c134 <HAL_PWREx_ConfigSupply+0x70>)
 800c11c:	685b      	ldr	r3, [r3, #4]
 800c11e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c122:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800c126:	d1ee      	bne.n	800c106 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800c128:	2300      	movs	r3, #0
}
 800c12a:	4618      	mov	r0, r3
 800c12c:	3710      	adds	r7, #16
 800c12e:	46bd      	mov	sp, r7
 800c130:	bd80      	pop	{r7, pc}
 800c132:	bf00      	nop
 800c134:	58024800 	.word	0x58024800

0800c138 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 800c138:	b480      	push	{r7}
 800c13a:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 800c13c:	4b05      	ldr	r3, [pc, #20]	; (800c154 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800c13e:	68db      	ldr	r3, [r3, #12]
 800c140:	4a04      	ldr	r2, [pc, #16]	; (800c154 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 800c142:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c146:	60d3      	str	r3, [r2, #12]
}
 800c148:	bf00      	nop
 800c14a:	46bd      	mov	sp, r7
 800c14c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c150:	4770      	bx	lr
 800c152:	bf00      	nop
 800c154:	58024800 	.word	0x58024800

0800c158 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c158:	b580      	push	{r7, lr}
 800c15a:	b08c      	sub	sp, #48	; 0x30
 800c15c:	af00      	add	r7, sp, #0
 800c15e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d102      	bne.n	800c16c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800c166:	2301      	movs	r3, #1
 800c168:	f000 bc48 	b.w	800c9fc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	681b      	ldr	r3, [r3, #0]
 800c170:	f003 0301 	and.w	r3, r3, #1
 800c174:	2b00      	cmp	r3, #0
 800c176:	f000 8088 	beq.w	800c28a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c17a:	4b99      	ldr	r3, [pc, #612]	; (800c3e0 <HAL_RCC_OscConfig+0x288>)
 800c17c:	691b      	ldr	r3, [r3, #16]
 800c17e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c182:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c184:	4b96      	ldr	r3, [pc, #600]	; (800c3e0 <HAL_RCC_OscConfig+0x288>)
 800c186:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c188:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800c18a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c18c:	2b10      	cmp	r3, #16
 800c18e:	d007      	beq.n	800c1a0 <HAL_RCC_OscConfig+0x48>
 800c190:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c192:	2b18      	cmp	r3, #24
 800c194:	d111      	bne.n	800c1ba <HAL_RCC_OscConfig+0x62>
 800c196:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c198:	f003 0303 	and.w	r3, r3, #3
 800c19c:	2b02      	cmp	r3, #2
 800c19e:	d10c      	bne.n	800c1ba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c1a0:	4b8f      	ldr	r3, [pc, #572]	; (800c3e0 <HAL_RCC_OscConfig+0x288>)
 800c1a2:	681b      	ldr	r3, [r3, #0]
 800c1a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	d06d      	beq.n	800c288 <HAL_RCC_OscConfig+0x130>
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	685b      	ldr	r3, [r3, #4]
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d169      	bne.n	800c288 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	f000 bc21 	b.w	800c9fc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	685b      	ldr	r3, [r3, #4]
 800c1be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1c2:	d106      	bne.n	800c1d2 <HAL_RCC_OscConfig+0x7a>
 800c1c4:	4b86      	ldr	r3, [pc, #536]	; (800c3e0 <HAL_RCC_OscConfig+0x288>)
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	4a85      	ldr	r2, [pc, #532]	; (800c3e0 <HAL_RCC_OscConfig+0x288>)
 800c1ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c1ce:	6013      	str	r3, [r2, #0]
 800c1d0:	e02e      	b.n	800c230 <HAL_RCC_OscConfig+0xd8>
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	685b      	ldr	r3, [r3, #4]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d10c      	bne.n	800c1f4 <HAL_RCC_OscConfig+0x9c>
 800c1da:	4b81      	ldr	r3, [pc, #516]	; (800c3e0 <HAL_RCC_OscConfig+0x288>)
 800c1dc:	681b      	ldr	r3, [r3, #0]
 800c1de:	4a80      	ldr	r2, [pc, #512]	; (800c3e0 <HAL_RCC_OscConfig+0x288>)
 800c1e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c1e4:	6013      	str	r3, [r2, #0]
 800c1e6:	4b7e      	ldr	r3, [pc, #504]	; (800c3e0 <HAL_RCC_OscConfig+0x288>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	4a7d      	ldr	r2, [pc, #500]	; (800c3e0 <HAL_RCC_OscConfig+0x288>)
 800c1ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c1f0:	6013      	str	r3, [r2, #0]
 800c1f2:	e01d      	b.n	800c230 <HAL_RCC_OscConfig+0xd8>
 800c1f4:	687b      	ldr	r3, [r7, #4]
 800c1f6:	685b      	ldr	r3, [r3, #4]
 800c1f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c1fc:	d10c      	bne.n	800c218 <HAL_RCC_OscConfig+0xc0>
 800c1fe:	4b78      	ldr	r3, [pc, #480]	; (800c3e0 <HAL_RCC_OscConfig+0x288>)
 800c200:	681b      	ldr	r3, [r3, #0]
 800c202:	4a77      	ldr	r2, [pc, #476]	; (800c3e0 <HAL_RCC_OscConfig+0x288>)
 800c204:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c208:	6013      	str	r3, [r2, #0]
 800c20a:	4b75      	ldr	r3, [pc, #468]	; (800c3e0 <HAL_RCC_OscConfig+0x288>)
 800c20c:	681b      	ldr	r3, [r3, #0]
 800c20e:	4a74      	ldr	r2, [pc, #464]	; (800c3e0 <HAL_RCC_OscConfig+0x288>)
 800c210:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c214:	6013      	str	r3, [r2, #0]
 800c216:	e00b      	b.n	800c230 <HAL_RCC_OscConfig+0xd8>
 800c218:	4b71      	ldr	r3, [pc, #452]	; (800c3e0 <HAL_RCC_OscConfig+0x288>)
 800c21a:	681b      	ldr	r3, [r3, #0]
 800c21c:	4a70      	ldr	r2, [pc, #448]	; (800c3e0 <HAL_RCC_OscConfig+0x288>)
 800c21e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c222:	6013      	str	r3, [r2, #0]
 800c224:	4b6e      	ldr	r3, [pc, #440]	; (800c3e0 <HAL_RCC_OscConfig+0x288>)
 800c226:	681b      	ldr	r3, [r3, #0]
 800c228:	4a6d      	ldr	r2, [pc, #436]	; (800c3e0 <HAL_RCC_OscConfig+0x288>)
 800c22a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c22e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	685b      	ldr	r3, [r3, #4]
 800c234:	2b00      	cmp	r3, #0
 800c236:	d013      	beq.n	800c260 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c238:	f7fc fee2 	bl	8009000 <HAL_GetTick>
 800c23c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c23e:	e008      	b.n	800c252 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c240:	f7fc fede 	bl	8009000 <HAL_GetTick>
 800c244:	4602      	mov	r2, r0
 800c246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c248:	1ad3      	subs	r3, r2, r3
 800c24a:	2b64      	cmp	r3, #100	; 0x64
 800c24c:	d901      	bls.n	800c252 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800c24e:	2303      	movs	r3, #3
 800c250:	e3d4      	b.n	800c9fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c252:	4b63      	ldr	r3, [pc, #396]	; (800c3e0 <HAL_RCC_OscConfig+0x288>)
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d0f0      	beq.n	800c240 <HAL_RCC_OscConfig+0xe8>
 800c25e:	e014      	b.n	800c28a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c260:	f7fc fece 	bl	8009000 <HAL_GetTick>
 800c264:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c266:	e008      	b.n	800c27a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800c268:	f7fc feca 	bl	8009000 <HAL_GetTick>
 800c26c:	4602      	mov	r2, r0
 800c26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c270:	1ad3      	subs	r3, r2, r3
 800c272:	2b64      	cmp	r3, #100	; 0x64
 800c274:	d901      	bls.n	800c27a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800c276:	2303      	movs	r3, #3
 800c278:	e3c0      	b.n	800c9fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800c27a:	4b59      	ldr	r3, [pc, #356]	; (800c3e0 <HAL_RCC_OscConfig+0x288>)
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c282:	2b00      	cmp	r3, #0
 800c284:	d1f0      	bne.n	800c268 <HAL_RCC_OscConfig+0x110>
 800c286:	e000      	b.n	800c28a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c288:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	f003 0302 	and.w	r3, r3, #2
 800c292:	2b00      	cmp	r3, #0
 800c294:	f000 80ca 	beq.w	800c42c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c298:	4b51      	ldr	r3, [pc, #324]	; (800c3e0 <HAL_RCC_OscConfig+0x288>)
 800c29a:	691b      	ldr	r3, [r3, #16]
 800c29c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c2a0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c2a2:	4b4f      	ldr	r3, [pc, #316]	; (800c3e0 <HAL_RCC_OscConfig+0x288>)
 800c2a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c2a6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800c2a8:	6a3b      	ldr	r3, [r7, #32]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d007      	beq.n	800c2be <HAL_RCC_OscConfig+0x166>
 800c2ae:	6a3b      	ldr	r3, [r7, #32]
 800c2b0:	2b18      	cmp	r3, #24
 800c2b2:	d156      	bne.n	800c362 <HAL_RCC_OscConfig+0x20a>
 800c2b4:	69fb      	ldr	r3, [r7, #28]
 800c2b6:	f003 0303 	and.w	r3, r3, #3
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d151      	bne.n	800c362 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c2be:	4b48      	ldr	r3, [pc, #288]	; (800c3e0 <HAL_RCC_OscConfig+0x288>)
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	f003 0304 	and.w	r3, r3, #4
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d005      	beq.n	800c2d6 <HAL_RCC_OscConfig+0x17e>
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	68db      	ldr	r3, [r3, #12]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d101      	bne.n	800c2d6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	e392      	b.n	800c9fc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800c2d6:	4b42      	ldr	r3, [pc, #264]	; (800c3e0 <HAL_RCC_OscConfig+0x288>)
 800c2d8:	681b      	ldr	r3, [r3, #0]
 800c2da:	f023 0219 	bic.w	r2, r3, #25
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	68db      	ldr	r3, [r3, #12]
 800c2e2:	493f      	ldr	r1, [pc, #252]	; (800c3e0 <HAL_RCC_OscConfig+0x288>)
 800c2e4:	4313      	orrs	r3, r2
 800c2e6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c2e8:	f7fc fe8a 	bl	8009000 <HAL_GetTick>
 800c2ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c2ee:	e008      	b.n	800c302 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c2f0:	f7fc fe86 	bl	8009000 <HAL_GetTick>
 800c2f4:	4602      	mov	r2, r0
 800c2f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2f8:	1ad3      	subs	r3, r2, r3
 800c2fa:	2b02      	cmp	r3, #2
 800c2fc:	d901      	bls.n	800c302 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800c2fe:	2303      	movs	r3, #3
 800c300:	e37c      	b.n	800c9fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c302:	4b37      	ldr	r3, [pc, #220]	; (800c3e0 <HAL_RCC_OscConfig+0x288>)
 800c304:	681b      	ldr	r3, [r3, #0]
 800c306:	f003 0304 	and.w	r3, r3, #4
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d0f0      	beq.n	800c2f0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c30e:	f7fc fea7 	bl	8009060 <HAL_GetREVID>
 800c312:	4603      	mov	r3, r0
 800c314:	f241 0203 	movw	r2, #4099	; 0x1003
 800c318:	4293      	cmp	r3, r2
 800c31a:	d817      	bhi.n	800c34c <HAL_RCC_OscConfig+0x1f4>
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	691b      	ldr	r3, [r3, #16]
 800c320:	2b40      	cmp	r3, #64	; 0x40
 800c322:	d108      	bne.n	800c336 <HAL_RCC_OscConfig+0x1de>
 800c324:	4b2e      	ldr	r3, [pc, #184]	; (800c3e0 <HAL_RCC_OscConfig+0x288>)
 800c326:	685b      	ldr	r3, [r3, #4]
 800c328:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800c32c:	4a2c      	ldr	r2, [pc, #176]	; (800c3e0 <HAL_RCC_OscConfig+0x288>)
 800c32e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c332:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c334:	e07a      	b.n	800c42c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c336:	4b2a      	ldr	r3, [pc, #168]	; (800c3e0 <HAL_RCC_OscConfig+0x288>)
 800c338:	685b      	ldr	r3, [r3, #4]
 800c33a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	691b      	ldr	r3, [r3, #16]
 800c342:	031b      	lsls	r3, r3, #12
 800c344:	4926      	ldr	r1, [pc, #152]	; (800c3e0 <HAL_RCC_OscConfig+0x288>)
 800c346:	4313      	orrs	r3, r2
 800c348:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c34a:	e06f      	b.n	800c42c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c34c:	4b24      	ldr	r3, [pc, #144]	; (800c3e0 <HAL_RCC_OscConfig+0x288>)
 800c34e:	685b      	ldr	r3, [r3, #4]
 800c350:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	691b      	ldr	r3, [r3, #16]
 800c358:	061b      	lsls	r3, r3, #24
 800c35a:	4921      	ldr	r1, [pc, #132]	; (800c3e0 <HAL_RCC_OscConfig+0x288>)
 800c35c:	4313      	orrs	r3, r2
 800c35e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800c360:	e064      	b.n	800c42c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	68db      	ldr	r3, [r3, #12]
 800c366:	2b00      	cmp	r3, #0
 800c368:	d047      	beq.n	800c3fa <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800c36a:	4b1d      	ldr	r3, [pc, #116]	; (800c3e0 <HAL_RCC_OscConfig+0x288>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	f023 0219 	bic.w	r2, r3, #25
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	68db      	ldr	r3, [r3, #12]
 800c376:	491a      	ldr	r1, [pc, #104]	; (800c3e0 <HAL_RCC_OscConfig+0x288>)
 800c378:	4313      	orrs	r3, r2
 800c37a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c37c:	f7fc fe40 	bl	8009000 <HAL_GetTick>
 800c380:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c382:	e008      	b.n	800c396 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c384:	f7fc fe3c 	bl	8009000 <HAL_GetTick>
 800c388:	4602      	mov	r2, r0
 800c38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c38c:	1ad3      	subs	r3, r2, r3
 800c38e:	2b02      	cmp	r3, #2
 800c390:	d901      	bls.n	800c396 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800c392:	2303      	movs	r3, #3
 800c394:	e332      	b.n	800c9fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c396:	4b12      	ldr	r3, [pc, #72]	; (800c3e0 <HAL_RCC_OscConfig+0x288>)
 800c398:	681b      	ldr	r3, [r3, #0]
 800c39a:	f003 0304 	and.w	r3, r3, #4
 800c39e:	2b00      	cmp	r3, #0
 800c3a0:	d0f0      	beq.n	800c384 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c3a2:	f7fc fe5d 	bl	8009060 <HAL_GetREVID>
 800c3a6:	4603      	mov	r3, r0
 800c3a8:	f241 0203 	movw	r2, #4099	; 0x1003
 800c3ac:	4293      	cmp	r3, r2
 800c3ae:	d819      	bhi.n	800c3e4 <HAL_RCC_OscConfig+0x28c>
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	691b      	ldr	r3, [r3, #16]
 800c3b4:	2b40      	cmp	r3, #64	; 0x40
 800c3b6:	d108      	bne.n	800c3ca <HAL_RCC_OscConfig+0x272>
 800c3b8:	4b09      	ldr	r3, [pc, #36]	; (800c3e0 <HAL_RCC_OscConfig+0x288>)
 800c3ba:	685b      	ldr	r3, [r3, #4]
 800c3bc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800c3c0:	4a07      	ldr	r2, [pc, #28]	; (800c3e0 <HAL_RCC_OscConfig+0x288>)
 800c3c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c3c6:	6053      	str	r3, [r2, #4]
 800c3c8:	e030      	b.n	800c42c <HAL_RCC_OscConfig+0x2d4>
 800c3ca:	4b05      	ldr	r3, [pc, #20]	; (800c3e0 <HAL_RCC_OscConfig+0x288>)
 800c3cc:	685b      	ldr	r3, [r3, #4]
 800c3ce:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800c3d2:	687b      	ldr	r3, [r7, #4]
 800c3d4:	691b      	ldr	r3, [r3, #16]
 800c3d6:	031b      	lsls	r3, r3, #12
 800c3d8:	4901      	ldr	r1, [pc, #4]	; (800c3e0 <HAL_RCC_OscConfig+0x288>)
 800c3da:	4313      	orrs	r3, r2
 800c3dc:	604b      	str	r3, [r1, #4]
 800c3de:	e025      	b.n	800c42c <HAL_RCC_OscConfig+0x2d4>
 800c3e0:	58024400 	.word	0x58024400
 800c3e4:	4b9a      	ldr	r3, [pc, #616]	; (800c650 <HAL_RCC_OscConfig+0x4f8>)
 800c3e6:	685b      	ldr	r3, [r3, #4]
 800c3e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	691b      	ldr	r3, [r3, #16]
 800c3f0:	061b      	lsls	r3, r3, #24
 800c3f2:	4997      	ldr	r1, [pc, #604]	; (800c650 <HAL_RCC_OscConfig+0x4f8>)
 800c3f4:	4313      	orrs	r3, r2
 800c3f6:	604b      	str	r3, [r1, #4]
 800c3f8:	e018      	b.n	800c42c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c3fa:	4b95      	ldr	r3, [pc, #596]	; (800c650 <HAL_RCC_OscConfig+0x4f8>)
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	4a94      	ldr	r2, [pc, #592]	; (800c650 <HAL_RCC_OscConfig+0x4f8>)
 800c400:	f023 0301 	bic.w	r3, r3, #1
 800c404:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c406:	f7fc fdfb 	bl	8009000 <HAL_GetTick>
 800c40a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800c40c:	e008      	b.n	800c420 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800c40e:	f7fc fdf7 	bl	8009000 <HAL_GetTick>
 800c412:	4602      	mov	r2, r0
 800c414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c416:	1ad3      	subs	r3, r2, r3
 800c418:	2b02      	cmp	r3, #2
 800c41a:	d901      	bls.n	800c420 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800c41c:	2303      	movs	r3, #3
 800c41e:	e2ed      	b.n	800c9fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800c420:	4b8b      	ldr	r3, [pc, #556]	; (800c650 <HAL_RCC_OscConfig+0x4f8>)
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	f003 0304 	and.w	r3, r3, #4
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d1f0      	bne.n	800c40e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	f003 0310 	and.w	r3, r3, #16
 800c434:	2b00      	cmp	r3, #0
 800c436:	f000 80a9 	beq.w	800c58c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800c43a:	4b85      	ldr	r3, [pc, #532]	; (800c650 <HAL_RCC_OscConfig+0x4f8>)
 800c43c:	691b      	ldr	r3, [r3, #16]
 800c43e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c442:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800c444:	4b82      	ldr	r3, [pc, #520]	; (800c650 <HAL_RCC_OscConfig+0x4f8>)
 800c446:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c448:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800c44a:	69bb      	ldr	r3, [r7, #24]
 800c44c:	2b08      	cmp	r3, #8
 800c44e:	d007      	beq.n	800c460 <HAL_RCC_OscConfig+0x308>
 800c450:	69bb      	ldr	r3, [r7, #24]
 800c452:	2b18      	cmp	r3, #24
 800c454:	d13a      	bne.n	800c4cc <HAL_RCC_OscConfig+0x374>
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	f003 0303 	and.w	r3, r3, #3
 800c45c:	2b01      	cmp	r3, #1
 800c45e:	d135      	bne.n	800c4cc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c460:	4b7b      	ldr	r3, [pc, #492]	; (800c650 <HAL_RCC_OscConfig+0x4f8>)
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d005      	beq.n	800c478 <HAL_RCC_OscConfig+0x320>
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	69db      	ldr	r3, [r3, #28]
 800c470:	2b80      	cmp	r3, #128	; 0x80
 800c472:	d001      	beq.n	800c478 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800c474:	2301      	movs	r3, #1
 800c476:	e2c1      	b.n	800c9fc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c478:	f7fc fdf2 	bl	8009060 <HAL_GetREVID>
 800c47c:	4603      	mov	r3, r0
 800c47e:	f241 0203 	movw	r2, #4099	; 0x1003
 800c482:	4293      	cmp	r3, r2
 800c484:	d817      	bhi.n	800c4b6 <HAL_RCC_OscConfig+0x35e>
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	6a1b      	ldr	r3, [r3, #32]
 800c48a:	2b20      	cmp	r3, #32
 800c48c:	d108      	bne.n	800c4a0 <HAL_RCC_OscConfig+0x348>
 800c48e:	4b70      	ldr	r3, [pc, #448]	; (800c650 <HAL_RCC_OscConfig+0x4f8>)
 800c490:	685b      	ldr	r3, [r3, #4]
 800c492:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800c496:	4a6e      	ldr	r2, [pc, #440]	; (800c650 <HAL_RCC_OscConfig+0x4f8>)
 800c498:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c49c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c49e:	e075      	b.n	800c58c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c4a0:	4b6b      	ldr	r3, [pc, #428]	; (800c650 <HAL_RCC_OscConfig+0x4f8>)
 800c4a2:	685b      	ldr	r3, [r3, #4]
 800c4a4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	6a1b      	ldr	r3, [r3, #32]
 800c4ac:	069b      	lsls	r3, r3, #26
 800c4ae:	4968      	ldr	r1, [pc, #416]	; (800c650 <HAL_RCC_OscConfig+0x4f8>)
 800c4b0:	4313      	orrs	r3, r2
 800c4b2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c4b4:	e06a      	b.n	800c58c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c4b6:	4b66      	ldr	r3, [pc, #408]	; (800c650 <HAL_RCC_OscConfig+0x4f8>)
 800c4b8:	68db      	ldr	r3, [r3, #12]
 800c4ba:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	6a1b      	ldr	r3, [r3, #32]
 800c4c2:	061b      	lsls	r3, r3, #24
 800c4c4:	4962      	ldr	r1, [pc, #392]	; (800c650 <HAL_RCC_OscConfig+0x4f8>)
 800c4c6:	4313      	orrs	r3, r2
 800c4c8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800c4ca:	e05f      	b.n	800c58c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	69db      	ldr	r3, [r3, #28]
 800c4d0:	2b00      	cmp	r3, #0
 800c4d2:	d042      	beq.n	800c55a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800c4d4:	4b5e      	ldr	r3, [pc, #376]	; (800c650 <HAL_RCC_OscConfig+0x4f8>)
 800c4d6:	681b      	ldr	r3, [r3, #0]
 800c4d8:	4a5d      	ldr	r2, [pc, #372]	; (800c650 <HAL_RCC_OscConfig+0x4f8>)
 800c4da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c4de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c4e0:	f7fc fd8e 	bl	8009000 <HAL_GetTick>
 800c4e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c4e6:	e008      	b.n	800c4fa <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800c4e8:	f7fc fd8a 	bl	8009000 <HAL_GetTick>
 800c4ec:	4602      	mov	r2, r0
 800c4ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f0:	1ad3      	subs	r3, r2, r3
 800c4f2:	2b02      	cmp	r3, #2
 800c4f4:	d901      	bls.n	800c4fa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800c4f6:	2303      	movs	r3, #3
 800c4f8:	e280      	b.n	800c9fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c4fa:	4b55      	ldr	r3, [pc, #340]	; (800c650 <HAL_RCC_OscConfig+0x4f8>)
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c502:	2b00      	cmp	r3, #0
 800c504:	d0f0      	beq.n	800c4e8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c506:	f7fc fdab 	bl	8009060 <HAL_GetREVID>
 800c50a:	4603      	mov	r3, r0
 800c50c:	f241 0203 	movw	r2, #4099	; 0x1003
 800c510:	4293      	cmp	r3, r2
 800c512:	d817      	bhi.n	800c544 <HAL_RCC_OscConfig+0x3ec>
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6a1b      	ldr	r3, [r3, #32]
 800c518:	2b20      	cmp	r3, #32
 800c51a:	d108      	bne.n	800c52e <HAL_RCC_OscConfig+0x3d6>
 800c51c:	4b4c      	ldr	r3, [pc, #304]	; (800c650 <HAL_RCC_OscConfig+0x4f8>)
 800c51e:	685b      	ldr	r3, [r3, #4]
 800c520:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800c524:	4a4a      	ldr	r2, [pc, #296]	; (800c650 <HAL_RCC_OscConfig+0x4f8>)
 800c526:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800c52a:	6053      	str	r3, [r2, #4]
 800c52c:	e02e      	b.n	800c58c <HAL_RCC_OscConfig+0x434>
 800c52e:	4b48      	ldr	r3, [pc, #288]	; (800c650 <HAL_RCC_OscConfig+0x4f8>)
 800c530:	685b      	ldr	r3, [r3, #4]
 800c532:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	6a1b      	ldr	r3, [r3, #32]
 800c53a:	069b      	lsls	r3, r3, #26
 800c53c:	4944      	ldr	r1, [pc, #272]	; (800c650 <HAL_RCC_OscConfig+0x4f8>)
 800c53e:	4313      	orrs	r3, r2
 800c540:	604b      	str	r3, [r1, #4]
 800c542:	e023      	b.n	800c58c <HAL_RCC_OscConfig+0x434>
 800c544:	4b42      	ldr	r3, [pc, #264]	; (800c650 <HAL_RCC_OscConfig+0x4f8>)
 800c546:	68db      	ldr	r3, [r3, #12]
 800c548:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	6a1b      	ldr	r3, [r3, #32]
 800c550:	061b      	lsls	r3, r3, #24
 800c552:	493f      	ldr	r1, [pc, #252]	; (800c650 <HAL_RCC_OscConfig+0x4f8>)
 800c554:	4313      	orrs	r3, r2
 800c556:	60cb      	str	r3, [r1, #12]
 800c558:	e018      	b.n	800c58c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800c55a:	4b3d      	ldr	r3, [pc, #244]	; (800c650 <HAL_RCC_OscConfig+0x4f8>)
 800c55c:	681b      	ldr	r3, [r3, #0]
 800c55e:	4a3c      	ldr	r2, [pc, #240]	; (800c650 <HAL_RCC_OscConfig+0x4f8>)
 800c560:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c564:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c566:	f7fc fd4b 	bl	8009000 <HAL_GetTick>
 800c56a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800c56c:	e008      	b.n	800c580 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800c56e:	f7fc fd47 	bl	8009000 <HAL_GetTick>
 800c572:	4602      	mov	r2, r0
 800c574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c576:	1ad3      	subs	r3, r2, r3
 800c578:	2b02      	cmp	r3, #2
 800c57a:	d901      	bls.n	800c580 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800c57c:	2303      	movs	r3, #3
 800c57e:	e23d      	b.n	800c9fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800c580:	4b33      	ldr	r3, [pc, #204]	; (800c650 <HAL_RCC_OscConfig+0x4f8>)
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d1f0      	bne.n	800c56e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	f003 0308 	and.w	r3, r3, #8
 800c594:	2b00      	cmp	r3, #0
 800c596:	d036      	beq.n	800c606 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	695b      	ldr	r3, [r3, #20]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d019      	beq.n	800c5d4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c5a0:	4b2b      	ldr	r3, [pc, #172]	; (800c650 <HAL_RCC_OscConfig+0x4f8>)
 800c5a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5a4:	4a2a      	ldr	r2, [pc, #168]	; (800c650 <HAL_RCC_OscConfig+0x4f8>)
 800c5a6:	f043 0301 	orr.w	r3, r3, #1
 800c5aa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c5ac:	f7fc fd28 	bl	8009000 <HAL_GetTick>
 800c5b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c5b2:	e008      	b.n	800c5c6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c5b4:	f7fc fd24 	bl	8009000 <HAL_GetTick>
 800c5b8:	4602      	mov	r2, r0
 800c5ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5bc:	1ad3      	subs	r3, r2, r3
 800c5be:	2b02      	cmp	r3, #2
 800c5c0:	d901      	bls.n	800c5c6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800c5c2:	2303      	movs	r3, #3
 800c5c4:	e21a      	b.n	800c9fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c5c6:	4b22      	ldr	r3, [pc, #136]	; (800c650 <HAL_RCC_OscConfig+0x4f8>)
 800c5c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5ca:	f003 0302 	and.w	r3, r3, #2
 800c5ce:	2b00      	cmp	r3, #0
 800c5d0:	d0f0      	beq.n	800c5b4 <HAL_RCC_OscConfig+0x45c>
 800c5d2:	e018      	b.n	800c606 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c5d4:	4b1e      	ldr	r3, [pc, #120]	; (800c650 <HAL_RCC_OscConfig+0x4f8>)
 800c5d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5d8:	4a1d      	ldr	r2, [pc, #116]	; (800c650 <HAL_RCC_OscConfig+0x4f8>)
 800c5da:	f023 0301 	bic.w	r3, r3, #1
 800c5de:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c5e0:	f7fc fd0e 	bl	8009000 <HAL_GetTick>
 800c5e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c5e6:	e008      	b.n	800c5fa <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c5e8:	f7fc fd0a 	bl	8009000 <HAL_GetTick>
 800c5ec:	4602      	mov	r2, r0
 800c5ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5f0:	1ad3      	subs	r3, r2, r3
 800c5f2:	2b02      	cmp	r3, #2
 800c5f4:	d901      	bls.n	800c5fa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800c5f6:	2303      	movs	r3, #3
 800c5f8:	e200      	b.n	800c9fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c5fa:	4b15      	ldr	r3, [pc, #84]	; (800c650 <HAL_RCC_OscConfig+0x4f8>)
 800c5fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5fe:	f003 0302 	and.w	r3, r3, #2
 800c602:	2b00      	cmp	r3, #0
 800c604:	d1f0      	bne.n	800c5e8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	f003 0320 	and.w	r3, r3, #32
 800c60e:	2b00      	cmp	r3, #0
 800c610:	d039      	beq.n	800c686 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	699b      	ldr	r3, [r3, #24]
 800c616:	2b00      	cmp	r3, #0
 800c618:	d01c      	beq.n	800c654 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c61a:	4b0d      	ldr	r3, [pc, #52]	; (800c650 <HAL_RCC_OscConfig+0x4f8>)
 800c61c:	681b      	ldr	r3, [r3, #0]
 800c61e:	4a0c      	ldr	r2, [pc, #48]	; (800c650 <HAL_RCC_OscConfig+0x4f8>)
 800c620:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800c624:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800c626:	f7fc fceb 	bl	8009000 <HAL_GetTick>
 800c62a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800c62c:	e008      	b.n	800c640 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c62e:	f7fc fce7 	bl	8009000 <HAL_GetTick>
 800c632:	4602      	mov	r2, r0
 800c634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c636:	1ad3      	subs	r3, r2, r3
 800c638:	2b02      	cmp	r3, #2
 800c63a:	d901      	bls.n	800c640 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800c63c:	2303      	movs	r3, #3
 800c63e:	e1dd      	b.n	800c9fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800c640:	4b03      	ldr	r3, [pc, #12]	; (800c650 <HAL_RCC_OscConfig+0x4f8>)
 800c642:	681b      	ldr	r3, [r3, #0]
 800c644:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d0f0      	beq.n	800c62e <HAL_RCC_OscConfig+0x4d6>
 800c64c:	e01b      	b.n	800c686 <HAL_RCC_OscConfig+0x52e>
 800c64e:	bf00      	nop
 800c650:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c654:	4b9b      	ldr	r3, [pc, #620]	; (800c8c4 <HAL_RCC_OscConfig+0x76c>)
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	4a9a      	ldr	r2, [pc, #616]	; (800c8c4 <HAL_RCC_OscConfig+0x76c>)
 800c65a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c65e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800c660:	f7fc fcce 	bl	8009000 <HAL_GetTick>
 800c664:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800c666:	e008      	b.n	800c67a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c668:	f7fc fcca 	bl	8009000 <HAL_GetTick>
 800c66c:	4602      	mov	r2, r0
 800c66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c670:	1ad3      	subs	r3, r2, r3
 800c672:	2b02      	cmp	r3, #2
 800c674:	d901      	bls.n	800c67a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800c676:	2303      	movs	r3, #3
 800c678:	e1c0      	b.n	800c9fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800c67a:	4b92      	ldr	r3, [pc, #584]	; (800c8c4 <HAL_RCC_OscConfig+0x76c>)
 800c67c:	681b      	ldr	r3, [r3, #0]
 800c67e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800c682:	2b00      	cmp	r3, #0
 800c684:	d1f0      	bne.n	800c668 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	f003 0304 	and.w	r3, r3, #4
 800c68e:	2b00      	cmp	r3, #0
 800c690:	f000 8081 	beq.w	800c796 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800c694:	4b8c      	ldr	r3, [pc, #560]	; (800c8c8 <HAL_RCC_OscConfig+0x770>)
 800c696:	681b      	ldr	r3, [r3, #0]
 800c698:	4a8b      	ldr	r2, [pc, #556]	; (800c8c8 <HAL_RCC_OscConfig+0x770>)
 800c69a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c69e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c6a0:	f7fc fcae 	bl	8009000 <HAL_GetTick>
 800c6a4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c6a6:	e008      	b.n	800c6ba <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c6a8:	f7fc fcaa 	bl	8009000 <HAL_GetTick>
 800c6ac:	4602      	mov	r2, r0
 800c6ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6b0:	1ad3      	subs	r3, r2, r3
 800c6b2:	2b64      	cmp	r3, #100	; 0x64
 800c6b4:	d901      	bls.n	800c6ba <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800c6b6:	2303      	movs	r3, #3
 800c6b8:	e1a0      	b.n	800c9fc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c6ba:	4b83      	ldr	r3, [pc, #524]	; (800c8c8 <HAL_RCC_OscConfig+0x770>)
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d0f0      	beq.n	800c6a8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	689b      	ldr	r3, [r3, #8]
 800c6ca:	2b01      	cmp	r3, #1
 800c6cc:	d106      	bne.n	800c6dc <HAL_RCC_OscConfig+0x584>
 800c6ce:	4b7d      	ldr	r3, [pc, #500]	; (800c8c4 <HAL_RCC_OscConfig+0x76c>)
 800c6d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6d2:	4a7c      	ldr	r2, [pc, #496]	; (800c8c4 <HAL_RCC_OscConfig+0x76c>)
 800c6d4:	f043 0301 	orr.w	r3, r3, #1
 800c6d8:	6713      	str	r3, [r2, #112]	; 0x70
 800c6da:	e02d      	b.n	800c738 <HAL_RCC_OscConfig+0x5e0>
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	689b      	ldr	r3, [r3, #8]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d10c      	bne.n	800c6fe <HAL_RCC_OscConfig+0x5a6>
 800c6e4:	4b77      	ldr	r3, [pc, #476]	; (800c8c4 <HAL_RCC_OscConfig+0x76c>)
 800c6e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6e8:	4a76      	ldr	r2, [pc, #472]	; (800c8c4 <HAL_RCC_OscConfig+0x76c>)
 800c6ea:	f023 0301 	bic.w	r3, r3, #1
 800c6ee:	6713      	str	r3, [r2, #112]	; 0x70
 800c6f0:	4b74      	ldr	r3, [pc, #464]	; (800c8c4 <HAL_RCC_OscConfig+0x76c>)
 800c6f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c6f4:	4a73      	ldr	r2, [pc, #460]	; (800c8c4 <HAL_RCC_OscConfig+0x76c>)
 800c6f6:	f023 0304 	bic.w	r3, r3, #4
 800c6fa:	6713      	str	r3, [r2, #112]	; 0x70
 800c6fc:	e01c      	b.n	800c738 <HAL_RCC_OscConfig+0x5e0>
 800c6fe:	687b      	ldr	r3, [r7, #4]
 800c700:	689b      	ldr	r3, [r3, #8]
 800c702:	2b05      	cmp	r3, #5
 800c704:	d10c      	bne.n	800c720 <HAL_RCC_OscConfig+0x5c8>
 800c706:	4b6f      	ldr	r3, [pc, #444]	; (800c8c4 <HAL_RCC_OscConfig+0x76c>)
 800c708:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c70a:	4a6e      	ldr	r2, [pc, #440]	; (800c8c4 <HAL_RCC_OscConfig+0x76c>)
 800c70c:	f043 0304 	orr.w	r3, r3, #4
 800c710:	6713      	str	r3, [r2, #112]	; 0x70
 800c712:	4b6c      	ldr	r3, [pc, #432]	; (800c8c4 <HAL_RCC_OscConfig+0x76c>)
 800c714:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c716:	4a6b      	ldr	r2, [pc, #428]	; (800c8c4 <HAL_RCC_OscConfig+0x76c>)
 800c718:	f043 0301 	orr.w	r3, r3, #1
 800c71c:	6713      	str	r3, [r2, #112]	; 0x70
 800c71e:	e00b      	b.n	800c738 <HAL_RCC_OscConfig+0x5e0>
 800c720:	4b68      	ldr	r3, [pc, #416]	; (800c8c4 <HAL_RCC_OscConfig+0x76c>)
 800c722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c724:	4a67      	ldr	r2, [pc, #412]	; (800c8c4 <HAL_RCC_OscConfig+0x76c>)
 800c726:	f023 0301 	bic.w	r3, r3, #1
 800c72a:	6713      	str	r3, [r2, #112]	; 0x70
 800c72c:	4b65      	ldr	r3, [pc, #404]	; (800c8c4 <HAL_RCC_OscConfig+0x76c>)
 800c72e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c730:	4a64      	ldr	r2, [pc, #400]	; (800c8c4 <HAL_RCC_OscConfig+0x76c>)
 800c732:	f023 0304 	bic.w	r3, r3, #4
 800c736:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	689b      	ldr	r3, [r3, #8]
 800c73c:	2b00      	cmp	r3, #0
 800c73e:	d015      	beq.n	800c76c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c740:	f7fc fc5e 	bl	8009000 <HAL_GetTick>
 800c744:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c746:	e00a      	b.n	800c75e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c748:	f7fc fc5a 	bl	8009000 <HAL_GetTick>
 800c74c:	4602      	mov	r2, r0
 800c74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c750:	1ad3      	subs	r3, r2, r3
 800c752:	f241 3288 	movw	r2, #5000	; 0x1388
 800c756:	4293      	cmp	r3, r2
 800c758:	d901      	bls.n	800c75e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800c75a:	2303      	movs	r3, #3
 800c75c:	e14e      	b.n	800c9fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c75e:	4b59      	ldr	r3, [pc, #356]	; (800c8c4 <HAL_RCC_OscConfig+0x76c>)
 800c760:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c762:	f003 0302 	and.w	r3, r3, #2
 800c766:	2b00      	cmp	r3, #0
 800c768:	d0ee      	beq.n	800c748 <HAL_RCC_OscConfig+0x5f0>
 800c76a:	e014      	b.n	800c796 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c76c:	f7fc fc48 	bl	8009000 <HAL_GetTick>
 800c770:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c772:	e00a      	b.n	800c78a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c774:	f7fc fc44 	bl	8009000 <HAL_GetTick>
 800c778:	4602      	mov	r2, r0
 800c77a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c77c:	1ad3      	subs	r3, r2, r3
 800c77e:	f241 3288 	movw	r2, #5000	; 0x1388
 800c782:	4293      	cmp	r3, r2
 800c784:	d901      	bls.n	800c78a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800c786:	2303      	movs	r3, #3
 800c788:	e138      	b.n	800c9fc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c78a:	4b4e      	ldr	r3, [pc, #312]	; (800c8c4 <HAL_RCC_OscConfig+0x76c>)
 800c78c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c78e:	f003 0302 	and.w	r3, r3, #2
 800c792:	2b00      	cmp	r3, #0
 800c794:	d1ee      	bne.n	800c774 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c796:	687b      	ldr	r3, [r7, #4]
 800c798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	f000 812d 	beq.w	800c9fa <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800c7a0:	4b48      	ldr	r3, [pc, #288]	; (800c8c4 <HAL_RCC_OscConfig+0x76c>)
 800c7a2:	691b      	ldr	r3, [r3, #16]
 800c7a4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800c7a8:	2b18      	cmp	r3, #24
 800c7aa:	f000 80bd 	beq.w	800c928 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7b2:	2b02      	cmp	r3, #2
 800c7b4:	f040 809e 	bne.w	800c8f4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c7b8:	4b42      	ldr	r3, [pc, #264]	; (800c8c4 <HAL_RCC_OscConfig+0x76c>)
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	4a41      	ldr	r2, [pc, #260]	; (800c8c4 <HAL_RCC_OscConfig+0x76c>)
 800c7be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c7c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7c4:	f7fc fc1c 	bl	8009000 <HAL_GetTick>
 800c7c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c7ca:	e008      	b.n	800c7de <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c7cc:	f7fc fc18 	bl	8009000 <HAL_GetTick>
 800c7d0:	4602      	mov	r2, r0
 800c7d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7d4:	1ad3      	subs	r3, r2, r3
 800c7d6:	2b02      	cmp	r3, #2
 800c7d8:	d901      	bls.n	800c7de <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800c7da:	2303      	movs	r3, #3
 800c7dc:	e10e      	b.n	800c9fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c7de:	4b39      	ldr	r3, [pc, #228]	; (800c8c4 <HAL_RCC_OscConfig+0x76c>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d1f0      	bne.n	800c7cc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c7ea:	4b36      	ldr	r3, [pc, #216]	; (800c8c4 <HAL_RCC_OscConfig+0x76c>)
 800c7ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c7ee:	4b37      	ldr	r3, [pc, #220]	; (800c8cc <HAL_RCC_OscConfig+0x774>)
 800c7f0:	4013      	ands	r3, r2
 800c7f2:	687a      	ldr	r2, [r7, #4]
 800c7f4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800c7f6:	687a      	ldr	r2, [r7, #4]
 800c7f8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800c7fa:	0112      	lsls	r2, r2, #4
 800c7fc:	430a      	orrs	r2, r1
 800c7fe:	4931      	ldr	r1, [pc, #196]	; (800c8c4 <HAL_RCC_OscConfig+0x76c>)
 800c800:	4313      	orrs	r3, r2
 800c802:	628b      	str	r3, [r1, #40]	; 0x28
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c808:	3b01      	subs	r3, #1
 800c80a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c812:	3b01      	subs	r3, #1
 800c814:	025b      	lsls	r3, r3, #9
 800c816:	b29b      	uxth	r3, r3
 800c818:	431a      	orrs	r2, r3
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c81e:	3b01      	subs	r3, #1
 800c820:	041b      	lsls	r3, r3, #16
 800c822:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800c826:	431a      	orrs	r2, r3
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c82c:	3b01      	subs	r3, #1
 800c82e:	061b      	lsls	r3, r3, #24
 800c830:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800c834:	4923      	ldr	r1, [pc, #140]	; (800c8c4 <HAL_RCC_OscConfig+0x76c>)
 800c836:	4313      	orrs	r3, r2
 800c838:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800c83a:	4b22      	ldr	r3, [pc, #136]	; (800c8c4 <HAL_RCC_OscConfig+0x76c>)
 800c83c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c83e:	4a21      	ldr	r2, [pc, #132]	; (800c8c4 <HAL_RCC_OscConfig+0x76c>)
 800c840:	f023 0301 	bic.w	r3, r3, #1
 800c844:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c846:	4b1f      	ldr	r3, [pc, #124]	; (800c8c4 <HAL_RCC_OscConfig+0x76c>)
 800c848:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c84a:	4b21      	ldr	r3, [pc, #132]	; (800c8d0 <HAL_RCC_OscConfig+0x778>)
 800c84c:	4013      	ands	r3, r2
 800c84e:	687a      	ldr	r2, [r7, #4]
 800c850:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800c852:	00d2      	lsls	r2, r2, #3
 800c854:	491b      	ldr	r1, [pc, #108]	; (800c8c4 <HAL_RCC_OscConfig+0x76c>)
 800c856:	4313      	orrs	r3, r2
 800c858:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800c85a:	4b1a      	ldr	r3, [pc, #104]	; (800c8c4 <HAL_RCC_OscConfig+0x76c>)
 800c85c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c85e:	f023 020c 	bic.w	r2, r3, #12
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c866:	4917      	ldr	r1, [pc, #92]	; (800c8c4 <HAL_RCC_OscConfig+0x76c>)
 800c868:	4313      	orrs	r3, r2
 800c86a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800c86c:	4b15      	ldr	r3, [pc, #84]	; (800c8c4 <HAL_RCC_OscConfig+0x76c>)
 800c86e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c870:	f023 0202 	bic.w	r2, r3, #2
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c878:	4912      	ldr	r1, [pc, #72]	; (800c8c4 <HAL_RCC_OscConfig+0x76c>)
 800c87a:	4313      	orrs	r3, r2
 800c87c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c87e:	4b11      	ldr	r3, [pc, #68]	; (800c8c4 <HAL_RCC_OscConfig+0x76c>)
 800c880:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c882:	4a10      	ldr	r2, [pc, #64]	; (800c8c4 <HAL_RCC_OscConfig+0x76c>)
 800c884:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c888:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c88a:	4b0e      	ldr	r3, [pc, #56]	; (800c8c4 <HAL_RCC_OscConfig+0x76c>)
 800c88c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c88e:	4a0d      	ldr	r2, [pc, #52]	; (800c8c4 <HAL_RCC_OscConfig+0x76c>)
 800c890:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800c894:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800c896:	4b0b      	ldr	r3, [pc, #44]	; (800c8c4 <HAL_RCC_OscConfig+0x76c>)
 800c898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c89a:	4a0a      	ldr	r2, [pc, #40]	; (800c8c4 <HAL_RCC_OscConfig+0x76c>)
 800c89c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c8a0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800c8a2:	4b08      	ldr	r3, [pc, #32]	; (800c8c4 <HAL_RCC_OscConfig+0x76c>)
 800c8a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8a6:	4a07      	ldr	r2, [pc, #28]	; (800c8c4 <HAL_RCC_OscConfig+0x76c>)
 800c8a8:	f043 0301 	orr.w	r3, r3, #1
 800c8ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c8ae:	4b05      	ldr	r3, [pc, #20]	; (800c8c4 <HAL_RCC_OscConfig+0x76c>)
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	4a04      	ldr	r2, [pc, #16]	; (800c8c4 <HAL_RCC_OscConfig+0x76c>)
 800c8b4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c8b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c8ba:	f7fc fba1 	bl	8009000 <HAL_GetTick>
 800c8be:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c8c0:	e011      	b.n	800c8e6 <HAL_RCC_OscConfig+0x78e>
 800c8c2:	bf00      	nop
 800c8c4:	58024400 	.word	0x58024400
 800c8c8:	58024800 	.word	0x58024800
 800c8cc:	fffffc0c 	.word	0xfffffc0c
 800c8d0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c8d4:	f7fc fb94 	bl	8009000 <HAL_GetTick>
 800c8d8:	4602      	mov	r2, r0
 800c8da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8dc:	1ad3      	subs	r3, r2, r3
 800c8de:	2b02      	cmp	r3, #2
 800c8e0:	d901      	bls.n	800c8e6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800c8e2:	2303      	movs	r3, #3
 800c8e4:	e08a      	b.n	800c9fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c8e6:	4b47      	ldr	r3, [pc, #284]	; (800ca04 <HAL_RCC_OscConfig+0x8ac>)
 800c8e8:	681b      	ldr	r3, [r3, #0]
 800c8ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c8ee:	2b00      	cmp	r3, #0
 800c8f0:	d0f0      	beq.n	800c8d4 <HAL_RCC_OscConfig+0x77c>
 800c8f2:	e082      	b.n	800c9fa <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c8f4:	4b43      	ldr	r3, [pc, #268]	; (800ca04 <HAL_RCC_OscConfig+0x8ac>)
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	4a42      	ldr	r2, [pc, #264]	; (800ca04 <HAL_RCC_OscConfig+0x8ac>)
 800c8fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800c8fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c900:	f7fc fb7e 	bl	8009000 <HAL_GetTick>
 800c904:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c906:	e008      	b.n	800c91a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c908:	f7fc fb7a 	bl	8009000 <HAL_GetTick>
 800c90c:	4602      	mov	r2, r0
 800c90e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c910:	1ad3      	subs	r3, r2, r3
 800c912:	2b02      	cmp	r3, #2
 800c914:	d901      	bls.n	800c91a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800c916:	2303      	movs	r3, #3
 800c918:	e070      	b.n	800c9fc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c91a:	4b3a      	ldr	r3, [pc, #232]	; (800ca04 <HAL_RCC_OscConfig+0x8ac>)
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c922:	2b00      	cmp	r3, #0
 800c924:	d1f0      	bne.n	800c908 <HAL_RCC_OscConfig+0x7b0>
 800c926:	e068      	b.n	800c9fa <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800c928:	4b36      	ldr	r3, [pc, #216]	; (800ca04 <HAL_RCC_OscConfig+0x8ac>)
 800c92a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c92c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800c92e:	4b35      	ldr	r3, [pc, #212]	; (800ca04 <HAL_RCC_OscConfig+0x8ac>)
 800c930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c932:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c938:	2b01      	cmp	r3, #1
 800c93a:	d031      	beq.n	800c9a0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c93c:	693b      	ldr	r3, [r7, #16]
 800c93e:	f003 0203 	and.w	r2, r3, #3
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c946:	429a      	cmp	r2, r3
 800c948:	d12a      	bne.n	800c9a0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c94a:	693b      	ldr	r3, [r7, #16]
 800c94c:	091b      	lsrs	r3, r3, #4
 800c94e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c956:	429a      	cmp	r2, r3
 800c958:	d122      	bne.n	800c9a0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c964:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c966:	429a      	cmp	r2, r3
 800c968:	d11a      	bne.n	800c9a0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c96a:	68fb      	ldr	r3, [r7, #12]
 800c96c:	0a5b      	lsrs	r3, r3, #9
 800c96e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c976:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c978:	429a      	cmp	r2, r3
 800c97a:	d111      	bne.n	800c9a0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	0c1b      	lsrs	r3, r3, #16
 800c980:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c988:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c98a:	429a      	cmp	r2, r3
 800c98c:	d108      	bne.n	800c9a0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800c98e:	68fb      	ldr	r3, [r7, #12]
 800c990:	0e1b      	lsrs	r3, r3, #24
 800c992:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c99a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c99c:	429a      	cmp	r2, r3
 800c99e:	d001      	beq.n	800c9a4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800c9a0:	2301      	movs	r3, #1
 800c9a2:	e02b      	b.n	800c9fc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800c9a4:	4b17      	ldr	r3, [pc, #92]	; (800ca04 <HAL_RCC_OscConfig+0x8ac>)
 800c9a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c9a8:	08db      	lsrs	r3, r3, #3
 800c9aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c9ae:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c9b4:	693a      	ldr	r2, [r7, #16]
 800c9b6:	429a      	cmp	r2, r3
 800c9b8:	d01f      	beq.n	800c9fa <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800c9ba:	4b12      	ldr	r3, [pc, #72]	; (800ca04 <HAL_RCC_OscConfig+0x8ac>)
 800c9bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9be:	4a11      	ldr	r2, [pc, #68]	; (800ca04 <HAL_RCC_OscConfig+0x8ac>)
 800c9c0:	f023 0301 	bic.w	r3, r3, #1
 800c9c4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c9c6:	f7fc fb1b 	bl	8009000 <HAL_GetTick>
 800c9ca:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800c9cc:	bf00      	nop
 800c9ce:	f7fc fb17 	bl	8009000 <HAL_GetTick>
 800c9d2:	4602      	mov	r2, r0
 800c9d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9d6:	4293      	cmp	r3, r2
 800c9d8:	d0f9      	beq.n	800c9ce <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c9da:	4b0a      	ldr	r3, [pc, #40]	; (800ca04 <HAL_RCC_OscConfig+0x8ac>)
 800c9dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c9de:	4b0a      	ldr	r3, [pc, #40]	; (800ca08 <HAL_RCC_OscConfig+0x8b0>)
 800c9e0:	4013      	ands	r3, r2
 800c9e2:	687a      	ldr	r2, [r7, #4]
 800c9e4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800c9e6:	00d2      	lsls	r2, r2, #3
 800c9e8:	4906      	ldr	r1, [pc, #24]	; (800ca04 <HAL_RCC_OscConfig+0x8ac>)
 800c9ea:	4313      	orrs	r3, r2
 800c9ec:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800c9ee:	4b05      	ldr	r3, [pc, #20]	; (800ca04 <HAL_RCC_OscConfig+0x8ac>)
 800c9f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9f2:	4a04      	ldr	r2, [pc, #16]	; (800ca04 <HAL_RCC_OscConfig+0x8ac>)
 800c9f4:	f043 0301 	orr.w	r3, r3, #1
 800c9f8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800c9fa:	2300      	movs	r3, #0
}
 800c9fc:	4618      	mov	r0, r3
 800c9fe:	3730      	adds	r7, #48	; 0x30
 800ca00:	46bd      	mov	sp, r7
 800ca02:	bd80      	pop	{r7, pc}
 800ca04:	58024400 	.word	0x58024400
 800ca08:	ffff0007 	.word	0xffff0007

0800ca0c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800ca0c:	b580      	push	{r7, lr}
 800ca0e:	b086      	sub	sp, #24
 800ca10:	af00      	add	r7, sp, #0
 800ca12:	6078      	str	r0, [r7, #4]
 800ca14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d101      	bne.n	800ca20 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800ca1c:	2301      	movs	r3, #1
 800ca1e:	e19c      	b.n	800cd5a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800ca20:	4b8a      	ldr	r3, [pc, #552]	; (800cc4c <HAL_RCC_ClockConfig+0x240>)
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	f003 030f 	and.w	r3, r3, #15
 800ca28:	683a      	ldr	r2, [r7, #0]
 800ca2a:	429a      	cmp	r2, r3
 800ca2c:	d910      	bls.n	800ca50 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800ca2e:	4b87      	ldr	r3, [pc, #540]	; (800cc4c <HAL_RCC_ClockConfig+0x240>)
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	f023 020f 	bic.w	r2, r3, #15
 800ca36:	4985      	ldr	r1, [pc, #532]	; (800cc4c <HAL_RCC_ClockConfig+0x240>)
 800ca38:	683b      	ldr	r3, [r7, #0]
 800ca3a:	4313      	orrs	r3, r2
 800ca3c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800ca3e:	4b83      	ldr	r3, [pc, #524]	; (800cc4c <HAL_RCC_ClockConfig+0x240>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	f003 030f 	and.w	r3, r3, #15
 800ca46:	683a      	ldr	r2, [r7, #0]
 800ca48:	429a      	cmp	r2, r3
 800ca4a:	d001      	beq.n	800ca50 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800ca4c:	2301      	movs	r3, #1
 800ca4e:	e184      	b.n	800cd5a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	f003 0304 	and.w	r3, r3, #4
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	d010      	beq.n	800ca7e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800ca5c:	687b      	ldr	r3, [r7, #4]
 800ca5e:	691a      	ldr	r2, [r3, #16]
 800ca60:	4b7b      	ldr	r3, [pc, #492]	; (800cc50 <HAL_RCC_ClockConfig+0x244>)
 800ca62:	699b      	ldr	r3, [r3, #24]
 800ca64:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ca68:	429a      	cmp	r2, r3
 800ca6a:	d908      	bls.n	800ca7e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800ca6c:	4b78      	ldr	r3, [pc, #480]	; (800cc50 <HAL_RCC_ClockConfig+0x244>)
 800ca6e:	699b      	ldr	r3, [r3, #24]
 800ca70:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800ca74:	687b      	ldr	r3, [r7, #4]
 800ca76:	691b      	ldr	r3, [r3, #16]
 800ca78:	4975      	ldr	r1, [pc, #468]	; (800cc50 <HAL_RCC_ClockConfig+0x244>)
 800ca7a:	4313      	orrs	r3, r2
 800ca7c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	f003 0308 	and.w	r3, r3, #8
 800ca86:	2b00      	cmp	r3, #0
 800ca88:	d010      	beq.n	800caac <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	695a      	ldr	r2, [r3, #20]
 800ca8e:	4b70      	ldr	r3, [pc, #448]	; (800cc50 <HAL_RCC_ClockConfig+0x244>)
 800ca90:	69db      	ldr	r3, [r3, #28]
 800ca92:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ca96:	429a      	cmp	r2, r3
 800ca98:	d908      	bls.n	800caac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800ca9a:	4b6d      	ldr	r3, [pc, #436]	; (800cc50 <HAL_RCC_ClockConfig+0x244>)
 800ca9c:	69db      	ldr	r3, [r3, #28]
 800ca9e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	695b      	ldr	r3, [r3, #20]
 800caa6:	496a      	ldr	r1, [pc, #424]	; (800cc50 <HAL_RCC_ClockConfig+0x244>)
 800caa8:	4313      	orrs	r3, r2
 800caaa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800caac:	687b      	ldr	r3, [r7, #4]
 800caae:	681b      	ldr	r3, [r3, #0]
 800cab0:	f003 0310 	and.w	r3, r3, #16
 800cab4:	2b00      	cmp	r3, #0
 800cab6:	d010      	beq.n	800cada <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	699a      	ldr	r2, [r3, #24]
 800cabc:	4b64      	ldr	r3, [pc, #400]	; (800cc50 <HAL_RCC_ClockConfig+0x244>)
 800cabe:	69db      	ldr	r3, [r3, #28]
 800cac0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cac4:	429a      	cmp	r2, r3
 800cac6:	d908      	bls.n	800cada <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800cac8:	4b61      	ldr	r3, [pc, #388]	; (800cc50 <HAL_RCC_ClockConfig+0x244>)
 800caca:	69db      	ldr	r3, [r3, #28]
 800cacc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	699b      	ldr	r3, [r3, #24]
 800cad4:	495e      	ldr	r1, [pc, #376]	; (800cc50 <HAL_RCC_ClockConfig+0x244>)
 800cad6:	4313      	orrs	r3, r2
 800cad8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	f003 0320 	and.w	r3, r3, #32
 800cae2:	2b00      	cmp	r3, #0
 800cae4:	d010      	beq.n	800cb08 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	69da      	ldr	r2, [r3, #28]
 800caea:	4b59      	ldr	r3, [pc, #356]	; (800cc50 <HAL_RCC_ClockConfig+0x244>)
 800caec:	6a1b      	ldr	r3, [r3, #32]
 800caee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800caf2:	429a      	cmp	r2, r3
 800caf4:	d908      	bls.n	800cb08 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800caf6:	4b56      	ldr	r3, [pc, #344]	; (800cc50 <HAL_RCC_ClockConfig+0x244>)
 800caf8:	6a1b      	ldr	r3, [r3, #32]
 800cafa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800cafe:	687b      	ldr	r3, [r7, #4]
 800cb00:	69db      	ldr	r3, [r3, #28]
 800cb02:	4953      	ldr	r1, [pc, #332]	; (800cc50 <HAL_RCC_ClockConfig+0x244>)
 800cb04:	4313      	orrs	r3, r2
 800cb06:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cb08:	687b      	ldr	r3, [r7, #4]
 800cb0a:	681b      	ldr	r3, [r3, #0]
 800cb0c:	f003 0302 	and.w	r3, r3, #2
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d010      	beq.n	800cb36 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	68da      	ldr	r2, [r3, #12]
 800cb18:	4b4d      	ldr	r3, [pc, #308]	; (800cc50 <HAL_RCC_ClockConfig+0x244>)
 800cb1a:	699b      	ldr	r3, [r3, #24]
 800cb1c:	f003 030f 	and.w	r3, r3, #15
 800cb20:	429a      	cmp	r2, r3
 800cb22:	d908      	bls.n	800cb36 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cb24:	4b4a      	ldr	r3, [pc, #296]	; (800cc50 <HAL_RCC_ClockConfig+0x244>)
 800cb26:	699b      	ldr	r3, [r3, #24]
 800cb28:	f023 020f 	bic.w	r2, r3, #15
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	68db      	ldr	r3, [r3, #12]
 800cb30:	4947      	ldr	r1, [pc, #284]	; (800cc50 <HAL_RCC_ClockConfig+0x244>)
 800cb32:	4313      	orrs	r3, r2
 800cb34:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800cb36:	687b      	ldr	r3, [r7, #4]
 800cb38:	681b      	ldr	r3, [r3, #0]
 800cb3a:	f003 0301 	and.w	r3, r3, #1
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d055      	beq.n	800cbee <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800cb42:	4b43      	ldr	r3, [pc, #268]	; (800cc50 <HAL_RCC_ClockConfig+0x244>)
 800cb44:	699b      	ldr	r3, [r3, #24]
 800cb46:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	689b      	ldr	r3, [r3, #8]
 800cb4e:	4940      	ldr	r1, [pc, #256]	; (800cc50 <HAL_RCC_ClockConfig+0x244>)
 800cb50:	4313      	orrs	r3, r2
 800cb52:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	685b      	ldr	r3, [r3, #4]
 800cb58:	2b02      	cmp	r3, #2
 800cb5a:	d107      	bne.n	800cb6c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800cb5c:	4b3c      	ldr	r3, [pc, #240]	; (800cc50 <HAL_RCC_ClockConfig+0x244>)
 800cb5e:	681b      	ldr	r3, [r3, #0]
 800cb60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800cb64:	2b00      	cmp	r3, #0
 800cb66:	d121      	bne.n	800cbac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800cb68:	2301      	movs	r3, #1
 800cb6a:	e0f6      	b.n	800cd5a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	685b      	ldr	r3, [r3, #4]
 800cb70:	2b03      	cmp	r3, #3
 800cb72:	d107      	bne.n	800cb84 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800cb74:	4b36      	ldr	r3, [pc, #216]	; (800cc50 <HAL_RCC_ClockConfig+0x244>)
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d115      	bne.n	800cbac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800cb80:	2301      	movs	r3, #1
 800cb82:	e0ea      	b.n	800cd5a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	685b      	ldr	r3, [r3, #4]
 800cb88:	2b01      	cmp	r3, #1
 800cb8a:	d107      	bne.n	800cb9c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800cb8c:	4b30      	ldr	r3, [pc, #192]	; (800cc50 <HAL_RCC_ClockConfig+0x244>)
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800cb94:	2b00      	cmp	r3, #0
 800cb96:	d109      	bne.n	800cbac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800cb98:	2301      	movs	r3, #1
 800cb9a:	e0de      	b.n	800cd5a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800cb9c:	4b2c      	ldr	r3, [pc, #176]	; (800cc50 <HAL_RCC_ClockConfig+0x244>)
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	f003 0304 	and.w	r3, r3, #4
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	d101      	bne.n	800cbac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800cba8:	2301      	movs	r3, #1
 800cbaa:	e0d6      	b.n	800cd5a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800cbac:	4b28      	ldr	r3, [pc, #160]	; (800cc50 <HAL_RCC_ClockConfig+0x244>)
 800cbae:	691b      	ldr	r3, [r3, #16]
 800cbb0:	f023 0207 	bic.w	r2, r3, #7
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	685b      	ldr	r3, [r3, #4]
 800cbb8:	4925      	ldr	r1, [pc, #148]	; (800cc50 <HAL_RCC_ClockConfig+0x244>)
 800cbba:	4313      	orrs	r3, r2
 800cbbc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800cbbe:	f7fc fa1f 	bl	8009000 <HAL_GetTick>
 800cbc2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cbc4:	e00a      	b.n	800cbdc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800cbc6:	f7fc fa1b 	bl	8009000 <HAL_GetTick>
 800cbca:	4602      	mov	r2, r0
 800cbcc:	697b      	ldr	r3, [r7, #20]
 800cbce:	1ad3      	subs	r3, r2, r3
 800cbd0:	f241 3288 	movw	r2, #5000	; 0x1388
 800cbd4:	4293      	cmp	r3, r2
 800cbd6:	d901      	bls.n	800cbdc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800cbd8:	2303      	movs	r3, #3
 800cbda:	e0be      	b.n	800cd5a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800cbdc:	4b1c      	ldr	r3, [pc, #112]	; (800cc50 <HAL_RCC_ClockConfig+0x244>)
 800cbde:	691b      	ldr	r3, [r3, #16]
 800cbe0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	685b      	ldr	r3, [r3, #4]
 800cbe8:	00db      	lsls	r3, r3, #3
 800cbea:	429a      	cmp	r2, r3
 800cbec:	d1eb      	bne.n	800cbc6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800cbee:	687b      	ldr	r3, [r7, #4]
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	f003 0302 	and.w	r3, r3, #2
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d010      	beq.n	800cc1c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800cbfa:	687b      	ldr	r3, [r7, #4]
 800cbfc:	68da      	ldr	r2, [r3, #12]
 800cbfe:	4b14      	ldr	r3, [pc, #80]	; (800cc50 <HAL_RCC_ClockConfig+0x244>)
 800cc00:	699b      	ldr	r3, [r3, #24]
 800cc02:	f003 030f 	and.w	r3, r3, #15
 800cc06:	429a      	cmp	r2, r3
 800cc08:	d208      	bcs.n	800cc1c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800cc0a:	4b11      	ldr	r3, [pc, #68]	; (800cc50 <HAL_RCC_ClockConfig+0x244>)
 800cc0c:	699b      	ldr	r3, [r3, #24]
 800cc0e:	f023 020f 	bic.w	r2, r3, #15
 800cc12:	687b      	ldr	r3, [r7, #4]
 800cc14:	68db      	ldr	r3, [r3, #12]
 800cc16:	490e      	ldr	r1, [pc, #56]	; (800cc50 <HAL_RCC_ClockConfig+0x244>)
 800cc18:	4313      	orrs	r3, r2
 800cc1a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800cc1c:	4b0b      	ldr	r3, [pc, #44]	; (800cc4c <HAL_RCC_ClockConfig+0x240>)
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	f003 030f 	and.w	r3, r3, #15
 800cc24:	683a      	ldr	r2, [r7, #0]
 800cc26:	429a      	cmp	r2, r3
 800cc28:	d214      	bcs.n	800cc54 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800cc2a:	4b08      	ldr	r3, [pc, #32]	; (800cc4c <HAL_RCC_ClockConfig+0x240>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	f023 020f 	bic.w	r2, r3, #15
 800cc32:	4906      	ldr	r1, [pc, #24]	; (800cc4c <HAL_RCC_ClockConfig+0x240>)
 800cc34:	683b      	ldr	r3, [r7, #0]
 800cc36:	4313      	orrs	r3, r2
 800cc38:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800cc3a:	4b04      	ldr	r3, [pc, #16]	; (800cc4c <HAL_RCC_ClockConfig+0x240>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	f003 030f 	and.w	r3, r3, #15
 800cc42:	683a      	ldr	r2, [r7, #0]
 800cc44:	429a      	cmp	r2, r3
 800cc46:	d005      	beq.n	800cc54 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800cc48:	2301      	movs	r3, #1
 800cc4a:	e086      	b.n	800cd5a <HAL_RCC_ClockConfig+0x34e>
 800cc4c:	52002000 	.word	0x52002000
 800cc50:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	f003 0304 	and.w	r3, r3, #4
 800cc5c:	2b00      	cmp	r3, #0
 800cc5e:	d010      	beq.n	800cc82 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	691a      	ldr	r2, [r3, #16]
 800cc64:	4b3f      	ldr	r3, [pc, #252]	; (800cd64 <HAL_RCC_ClockConfig+0x358>)
 800cc66:	699b      	ldr	r3, [r3, #24]
 800cc68:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800cc6c:	429a      	cmp	r2, r3
 800cc6e:	d208      	bcs.n	800cc82 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800cc70:	4b3c      	ldr	r3, [pc, #240]	; (800cd64 <HAL_RCC_ClockConfig+0x358>)
 800cc72:	699b      	ldr	r3, [r3, #24]
 800cc74:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	691b      	ldr	r3, [r3, #16]
 800cc7c:	4939      	ldr	r1, [pc, #228]	; (800cd64 <HAL_RCC_ClockConfig+0x358>)
 800cc7e:	4313      	orrs	r3, r2
 800cc80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800cc82:	687b      	ldr	r3, [r7, #4]
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	f003 0308 	and.w	r3, r3, #8
 800cc8a:	2b00      	cmp	r3, #0
 800cc8c:	d010      	beq.n	800ccb0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	695a      	ldr	r2, [r3, #20]
 800cc92:	4b34      	ldr	r3, [pc, #208]	; (800cd64 <HAL_RCC_ClockConfig+0x358>)
 800cc94:	69db      	ldr	r3, [r3, #28]
 800cc96:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800cc9a:	429a      	cmp	r2, r3
 800cc9c:	d208      	bcs.n	800ccb0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800cc9e:	4b31      	ldr	r3, [pc, #196]	; (800cd64 <HAL_RCC_ClockConfig+0x358>)
 800cca0:	69db      	ldr	r3, [r3, #28]
 800cca2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	695b      	ldr	r3, [r3, #20]
 800ccaa:	492e      	ldr	r1, [pc, #184]	; (800cd64 <HAL_RCC_ClockConfig+0x358>)
 800ccac:	4313      	orrs	r3, r2
 800ccae:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	681b      	ldr	r3, [r3, #0]
 800ccb4:	f003 0310 	and.w	r3, r3, #16
 800ccb8:	2b00      	cmp	r3, #0
 800ccba:	d010      	beq.n	800ccde <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	699a      	ldr	r2, [r3, #24]
 800ccc0:	4b28      	ldr	r3, [pc, #160]	; (800cd64 <HAL_RCC_ClockConfig+0x358>)
 800ccc2:	69db      	ldr	r3, [r3, #28]
 800ccc4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ccc8:	429a      	cmp	r2, r3
 800ccca:	d208      	bcs.n	800ccde <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800cccc:	4b25      	ldr	r3, [pc, #148]	; (800cd64 <HAL_RCC_ClockConfig+0x358>)
 800ccce:	69db      	ldr	r3, [r3, #28]
 800ccd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	699b      	ldr	r3, [r3, #24]
 800ccd8:	4922      	ldr	r1, [pc, #136]	; (800cd64 <HAL_RCC_ClockConfig+0x358>)
 800ccda:	4313      	orrs	r3, r2
 800ccdc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	f003 0320 	and.w	r3, r3, #32
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d010      	beq.n	800cd0c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	69da      	ldr	r2, [r3, #28]
 800ccee:	4b1d      	ldr	r3, [pc, #116]	; (800cd64 <HAL_RCC_ClockConfig+0x358>)
 800ccf0:	6a1b      	ldr	r3, [r3, #32]
 800ccf2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800ccf6:	429a      	cmp	r2, r3
 800ccf8:	d208      	bcs.n	800cd0c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ccfa:	4b1a      	ldr	r3, [pc, #104]	; (800cd64 <HAL_RCC_ClockConfig+0x358>)
 800ccfc:	6a1b      	ldr	r3, [r3, #32]
 800ccfe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	69db      	ldr	r3, [r3, #28]
 800cd06:	4917      	ldr	r1, [pc, #92]	; (800cd64 <HAL_RCC_ClockConfig+0x358>)
 800cd08:	4313      	orrs	r3, r2
 800cd0a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800cd0c:	f000 f834 	bl	800cd78 <HAL_RCC_GetSysClockFreq>
 800cd10:	4602      	mov	r2, r0
 800cd12:	4b14      	ldr	r3, [pc, #80]	; (800cd64 <HAL_RCC_ClockConfig+0x358>)
 800cd14:	699b      	ldr	r3, [r3, #24]
 800cd16:	0a1b      	lsrs	r3, r3, #8
 800cd18:	f003 030f 	and.w	r3, r3, #15
 800cd1c:	4912      	ldr	r1, [pc, #72]	; (800cd68 <HAL_RCC_ClockConfig+0x35c>)
 800cd1e:	5ccb      	ldrb	r3, [r1, r3]
 800cd20:	f003 031f 	and.w	r3, r3, #31
 800cd24:	fa22 f303 	lsr.w	r3, r2, r3
 800cd28:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800cd2a:	4b0e      	ldr	r3, [pc, #56]	; (800cd64 <HAL_RCC_ClockConfig+0x358>)
 800cd2c:	699b      	ldr	r3, [r3, #24]
 800cd2e:	f003 030f 	and.w	r3, r3, #15
 800cd32:	4a0d      	ldr	r2, [pc, #52]	; (800cd68 <HAL_RCC_ClockConfig+0x35c>)
 800cd34:	5cd3      	ldrb	r3, [r2, r3]
 800cd36:	f003 031f 	and.w	r3, r3, #31
 800cd3a:	693a      	ldr	r2, [r7, #16]
 800cd3c:	fa22 f303 	lsr.w	r3, r2, r3
 800cd40:	4a0a      	ldr	r2, [pc, #40]	; (800cd6c <HAL_RCC_ClockConfig+0x360>)
 800cd42:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800cd44:	4a0a      	ldr	r2, [pc, #40]	; (800cd70 <HAL_RCC_ClockConfig+0x364>)
 800cd46:	693b      	ldr	r3, [r7, #16]
 800cd48:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800cd4a:	4b0a      	ldr	r3, [pc, #40]	; (800cd74 <HAL_RCC_ClockConfig+0x368>)
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	4618      	mov	r0, r3
 800cd50:	f7fc f90c 	bl	8008f6c <HAL_InitTick>
 800cd54:	4603      	mov	r3, r0
 800cd56:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800cd58:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd5a:	4618      	mov	r0, r3
 800cd5c:	3718      	adds	r7, #24
 800cd5e:	46bd      	mov	sp, r7
 800cd60:	bd80      	pop	{r7, pc}
 800cd62:	bf00      	nop
 800cd64:	58024400 	.word	0x58024400
 800cd68:	08015dec 	.word	0x08015dec
 800cd6c:	240003d4 	.word	0x240003d4
 800cd70:	240003d0 	.word	0x240003d0
 800cd74:	240003d8 	.word	0x240003d8

0800cd78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800cd78:	b480      	push	{r7}
 800cd7a:	b089      	sub	sp, #36	; 0x24
 800cd7c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800cd7e:	4bb3      	ldr	r3, [pc, #716]	; (800d04c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cd80:	691b      	ldr	r3, [r3, #16]
 800cd82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800cd86:	2b18      	cmp	r3, #24
 800cd88:	f200 8155 	bhi.w	800d036 <HAL_RCC_GetSysClockFreq+0x2be>
 800cd8c:	a201      	add	r2, pc, #4	; (adr r2, 800cd94 <HAL_RCC_GetSysClockFreq+0x1c>)
 800cd8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd92:	bf00      	nop
 800cd94:	0800cdf9 	.word	0x0800cdf9
 800cd98:	0800d037 	.word	0x0800d037
 800cd9c:	0800d037 	.word	0x0800d037
 800cda0:	0800d037 	.word	0x0800d037
 800cda4:	0800d037 	.word	0x0800d037
 800cda8:	0800d037 	.word	0x0800d037
 800cdac:	0800d037 	.word	0x0800d037
 800cdb0:	0800d037 	.word	0x0800d037
 800cdb4:	0800ce1f 	.word	0x0800ce1f
 800cdb8:	0800d037 	.word	0x0800d037
 800cdbc:	0800d037 	.word	0x0800d037
 800cdc0:	0800d037 	.word	0x0800d037
 800cdc4:	0800d037 	.word	0x0800d037
 800cdc8:	0800d037 	.word	0x0800d037
 800cdcc:	0800d037 	.word	0x0800d037
 800cdd0:	0800d037 	.word	0x0800d037
 800cdd4:	0800ce25 	.word	0x0800ce25
 800cdd8:	0800d037 	.word	0x0800d037
 800cddc:	0800d037 	.word	0x0800d037
 800cde0:	0800d037 	.word	0x0800d037
 800cde4:	0800d037 	.word	0x0800d037
 800cde8:	0800d037 	.word	0x0800d037
 800cdec:	0800d037 	.word	0x0800d037
 800cdf0:	0800d037 	.word	0x0800d037
 800cdf4:	0800ce2b 	.word	0x0800ce2b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800cdf8:	4b94      	ldr	r3, [pc, #592]	; (800d04c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	f003 0320 	and.w	r3, r3, #32
 800ce00:	2b00      	cmp	r3, #0
 800ce02:	d009      	beq.n	800ce18 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce04:	4b91      	ldr	r3, [pc, #580]	; (800d04c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	08db      	lsrs	r3, r3, #3
 800ce0a:	f003 0303 	and.w	r3, r3, #3
 800ce0e:	4a90      	ldr	r2, [pc, #576]	; (800d050 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ce10:	fa22 f303 	lsr.w	r3, r2, r3
 800ce14:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800ce16:	e111      	b.n	800d03c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800ce18:	4b8d      	ldr	r3, [pc, #564]	; (800d050 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800ce1a:	61bb      	str	r3, [r7, #24]
      break;
 800ce1c:	e10e      	b.n	800d03c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800ce1e:	4b8d      	ldr	r3, [pc, #564]	; (800d054 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800ce20:	61bb      	str	r3, [r7, #24]
      break;
 800ce22:	e10b      	b.n	800d03c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800ce24:	4b8c      	ldr	r3, [pc, #560]	; (800d058 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800ce26:	61bb      	str	r3, [r7, #24]
      break;
 800ce28:	e108      	b.n	800d03c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ce2a:	4b88      	ldr	r3, [pc, #544]	; (800d04c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ce2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce2e:	f003 0303 	and.w	r3, r3, #3
 800ce32:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800ce34:	4b85      	ldr	r3, [pc, #532]	; (800d04c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ce36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ce38:	091b      	lsrs	r3, r3, #4
 800ce3a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ce3e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800ce40:	4b82      	ldr	r3, [pc, #520]	; (800d04c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ce42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce44:	f003 0301 	and.w	r3, r3, #1
 800ce48:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800ce4a:	4b80      	ldr	r3, [pc, #512]	; (800d04c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ce4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ce4e:	08db      	lsrs	r3, r3, #3
 800ce50:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ce54:	68fa      	ldr	r2, [r7, #12]
 800ce56:	fb02 f303 	mul.w	r3, r2, r3
 800ce5a:	ee07 3a90 	vmov	s15, r3
 800ce5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ce62:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800ce66:	693b      	ldr	r3, [r7, #16]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	f000 80e1 	beq.w	800d030 <HAL_RCC_GetSysClockFreq+0x2b8>
 800ce6e:	697b      	ldr	r3, [r7, #20]
 800ce70:	2b02      	cmp	r3, #2
 800ce72:	f000 8083 	beq.w	800cf7c <HAL_RCC_GetSysClockFreq+0x204>
 800ce76:	697b      	ldr	r3, [r7, #20]
 800ce78:	2b02      	cmp	r3, #2
 800ce7a:	f200 80a1 	bhi.w	800cfc0 <HAL_RCC_GetSysClockFreq+0x248>
 800ce7e:	697b      	ldr	r3, [r7, #20]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d003      	beq.n	800ce8c <HAL_RCC_GetSysClockFreq+0x114>
 800ce84:	697b      	ldr	r3, [r7, #20]
 800ce86:	2b01      	cmp	r3, #1
 800ce88:	d056      	beq.n	800cf38 <HAL_RCC_GetSysClockFreq+0x1c0>
 800ce8a:	e099      	b.n	800cfc0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ce8c:	4b6f      	ldr	r3, [pc, #444]	; (800d04c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	f003 0320 	and.w	r3, r3, #32
 800ce94:	2b00      	cmp	r3, #0
 800ce96:	d02d      	beq.n	800cef4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ce98:	4b6c      	ldr	r3, [pc, #432]	; (800d04c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	08db      	lsrs	r3, r3, #3
 800ce9e:	f003 0303 	and.w	r3, r3, #3
 800cea2:	4a6b      	ldr	r2, [pc, #428]	; (800d050 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800cea4:	fa22 f303 	lsr.w	r3, r2, r3
 800cea8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	ee07 3a90 	vmov	s15, r3
 800ceb0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ceb4:	693b      	ldr	r3, [r7, #16]
 800ceb6:	ee07 3a90 	vmov	s15, r3
 800ceba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cebe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cec2:	4b62      	ldr	r3, [pc, #392]	; (800d04c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cec6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ceca:	ee07 3a90 	vmov	s15, r3
 800cece:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ced2:	ed97 6a02 	vldr	s12, [r7, #8]
 800ced6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800d05c <HAL_RCC_GetSysClockFreq+0x2e4>
 800ceda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cede:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cee2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cee6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ceea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ceee:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800cef2:	e087      	b.n	800d004 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cef4:	693b      	ldr	r3, [r7, #16]
 800cef6:	ee07 3a90 	vmov	s15, r3
 800cefa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cefe:	eddf 6a58 	vldr	s13, [pc, #352]	; 800d060 <HAL_RCC_GetSysClockFreq+0x2e8>
 800cf02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf06:	4b51      	ldr	r3, [pc, #324]	; (800d04c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cf08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf0e:	ee07 3a90 	vmov	s15, r3
 800cf12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf16:	ed97 6a02 	vldr	s12, [r7, #8]
 800cf1a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800d05c <HAL_RCC_GetSysClockFreq+0x2e4>
 800cf1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf32:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800cf36:	e065      	b.n	800d004 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cf38:	693b      	ldr	r3, [r7, #16]
 800cf3a:	ee07 3a90 	vmov	s15, r3
 800cf3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf42:	eddf 6a48 	vldr	s13, [pc, #288]	; 800d064 <HAL_RCC_GetSysClockFreq+0x2ec>
 800cf46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf4a:	4b40      	ldr	r3, [pc, #256]	; (800d04c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cf4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf52:	ee07 3a90 	vmov	s15, r3
 800cf56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf5a:	ed97 6a02 	vldr	s12, [r7, #8]
 800cf5e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800d05c <HAL_RCC_GetSysClockFreq+0x2e4>
 800cf62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cf66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cf6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cf6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cf72:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cf76:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800cf7a:	e043      	b.n	800d004 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cf7c:	693b      	ldr	r3, [r7, #16]
 800cf7e:	ee07 3a90 	vmov	s15, r3
 800cf82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cf86:	eddf 6a38 	vldr	s13, [pc, #224]	; 800d068 <HAL_RCC_GetSysClockFreq+0x2f0>
 800cf8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cf8e:	4b2f      	ldr	r3, [pc, #188]	; (800d04c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cf90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cf92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cf96:	ee07 3a90 	vmov	s15, r3
 800cf9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cf9e:	ed97 6a02 	vldr	s12, [r7, #8]
 800cfa2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800d05c <HAL_RCC_GetSysClockFreq+0x2e4>
 800cfa6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfaa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cfae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cfb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cfb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cfba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800cfbe:	e021      	b.n	800d004 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cfc0:	693b      	ldr	r3, [r7, #16]
 800cfc2:	ee07 3a90 	vmov	s15, r3
 800cfc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cfca:	eddf 6a26 	vldr	s13, [pc, #152]	; 800d064 <HAL_RCC_GetSysClockFreq+0x2ec>
 800cfce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cfd2:	4b1e      	ldr	r3, [pc, #120]	; (800d04c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cfd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cfd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cfda:	ee07 3a90 	vmov	s15, r3
 800cfde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cfe2:	ed97 6a02 	vldr	s12, [r7, #8]
 800cfe6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800d05c <HAL_RCC_GetSysClockFreq+0x2e4>
 800cfea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800cfee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800cff2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800cff6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cffa:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cffe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800d002:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800d004:	4b11      	ldr	r3, [pc, #68]	; (800d04c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800d006:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d008:	0a5b      	lsrs	r3, r3, #9
 800d00a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d00e:	3301      	adds	r3, #1
 800d010:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800d012:	683b      	ldr	r3, [r7, #0]
 800d014:	ee07 3a90 	vmov	s15, r3
 800d018:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800d01c:	edd7 6a07 	vldr	s13, [r7, #28]
 800d020:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800d024:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800d028:	ee17 3a90 	vmov	r3, s15
 800d02c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800d02e:	e005      	b.n	800d03c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800d030:	2300      	movs	r3, #0
 800d032:	61bb      	str	r3, [r7, #24]
      break;
 800d034:	e002      	b.n	800d03c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800d036:	4b07      	ldr	r3, [pc, #28]	; (800d054 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800d038:	61bb      	str	r3, [r7, #24]
      break;
 800d03a:	bf00      	nop
  }

  return sysclockfreq;
 800d03c:	69bb      	ldr	r3, [r7, #24]
}
 800d03e:	4618      	mov	r0, r3
 800d040:	3724      	adds	r7, #36	; 0x24
 800d042:	46bd      	mov	sp, r7
 800d044:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d048:	4770      	bx	lr
 800d04a:	bf00      	nop
 800d04c:	58024400 	.word	0x58024400
 800d050:	03d09000 	.word	0x03d09000
 800d054:	003d0900 	.word	0x003d0900
 800d058:	017d7840 	.word	0x017d7840
 800d05c:	46000000 	.word	0x46000000
 800d060:	4c742400 	.word	0x4c742400
 800d064:	4a742400 	.word	0x4a742400
 800d068:	4bbebc20 	.word	0x4bbebc20

0800d06c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800d06c:	b580      	push	{r7, lr}
 800d06e:	b082      	sub	sp, #8
 800d070:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800d072:	f7ff fe81 	bl	800cd78 <HAL_RCC_GetSysClockFreq>
 800d076:	4602      	mov	r2, r0
 800d078:	4b10      	ldr	r3, [pc, #64]	; (800d0bc <HAL_RCC_GetHCLKFreq+0x50>)
 800d07a:	699b      	ldr	r3, [r3, #24]
 800d07c:	0a1b      	lsrs	r3, r3, #8
 800d07e:	f003 030f 	and.w	r3, r3, #15
 800d082:	490f      	ldr	r1, [pc, #60]	; (800d0c0 <HAL_RCC_GetHCLKFreq+0x54>)
 800d084:	5ccb      	ldrb	r3, [r1, r3]
 800d086:	f003 031f 	and.w	r3, r3, #31
 800d08a:	fa22 f303 	lsr.w	r3, r2, r3
 800d08e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800d090:	4b0a      	ldr	r3, [pc, #40]	; (800d0bc <HAL_RCC_GetHCLKFreq+0x50>)
 800d092:	699b      	ldr	r3, [r3, #24]
 800d094:	f003 030f 	and.w	r3, r3, #15
 800d098:	4a09      	ldr	r2, [pc, #36]	; (800d0c0 <HAL_RCC_GetHCLKFreq+0x54>)
 800d09a:	5cd3      	ldrb	r3, [r2, r3]
 800d09c:	f003 031f 	and.w	r3, r3, #31
 800d0a0:	687a      	ldr	r2, [r7, #4]
 800d0a2:	fa22 f303 	lsr.w	r3, r2, r3
 800d0a6:	4a07      	ldr	r2, [pc, #28]	; (800d0c4 <HAL_RCC_GetHCLKFreq+0x58>)
 800d0a8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800d0aa:	4a07      	ldr	r2, [pc, #28]	; (800d0c8 <HAL_RCC_GetHCLKFreq+0x5c>)
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800d0b0:	4b04      	ldr	r3, [pc, #16]	; (800d0c4 <HAL_RCC_GetHCLKFreq+0x58>)
 800d0b2:	681b      	ldr	r3, [r3, #0]
}
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	3708      	adds	r7, #8
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bd80      	pop	{r7, pc}
 800d0bc:	58024400 	.word	0x58024400
 800d0c0:	08015dec 	.word	0x08015dec
 800d0c4:	240003d4 	.word	0x240003d4
 800d0c8:	240003d0 	.word	0x240003d0

0800d0cc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800d0cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800d0d0:	b0c8      	sub	sp, #288	; 0x120
 800d0d2:	af00      	add	r7, sp, #0
 800d0d4:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800d0d8:	2300      	movs	r3, #0
 800d0da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800d0de:	2300      	movs	r3, #0
 800d0e0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800d0e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d0e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d0ec:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800d0f0:	2500      	movs	r5, #0
 800d0f2:	ea54 0305 	orrs.w	r3, r4, r5
 800d0f6:	d049      	beq.n	800d18c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800d0f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d0fc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d0fe:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d102:	d02f      	beq.n	800d164 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800d104:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800d108:	d828      	bhi.n	800d15c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800d10a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d10e:	d01a      	beq.n	800d146 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800d110:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d114:	d822      	bhi.n	800d15c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800d116:	2b00      	cmp	r3, #0
 800d118:	d003      	beq.n	800d122 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800d11a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d11e:	d007      	beq.n	800d130 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800d120:	e01c      	b.n	800d15c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d122:	4bb8      	ldr	r3, [pc, #736]	; (800d404 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d126:	4ab7      	ldr	r2, [pc, #732]	; (800d404 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d128:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d12c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d12e:	e01a      	b.n	800d166 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d130:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d134:	3308      	adds	r3, #8
 800d136:	2102      	movs	r1, #2
 800d138:	4618      	mov	r0, r3
 800d13a:	f001 f9b5 	bl	800e4a8 <RCCEx_PLL2_Config>
 800d13e:	4603      	mov	r3, r0
 800d140:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d144:	e00f      	b.n	800d166 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d146:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d14a:	3328      	adds	r3, #40	; 0x28
 800d14c:	2102      	movs	r1, #2
 800d14e:	4618      	mov	r0, r3
 800d150:	f001 fa5c 	bl	800e60c <RCCEx_PLL3_Config>
 800d154:	4603      	mov	r3, r0
 800d156:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800d15a:	e004      	b.n	800d166 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d15c:	2301      	movs	r3, #1
 800d15e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d162:	e000      	b.n	800d166 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800d164:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d166:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d10a      	bne.n	800d184 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800d16e:	4ba5      	ldr	r3, [pc, #660]	; (800d404 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d172:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800d176:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d17a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d17c:	4aa1      	ldr	r2, [pc, #644]	; (800d404 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d17e:	430b      	orrs	r3, r1
 800d180:	6513      	str	r3, [r2, #80]	; 0x50
 800d182:	e003      	b.n	800d18c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d184:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d188:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800d18c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d194:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800d198:	f04f 0900 	mov.w	r9, #0
 800d19c:	ea58 0309 	orrs.w	r3, r8, r9
 800d1a0:	d047      	beq.n	800d232 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800d1a2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d1a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d1a8:	2b04      	cmp	r3, #4
 800d1aa:	d82a      	bhi.n	800d202 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800d1ac:	a201      	add	r2, pc, #4	; (adr r2, 800d1b4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800d1ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d1b2:	bf00      	nop
 800d1b4:	0800d1c9 	.word	0x0800d1c9
 800d1b8:	0800d1d7 	.word	0x0800d1d7
 800d1bc:	0800d1ed 	.word	0x0800d1ed
 800d1c0:	0800d20b 	.word	0x0800d20b
 800d1c4:	0800d20b 	.word	0x0800d20b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d1c8:	4b8e      	ldr	r3, [pc, #568]	; (800d404 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d1ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1cc:	4a8d      	ldr	r2, [pc, #564]	; (800d404 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d1ce:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d1d2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d1d4:	e01a      	b.n	800d20c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d1d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d1da:	3308      	adds	r3, #8
 800d1dc:	2100      	movs	r1, #0
 800d1de:	4618      	mov	r0, r3
 800d1e0:	f001 f962 	bl	800e4a8 <RCCEx_PLL2_Config>
 800d1e4:	4603      	mov	r3, r0
 800d1e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d1ea:	e00f      	b.n	800d20c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d1ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d1f0:	3328      	adds	r3, #40	; 0x28
 800d1f2:	2100      	movs	r1, #0
 800d1f4:	4618      	mov	r0, r3
 800d1f6:	f001 fa09 	bl	800e60c <RCCEx_PLL3_Config>
 800d1fa:	4603      	mov	r3, r0
 800d1fc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d200:	e004      	b.n	800d20c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d202:	2301      	movs	r3, #1
 800d204:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d208:	e000      	b.n	800d20c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800d20a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d20c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d210:	2b00      	cmp	r3, #0
 800d212:	d10a      	bne.n	800d22a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800d214:	4b7b      	ldr	r3, [pc, #492]	; (800d404 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d216:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d218:	f023 0107 	bic.w	r1, r3, #7
 800d21c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d222:	4a78      	ldr	r2, [pc, #480]	; (800d404 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d224:	430b      	orrs	r3, r1
 800d226:	6513      	str	r3, [r2, #80]	; 0x50
 800d228:	e003      	b.n	800d232 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d22a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d22e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800d232:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d236:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d23a:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800d23e:	f04f 0b00 	mov.w	fp, #0
 800d242:	ea5a 030b 	orrs.w	r3, sl, fp
 800d246:	d04c      	beq.n	800d2e2 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800d248:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d24c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d24e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d252:	d030      	beq.n	800d2b6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800d254:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d258:	d829      	bhi.n	800d2ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800d25a:	2bc0      	cmp	r3, #192	; 0xc0
 800d25c:	d02d      	beq.n	800d2ba <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800d25e:	2bc0      	cmp	r3, #192	; 0xc0
 800d260:	d825      	bhi.n	800d2ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800d262:	2b80      	cmp	r3, #128	; 0x80
 800d264:	d018      	beq.n	800d298 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800d266:	2b80      	cmp	r3, #128	; 0x80
 800d268:	d821      	bhi.n	800d2ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800d26a:	2b00      	cmp	r3, #0
 800d26c:	d002      	beq.n	800d274 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800d26e:	2b40      	cmp	r3, #64	; 0x40
 800d270:	d007      	beq.n	800d282 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800d272:	e01c      	b.n	800d2ae <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d274:	4b63      	ldr	r3, [pc, #396]	; (800d404 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d278:	4a62      	ldr	r2, [pc, #392]	; (800d404 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d27a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d27e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800d280:	e01c      	b.n	800d2bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d282:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d286:	3308      	adds	r3, #8
 800d288:	2100      	movs	r1, #0
 800d28a:	4618      	mov	r0, r3
 800d28c:	f001 f90c 	bl	800e4a8 <RCCEx_PLL2_Config>
 800d290:	4603      	mov	r3, r0
 800d292:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800d296:	e011      	b.n	800d2bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d298:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d29c:	3328      	adds	r3, #40	; 0x28
 800d29e:	2100      	movs	r1, #0
 800d2a0:	4618      	mov	r0, r3
 800d2a2:	f001 f9b3 	bl	800e60c <RCCEx_PLL3_Config>
 800d2a6:	4603      	mov	r3, r0
 800d2a8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800d2ac:	e006      	b.n	800d2bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d2ae:	2301      	movs	r3, #1
 800d2b0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d2b4:	e002      	b.n	800d2bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800d2b6:	bf00      	nop
 800d2b8:	e000      	b.n	800d2bc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800d2ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d2bc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	d10a      	bne.n	800d2da <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800d2c4:	4b4f      	ldr	r3, [pc, #316]	; (800d404 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d2c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2c8:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800d2cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d2d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d2d2:	4a4c      	ldr	r2, [pc, #304]	; (800d404 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d2d4:	430b      	orrs	r3, r1
 800d2d6:	6513      	str	r3, [r2, #80]	; 0x50
 800d2d8:	e003      	b.n	800d2e2 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d2da:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d2de:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800d2e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d2e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ea:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800d2ee:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800d2f2:	2300      	movs	r3, #0
 800d2f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800d2f8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800d2fc:	460b      	mov	r3, r1
 800d2fe:	4313      	orrs	r3, r2
 800d300:	d053      	beq.n	800d3aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800d302:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d306:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d30a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d30e:	d035      	beq.n	800d37c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800d310:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d314:	d82e      	bhi.n	800d374 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800d316:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800d31a:	d031      	beq.n	800d380 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800d31c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800d320:	d828      	bhi.n	800d374 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800d322:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d326:	d01a      	beq.n	800d35e <HAL_RCCEx_PeriphCLKConfig+0x292>
 800d328:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800d32c:	d822      	bhi.n	800d374 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d003      	beq.n	800d33a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800d332:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800d336:	d007      	beq.n	800d348 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800d338:	e01c      	b.n	800d374 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d33a:	4b32      	ldr	r3, [pc, #200]	; (800d404 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d33c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d33e:	4a31      	ldr	r2, [pc, #196]	; (800d404 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d340:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d344:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d346:	e01c      	b.n	800d382 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d348:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d34c:	3308      	adds	r3, #8
 800d34e:	2100      	movs	r1, #0
 800d350:	4618      	mov	r0, r3
 800d352:	f001 f8a9 	bl	800e4a8 <RCCEx_PLL2_Config>
 800d356:	4603      	mov	r3, r0
 800d358:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800d35c:	e011      	b.n	800d382 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d35e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d362:	3328      	adds	r3, #40	; 0x28
 800d364:	2100      	movs	r1, #0
 800d366:	4618      	mov	r0, r3
 800d368:	f001 f950 	bl	800e60c <RCCEx_PLL3_Config>
 800d36c:	4603      	mov	r3, r0
 800d36e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d372:	e006      	b.n	800d382 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800d374:	2301      	movs	r3, #1
 800d376:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d37a:	e002      	b.n	800d382 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800d37c:	bf00      	nop
 800d37e:	e000      	b.n	800d382 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800d380:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d382:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d386:	2b00      	cmp	r3, #0
 800d388:	d10b      	bne.n	800d3a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800d38a:	4b1e      	ldr	r3, [pc, #120]	; (800d404 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d38c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d38e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800d392:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d396:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800d39a:	4a1a      	ldr	r2, [pc, #104]	; (800d404 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800d39c:	430b      	orrs	r3, r1
 800d39e:	6593      	str	r3, [r2, #88]	; 0x58
 800d3a0:	e003      	b.n	800d3aa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d3a2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d3a6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800d3aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d3ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3b2:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800d3b6:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800d3ba:	2300      	movs	r3, #0
 800d3bc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800d3c0:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800d3c4:	460b      	mov	r3, r1
 800d3c6:	4313      	orrs	r3, r2
 800d3c8:	d056      	beq.n	800d478 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800d3ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d3ce:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d3d2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d3d6:	d038      	beq.n	800d44a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800d3d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800d3dc:	d831      	bhi.n	800d442 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800d3de:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800d3e2:	d034      	beq.n	800d44e <HAL_RCCEx_PeriphCLKConfig+0x382>
 800d3e4:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800d3e8:	d82b      	bhi.n	800d442 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800d3ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d3ee:	d01d      	beq.n	800d42c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800d3f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800d3f4:	d825      	bhi.n	800d442 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800d3f6:	2b00      	cmp	r3, #0
 800d3f8:	d006      	beq.n	800d408 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800d3fa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800d3fe:	d00a      	beq.n	800d416 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800d400:	e01f      	b.n	800d442 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800d402:	bf00      	nop
 800d404:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d408:	4ba2      	ldr	r3, [pc, #648]	; (800d694 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d40a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d40c:	4aa1      	ldr	r2, [pc, #644]	; (800d694 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d40e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d412:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d414:	e01c      	b.n	800d450 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d416:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d41a:	3308      	adds	r3, #8
 800d41c:	2100      	movs	r1, #0
 800d41e:	4618      	mov	r0, r3
 800d420:	f001 f842 	bl	800e4a8 <RCCEx_PLL2_Config>
 800d424:	4603      	mov	r3, r0
 800d426:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800d42a:	e011      	b.n	800d450 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d42c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d430:	3328      	adds	r3, #40	; 0x28
 800d432:	2100      	movs	r1, #0
 800d434:	4618      	mov	r0, r3
 800d436:	f001 f8e9 	bl	800e60c <RCCEx_PLL3_Config>
 800d43a:	4603      	mov	r3, r0
 800d43c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800d440:	e006      	b.n	800d450 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800d442:	2301      	movs	r3, #1
 800d444:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d448:	e002      	b.n	800d450 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800d44a:	bf00      	nop
 800d44c:	e000      	b.n	800d450 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800d44e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d450:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d454:	2b00      	cmp	r3, #0
 800d456:	d10b      	bne.n	800d470 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800d458:	4b8e      	ldr	r3, [pc, #568]	; (800d694 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d45a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d45c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800d460:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d464:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800d468:	4a8a      	ldr	r2, [pc, #552]	; (800d694 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d46a:	430b      	orrs	r3, r1
 800d46c:	6593      	str	r3, [r2, #88]	; 0x58
 800d46e:	e003      	b.n	800d478 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d470:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d474:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800d478:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d47c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d480:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 800d484:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800d488:	2300      	movs	r3, #0
 800d48a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800d48e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 800d492:	460b      	mov	r3, r1
 800d494:	4313      	orrs	r3, r2
 800d496:	d03a      	beq.n	800d50e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800d498:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d49c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d49e:	2b30      	cmp	r3, #48	; 0x30
 800d4a0:	d01f      	beq.n	800d4e2 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800d4a2:	2b30      	cmp	r3, #48	; 0x30
 800d4a4:	d819      	bhi.n	800d4da <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800d4a6:	2b20      	cmp	r3, #32
 800d4a8:	d00c      	beq.n	800d4c4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800d4aa:	2b20      	cmp	r3, #32
 800d4ac:	d815      	bhi.n	800d4da <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d019      	beq.n	800d4e6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800d4b2:	2b10      	cmp	r3, #16
 800d4b4:	d111      	bne.n	800d4da <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d4b6:	4b77      	ldr	r3, [pc, #476]	; (800d694 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d4b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4ba:	4a76      	ldr	r2, [pc, #472]	; (800d694 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d4bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d4c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800d4c2:	e011      	b.n	800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d4c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d4c8:	3308      	adds	r3, #8
 800d4ca:	2102      	movs	r1, #2
 800d4cc:	4618      	mov	r0, r3
 800d4ce:	f000 ffeb 	bl	800e4a8 <RCCEx_PLL2_Config>
 800d4d2:	4603      	mov	r3, r0
 800d4d4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800d4d8:	e006      	b.n	800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800d4da:	2301      	movs	r3, #1
 800d4dc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d4e0:	e002      	b.n	800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800d4e2:	bf00      	nop
 800d4e4:	e000      	b.n	800d4e8 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800d4e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d4e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d4ec:	2b00      	cmp	r3, #0
 800d4ee:	d10a      	bne.n	800d506 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800d4f0:	4b68      	ldr	r3, [pc, #416]	; (800d694 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d4f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4f4:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800d4f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d4fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d4fe:	4a65      	ldr	r2, [pc, #404]	; (800d694 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d500:	430b      	orrs	r3, r1
 800d502:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d504:	e003      	b.n	800d50e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d506:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d50a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800d50e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d512:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d516:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800d51a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800d51e:	2300      	movs	r3, #0
 800d520:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800d524:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800d528:	460b      	mov	r3, r1
 800d52a:	4313      	orrs	r3, r2
 800d52c:	d051      	beq.n	800d5d2 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800d52e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d532:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d534:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d538:	d035      	beq.n	800d5a6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800d53a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d53e:	d82e      	bhi.n	800d59e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800d540:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d544:	d031      	beq.n	800d5aa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800d546:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d54a:	d828      	bhi.n	800d59e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800d54c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d550:	d01a      	beq.n	800d588 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800d552:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d556:	d822      	bhi.n	800d59e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800d558:	2b00      	cmp	r3, #0
 800d55a:	d003      	beq.n	800d564 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800d55c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d560:	d007      	beq.n	800d572 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800d562:	e01c      	b.n	800d59e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d564:	4b4b      	ldr	r3, [pc, #300]	; (800d694 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d568:	4a4a      	ldr	r2, [pc, #296]	; (800d694 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d56a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d56e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d570:	e01c      	b.n	800d5ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d572:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d576:	3308      	adds	r3, #8
 800d578:	2100      	movs	r1, #0
 800d57a:	4618      	mov	r0, r3
 800d57c:	f000 ff94 	bl	800e4a8 <RCCEx_PLL2_Config>
 800d580:	4603      	mov	r3, r0
 800d582:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d586:	e011      	b.n	800d5ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d588:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d58c:	3328      	adds	r3, #40	; 0x28
 800d58e:	2100      	movs	r1, #0
 800d590:	4618      	mov	r0, r3
 800d592:	f001 f83b 	bl	800e60c <RCCEx_PLL3_Config>
 800d596:	4603      	mov	r3, r0
 800d598:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d59c:	e006      	b.n	800d5ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d59e:	2301      	movs	r3, #1
 800d5a0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d5a4:	e002      	b.n	800d5ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800d5a6:	bf00      	nop
 800d5a8:	e000      	b.n	800d5ac <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800d5aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d5ac:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d10a      	bne.n	800d5ca <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800d5b4:	4b37      	ldr	r3, [pc, #220]	; (800d694 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d5b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d5b8:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800d5bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d5c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d5c2:	4a34      	ldr	r2, [pc, #208]	; (800d694 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d5c4:	430b      	orrs	r3, r1
 800d5c6:	6513      	str	r3, [r2, #80]	; 0x50
 800d5c8:	e003      	b.n	800d5d2 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d5ca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d5ce:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800d5d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5da:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800d5de:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800d5e2:	2300      	movs	r3, #0
 800d5e4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800d5e8:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800d5ec:	460b      	mov	r3, r1
 800d5ee:	4313      	orrs	r3, r2
 800d5f0:	d056      	beq.n	800d6a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800d5f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d5f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d5f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d5fc:	d033      	beq.n	800d666 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800d5fe:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800d602:	d82c      	bhi.n	800d65e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d604:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d608:	d02f      	beq.n	800d66a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800d60a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800d60e:	d826      	bhi.n	800d65e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d610:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d614:	d02b      	beq.n	800d66e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800d616:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800d61a:	d820      	bhi.n	800d65e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d61c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d620:	d012      	beq.n	800d648 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800d622:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800d626:	d81a      	bhi.n	800d65e <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d628:	2b00      	cmp	r3, #0
 800d62a:	d022      	beq.n	800d672 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800d62c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d630:	d115      	bne.n	800d65e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d632:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d636:	3308      	adds	r3, #8
 800d638:	2101      	movs	r1, #1
 800d63a:	4618      	mov	r0, r3
 800d63c:	f000 ff34 	bl	800e4a8 <RCCEx_PLL2_Config>
 800d640:	4603      	mov	r3, r0
 800d642:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800d646:	e015      	b.n	800d674 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d648:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d64c:	3328      	adds	r3, #40	; 0x28
 800d64e:	2101      	movs	r1, #1
 800d650:	4618      	mov	r0, r3
 800d652:	f000 ffdb 	bl	800e60c <RCCEx_PLL3_Config>
 800d656:	4603      	mov	r3, r0
 800d658:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800d65c:	e00a      	b.n	800d674 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d65e:	2301      	movs	r3, #1
 800d660:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d664:	e006      	b.n	800d674 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d666:	bf00      	nop
 800d668:	e004      	b.n	800d674 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d66a:	bf00      	nop
 800d66c:	e002      	b.n	800d674 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d66e:	bf00      	nop
 800d670:	e000      	b.n	800d674 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d672:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d674:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d10d      	bne.n	800d698 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800d67c:	4b05      	ldr	r3, [pc, #20]	; (800d694 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d67e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d680:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 800d684:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d688:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d68a:	4a02      	ldr	r2, [pc, #8]	; (800d694 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d68c:	430b      	orrs	r3, r1
 800d68e:	6513      	str	r3, [r2, #80]	; 0x50
 800d690:	e006      	b.n	800d6a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800d692:	bf00      	nop
 800d694:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d698:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d69c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800d6a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d6a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6a8:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 800d6ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800d6b0:	2300      	movs	r3, #0
 800d6b2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800d6b6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800d6ba:	460b      	mov	r3, r1
 800d6bc:	4313      	orrs	r3, r2
 800d6be:	d055      	beq.n	800d76c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800d6c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d6c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d6c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d6cc:	d033      	beq.n	800d736 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800d6ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800d6d2:	d82c      	bhi.n	800d72e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d6d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d6d8:	d02f      	beq.n	800d73a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800d6da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d6de:	d826      	bhi.n	800d72e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d6e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d6e4:	d02b      	beq.n	800d73e <HAL_RCCEx_PeriphCLKConfig+0x672>
 800d6e6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800d6ea:	d820      	bhi.n	800d72e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d6ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d6f0:	d012      	beq.n	800d718 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800d6f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d6f6:	d81a      	bhi.n	800d72e <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d6f8:	2b00      	cmp	r3, #0
 800d6fa:	d022      	beq.n	800d742 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800d6fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d700:	d115      	bne.n	800d72e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d702:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d706:	3308      	adds	r3, #8
 800d708:	2101      	movs	r1, #1
 800d70a:	4618      	mov	r0, r3
 800d70c:	f000 fecc 	bl	800e4a8 <RCCEx_PLL2_Config>
 800d710:	4603      	mov	r3, r0
 800d712:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800d716:	e015      	b.n	800d744 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d718:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d71c:	3328      	adds	r3, #40	; 0x28
 800d71e:	2101      	movs	r1, #1
 800d720:	4618      	mov	r0, r3
 800d722:	f000 ff73 	bl	800e60c <RCCEx_PLL3_Config>
 800d726:	4603      	mov	r3, r0
 800d728:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800d72c:	e00a      	b.n	800d744 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800d72e:	2301      	movs	r3, #1
 800d730:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d734:	e006      	b.n	800d744 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d736:	bf00      	nop
 800d738:	e004      	b.n	800d744 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d73a:	bf00      	nop
 800d73c:	e002      	b.n	800d744 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d73e:	bf00      	nop
 800d740:	e000      	b.n	800d744 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d742:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d744:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d748:	2b00      	cmp	r3, #0
 800d74a:	d10b      	bne.n	800d764 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800d74c:	4ba3      	ldr	r3, [pc, #652]	; (800d9dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d74e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800d750:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800d754:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d758:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800d75c:	4a9f      	ldr	r2, [pc, #636]	; (800d9dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d75e:	430b      	orrs	r3, r1
 800d760:	6593      	str	r3, [r2, #88]	; 0x58
 800d762:	e003      	b.n	800d76c <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d764:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d768:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d76c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d770:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d774:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 800d778:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800d77c:	2300      	movs	r3, #0
 800d77e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800d782:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 800d786:	460b      	mov	r3, r1
 800d788:	4313      	orrs	r3, r2
 800d78a:	d037      	beq.n	800d7fc <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800d78c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d790:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d792:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d796:	d00e      	beq.n	800d7b6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 800d798:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800d79c:	d816      	bhi.n	800d7cc <HAL_RCCEx_PeriphCLKConfig+0x700>
 800d79e:	2b00      	cmp	r3, #0
 800d7a0:	d018      	beq.n	800d7d4 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800d7a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d7a6:	d111      	bne.n	800d7cc <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d7a8:	4b8c      	ldr	r3, [pc, #560]	; (800d9dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d7aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7ac:	4a8b      	ldr	r2, [pc, #556]	; (800d9dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d7ae:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d7b2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800d7b4:	e00f      	b.n	800d7d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d7b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d7ba:	3308      	adds	r3, #8
 800d7bc:	2101      	movs	r1, #1
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f000 fe72 	bl	800e4a8 <RCCEx_PLL2_Config>
 800d7c4:	4603      	mov	r3, r0
 800d7c6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800d7ca:	e004      	b.n	800d7d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d7cc:	2301      	movs	r3, #1
 800d7ce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d7d2:	e000      	b.n	800d7d6 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 800d7d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d7d6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d10a      	bne.n	800d7f4 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d7de:	4b7f      	ldr	r3, [pc, #508]	; (800d9dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d7e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d7e2:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800d7e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d7ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7ec:	4a7b      	ldr	r2, [pc, #492]	; (800d9dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d7ee:	430b      	orrs	r3, r1
 800d7f0:	6513      	str	r3, [r2, #80]	; 0x50
 800d7f2:	e003      	b.n	800d7fc <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d7f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d7f8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800d7fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d800:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d804:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 800d808:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800d80c:	2300      	movs	r3, #0
 800d80e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800d812:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800d816:	460b      	mov	r3, r1
 800d818:	4313      	orrs	r3, r2
 800d81a:	d039      	beq.n	800d890 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800d81c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d820:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d822:	2b03      	cmp	r3, #3
 800d824:	d81c      	bhi.n	800d860 <HAL_RCCEx_PeriphCLKConfig+0x794>
 800d826:	a201      	add	r2, pc, #4	; (adr r2, 800d82c <HAL_RCCEx_PeriphCLKConfig+0x760>)
 800d828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d82c:	0800d869 	.word	0x0800d869
 800d830:	0800d83d 	.word	0x0800d83d
 800d834:	0800d84b 	.word	0x0800d84b
 800d838:	0800d869 	.word	0x0800d869
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d83c:	4b67      	ldr	r3, [pc, #412]	; (800d9dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d83e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d840:	4a66      	ldr	r2, [pc, #408]	; (800d9dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d842:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800d846:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800d848:	e00f      	b.n	800d86a <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d84a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d84e:	3308      	adds	r3, #8
 800d850:	2102      	movs	r1, #2
 800d852:	4618      	mov	r0, r3
 800d854:	f000 fe28 	bl	800e4a8 <RCCEx_PLL2_Config>
 800d858:	4603      	mov	r3, r0
 800d85a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800d85e:	e004      	b.n	800d86a <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800d860:	2301      	movs	r3, #1
 800d862:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d866:	e000      	b.n	800d86a <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 800d868:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d86a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d10a      	bne.n	800d888 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800d872:	4b5a      	ldr	r3, [pc, #360]	; (800d9dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d876:	f023 0103 	bic.w	r1, r3, #3
 800d87a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d87e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d880:	4a56      	ldr	r2, [pc, #344]	; (800d9dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d882:	430b      	orrs	r3, r1
 800d884:	64d3      	str	r3, [r2, #76]	; 0x4c
 800d886:	e003      	b.n	800d890 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d888:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d88c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d890:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d894:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d898:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 800d89c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800d8a0:	2300      	movs	r3, #0
 800d8a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800d8a6:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800d8aa:	460b      	mov	r3, r1
 800d8ac:	4313      	orrs	r3, r2
 800d8ae:	f000 809f 	beq.w	800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d8b2:	4b4b      	ldr	r3, [pc, #300]	; (800d9e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	4a4a      	ldr	r2, [pc, #296]	; (800d9e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d8b8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d8bc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d8be:	f7fb fb9f 	bl	8009000 <HAL_GetTick>
 800d8c2:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d8c6:	e00b      	b.n	800d8e0 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d8c8:	f7fb fb9a 	bl	8009000 <HAL_GetTick>
 800d8cc:	4602      	mov	r2, r0
 800d8ce:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800d8d2:	1ad3      	subs	r3, r2, r3
 800d8d4:	2b64      	cmp	r3, #100	; 0x64
 800d8d6:	d903      	bls.n	800d8e0 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 800d8d8:	2303      	movs	r3, #3
 800d8da:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800d8de:	e005      	b.n	800d8ec <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d8e0:	4b3f      	ldr	r3, [pc, #252]	; (800d9e0 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d0ed      	beq.n	800d8c8 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 800d8ec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d179      	bne.n	800d9e8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800d8f4:	4b39      	ldr	r3, [pc, #228]	; (800d9dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d8f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800d8f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d8fc:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d900:	4053      	eors	r3, r2
 800d902:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d906:	2b00      	cmp	r3, #0
 800d908:	d015      	beq.n	800d936 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d90a:	4b34      	ldr	r3, [pc, #208]	; (800d9dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d90c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d90e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d912:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d916:	4b31      	ldr	r3, [pc, #196]	; (800d9dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d91a:	4a30      	ldr	r2, [pc, #192]	; (800d9dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d91c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800d920:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d922:	4b2e      	ldr	r3, [pc, #184]	; (800d9dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d924:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d926:	4a2d      	ldr	r2, [pc, #180]	; (800d9dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d928:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800d92c:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800d92e:	4a2b      	ldr	r2, [pc, #172]	; (800d9dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d930:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800d934:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800d936:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d93a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d93e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d942:	d118      	bne.n	800d976 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d944:	f7fb fb5c 	bl	8009000 <HAL_GetTick>
 800d948:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d94c:	e00d      	b.n	800d96a <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d94e:	f7fb fb57 	bl	8009000 <HAL_GetTick>
 800d952:	4602      	mov	r2, r0
 800d954:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800d958:	1ad2      	subs	r2, r2, r3
 800d95a:	f241 3388 	movw	r3, #5000	; 0x1388
 800d95e:	429a      	cmp	r2, r3
 800d960:	d903      	bls.n	800d96a <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800d962:	2303      	movs	r3, #3
 800d964:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 800d968:	e005      	b.n	800d976 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d96a:	4b1c      	ldr	r3, [pc, #112]	; (800d9dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d96c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d96e:	f003 0302 	and.w	r3, r3, #2
 800d972:	2b00      	cmp	r3, #0
 800d974:	d0eb      	beq.n	800d94e <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 800d976:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d97a:	2b00      	cmp	r3, #0
 800d97c:	d129      	bne.n	800d9d2 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d97e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d982:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d986:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d98a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d98e:	d10e      	bne.n	800d9ae <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800d990:	4b12      	ldr	r3, [pc, #72]	; (800d9dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d992:	691b      	ldr	r3, [r3, #16]
 800d994:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 800d998:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d99c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d9a0:	091a      	lsrs	r2, r3, #4
 800d9a2:	4b10      	ldr	r3, [pc, #64]	; (800d9e4 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 800d9a4:	4013      	ands	r3, r2
 800d9a6:	4a0d      	ldr	r2, [pc, #52]	; (800d9dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d9a8:	430b      	orrs	r3, r1
 800d9aa:	6113      	str	r3, [r2, #16]
 800d9ac:	e005      	b.n	800d9ba <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 800d9ae:	4b0b      	ldr	r3, [pc, #44]	; (800d9dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d9b0:	691b      	ldr	r3, [r3, #16]
 800d9b2:	4a0a      	ldr	r2, [pc, #40]	; (800d9dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d9b4:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800d9b8:	6113      	str	r3, [r2, #16]
 800d9ba:	4b08      	ldr	r3, [pc, #32]	; (800d9dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d9bc:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800d9be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d9c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800d9c6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d9ca:	4a04      	ldr	r2, [pc, #16]	; (800d9dc <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800d9cc:	430b      	orrs	r3, r1
 800d9ce:	6713      	str	r3, [r2, #112]	; 0x70
 800d9d0:	e00e      	b.n	800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d9d2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d9d6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 800d9da:	e009      	b.n	800d9f0 <HAL_RCCEx_PeriphCLKConfig+0x924>
 800d9dc:	58024400 	.word	0x58024400
 800d9e0:	58024800 	.word	0x58024800
 800d9e4:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d9e8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800d9ec:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800d9f0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800d9f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9f8:	f002 0301 	and.w	r3, r2, #1
 800d9fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800da00:	2300      	movs	r3, #0
 800da02:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800da06:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800da0a:	460b      	mov	r3, r1
 800da0c:	4313      	orrs	r3, r2
 800da0e:	f000 8089 	beq.w	800db24 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800da12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800da16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800da18:	2b28      	cmp	r3, #40	; 0x28
 800da1a:	d86b      	bhi.n	800daf4 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 800da1c:	a201      	add	r2, pc, #4	; (adr r2, 800da24 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800da1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da22:	bf00      	nop
 800da24:	0800dafd 	.word	0x0800dafd
 800da28:	0800daf5 	.word	0x0800daf5
 800da2c:	0800daf5 	.word	0x0800daf5
 800da30:	0800daf5 	.word	0x0800daf5
 800da34:	0800daf5 	.word	0x0800daf5
 800da38:	0800daf5 	.word	0x0800daf5
 800da3c:	0800daf5 	.word	0x0800daf5
 800da40:	0800daf5 	.word	0x0800daf5
 800da44:	0800dac9 	.word	0x0800dac9
 800da48:	0800daf5 	.word	0x0800daf5
 800da4c:	0800daf5 	.word	0x0800daf5
 800da50:	0800daf5 	.word	0x0800daf5
 800da54:	0800daf5 	.word	0x0800daf5
 800da58:	0800daf5 	.word	0x0800daf5
 800da5c:	0800daf5 	.word	0x0800daf5
 800da60:	0800daf5 	.word	0x0800daf5
 800da64:	0800dadf 	.word	0x0800dadf
 800da68:	0800daf5 	.word	0x0800daf5
 800da6c:	0800daf5 	.word	0x0800daf5
 800da70:	0800daf5 	.word	0x0800daf5
 800da74:	0800daf5 	.word	0x0800daf5
 800da78:	0800daf5 	.word	0x0800daf5
 800da7c:	0800daf5 	.word	0x0800daf5
 800da80:	0800daf5 	.word	0x0800daf5
 800da84:	0800dafd 	.word	0x0800dafd
 800da88:	0800daf5 	.word	0x0800daf5
 800da8c:	0800daf5 	.word	0x0800daf5
 800da90:	0800daf5 	.word	0x0800daf5
 800da94:	0800daf5 	.word	0x0800daf5
 800da98:	0800daf5 	.word	0x0800daf5
 800da9c:	0800daf5 	.word	0x0800daf5
 800daa0:	0800daf5 	.word	0x0800daf5
 800daa4:	0800dafd 	.word	0x0800dafd
 800daa8:	0800daf5 	.word	0x0800daf5
 800daac:	0800daf5 	.word	0x0800daf5
 800dab0:	0800daf5 	.word	0x0800daf5
 800dab4:	0800daf5 	.word	0x0800daf5
 800dab8:	0800daf5 	.word	0x0800daf5
 800dabc:	0800daf5 	.word	0x0800daf5
 800dac0:	0800daf5 	.word	0x0800daf5
 800dac4:	0800dafd 	.word	0x0800dafd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800dac8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dacc:	3308      	adds	r3, #8
 800dace:	2101      	movs	r1, #1
 800dad0:	4618      	mov	r0, r3
 800dad2:	f000 fce9 	bl	800e4a8 <RCCEx_PLL2_Config>
 800dad6:	4603      	mov	r3, r0
 800dad8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800dadc:	e00f      	b.n	800dafe <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800dade:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dae2:	3328      	adds	r3, #40	; 0x28
 800dae4:	2101      	movs	r1, #1
 800dae6:	4618      	mov	r0, r3
 800dae8:	f000 fd90 	bl	800e60c <RCCEx_PLL3_Config>
 800daec:	4603      	mov	r3, r0
 800daee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800daf2:	e004      	b.n	800dafe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800daf4:	2301      	movs	r3, #1
 800daf6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800dafa:	e000      	b.n	800dafe <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 800dafc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dafe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800db02:	2b00      	cmp	r3, #0
 800db04:	d10a      	bne.n	800db1c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800db06:	4bbf      	ldr	r3, [pc, #764]	; (800de04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800db08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800db0a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800db0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db12:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800db14:	4abb      	ldr	r2, [pc, #748]	; (800de04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800db16:	430b      	orrs	r3, r1
 800db18:	6553      	str	r3, [r2, #84]	; 0x54
 800db1a:	e003      	b.n	800db24 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800db1c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800db20:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800db24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db2c:	f002 0302 	and.w	r3, r2, #2
 800db30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800db34:	2300      	movs	r3, #0
 800db36:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800db3a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800db3e:	460b      	mov	r3, r1
 800db40:	4313      	orrs	r3, r2
 800db42:	d041      	beq.n	800dbc8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800db44:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800db4a:	2b05      	cmp	r3, #5
 800db4c:	d824      	bhi.n	800db98 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800db4e:	a201      	add	r2, pc, #4	; (adr r2, 800db54 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800db50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db54:	0800dba1 	.word	0x0800dba1
 800db58:	0800db6d 	.word	0x0800db6d
 800db5c:	0800db83 	.word	0x0800db83
 800db60:	0800dba1 	.word	0x0800dba1
 800db64:	0800dba1 	.word	0x0800dba1
 800db68:	0800dba1 	.word	0x0800dba1
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800db6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db70:	3308      	adds	r3, #8
 800db72:	2101      	movs	r1, #1
 800db74:	4618      	mov	r0, r3
 800db76:	f000 fc97 	bl	800e4a8 <RCCEx_PLL2_Config>
 800db7a:	4603      	mov	r3, r0
 800db7c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800db80:	e00f      	b.n	800dba2 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800db82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800db86:	3328      	adds	r3, #40	; 0x28
 800db88:	2101      	movs	r1, #1
 800db8a:	4618      	mov	r0, r3
 800db8c:	f000 fd3e 	bl	800e60c <RCCEx_PLL3_Config>
 800db90:	4603      	mov	r3, r0
 800db92:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800db96:	e004      	b.n	800dba2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800db98:	2301      	movs	r3, #1
 800db9a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800db9e:	e000      	b.n	800dba2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800dba0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dba2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d10a      	bne.n	800dbc0 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800dbaa:	4b96      	ldr	r3, [pc, #600]	; (800de04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800dbac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dbae:	f023 0107 	bic.w	r1, r3, #7
 800dbb2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dbb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dbb8:	4a92      	ldr	r2, [pc, #584]	; (800de04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800dbba:	430b      	orrs	r3, r1
 800dbbc:	6553      	str	r3, [r2, #84]	; 0x54
 800dbbe:	e003      	b.n	800dbc8 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dbc0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800dbc4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800dbc8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dbcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbd0:	f002 0304 	and.w	r3, r2, #4
 800dbd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800dbd8:	2300      	movs	r3, #0
 800dbda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800dbde:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800dbe2:	460b      	mov	r3, r1
 800dbe4:	4313      	orrs	r3, r2
 800dbe6:	d044      	beq.n	800dc72 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800dbe8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dbec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dbf0:	2b05      	cmp	r3, #5
 800dbf2:	d825      	bhi.n	800dc40 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800dbf4:	a201      	add	r2, pc, #4	; (adr r2, 800dbfc <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800dbf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dbfa:	bf00      	nop
 800dbfc:	0800dc49 	.word	0x0800dc49
 800dc00:	0800dc15 	.word	0x0800dc15
 800dc04:	0800dc2b 	.word	0x0800dc2b
 800dc08:	0800dc49 	.word	0x0800dc49
 800dc0c:	0800dc49 	.word	0x0800dc49
 800dc10:	0800dc49 	.word	0x0800dc49
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800dc14:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc18:	3308      	adds	r3, #8
 800dc1a:	2101      	movs	r1, #1
 800dc1c:	4618      	mov	r0, r3
 800dc1e:	f000 fc43 	bl	800e4a8 <RCCEx_PLL2_Config>
 800dc22:	4603      	mov	r3, r0
 800dc24:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800dc28:	e00f      	b.n	800dc4a <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800dc2a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc2e:	3328      	adds	r3, #40	; 0x28
 800dc30:	2101      	movs	r1, #1
 800dc32:	4618      	mov	r0, r3
 800dc34:	f000 fcea 	bl	800e60c <RCCEx_PLL3_Config>
 800dc38:	4603      	mov	r3, r0
 800dc3a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800dc3e:	e004      	b.n	800dc4a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dc40:	2301      	movs	r3, #1
 800dc42:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800dc46:	e000      	b.n	800dc4a <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800dc48:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dc4a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d10b      	bne.n	800dc6a <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800dc52:	4b6c      	ldr	r3, [pc, #432]	; (800de04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800dc54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dc56:	f023 0107 	bic.w	r1, r3, #7
 800dc5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc5e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800dc62:	4a68      	ldr	r2, [pc, #416]	; (800de04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800dc64:	430b      	orrs	r3, r1
 800dc66:	6593      	str	r3, [r2, #88]	; 0x58
 800dc68:	e003      	b.n	800dc72 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc6a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800dc6e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800dc72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc7a:	f002 0320 	and.w	r3, r2, #32
 800dc7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800dc82:	2300      	movs	r3, #0
 800dc84:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800dc88:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800dc8c:	460b      	mov	r3, r1
 800dc8e:	4313      	orrs	r3, r2
 800dc90:	d055      	beq.n	800dd3e <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800dc92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dc96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dc9a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dc9e:	d033      	beq.n	800dd08 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800dca0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800dca4:	d82c      	bhi.n	800dd00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800dca6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dcaa:	d02f      	beq.n	800dd0c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800dcac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dcb0:	d826      	bhi.n	800dd00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800dcb2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800dcb6:	d02b      	beq.n	800dd10 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800dcb8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800dcbc:	d820      	bhi.n	800dd00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800dcbe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dcc2:	d012      	beq.n	800dcea <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800dcc4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800dcc8:	d81a      	bhi.n	800dd00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800dcca:	2b00      	cmp	r3, #0
 800dccc:	d022      	beq.n	800dd14 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800dcce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800dcd2:	d115      	bne.n	800dd00 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dcd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dcd8:	3308      	adds	r3, #8
 800dcda:	2100      	movs	r1, #0
 800dcdc:	4618      	mov	r0, r3
 800dcde:	f000 fbe3 	bl	800e4a8 <RCCEx_PLL2_Config>
 800dce2:	4603      	mov	r3, r0
 800dce4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800dce8:	e015      	b.n	800dd16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800dcea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dcee:	3328      	adds	r3, #40	; 0x28
 800dcf0:	2102      	movs	r1, #2
 800dcf2:	4618      	mov	r0, r3
 800dcf4:	f000 fc8a 	bl	800e60c <RCCEx_PLL3_Config>
 800dcf8:	4603      	mov	r3, r0
 800dcfa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800dcfe:	e00a      	b.n	800dd16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dd00:	2301      	movs	r3, #1
 800dd02:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800dd06:	e006      	b.n	800dd16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800dd08:	bf00      	nop
 800dd0a:	e004      	b.n	800dd16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800dd0c:	bf00      	nop
 800dd0e:	e002      	b.n	800dd16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800dd10:	bf00      	nop
 800dd12:	e000      	b.n	800dd16 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800dd14:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dd16:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	d10b      	bne.n	800dd36 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800dd1e:	4b39      	ldr	r3, [pc, #228]	; (800de04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800dd20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dd22:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800dd26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd2e:	4a35      	ldr	r2, [pc, #212]	; (800de04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800dd30:	430b      	orrs	r3, r1
 800dd32:	6553      	str	r3, [r2, #84]	; 0x54
 800dd34:	e003      	b.n	800dd3e <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd36:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800dd3a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800dd3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd46:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800dd4a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800dd4e:	2300      	movs	r3, #0
 800dd50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800dd54:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800dd58:	460b      	mov	r3, r1
 800dd5a:	4313      	orrs	r3, r2
 800dd5c:	d058      	beq.n	800de10 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800dd5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dd62:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800dd66:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800dd6a:	d033      	beq.n	800ddd4 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 800dd6c:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800dd70:	d82c      	bhi.n	800ddcc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800dd72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dd76:	d02f      	beq.n	800ddd8 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800dd78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800dd7c:	d826      	bhi.n	800ddcc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800dd7e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800dd82:	d02b      	beq.n	800dddc <HAL_RCCEx_PeriphCLKConfig+0xd10>
 800dd84:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800dd88:	d820      	bhi.n	800ddcc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800dd8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dd8e:	d012      	beq.n	800ddb6 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 800dd90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800dd94:	d81a      	bhi.n	800ddcc <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d022      	beq.n	800dde0 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800dd9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800dd9e:	d115      	bne.n	800ddcc <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dda0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dda4:	3308      	adds	r3, #8
 800dda6:	2100      	movs	r1, #0
 800dda8:	4618      	mov	r0, r3
 800ddaa:	f000 fb7d 	bl	800e4a8 <RCCEx_PLL2_Config>
 800ddae:	4603      	mov	r3, r0
 800ddb0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ddb4:	e015      	b.n	800dde2 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ddb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ddba:	3328      	adds	r3, #40	; 0x28
 800ddbc:	2102      	movs	r1, #2
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	f000 fc24 	bl	800e60c <RCCEx_PLL3_Config>
 800ddc4:	4603      	mov	r3, r0
 800ddc6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800ddca:	e00a      	b.n	800dde2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ddcc:	2301      	movs	r3, #1
 800ddce:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800ddd2:	e006      	b.n	800dde2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ddd4:	bf00      	nop
 800ddd6:	e004      	b.n	800dde2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800ddd8:	bf00      	nop
 800ddda:	e002      	b.n	800dde2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800dddc:	bf00      	nop
 800ddde:	e000      	b.n	800dde2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800dde0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dde2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d10e      	bne.n	800de08 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800ddea:	4b06      	ldr	r3, [pc, #24]	; (800de04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ddec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ddee:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800ddf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800ddf6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800ddfa:	4a02      	ldr	r2, [pc, #8]	; (800de04 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800ddfc:	430b      	orrs	r3, r1
 800ddfe:	6593      	str	r3, [r2, #88]	; 0x58
 800de00:	e006      	b.n	800de10 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800de02:	bf00      	nop
 800de04:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800de08:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800de0c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800de10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800de14:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de18:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800de1c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800de20:	2300      	movs	r3, #0
 800de22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800de26:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800de2a:	460b      	mov	r3, r1
 800de2c:	4313      	orrs	r3, r2
 800de2e:	d055      	beq.n	800dedc <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800de30:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800de34:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800de38:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800de3c:	d033      	beq.n	800dea6 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 800de3e:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800de42:	d82c      	bhi.n	800de9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800de44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de48:	d02f      	beq.n	800deaa <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800de4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800de4e:	d826      	bhi.n	800de9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800de50:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800de54:	d02b      	beq.n	800deae <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800de56:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800de5a:	d820      	bhi.n	800de9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800de5c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800de60:	d012      	beq.n	800de88 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 800de62:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800de66:	d81a      	bhi.n	800de9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d022      	beq.n	800deb2 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 800de6c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800de70:	d115      	bne.n	800de9e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800de72:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800de76:	3308      	adds	r3, #8
 800de78:	2100      	movs	r1, #0
 800de7a:	4618      	mov	r0, r3
 800de7c:	f000 fb14 	bl	800e4a8 <RCCEx_PLL2_Config>
 800de80:	4603      	mov	r3, r0
 800de82:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800de86:	e015      	b.n	800deb4 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800de88:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800de8c:	3328      	adds	r3, #40	; 0x28
 800de8e:	2102      	movs	r1, #2
 800de90:	4618      	mov	r0, r3
 800de92:	f000 fbbb 	bl	800e60c <RCCEx_PLL3_Config>
 800de96:	4603      	mov	r3, r0
 800de98:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800de9c:	e00a      	b.n	800deb4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800de9e:	2301      	movs	r3, #1
 800dea0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800dea4:	e006      	b.n	800deb4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800dea6:	bf00      	nop
 800dea8:	e004      	b.n	800deb4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800deaa:	bf00      	nop
 800deac:	e002      	b.n	800deb4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800deae:	bf00      	nop
 800deb0:	e000      	b.n	800deb4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800deb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800deb4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800deb8:	2b00      	cmp	r3, #0
 800deba:	d10b      	bne.n	800ded4 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800debc:	4bbb      	ldr	r3, [pc, #748]	; (800e1ac <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800debe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800dec0:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800dec4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dec8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800decc:	4ab7      	ldr	r2, [pc, #732]	; (800e1ac <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800dece:	430b      	orrs	r3, r1
 800ded0:	6593      	str	r3, [r2, #88]	; 0x58
 800ded2:	e003      	b.n	800dedc <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ded4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800ded8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800dedc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dee4:	f002 0308 	and.w	r3, r2, #8
 800dee8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800deec:	2300      	movs	r3, #0
 800deee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800def2:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 800def6:	460b      	mov	r3, r1
 800def8:	4313      	orrs	r3, r2
 800defa:	d01e      	beq.n	800df3a <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800defc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800df00:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df04:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800df08:	d10c      	bne.n	800df24 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800df0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800df0e:	3328      	adds	r3, #40	; 0x28
 800df10:	2102      	movs	r1, #2
 800df12:	4618      	mov	r0, r3
 800df14:	f000 fb7a 	bl	800e60c <RCCEx_PLL3_Config>
 800df18:	4603      	mov	r3, r0
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d002      	beq.n	800df24 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800df1e:	2301      	movs	r3, #1
 800df20:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800df24:	4ba1      	ldr	r3, [pc, #644]	; (800e1ac <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800df26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800df28:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800df2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800df30:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800df34:	4a9d      	ldr	r2, [pc, #628]	; (800e1ac <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800df36:	430b      	orrs	r3, r1
 800df38:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800df3a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800df3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df42:	f002 0310 	and.w	r3, r2, #16
 800df46:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800df4a:	2300      	movs	r3, #0
 800df4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800df50:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800df54:	460b      	mov	r3, r1
 800df56:	4313      	orrs	r3, r2
 800df58:	d01e      	beq.n	800df98 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800df5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800df5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800df62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800df66:	d10c      	bne.n	800df82 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800df68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800df6c:	3328      	adds	r3, #40	; 0x28
 800df6e:	2102      	movs	r1, #2
 800df70:	4618      	mov	r0, r3
 800df72:	f000 fb4b 	bl	800e60c <RCCEx_PLL3_Config>
 800df76:	4603      	mov	r3, r0
 800df78:	2b00      	cmp	r3, #0
 800df7a:	d002      	beq.n	800df82 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 800df7c:	2301      	movs	r3, #1
 800df7e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800df82:	4b8a      	ldr	r3, [pc, #552]	; (800e1ac <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800df84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800df86:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800df8a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800df8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800df92:	4a86      	ldr	r2, [pc, #536]	; (800e1ac <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800df94:	430b      	orrs	r3, r1
 800df96:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800df98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800df9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfa0:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 800dfa4:	67bb      	str	r3, [r7, #120]	; 0x78
 800dfa6:	2300      	movs	r3, #0
 800dfa8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800dfaa:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800dfae:	460b      	mov	r3, r1
 800dfb0:	4313      	orrs	r3, r2
 800dfb2:	d03e      	beq.n	800e032 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800dfb4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dfb8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800dfbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dfc0:	d022      	beq.n	800e008 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 800dfc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dfc6:	d81b      	bhi.n	800e000 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d003      	beq.n	800dfd4 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800dfcc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dfd0:	d00b      	beq.n	800dfea <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 800dfd2:	e015      	b.n	800e000 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dfd4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dfd8:	3308      	adds	r3, #8
 800dfda:	2100      	movs	r1, #0
 800dfdc:	4618      	mov	r0, r3
 800dfde:	f000 fa63 	bl	800e4a8 <RCCEx_PLL2_Config>
 800dfe2:	4603      	mov	r3, r0
 800dfe4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800dfe8:	e00f      	b.n	800e00a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800dfea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800dfee:	3328      	adds	r3, #40	; 0x28
 800dff0:	2102      	movs	r1, #2
 800dff2:	4618      	mov	r0, r3
 800dff4:	f000 fb0a 	bl	800e60c <RCCEx_PLL3_Config>
 800dff8:	4603      	mov	r3, r0
 800dffa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800dffe:	e004      	b.n	800e00a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e000:	2301      	movs	r3, #1
 800e002:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800e006:	e000      	b.n	800e00a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 800e008:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e00a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e00e:	2b00      	cmp	r3, #0
 800e010:	d10b      	bne.n	800e02a <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800e012:	4b66      	ldr	r3, [pc, #408]	; (800e1ac <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800e014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e016:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800e01a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e01e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800e022:	4a62      	ldr	r2, [pc, #392]	; (800e1ac <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800e024:	430b      	orrs	r3, r1
 800e026:	6593      	str	r3, [r2, #88]	; 0x58
 800e028:	e003      	b.n	800e032 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e02a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e02e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800e032:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e03a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800e03e:	673b      	str	r3, [r7, #112]	; 0x70
 800e040:	2300      	movs	r3, #0
 800e042:	677b      	str	r3, [r7, #116]	; 0x74
 800e044:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800e048:	460b      	mov	r3, r1
 800e04a:	4313      	orrs	r3, r2
 800e04c:	d03b      	beq.n	800e0c6 <HAL_RCCEx_PeriphCLKConfig+0xffa>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800e04e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e056:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e05a:	d01f      	beq.n	800e09c <HAL_RCCEx_PeriphCLKConfig+0xfd0>
 800e05c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800e060:	d818      	bhi.n	800e094 <HAL_RCCEx_PeriphCLKConfig+0xfc8>
 800e062:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e066:	d003      	beq.n	800e070 <HAL_RCCEx_PeriphCLKConfig+0xfa4>
 800e068:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800e06c:	d007      	beq.n	800e07e <HAL_RCCEx_PeriphCLKConfig+0xfb2>
 800e06e:	e011      	b.n	800e094 <HAL_RCCEx_PeriphCLKConfig+0xfc8>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e070:	4b4e      	ldr	r3, [pc, #312]	; (800e1ac <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800e072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e074:	4a4d      	ldr	r2, [pc, #308]	; (800e1ac <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800e076:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e07a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800e07c:	e00f      	b.n	800e09e <HAL_RCCEx_PeriphCLKConfig+0xfd2>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e07e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e082:	3328      	adds	r3, #40	; 0x28
 800e084:	2101      	movs	r1, #1
 800e086:	4618      	mov	r0, r3
 800e088:	f000 fac0 	bl	800e60c <RCCEx_PLL3_Config>
 800e08c:	4603      	mov	r3, r0
 800e08e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 800e092:	e004      	b.n	800e09e <HAL_RCCEx_PeriphCLKConfig+0xfd2>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e094:	2301      	movs	r3, #1
 800e096:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800e09a:	e000      	b.n	800e09e <HAL_RCCEx_PeriphCLKConfig+0xfd2>
        break;
 800e09c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e09e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d10b      	bne.n	800e0be <HAL_RCCEx_PeriphCLKConfig+0xff2>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800e0a6:	4b41      	ldr	r3, [pc, #260]	; (800e1ac <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800e0a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0aa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800e0ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e0b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800e0b6:	4a3d      	ldr	r2, [pc, #244]	; (800e1ac <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800e0b8:	430b      	orrs	r3, r1
 800e0ba:	6553      	str	r3, [r2, #84]	; 0x54
 800e0bc:	e003      	b.n	800e0c6 <HAL_RCCEx_PeriphCLKConfig+0xffa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e0be:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e0c2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800e0c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e0ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0ce:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800e0d2:	66bb      	str	r3, [r7, #104]	; 0x68
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e0d8:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800e0dc:	460b      	mov	r3, r1
 800e0de:	4313      	orrs	r3, r2
 800e0e0:	d031      	beq.n	800e146 <HAL_RCCEx_PeriphCLKConfig+0x107a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800e0e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e0e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d003      	beq.n	800e0f4 <HAL_RCCEx_PeriphCLKConfig+0x1028>
 800e0ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e0f0:	d007      	beq.n	800e102 <HAL_RCCEx_PeriphCLKConfig+0x1036>
 800e0f2:	e011      	b.n	800e118 <HAL_RCCEx_PeriphCLKConfig+0x104c>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e0f4:	4b2d      	ldr	r3, [pc, #180]	; (800e1ac <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800e0f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0f8:	4a2c      	ldr	r2, [pc, #176]	; (800e1ac <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800e0fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e0fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800e100:	e00e      	b.n	800e120 <HAL_RCCEx_PeriphCLKConfig+0x1054>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e102:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e106:	3308      	adds	r3, #8
 800e108:	2102      	movs	r1, #2
 800e10a:	4618      	mov	r0, r3
 800e10c:	f000 f9cc 	bl	800e4a8 <RCCEx_PLL2_Config>
 800e110:	4603      	mov	r3, r0
 800e112:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800e116:	e003      	b.n	800e120 <HAL_RCCEx_PeriphCLKConfig+0x1054>

      default:
        ret = HAL_ERROR;
 800e118:	2301      	movs	r3, #1
 800e11a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800e11e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e120:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e124:	2b00      	cmp	r3, #0
 800e126:	d10a      	bne.n	800e13e <HAL_RCCEx_PeriphCLKConfig+0x1072>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800e128:	4b20      	ldr	r3, [pc, #128]	; (800e1ac <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800e12a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e12c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800e130:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e134:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e136:	4a1d      	ldr	r2, [pc, #116]	; (800e1ac <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800e138:	430b      	orrs	r3, r1
 800e13a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800e13c:	e003      	b.n	800e146 <HAL_RCCEx_PeriphCLKConfig+0x107a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e13e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e142:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800e146:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e14e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 800e152:	663b      	str	r3, [r7, #96]	; 0x60
 800e154:	2300      	movs	r3, #0
 800e156:	667b      	str	r3, [r7, #100]	; 0x64
 800e158:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 800e15c:	460b      	mov	r3, r1
 800e15e:	4313      	orrs	r3, r2
 800e160:	d03b      	beq.n	800e1da <HAL_RCCEx_PeriphCLKConfig+0x110e>
  {

    switch (PeriphClkInit->RngClockSelection)
 800e162:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e166:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e16a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e16e:	d018      	beq.n	800e1a2 <HAL_RCCEx_PeriphCLKConfig+0x10d6>
 800e170:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e174:	d811      	bhi.n	800e19a <HAL_RCCEx_PeriphCLKConfig+0x10ce>
 800e176:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e17a:	d014      	beq.n	800e1a6 <HAL_RCCEx_PeriphCLKConfig+0x10da>
 800e17c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e180:	d80b      	bhi.n	800e19a <HAL_RCCEx_PeriphCLKConfig+0x10ce>
 800e182:	2b00      	cmp	r3, #0
 800e184:	d014      	beq.n	800e1b0 <HAL_RCCEx_PeriphCLKConfig+0x10e4>
 800e186:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e18a:	d106      	bne.n	800e19a <HAL_RCCEx_PeriphCLKConfig+0x10ce>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800e18c:	4b07      	ldr	r3, [pc, #28]	; (800e1ac <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800e18e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e190:	4a06      	ldr	r2, [pc, #24]	; (800e1ac <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800e192:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e196:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800e198:	e00b      	b.n	800e1b2 <HAL_RCCEx_PeriphCLKConfig+0x10e6>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800e19a:	2301      	movs	r3, #1
 800e19c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800e1a0:	e007      	b.n	800e1b2 <HAL_RCCEx_PeriphCLKConfig+0x10e6>
        break;
 800e1a2:	bf00      	nop
 800e1a4:	e005      	b.n	800e1b2 <HAL_RCCEx_PeriphCLKConfig+0x10e6>
        break;
 800e1a6:	bf00      	nop
 800e1a8:	e003      	b.n	800e1b2 <HAL_RCCEx_PeriphCLKConfig+0x10e6>
 800e1aa:	bf00      	nop
 800e1ac:	58024400 	.word	0x58024400
        break;
 800e1b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 800e1b2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e1b6:	2b00      	cmp	r3, #0
 800e1b8:	d10b      	bne.n	800e1d2 <HAL_RCCEx_PeriphCLKConfig+0x1106>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800e1ba:	4bba      	ldr	r3, [pc, #744]	; (800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800e1bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e1be:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800e1c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e1c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e1ca:	4ab6      	ldr	r2, [pc, #728]	; (800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800e1cc:	430b      	orrs	r3, r1
 800e1ce:	6553      	str	r3, [r2, #84]	; 0x54
 800e1d0:	e003      	b.n	800e1da <HAL_RCCEx_PeriphCLKConfig+0x110e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e1d2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e1d6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800e1da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e1de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1e2:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800e1e6:	65bb      	str	r3, [r7, #88]	; 0x58
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e1ec:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800e1f0:	460b      	mov	r3, r1
 800e1f2:	4313      	orrs	r3, r2
 800e1f4:	d009      	beq.n	800e20a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800e1f6:	4bab      	ldr	r3, [pc, #684]	; (800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800e1f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e1fa:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800e1fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e202:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e204:	4aa7      	ldr	r2, [pc, #668]	; (800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800e206:	430b      	orrs	r3, r1
 800e208:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800e20a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e212:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800e216:	653b      	str	r3, [r7, #80]	; 0x50
 800e218:	2300      	movs	r3, #0
 800e21a:	657b      	str	r3, [r7, #84]	; 0x54
 800e21c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800e220:	460b      	mov	r3, r1
 800e222:	4313      	orrs	r3, r2
 800e224:	d00a      	beq.n	800e23c <HAL_RCCEx_PeriphCLKConfig+0x1170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800e226:	4b9f      	ldr	r3, [pc, #636]	; (800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800e228:	691b      	ldr	r3, [r3, #16]
 800e22a:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800e22e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e232:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800e236:	4a9b      	ldr	r2, [pc, #620]	; (800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800e238:	430b      	orrs	r3, r1
 800e23a:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800e23c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e240:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e244:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800e248:	64bb      	str	r3, [r7, #72]	; 0x48
 800e24a:	2300      	movs	r3, #0
 800e24c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e24e:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 800e252:	460b      	mov	r3, r1
 800e254:	4313      	orrs	r3, r2
 800e256:	d009      	beq.n	800e26c <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800e258:	4b92      	ldr	r3, [pc, #584]	; (800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800e25a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e25c:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 800e260:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e264:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e266:	4a8f      	ldr	r2, [pc, #572]	; (800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800e268:	430b      	orrs	r3, r1
 800e26a:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800e26c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e270:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e274:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800e278:	643b      	str	r3, [r7, #64]	; 0x40
 800e27a:	2300      	movs	r3, #0
 800e27c:	647b      	str	r3, [r7, #68]	; 0x44
 800e27e:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 800e282:	460b      	mov	r3, r1
 800e284:	4313      	orrs	r3, r2
 800e286:	d00e      	beq.n	800e2a6 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e288:	4b86      	ldr	r3, [pc, #536]	; (800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800e28a:	691b      	ldr	r3, [r3, #16]
 800e28c:	4a85      	ldr	r2, [pc, #532]	; (800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800e28e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800e292:	6113      	str	r3, [r2, #16]
 800e294:	4b83      	ldr	r3, [pc, #524]	; (800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800e296:	6919      	ldr	r1, [r3, #16]
 800e298:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e29c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800e2a0:	4a80      	ldr	r2, [pc, #512]	; (800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800e2a2:	430b      	orrs	r3, r1
 800e2a4:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800e2a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e2aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2ae:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 800e2b2:	63bb      	str	r3, [r7, #56]	; 0x38
 800e2b4:	2300      	movs	r3, #0
 800e2b6:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e2b8:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800e2bc:	460b      	mov	r3, r1
 800e2be:	4313      	orrs	r3, r2
 800e2c0:	d009      	beq.n	800e2d6 <HAL_RCCEx_PeriphCLKConfig+0x120a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800e2c2:	4b78      	ldr	r3, [pc, #480]	; (800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800e2c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e2c6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800e2ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e2ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2d0:	4a74      	ldr	r2, [pc, #464]	; (800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800e2d2:	430b      	orrs	r3, r1
 800e2d4:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e2d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2de:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 800e2e2:	633b      	str	r3, [r7, #48]	; 0x30
 800e2e4:	2300      	movs	r3, #0
 800e2e6:	637b      	str	r3, [r7, #52]	; 0x34
 800e2e8:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800e2ec:	460b      	mov	r3, r1
 800e2ee:	4313      	orrs	r3, r2
 800e2f0:	d00a      	beq.n	800e308 <HAL_RCCEx_PeriphCLKConfig+0x123c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e2f2:	4b6c      	ldr	r3, [pc, #432]	; (800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800e2f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2f6:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800e2fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e2fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e302:	4a68      	ldr	r2, [pc, #416]	; (800e4a4 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800e304:	430b      	orrs	r3, r1
 800e306:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800e308:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e30c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e310:	2100      	movs	r1, #0
 800e312:	62b9      	str	r1, [r7, #40]	; 0x28
 800e314:	f003 0301 	and.w	r3, r3, #1
 800e318:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e31a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800e31e:	460b      	mov	r3, r1
 800e320:	4313      	orrs	r3, r2
 800e322:	d011      	beq.n	800e348 <HAL_RCCEx_PeriphCLKConfig+0x127c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800e324:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e328:	3308      	adds	r3, #8
 800e32a:	2100      	movs	r1, #0
 800e32c:	4618      	mov	r0, r3
 800e32e:	f000 f8bb 	bl	800e4a8 <RCCEx_PLL2_Config>
 800e332:	4603      	mov	r3, r0
 800e334:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800e338:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d003      	beq.n	800e348 <HAL_RCCEx_PeriphCLKConfig+0x127c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e340:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e344:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800e348:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e34c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e350:	2100      	movs	r1, #0
 800e352:	6239      	str	r1, [r7, #32]
 800e354:	f003 0302 	and.w	r3, r3, #2
 800e358:	627b      	str	r3, [r7, #36]	; 0x24
 800e35a:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800e35e:	460b      	mov	r3, r1
 800e360:	4313      	orrs	r3, r2
 800e362:	d011      	beq.n	800e388 <HAL_RCCEx_PeriphCLKConfig+0x12bc>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800e364:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e368:	3308      	adds	r3, #8
 800e36a:	2101      	movs	r1, #1
 800e36c:	4618      	mov	r0, r3
 800e36e:	f000 f89b 	bl	800e4a8 <RCCEx_PLL2_Config>
 800e372:	4603      	mov	r3, r0
 800e374:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800e378:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e37c:	2b00      	cmp	r3, #0
 800e37e:	d003      	beq.n	800e388 <HAL_RCCEx_PeriphCLKConfig+0x12bc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e380:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e384:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800e388:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e38c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e390:	2100      	movs	r1, #0
 800e392:	61b9      	str	r1, [r7, #24]
 800e394:	f003 0304 	and.w	r3, r3, #4
 800e398:	61fb      	str	r3, [r7, #28]
 800e39a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800e39e:	460b      	mov	r3, r1
 800e3a0:	4313      	orrs	r3, r2
 800e3a2:	d011      	beq.n	800e3c8 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800e3a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e3a8:	3308      	adds	r3, #8
 800e3aa:	2102      	movs	r1, #2
 800e3ac:	4618      	mov	r0, r3
 800e3ae:	f000 f87b 	bl	800e4a8 <RCCEx_PLL2_Config>
 800e3b2:	4603      	mov	r3, r0
 800e3b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800e3b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e3bc:	2b00      	cmp	r3, #0
 800e3be:	d003      	beq.n	800e3c8 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e3c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e3c4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800e3c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e3cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3d0:	2100      	movs	r1, #0
 800e3d2:	6139      	str	r1, [r7, #16]
 800e3d4:	f003 0308 	and.w	r3, r3, #8
 800e3d8:	617b      	str	r3, [r7, #20]
 800e3da:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800e3de:	460b      	mov	r3, r1
 800e3e0:	4313      	orrs	r3, r2
 800e3e2:	d011      	beq.n	800e408 <HAL_RCCEx_PeriphCLKConfig+0x133c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800e3e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e3e8:	3328      	adds	r3, #40	; 0x28
 800e3ea:	2100      	movs	r1, #0
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	f000 f90d 	bl	800e60c <RCCEx_PLL3_Config>
 800e3f2:	4603      	mov	r3, r0
 800e3f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 800e3f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e3fc:	2b00      	cmp	r3, #0
 800e3fe:	d003      	beq.n	800e408 <HAL_RCCEx_PeriphCLKConfig+0x133c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e400:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e404:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800e408:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e410:	2100      	movs	r1, #0
 800e412:	60b9      	str	r1, [r7, #8]
 800e414:	f003 0310 	and.w	r3, r3, #16
 800e418:	60fb      	str	r3, [r7, #12]
 800e41a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800e41e:	460b      	mov	r3, r1
 800e420:	4313      	orrs	r3, r2
 800e422:	d011      	beq.n	800e448 <HAL_RCCEx_PeriphCLKConfig+0x137c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e424:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e428:	3328      	adds	r3, #40	; 0x28
 800e42a:	2101      	movs	r1, #1
 800e42c:	4618      	mov	r0, r3
 800e42e:	f000 f8ed 	bl	800e60c <RCCEx_PLL3_Config>
 800e432:	4603      	mov	r3, r0
 800e434:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800e438:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d003      	beq.n	800e448 <HAL_RCCEx_PeriphCLKConfig+0x137c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e440:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e444:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800e448:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e450:	2100      	movs	r1, #0
 800e452:	6039      	str	r1, [r7, #0]
 800e454:	f003 0320 	and.w	r3, r3, #32
 800e458:	607b      	str	r3, [r7, #4]
 800e45a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800e45e:	460b      	mov	r3, r1
 800e460:	4313      	orrs	r3, r2
 800e462:	d011      	beq.n	800e488 <HAL_RCCEx_PeriphCLKConfig+0x13bc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e464:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800e468:	3328      	adds	r3, #40	; 0x28
 800e46a:	2102      	movs	r1, #2
 800e46c:	4618      	mov	r0, r3
 800e46e:	f000 f8cd 	bl	800e60c <RCCEx_PLL3_Config>
 800e472:	4603      	mov	r3, r0
 800e474:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800e478:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d003      	beq.n	800e488 <HAL_RCCEx_PeriphCLKConfig+0x13bc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e480:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800e484:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 800e488:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d101      	bne.n	800e494 <HAL_RCCEx_PeriphCLKConfig+0x13c8>
  {
    return HAL_OK;
 800e490:	2300      	movs	r3, #0
 800e492:	e000      	b.n	800e496 <HAL_RCCEx_PeriphCLKConfig+0x13ca>
  }
  return HAL_ERROR;
 800e494:	2301      	movs	r3, #1
}
 800e496:	4618      	mov	r0, r3
 800e498:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800e49c:	46bd      	mov	sp, r7
 800e49e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e4a2:	bf00      	nop
 800e4a4:	58024400 	.word	0x58024400

0800e4a8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800e4a8:	b580      	push	{r7, lr}
 800e4aa:	b084      	sub	sp, #16
 800e4ac:	af00      	add	r7, sp, #0
 800e4ae:	6078      	str	r0, [r7, #4]
 800e4b0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e4b2:	2300      	movs	r3, #0
 800e4b4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e4b6:	4b53      	ldr	r3, [pc, #332]	; (800e604 <RCCEx_PLL2_Config+0x15c>)
 800e4b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4ba:	f003 0303 	and.w	r3, r3, #3
 800e4be:	2b03      	cmp	r3, #3
 800e4c0:	d101      	bne.n	800e4c6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800e4c2:	2301      	movs	r3, #1
 800e4c4:	e099      	b.n	800e5fa <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800e4c6:	4b4f      	ldr	r3, [pc, #316]	; (800e604 <RCCEx_PLL2_Config+0x15c>)
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	4a4e      	ldr	r2, [pc, #312]	; (800e604 <RCCEx_PLL2_Config+0x15c>)
 800e4cc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800e4d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e4d2:	f7fa fd95 	bl	8009000 <HAL_GetTick>
 800e4d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e4d8:	e008      	b.n	800e4ec <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e4da:	f7fa fd91 	bl	8009000 <HAL_GetTick>
 800e4de:	4602      	mov	r2, r0
 800e4e0:	68bb      	ldr	r3, [r7, #8]
 800e4e2:	1ad3      	subs	r3, r2, r3
 800e4e4:	2b02      	cmp	r3, #2
 800e4e6:	d901      	bls.n	800e4ec <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e4e8:	2303      	movs	r3, #3
 800e4ea:	e086      	b.n	800e5fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800e4ec:	4b45      	ldr	r3, [pc, #276]	; (800e604 <RCCEx_PLL2_Config+0x15c>)
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e4f4:	2b00      	cmp	r3, #0
 800e4f6:	d1f0      	bne.n	800e4da <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800e4f8:	4b42      	ldr	r3, [pc, #264]	; (800e604 <RCCEx_PLL2_Config+0x15c>)
 800e4fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e4fc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	681b      	ldr	r3, [r3, #0]
 800e504:	031b      	lsls	r3, r3, #12
 800e506:	493f      	ldr	r1, [pc, #252]	; (800e604 <RCCEx_PLL2_Config+0x15c>)
 800e508:	4313      	orrs	r3, r2
 800e50a:	628b      	str	r3, [r1, #40]	; 0x28
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	685b      	ldr	r3, [r3, #4]
 800e510:	3b01      	subs	r3, #1
 800e512:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	689b      	ldr	r3, [r3, #8]
 800e51a:	3b01      	subs	r3, #1
 800e51c:	025b      	lsls	r3, r3, #9
 800e51e:	b29b      	uxth	r3, r3
 800e520:	431a      	orrs	r2, r3
 800e522:	687b      	ldr	r3, [r7, #4]
 800e524:	68db      	ldr	r3, [r3, #12]
 800e526:	3b01      	subs	r3, #1
 800e528:	041b      	lsls	r3, r3, #16
 800e52a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800e52e:	431a      	orrs	r2, r3
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	691b      	ldr	r3, [r3, #16]
 800e534:	3b01      	subs	r3, #1
 800e536:	061b      	lsls	r3, r3, #24
 800e538:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800e53c:	4931      	ldr	r1, [pc, #196]	; (800e604 <RCCEx_PLL2_Config+0x15c>)
 800e53e:	4313      	orrs	r3, r2
 800e540:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800e542:	4b30      	ldr	r3, [pc, #192]	; (800e604 <RCCEx_PLL2_Config+0x15c>)
 800e544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e546:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	695b      	ldr	r3, [r3, #20]
 800e54e:	492d      	ldr	r1, [pc, #180]	; (800e604 <RCCEx_PLL2_Config+0x15c>)
 800e550:	4313      	orrs	r3, r2
 800e552:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800e554:	4b2b      	ldr	r3, [pc, #172]	; (800e604 <RCCEx_PLL2_Config+0x15c>)
 800e556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e558:	f023 0220 	bic.w	r2, r3, #32
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	699b      	ldr	r3, [r3, #24]
 800e560:	4928      	ldr	r1, [pc, #160]	; (800e604 <RCCEx_PLL2_Config+0x15c>)
 800e562:	4313      	orrs	r3, r2
 800e564:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800e566:	4b27      	ldr	r3, [pc, #156]	; (800e604 <RCCEx_PLL2_Config+0x15c>)
 800e568:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e56a:	4a26      	ldr	r2, [pc, #152]	; (800e604 <RCCEx_PLL2_Config+0x15c>)
 800e56c:	f023 0310 	bic.w	r3, r3, #16
 800e570:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800e572:	4b24      	ldr	r3, [pc, #144]	; (800e604 <RCCEx_PLL2_Config+0x15c>)
 800e574:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800e576:	4b24      	ldr	r3, [pc, #144]	; (800e608 <RCCEx_PLL2_Config+0x160>)
 800e578:	4013      	ands	r3, r2
 800e57a:	687a      	ldr	r2, [r7, #4]
 800e57c:	69d2      	ldr	r2, [r2, #28]
 800e57e:	00d2      	lsls	r2, r2, #3
 800e580:	4920      	ldr	r1, [pc, #128]	; (800e604 <RCCEx_PLL2_Config+0x15c>)
 800e582:	4313      	orrs	r3, r2
 800e584:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800e586:	4b1f      	ldr	r3, [pc, #124]	; (800e604 <RCCEx_PLL2_Config+0x15c>)
 800e588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e58a:	4a1e      	ldr	r2, [pc, #120]	; (800e604 <RCCEx_PLL2_Config+0x15c>)
 800e58c:	f043 0310 	orr.w	r3, r3, #16
 800e590:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	2b00      	cmp	r3, #0
 800e596:	d106      	bne.n	800e5a6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800e598:	4b1a      	ldr	r3, [pc, #104]	; (800e604 <RCCEx_PLL2_Config+0x15c>)
 800e59a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e59c:	4a19      	ldr	r2, [pc, #100]	; (800e604 <RCCEx_PLL2_Config+0x15c>)
 800e59e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800e5a2:	62d3      	str	r3, [r2, #44]	; 0x2c
 800e5a4:	e00f      	b.n	800e5c6 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800e5a6:	683b      	ldr	r3, [r7, #0]
 800e5a8:	2b01      	cmp	r3, #1
 800e5aa:	d106      	bne.n	800e5ba <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800e5ac:	4b15      	ldr	r3, [pc, #84]	; (800e604 <RCCEx_PLL2_Config+0x15c>)
 800e5ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5b0:	4a14      	ldr	r2, [pc, #80]	; (800e604 <RCCEx_PLL2_Config+0x15c>)
 800e5b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e5b6:	62d3      	str	r3, [r2, #44]	; 0x2c
 800e5b8:	e005      	b.n	800e5c6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800e5ba:	4b12      	ldr	r3, [pc, #72]	; (800e604 <RCCEx_PLL2_Config+0x15c>)
 800e5bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5be:	4a11      	ldr	r2, [pc, #68]	; (800e604 <RCCEx_PLL2_Config+0x15c>)
 800e5c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800e5c4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800e5c6:	4b0f      	ldr	r3, [pc, #60]	; (800e604 <RCCEx_PLL2_Config+0x15c>)
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	4a0e      	ldr	r2, [pc, #56]	; (800e604 <RCCEx_PLL2_Config+0x15c>)
 800e5cc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e5d0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e5d2:	f7fa fd15 	bl	8009000 <HAL_GetTick>
 800e5d6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e5d8:	e008      	b.n	800e5ec <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800e5da:	f7fa fd11 	bl	8009000 <HAL_GetTick>
 800e5de:	4602      	mov	r2, r0
 800e5e0:	68bb      	ldr	r3, [r7, #8]
 800e5e2:	1ad3      	subs	r3, r2, r3
 800e5e4:	2b02      	cmp	r3, #2
 800e5e6:	d901      	bls.n	800e5ec <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e5e8:	2303      	movs	r3, #3
 800e5ea:	e006      	b.n	800e5fa <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800e5ec:	4b05      	ldr	r3, [pc, #20]	; (800e604 <RCCEx_PLL2_Config+0x15c>)
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d0f0      	beq.n	800e5da <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800e5f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5fa:	4618      	mov	r0, r3
 800e5fc:	3710      	adds	r7, #16
 800e5fe:	46bd      	mov	sp, r7
 800e600:	bd80      	pop	{r7, pc}
 800e602:	bf00      	nop
 800e604:	58024400 	.word	0x58024400
 800e608:	ffff0007 	.word	0xffff0007

0800e60c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800e60c:	b580      	push	{r7, lr}
 800e60e:	b084      	sub	sp, #16
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
 800e614:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800e616:	2300      	movs	r3, #0
 800e618:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800e61a:	4b53      	ldr	r3, [pc, #332]	; (800e768 <RCCEx_PLL3_Config+0x15c>)
 800e61c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e61e:	f003 0303 	and.w	r3, r3, #3
 800e622:	2b03      	cmp	r3, #3
 800e624:	d101      	bne.n	800e62a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800e626:	2301      	movs	r3, #1
 800e628:	e099      	b.n	800e75e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800e62a:	4b4f      	ldr	r3, [pc, #316]	; (800e768 <RCCEx_PLL3_Config+0x15c>)
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	4a4e      	ldr	r2, [pc, #312]	; (800e768 <RCCEx_PLL3_Config+0x15c>)
 800e630:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e634:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e636:	f7fa fce3 	bl	8009000 <HAL_GetTick>
 800e63a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e63c:	e008      	b.n	800e650 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e63e:	f7fa fcdf 	bl	8009000 <HAL_GetTick>
 800e642:	4602      	mov	r2, r0
 800e644:	68bb      	ldr	r3, [r7, #8]
 800e646:	1ad3      	subs	r3, r2, r3
 800e648:	2b02      	cmp	r3, #2
 800e64a:	d901      	bls.n	800e650 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800e64c:	2303      	movs	r3, #3
 800e64e:	e086      	b.n	800e75e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800e650:	4b45      	ldr	r3, [pc, #276]	; (800e768 <RCCEx_PLL3_Config+0x15c>)
 800e652:	681b      	ldr	r3, [r3, #0]
 800e654:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e658:	2b00      	cmp	r3, #0
 800e65a:	d1f0      	bne.n	800e63e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800e65c:	4b42      	ldr	r3, [pc, #264]	; (800e768 <RCCEx_PLL3_Config+0x15c>)
 800e65e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e660:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	681b      	ldr	r3, [r3, #0]
 800e668:	051b      	lsls	r3, r3, #20
 800e66a:	493f      	ldr	r1, [pc, #252]	; (800e768 <RCCEx_PLL3_Config+0x15c>)
 800e66c:	4313      	orrs	r3, r2
 800e66e:	628b      	str	r3, [r1, #40]	; 0x28
 800e670:	687b      	ldr	r3, [r7, #4]
 800e672:	685b      	ldr	r3, [r3, #4]
 800e674:	3b01      	subs	r3, #1
 800e676:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	689b      	ldr	r3, [r3, #8]
 800e67e:	3b01      	subs	r3, #1
 800e680:	025b      	lsls	r3, r3, #9
 800e682:	b29b      	uxth	r3, r3
 800e684:	431a      	orrs	r2, r3
 800e686:	687b      	ldr	r3, [r7, #4]
 800e688:	68db      	ldr	r3, [r3, #12]
 800e68a:	3b01      	subs	r3, #1
 800e68c:	041b      	lsls	r3, r3, #16
 800e68e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800e692:	431a      	orrs	r2, r3
 800e694:	687b      	ldr	r3, [r7, #4]
 800e696:	691b      	ldr	r3, [r3, #16]
 800e698:	3b01      	subs	r3, #1
 800e69a:	061b      	lsls	r3, r3, #24
 800e69c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800e6a0:	4931      	ldr	r1, [pc, #196]	; (800e768 <RCCEx_PLL3_Config+0x15c>)
 800e6a2:	4313      	orrs	r3, r2
 800e6a4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800e6a6:	4b30      	ldr	r3, [pc, #192]	; (800e768 <RCCEx_PLL3_Config+0x15c>)
 800e6a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6aa:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	695b      	ldr	r3, [r3, #20]
 800e6b2:	492d      	ldr	r1, [pc, #180]	; (800e768 <RCCEx_PLL3_Config+0x15c>)
 800e6b4:	4313      	orrs	r3, r2
 800e6b6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800e6b8:	4b2b      	ldr	r3, [pc, #172]	; (800e768 <RCCEx_PLL3_Config+0x15c>)
 800e6ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6bc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	699b      	ldr	r3, [r3, #24]
 800e6c4:	4928      	ldr	r1, [pc, #160]	; (800e768 <RCCEx_PLL3_Config+0x15c>)
 800e6c6:	4313      	orrs	r3, r2
 800e6c8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800e6ca:	4b27      	ldr	r3, [pc, #156]	; (800e768 <RCCEx_PLL3_Config+0x15c>)
 800e6cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6ce:	4a26      	ldr	r2, [pc, #152]	; (800e768 <RCCEx_PLL3_Config+0x15c>)
 800e6d0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800e6d4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800e6d6:	4b24      	ldr	r3, [pc, #144]	; (800e768 <RCCEx_PLL3_Config+0x15c>)
 800e6d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e6da:	4b24      	ldr	r3, [pc, #144]	; (800e76c <RCCEx_PLL3_Config+0x160>)
 800e6dc:	4013      	ands	r3, r2
 800e6de:	687a      	ldr	r2, [r7, #4]
 800e6e0:	69d2      	ldr	r2, [r2, #28]
 800e6e2:	00d2      	lsls	r2, r2, #3
 800e6e4:	4920      	ldr	r1, [pc, #128]	; (800e768 <RCCEx_PLL3_Config+0x15c>)
 800e6e6:	4313      	orrs	r3, r2
 800e6e8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800e6ea:	4b1f      	ldr	r3, [pc, #124]	; (800e768 <RCCEx_PLL3_Config+0x15c>)
 800e6ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e6ee:	4a1e      	ldr	r2, [pc, #120]	; (800e768 <RCCEx_PLL3_Config+0x15c>)
 800e6f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e6f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800e6f6:	683b      	ldr	r3, [r7, #0]
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d106      	bne.n	800e70a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800e6fc:	4b1a      	ldr	r3, [pc, #104]	; (800e768 <RCCEx_PLL3_Config+0x15c>)
 800e6fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e700:	4a19      	ldr	r2, [pc, #100]	; (800e768 <RCCEx_PLL3_Config+0x15c>)
 800e702:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800e706:	62d3      	str	r3, [r2, #44]	; 0x2c
 800e708:	e00f      	b.n	800e72a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800e70a:	683b      	ldr	r3, [r7, #0]
 800e70c:	2b01      	cmp	r3, #1
 800e70e:	d106      	bne.n	800e71e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800e710:	4b15      	ldr	r3, [pc, #84]	; (800e768 <RCCEx_PLL3_Config+0x15c>)
 800e712:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e714:	4a14      	ldr	r2, [pc, #80]	; (800e768 <RCCEx_PLL3_Config+0x15c>)
 800e716:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e71a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800e71c:	e005      	b.n	800e72a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800e71e:	4b12      	ldr	r3, [pc, #72]	; (800e768 <RCCEx_PLL3_Config+0x15c>)
 800e720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e722:	4a11      	ldr	r2, [pc, #68]	; (800e768 <RCCEx_PLL3_Config+0x15c>)
 800e724:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e728:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800e72a:	4b0f      	ldr	r3, [pc, #60]	; (800e768 <RCCEx_PLL3_Config+0x15c>)
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	4a0e      	ldr	r2, [pc, #56]	; (800e768 <RCCEx_PLL3_Config+0x15c>)
 800e730:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e734:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e736:	f7fa fc63 	bl	8009000 <HAL_GetTick>
 800e73a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e73c:	e008      	b.n	800e750 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800e73e:	f7fa fc5f 	bl	8009000 <HAL_GetTick>
 800e742:	4602      	mov	r2, r0
 800e744:	68bb      	ldr	r3, [r7, #8]
 800e746:	1ad3      	subs	r3, r2, r3
 800e748:	2b02      	cmp	r3, #2
 800e74a:	d901      	bls.n	800e750 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800e74c:	2303      	movs	r3, #3
 800e74e:	e006      	b.n	800e75e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800e750:	4b05      	ldr	r3, [pc, #20]	; (800e768 <RCCEx_PLL3_Config+0x15c>)
 800e752:	681b      	ldr	r3, [r3, #0]
 800e754:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d0f0      	beq.n	800e73e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800e75c:	7bfb      	ldrb	r3, [r7, #15]
}
 800e75e:	4618      	mov	r0, r3
 800e760:	3710      	adds	r7, #16
 800e762:	46bd      	mov	sp, r7
 800e764:	bd80      	pop	{r7, pc}
 800e766:	bf00      	nop
 800e768:	58024400 	.word	0x58024400
 800e76c:	ffff0007 	.word	0xffff0007

0800e770 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 800e770:	b580      	push	{r7, lr}
 800e772:	b084      	sub	sp, #16
 800e774:	af00      	add	r7, sp, #0
 800e776:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	2b00      	cmp	r3, #0
 800e77c:	d101      	bne.n	800e782 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 800e77e:	2301      	movs	r3, #1
 800e780:	e054      	b.n	800e82c <HAL_RNG_Init+0xbc>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	7a5b      	ldrb	r3, [r3, #9]
 800e786:	b2db      	uxtb	r3, r3
 800e788:	2b00      	cmp	r3, #0
 800e78a:	d105      	bne.n	800e798 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 800e78c:	687b      	ldr	r3, [r7, #4]
 800e78e:	2200      	movs	r2, #0
 800e790:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 800e792:	6878      	ldr	r0, [r7, #4]
 800e794:	f7fa f982 	bl	8008a9c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	2202      	movs	r2, #2
 800e79c:	725a      	strb	r2, [r3, #9]
      }
    }
  }
#else
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
 800e79e:	687b      	ldr	r3, [r7, #4]
 800e7a0:	681b      	ldr	r3, [r3, #0]
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	f023 0120 	bic.w	r1, r3, #32
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	685a      	ldr	r2, [r3, #4]
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	681b      	ldr	r3, [r3, #0]
 800e7b0:	430a      	orrs	r2, r1
 800e7b2:	601a      	str	r2, [r3, #0]
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	681a      	ldr	r2, [r3, #0]
 800e7ba:	687b      	ldr	r3, [r7, #4]
 800e7bc:	681b      	ldr	r3, [r3, #0]
 800e7be:	f042 0204 	orr.w	r2, r2, #4
 800e7c2:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	685b      	ldr	r3, [r3, #4]
 800e7ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e7ce:	2b40      	cmp	r3, #64	; 0x40
 800e7d0:	d104      	bne.n	800e7dc <HAL_RNG_Init+0x6c>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 800e7d2:	687b      	ldr	r3, [r7, #4]
 800e7d4:	2204      	movs	r2, #4
 800e7d6:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 800e7d8:	2301      	movs	r3, #1
 800e7da:	e027      	b.n	800e82c <HAL_RNG_Init+0xbc>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 800e7dc:	f7fa fc10 	bl	8009000 <HAL_GetTick>
 800e7e0:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800e7e2:	e015      	b.n	800e810 <HAL_RNG_Init+0xa0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 800e7e4:	f7fa fc0c 	bl	8009000 <HAL_GetTick>
 800e7e8:	4602      	mov	r2, r0
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	1ad3      	subs	r3, r2, r3
 800e7ee:	2b02      	cmp	r3, #2
 800e7f0:	d90e      	bls.n	800e810 <HAL_RNG_Init+0xa0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	685b      	ldr	r3, [r3, #4]
 800e7f8:	f003 0304 	and.w	r3, r3, #4
 800e7fc:	2b04      	cmp	r3, #4
 800e7fe:	d107      	bne.n	800e810 <HAL_RNG_Init+0xa0>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 800e800:	687b      	ldr	r3, [r7, #4]
 800e802:	2204      	movs	r2, #4
 800e804:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	2202      	movs	r2, #2
 800e80a:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 800e80c:	2301      	movs	r3, #1
 800e80e:	e00d      	b.n	800e82c <HAL_RNG_Init+0xbc>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	681b      	ldr	r3, [r3, #0]
 800e814:	685b      	ldr	r3, [r3, #4]
 800e816:	f003 0304 	and.w	r3, r3, #4
 800e81a:	2b04      	cmp	r3, #4
 800e81c:	d0e2      	beq.n	800e7e4 <HAL_RNG_Init+0x74>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	2201      	movs	r2, #1
 800e822:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	2200      	movs	r2, #0
 800e828:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 800e82a:	2300      	movs	r3, #0
}
 800e82c:	4618      	mov	r0, r3
 800e82e:	3710      	adds	r7, #16
 800e830:	46bd      	mov	sp, r7
 800e832:	bd80      	pop	{r7, pc}

0800e834 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800e834:	b580      	push	{r7, lr}
 800e836:	b082      	sub	sp, #8
 800e838:	af00      	add	r7, sp, #0
 800e83a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800e83c:	687b      	ldr	r3, [r7, #4]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d101      	bne.n	800e846 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800e842:	2301      	movs	r3, #1
 800e844:	e049      	b.n	800e8da <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e84c:	b2db      	uxtb	r3, r3
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d106      	bne.n	800e860 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	2200      	movs	r2, #0
 800e856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800e85a:	6878      	ldr	r0, [r7, #4]
 800e85c:	f7fa f958 	bl	8008b10 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e860:	687b      	ldr	r3, [r7, #4]
 800e862:	2202      	movs	r2, #2
 800e864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800e868:	687b      	ldr	r3, [r7, #4]
 800e86a:	681a      	ldr	r2, [r3, #0]
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	3304      	adds	r3, #4
 800e870:	4619      	mov	r1, r3
 800e872:	4610      	mov	r0, r2
 800e874:	f000 fa24 	bl	800ecc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2201      	movs	r2, #1
 800e87c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e880:	687b      	ldr	r3, [r7, #4]
 800e882:	2201      	movs	r2, #1
 800e884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800e888:	687b      	ldr	r3, [r7, #4]
 800e88a:	2201      	movs	r2, #1
 800e88c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	2201      	movs	r2, #1
 800e894:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800e898:	687b      	ldr	r3, [r7, #4]
 800e89a:	2201      	movs	r2, #1
 800e89c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800e8a0:	687b      	ldr	r3, [r7, #4]
 800e8a2:	2201      	movs	r2, #1
 800e8a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800e8a8:	687b      	ldr	r3, [r7, #4]
 800e8aa:	2201      	movs	r2, #1
 800e8ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	2201      	movs	r2, #1
 800e8b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800e8b8:	687b      	ldr	r3, [r7, #4]
 800e8ba:	2201      	movs	r2, #1
 800e8bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800e8c0:	687b      	ldr	r3, [r7, #4]
 800e8c2:	2201      	movs	r2, #1
 800e8c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	2201      	movs	r2, #1
 800e8cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	2201      	movs	r2, #1
 800e8d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800e8d8:	2300      	movs	r3, #0
}
 800e8da:	4618      	mov	r0, r3
 800e8dc:	3708      	adds	r7, #8
 800e8de:	46bd      	mov	sp, r7
 800e8e0:	bd80      	pop	{r7, pc}
	...

0800e8e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800e8e4:	b480      	push	{r7}
 800e8e6:	b085      	sub	sp, #20
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800e8ec:	687b      	ldr	r3, [r7, #4]
 800e8ee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800e8f2:	b2db      	uxtb	r3, r3
 800e8f4:	2b01      	cmp	r3, #1
 800e8f6:	d001      	beq.n	800e8fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800e8f8:	2301      	movs	r3, #1
 800e8fa:	e054      	b.n	800e9a6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800e8fc:	687b      	ldr	r3, [r7, #4]
 800e8fe:	2202      	movs	r2, #2
 800e900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800e904:	687b      	ldr	r3, [r7, #4]
 800e906:	681b      	ldr	r3, [r3, #0]
 800e908:	68da      	ldr	r2, [r3, #12]
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	681b      	ldr	r3, [r3, #0]
 800e90e:	f042 0201 	orr.w	r2, r2, #1
 800e912:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	4a26      	ldr	r2, [pc, #152]	; (800e9b4 <HAL_TIM_Base_Start_IT+0xd0>)
 800e91a:	4293      	cmp	r3, r2
 800e91c:	d022      	beq.n	800e964 <HAL_TIM_Base_Start_IT+0x80>
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	681b      	ldr	r3, [r3, #0]
 800e922:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800e926:	d01d      	beq.n	800e964 <HAL_TIM_Base_Start_IT+0x80>
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	681b      	ldr	r3, [r3, #0]
 800e92c:	4a22      	ldr	r2, [pc, #136]	; (800e9b8 <HAL_TIM_Base_Start_IT+0xd4>)
 800e92e:	4293      	cmp	r3, r2
 800e930:	d018      	beq.n	800e964 <HAL_TIM_Base_Start_IT+0x80>
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	4a21      	ldr	r2, [pc, #132]	; (800e9bc <HAL_TIM_Base_Start_IT+0xd8>)
 800e938:	4293      	cmp	r3, r2
 800e93a:	d013      	beq.n	800e964 <HAL_TIM_Base_Start_IT+0x80>
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	681b      	ldr	r3, [r3, #0]
 800e940:	4a1f      	ldr	r2, [pc, #124]	; (800e9c0 <HAL_TIM_Base_Start_IT+0xdc>)
 800e942:	4293      	cmp	r3, r2
 800e944:	d00e      	beq.n	800e964 <HAL_TIM_Base_Start_IT+0x80>
 800e946:	687b      	ldr	r3, [r7, #4]
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	4a1e      	ldr	r2, [pc, #120]	; (800e9c4 <HAL_TIM_Base_Start_IT+0xe0>)
 800e94c:	4293      	cmp	r3, r2
 800e94e:	d009      	beq.n	800e964 <HAL_TIM_Base_Start_IT+0x80>
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	4a1c      	ldr	r2, [pc, #112]	; (800e9c8 <HAL_TIM_Base_Start_IT+0xe4>)
 800e956:	4293      	cmp	r3, r2
 800e958:	d004      	beq.n	800e964 <HAL_TIM_Base_Start_IT+0x80>
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	681b      	ldr	r3, [r3, #0]
 800e95e:	4a1b      	ldr	r2, [pc, #108]	; (800e9cc <HAL_TIM_Base_Start_IT+0xe8>)
 800e960:	4293      	cmp	r3, r2
 800e962:	d115      	bne.n	800e990 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800e964:	687b      	ldr	r3, [r7, #4]
 800e966:	681b      	ldr	r3, [r3, #0]
 800e968:	689a      	ldr	r2, [r3, #8]
 800e96a:	4b19      	ldr	r3, [pc, #100]	; (800e9d0 <HAL_TIM_Base_Start_IT+0xec>)
 800e96c:	4013      	ands	r3, r2
 800e96e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e970:	68fb      	ldr	r3, [r7, #12]
 800e972:	2b06      	cmp	r3, #6
 800e974:	d015      	beq.n	800e9a2 <HAL_TIM_Base_Start_IT+0xbe>
 800e976:	68fb      	ldr	r3, [r7, #12]
 800e978:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e97c:	d011      	beq.n	800e9a2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	681a      	ldr	r2, [r3, #0]
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	681b      	ldr	r3, [r3, #0]
 800e988:	f042 0201 	orr.w	r2, r2, #1
 800e98c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e98e:	e008      	b.n	800e9a2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	681a      	ldr	r2, [r3, #0]
 800e996:	687b      	ldr	r3, [r7, #4]
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	f042 0201 	orr.w	r2, r2, #1
 800e99e:	601a      	str	r2, [r3, #0]
 800e9a0:	e000      	b.n	800e9a4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800e9a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800e9a4:	2300      	movs	r3, #0
}
 800e9a6:	4618      	mov	r0, r3
 800e9a8:	3714      	adds	r7, #20
 800e9aa:	46bd      	mov	sp, r7
 800e9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b0:	4770      	bx	lr
 800e9b2:	bf00      	nop
 800e9b4:	40010000 	.word	0x40010000
 800e9b8:	40000400 	.word	0x40000400
 800e9bc:	40000800 	.word	0x40000800
 800e9c0:	40000c00 	.word	0x40000c00
 800e9c4:	40010400 	.word	0x40010400
 800e9c8:	40001800 	.word	0x40001800
 800e9cc:	40014000 	.word	0x40014000
 800e9d0:	00010007 	.word	0x00010007

0800e9d4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 800e9d4:	b480      	push	{r7}
 800e9d6:	b083      	sub	sp, #12
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	681b      	ldr	r3, [r3, #0]
 800e9e0:	68da      	ldr	r2, [r3, #12]
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	681b      	ldr	r3, [r3, #0]
 800e9e6:	f022 0201 	bic.w	r2, r2, #1
 800e9ea:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	681b      	ldr	r3, [r3, #0]
 800e9f0:	6a1a      	ldr	r2, [r3, #32]
 800e9f2:	f241 1311 	movw	r3, #4369	; 0x1111
 800e9f6:	4013      	ands	r3, r2
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d10f      	bne.n	800ea1c <HAL_TIM_Base_Stop_IT+0x48>
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	681b      	ldr	r3, [r3, #0]
 800ea00:	6a1a      	ldr	r2, [r3, #32]
 800ea02:	f240 4344 	movw	r3, #1092	; 0x444
 800ea06:	4013      	ands	r3, r2
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d107      	bne.n	800ea1c <HAL_TIM_Base_Stop_IT+0x48>
 800ea0c:	687b      	ldr	r3, [r7, #4]
 800ea0e:	681b      	ldr	r3, [r3, #0]
 800ea10:	681a      	ldr	r2, [r3, #0]
 800ea12:	687b      	ldr	r3, [r7, #4]
 800ea14:	681b      	ldr	r3, [r3, #0]
 800ea16:	f022 0201 	bic.w	r2, r2, #1
 800ea1a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	2201      	movs	r2, #1
 800ea20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800ea24:	2300      	movs	r3, #0
}
 800ea26:	4618      	mov	r0, r3
 800ea28:	370c      	adds	r7, #12
 800ea2a:	46bd      	mov	sp, r7
 800ea2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea30:	4770      	bx	lr

0800ea32 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ea32:	b580      	push	{r7, lr}
 800ea34:	b082      	sub	sp, #8
 800ea36:	af00      	add	r7, sp, #0
 800ea38:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	691b      	ldr	r3, [r3, #16]
 800ea40:	f003 0302 	and.w	r3, r3, #2
 800ea44:	2b02      	cmp	r3, #2
 800ea46:	d122      	bne.n	800ea8e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	68db      	ldr	r3, [r3, #12]
 800ea4e:	f003 0302 	and.w	r3, r3, #2
 800ea52:	2b02      	cmp	r3, #2
 800ea54:	d11b      	bne.n	800ea8e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	681b      	ldr	r3, [r3, #0]
 800ea5a:	f06f 0202 	mvn.w	r2, #2
 800ea5e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	2201      	movs	r2, #1
 800ea64:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	699b      	ldr	r3, [r3, #24]
 800ea6c:	f003 0303 	and.w	r3, r3, #3
 800ea70:	2b00      	cmp	r3, #0
 800ea72:	d003      	beq.n	800ea7c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ea74:	6878      	ldr	r0, [r7, #4]
 800ea76:	f000 f905 	bl	800ec84 <HAL_TIM_IC_CaptureCallback>
 800ea7a:	e005      	b.n	800ea88 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ea7c:	6878      	ldr	r0, [r7, #4]
 800ea7e:	f000 f8f7 	bl	800ec70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ea82:	6878      	ldr	r0, [r7, #4]
 800ea84:	f000 f908 	bl	800ec98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	2200      	movs	r2, #0
 800ea8c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	691b      	ldr	r3, [r3, #16]
 800ea94:	f003 0304 	and.w	r3, r3, #4
 800ea98:	2b04      	cmp	r3, #4
 800ea9a:	d122      	bne.n	800eae2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ea9c:	687b      	ldr	r3, [r7, #4]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	68db      	ldr	r3, [r3, #12]
 800eaa2:	f003 0304 	and.w	r3, r3, #4
 800eaa6:	2b04      	cmp	r3, #4
 800eaa8:	d11b      	bne.n	800eae2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	f06f 0204 	mvn.w	r2, #4
 800eab2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800eab4:	687b      	ldr	r3, [r7, #4]
 800eab6:	2202      	movs	r2, #2
 800eab8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800eaba:	687b      	ldr	r3, [r7, #4]
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	699b      	ldr	r3, [r3, #24]
 800eac0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800eac4:	2b00      	cmp	r3, #0
 800eac6:	d003      	beq.n	800ead0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eac8:	6878      	ldr	r0, [r7, #4]
 800eaca:	f000 f8db 	bl	800ec84 <HAL_TIM_IC_CaptureCallback>
 800eace:	e005      	b.n	800eadc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ead0:	6878      	ldr	r0, [r7, #4]
 800ead2:	f000 f8cd 	bl	800ec70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ead6:	6878      	ldr	r0, [r7, #4]
 800ead8:	f000 f8de 	bl	800ec98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	2200      	movs	r2, #0
 800eae0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800eae2:	687b      	ldr	r3, [r7, #4]
 800eae4:	681b      	ldr	r3, [r3, #0]
 800eae6:	691b      	ldr	r3, [r3, #16]
 800eae8:	f003 0308 	and.w	r3, r3, #8
 800eaec:	2b08      	cmp	r3, #8
 800eaee:	d122      	bne.n	800eb36 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800eaf0:	687b      	ldr	r3, [r7, #4]
 800eaf2:	681b      	ldr	r3, [r3, #0]
 800eaf4:	68db      	ldr	r3, [r3, #12]
 800eaf6:	f003 0308 	and.w	r3, r3, #8
 800eafa:	2b08      	cmp	r3, #8
 800eafc:	d11b      	bne.n	800eb36 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	681b      	ldr	r3, [r3, #0]
 800eb02:	f06f 0208 	mvn.w	r2, #8
 800eb06:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800eb08:	687b      	ldr	r3, [r7, #4]
 800eb0a:	2204      	movs	r2, #4
 800eb0c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	681b      	ldr	r3, [r3, #0]
 800eb12:	69db      	ldr	r3, [r3, #28]
 800eb14:	f003 0303 	and.w	r3, r3, #3
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d003      	beq.n	800eb24 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eb1c:	6878      	ldr	r0, [r7, #4]
 800eb1e:	f000 f8b1 	bl	800ec84 <HAL_TIM_IC_CaptureCallback>
 800eb22:	e005      	b.n	800eb30 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eb24:	6878      	ldr	r0, [r7, #4]
 800eb26:	f000 f8a3 	bl	800ec70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eb2a:	6878      	ldr	r0, [r7, #4]
 800eb2c:	f000 f8b4 	bl	800ec98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	2200      	movs	r2, #0
 800eb34:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	681b      	ldr	r3, [r3, #0]
 800eb3a:	691b      	ldr	r3, [r3, #16]
 800eb3c:	f003 0310 	and.w	r3, r3, #16
 800eb40:	2b10      	cmp	r3, #16
 800eb42:	d122      	bne.n	800eb8a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	68db      	ldr	r3, [r3, #12]
 800eb4a:	f003 0310 	and.w	r3, r3, #16
 800eb4e:	2b10      	cmp	r3, #16
 800eb50:	d11b      	bne.n	800eb8a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	f06f 0210 	mvn.w	r2, #16
 800eb5a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	2208      	movs	r2, #8
 800eb60:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800eb62:	687b      	ldr	r3, [r7, #4]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	69db      	ldr	r3, [r3, #28]
 800eb68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800eb6c:	2b00      	cmp	r3, #0
 800eb6e:	d003      	beq.n	800eb78 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800eb70:	6878      	ldr	r0, [r7, #4]
 800eb72:	f000 f887 	bl	800ec84 <HAL_TIM_IC_CaptureCallback>
 800eb76:	e005      	b.n	800eb84 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800eb78:	6878      	ldr	r0, [r7, #4]
 800eb7a:	f000 f879 	bl	800ec70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800eb7e:	6878      	ldr	r0, [r7, #4]
 800eb80:	f000 f88a 	bl	800ec98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	2200      	movs	r2, #0
 800eb88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	681b      	ldr	r3, [r3, #0]
 800eb8e:	691b      	ldr	r3, [r3, #16]
 800eb90:	f003 0301 	and.w	r3, r3, #1
 800eb94:	2b01      	cmp	r3, #1
 800eb96:	d10e      	bne.n	800ebb6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	68db      	ldr	r3, [r3, #12]
 800eb9e:	f003 0301 	and.w	r3, r3, #1
 800eba2:	2b01      	cmp	r3, #1
 800eba4:	d107      	bne.n	800ebb6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	f06f 0201 	mvn.w	r2, #1
 800ebae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ebb0:	6878      	ldr	r0, [r7, #4]
 800ebb2:	f7f9 fcfd 	bl	80085b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	691b      	ldr	r3, [r3, #16]
 800ebbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebc0:	2b80      	cmp	r3, #128	; 0x80
 800ebc2:	d10e      	bne.n	800ebe2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	681b      	ldr	r3, [r3, #0]
 800ebc8:	68db      	ldr	r3, [r3, #12]
 800ebca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebce:	2b80      	cmp	r3, #128	; 0x80
 800ebd0:	d107      	bne.n	800ebe2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800ebda:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800ebdc:	6878      	ldr	r0, [r7, #4]
 800ebde:	f000 f913 	bl	800ee08 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	681b      	ldr	r3, [r3, #0]
 800ebe6:	691b      	ldr	r3, [r3, #16]
 800ebe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ebec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ebf0:	d10e      	bne.n	800ec10 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	68db      	ldr	r3, [r3, #12]
 800ebf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ebfc:	2b80      	cmp	r3, #128	; 0x80
 800ebfe:	d107      	bne.n	800ec10 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ec00:	687b      	ldr	r3, [r7, #4]
 800ec02:	681b      	ldr	r3, [r3, #0]
 800ec04:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800ec08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ec0a:	6878      	ldr	r0, [r7, #4]
 800ec0c:	f000 f906 	bl	800ee1c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ec10:	687b      	ldr	r3, [r7, #4]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	691b      	ldr	r3, [r3, #16]
 800ec16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec1a:	2b40      	cmp	r3, #64	; 0x40
 800ec1c:	d10e      	bne.n	800ec3c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	68db      	ldr	r3, [r3, #12]
 800ec24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ec28:	2b40      	cmp	r3, #64	; 0x40
 800ec2a:	d107      	bne.n	800ec3c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ec2c:	687b      	ldr	r3, [r7, #4]
 800ec2e:	681b      	ldr	r3, [r3, #0]
 800ec30:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ec34:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ec36:	6878      	ldr	r0, [r7, #4]
 800ec38:	f000 f838 	bl	800ecac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ec3c:	687b      	ldr	r3, [r7, #4]
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	691b      	ldr	r3, [r3, #16]
 800ec42:	f003 0320 	and.w	r3, r3, #32
 800ec46:	2b20      	cmp	r3, #32
 800ec48:	d10e      	bne.n	800ec68 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ec4a:	687b      	ldr	r3, [r7, #4]
 800ec4c:	681b      	ldr	r3, [r3, #0]
 800ec4e:	68db      	ldr	r3, [r3, #12]
 800ec50:	f003 0320 	and.w	r3, r3, #32
 800ec54:	2b20      	cmp	r3, #32
 800ec56:	d107      	bne.n	800ec68 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	f06f 0220 	mvn.w	r2, #32
 800ec60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ec62:	6878      	ldr	r0, [r7, #4]
 800ec64:	f000 f8c6 	bl	800edf4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ec68:	bf00      	nop
 800ec6a:	3708      	adds	r7, #8
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	bd80      	pop	{r7, pc}

0800ec70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ec70:	b480      	push	{r7}
 800ec72:	b083      	sub	sp, #12
 800ec74:	af00      	add	r7, sp, #0
 800ec76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ec78:	bf00      	nop
 800ec7a:	370c      	adds	r7, #12
 800ec7c:	46bd      	mov	sp, r7
 800ec7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec82:	4770      	bx	lr

0800ec84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ec84:	b480      	push	{r7}
 800ec86:	b083      	sub	sp, #12
 800ec88:	af00      	add	r7, sp, #0
 800ec8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ec8c:	bf00      	nop
 800ec8e:	370c      	adds	r7, #12
 800ec90:	46bd      	mov	sp, r7
 800ec92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec96:	4770      	bx	lr

0800ec98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ec98:	b480      	push	{r7}
 800ec9a:	b083      	sub	sp, #12
 800ec9c:	af00      	add	r7, sp, #0
 800ec9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800eca0:	bf00      	nop
 800eca2:	370c      	adds	r7, #12
 800eca4:	46bd      	mov	sp, r7
 800eca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecaa:	4770      	bx	lr

0800ecac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ecac:	b480      	push	{r7}
 800ecae:	b083      	sub	sp, #12
 800ecb0:	af00      	add	r7, sp, #0
 800ecb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ecb4:	bf00      	nop
 800ecb6:	370c      	adds	r7, #12
 800ecb8:	46bd      	mov	sp, r7
 800ecba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecbe:	4770      	bx	lr

0800ecc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ecc0:	b480      	push	{r7}
 800ecc2:	b085      	sub	sp, #20
 800ecc4:	af00      	add	r7, sp, #0
 800ecc6:	6078      	str	r0, [r7, #4]
 800ecc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ecd0:	687b      	ldr	r3, [r7, #4]
 800ecd2:	4a40      	ldr	r2, [pc, #256]	; (800edd4 <TIM_Base_SetConfig+0x114>)
 800ecd4:	4293      	cmp	r3, r2
 800ecd6:	d013      	beq.n	800ed00 <TIM_Base_SetConfig+0x40>
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ecde:	d00f      	beq.n	800ed00 <TIM_Base_SetConfig+0x40>
 800ece0:	687b      	ldr	r3, [r7, #4]
 800ece2:	4a3d      	ldr	r2, [pc, #244]	; (800edd8 <TIM_Base_SetConfig+0x118>)
 800ece4:	4293      	cmp	r3, r2
 800ece6:	d00b      	beq.n	800ed00 <TIM_Base_SetConfig+0x40>
 800ece8:	687b      	ldr	r3, [r7, #4]
 800ecea:	4a3c      	ldr	r2, [pc, #240]	; (800eddc <TIM_Base_SetConfig+0x11c>)
 800ecec:	4293      	cmp	r3, r2
 800ecee:	d007      	beq.n	800ed00 <TIM_Base_SetConfig+0x40>
 800ecf0:	687b      	ldr	r3, [r7, #4]
 800ecf2:	4a3b      	ldr	r2, [pc, #236]	; (800ede0 <TIM_Base_SetConfig+0x120>)
 800ecf4:	4293      	cmp	r3, r2
 800ecf6:	d003      	beq.n	800ed00 <TIM_Base_SetConfig+0x40>
 800ecf8:	687b      	ldr	r3, [r7, #4]
 800ecfa:	4a3a      	ldr	r2, [pc, #232]	; (800ede4 <TIM_Base_SetConfig+0x124>)
 800ecfc:	4293      	cmp	r3, r2
 800ecfe:	d108      	bne.n	800ed12 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ed00:	68fb      	ldr	r3, [r7, #12]
 800ed02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ed06:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ed08:	683b      	ldr	r3, [r7, #0]
 800ed0a:	685b      	ldr	r3, [r3, #4]
 800ed0c:	68fa      	ldr	r2, [r7, #12]
 800ed0e:	4313      	orrs	r3, r2
 800ed10:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ed12:	687b      	ldr	r3, [r7, #4]
 800ed14:	4a2f      	ldr	r2, [pc, #188]	; (800edd4 <TIM_Base_SetConfig+0x114>)
 800ed16:	4293      	cmp	r3, r2
 800ed18:	d01f      	beq.n	800ed5a <TIM_Base_SetConfig+0x9a>
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ed20:	d01b      	beq.n	800ed5a <TIM_Base_SetConfig+0x9a>
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	4a2c      	ldr	r2, [pc, #176]	; (800edd8 <TIM_Base_SetConfig+0x118>)
 800ed26:	4293      	cmp	r3, r2
 800ed28:	d017      	beq.n	800ed5a <TIM_Base_SetConfig+0x9a>
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	4a2b      	ldr	r2, [pc, #172]	; (800eddc <TIM_Base_SetConfig+0x11c>)
 800ed2e:	4293      	cmp	r3, r2
 800ed30:	d013      	beq.n	800ed5a <TIM_Base_SetConfig+0x9a>
 800ed32:	687b      	ldr	r3, [r7, #4]
 800ed34:	4a2a      	ldr	r2, [pc, #168]	; (800ede0 <TIM_Base_SetConfig+0x120>)
 800ed36:	4293      	cmp	r3, r2
 800ed38:	d00f      	beq.n	800ed5a <TIM_Base_SetConfig+0x9a>
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	4a29      	ldr	r2, [pc, #164]	; (800ede4 <TIM_Base_SetConfig+0x124>)
 800ed3e:	4293      	cmp	r3, r2
 800ed40:	d00b      	beq.n	800ed5a <TIM_Base_SetConfig+0x9a>
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	4a28      	ldr	r2, [pc, #160]	; (800ede8 <TIM_Base_SetConfig+0x128>)
 800ed46:	4293      	cmp	r3, r2
 800ed48:	d007      	beq.n	800ed5a <TIM_Base_SetConfig+0x9a>
 800ed4a:	687b      	ldr	r3, [r7, #4]
 800ed4c:	4a27      	ldr	r2, [pc, #156]	; (800edec <TIM_Base_SetConfig+0x12c>)
 800ed4e:	4293      	cmp	r3, r2
 800ed50:	d003      	beq.n	800ed5a <TIM_Base_SetConfig+0x9a>
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	4a26      	ldr	r2, [pc, #152]	; (800edf0 <TIM_Base_SetConfig+0x130>)
 800ed56:	4293      	cmp	r3, r2
 800ed58:	d108      	bne.n	800ed6c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ed5a:	68fb      	ldr	r3, [r7, #12]
 800ed5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ed60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ed62:	683b      	ldr	r3, [r7, #0]
 800ed64:	68db      	ldr	r3, [r3, #12]
 800ed66:	68fa      	ldr	r2, [r7, #12]
 800ed68:	4313      	orrs	r3, r2
 800ed6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ed6c:	68fb      	ldr	r3, [r7, #12]
 800ed6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ed72:	683b      	ldr	r3, [r7, #0]
 800ed74:	695b      	ldr	r3, [r3, #20]
 800ed76:	4313      	orrs	r3, r2
 800ed78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ed7a:	687b      	ldr	r3, [r7, #4]
 800ed7c:	68fa      	ldr	r2, [r7, #12]
 800ed7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ed80:	683b      	ldr	r3, [r7, #0]
 800ed82:	689a      	ldr	r2, [r3, #8]
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ed88:	683b      	ldr	r3, [r7, #0]
 800ed8a:	681a      	ldr	r2, [r3, #0]
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	4a10      	ldr	r2, [pc, #64]	; (800edd4 <TIM_Base_SetConfig+0x114>)
 800ed94:	4293      	cmp	r3, r2
 800ed96:	d00f      	beq.n	800edb8 <TIM_Base_SetConfig+0xf8>
 800ed98:	687b      	ldr	r3, [r7, #4]
 800ed9a:	4a12      	ldr	r2, [pc, #72]	; (800ede4 <TIM_Base_SetConfig+0x124>)
 800ed9c:	4293      	cmp	r3, r2
 800ed9e:	d00b      	beq.n	800edb8 <TIM_Base_SetConfig+0xf8>
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	4a11      	ldr	r2, [pc, #68]	; (800ede8 <TIM_Base_SetConfig+0x128>)
 800eda4:	4293      	cmp	r3, r2
 800eda6:	d007      	beq.n	800edb8 <TIM_Base_SetConfig+0xf8>
 800eda8:	687b      	ldr	r3, [r7, #4]
 800edaa:	4a10      	ldr	r2, [pc, #64]	; (800edec <TIM_Base_SetConfig+0x12c>)
 800edac:	4293      	cmp	r3, r2
 800edae:	d003      	beq.n	800edb8 <TIM_Base_SetConfig+0xf8>
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	4a0f      	ldr	r2, [pc, #60]	; (800edf0 <TIM_Base_SetConfig+0x130>)
 800edb4:	4293      	cmp	r3, r2
 800edb6:	d103      	bne.n	800edc0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800edb8:	683b      	ldr	r3, [r7, #0]
 800edba:	691a      	ldr	r2, [r3, #16]
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800edc0:	687b      	ldr	r3, [r7, #4]
 800edc2:	2201      	movs	r2, #1
 800edc4:	615a      	str	r2, [r3, #20]
}
 800edc6:	bf00      	nop
 800edc8:	3714      	adds	r7, #20
 800edca:	46bd      	mov	sp, r7
 800edcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edd0:	4770      	bx	lr
 800edd2:	bf00      	nop
 800edd4:	40010000 	.word	0x40010000
 800edd8:	40000400 	.word	0x40000400
 800eddc:	40000800 	.word	0x40000800
 800ede0:	40000c00 	.word	0x40000c00
 800ede4:	40010400 	.word	0x40010400
 800ede8:	40014000 	.word	0x40014000
 800edec:	40014400 	.word	0x40014400
 800edf0:	40014800 	.word	0x40014800

0800edf4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800edf4:	b480      	push	{r7}
 800edf6:	b083      	sub	sp, #12
 800edf8:	af00      	add	r7, sp, #0
 800edfa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800edfc:	bf00      	nop
 800edfe:	370c      	adds	r7, #12
 800ee00:	46bd      	mov	sp, r7
 800ee02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee06:	4770      	bx	lr

0800ee08 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ee08:	b480      	push	{r7}
 800ee0a:	b083      	sub	sp, #12
 800ee0c:	af00      	add	r7, sp, #0
 800ee0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ee10:	bf00      	nop
 800ee12:	370c      	adds	r7, #12
 800ee14:	46bd      	mov	sp, r7
 800ee16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee1a:	4770      	bx	lr

0800ee1c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800ee1c:	b480      	push	{r7}
 800ee1e:	b083      	sub	sp, #12
 800ee20:	af00      	add	r7, sp, #0
 800ee22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800ee24:	bf00      	nop
 800ee26:	370c      	adds	r7, #12
 800ee28:	46bd      	mov	sp, r7
 800ee2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2e:	4770      	bx	lr

0800ee30 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800ee30:	b084      	sub	sp, #16
 800ee32:	b580      	push	{r7, lr}
 800ee34:	b084      	sub	sp, #16
 800ee36:	af00      	add	r7, sp, #0
 800ee38:	6078      	str	r0, [r7, #4]
 800ee3a:	f107 001c 	add.w	r0, r7, #28
 800ee3e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800ee42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee44:	2b01      	cmp	r3, #1
 800ee46:	d120      	bne.n	800ee8a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800ee48:	687b      	ldr	r3, [r7, #4]
 800ee4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee4c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800ee54:	687b      	ldr	r3, [r7, #4]
 800ee56:	68da      	ldr	r2, [r3, #12]
 800ee58:	4b2a      	ldr	r3, [pc, #168]	; (800ef04 <USB_CoreInit+0xd4>)
 800ee5a:	4013      	ands	r3, r2
 800ee5c:	687a      	ldr	r2, [r7, #4]
 800ee5e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	68db      	ldr	r3, [r3, #12]
 800ee64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800ee6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ee6e:	2b01      	cmp	r3, #1
 800ee70:	d105      	bne.n	800ee7e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800ee72:	687b      	ldr	r3, [r7, #4]
 800ee74:	68db      	ldr	r3, [r3, #12]
 800ee76:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800ee7a:	687b      	ldr	r3, [r7, #4]
 800ee7c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ee7e:	6878      	ldr	r0, [r7, #4]
 800ee80:	f001 faf8 	bl	8010474 <USB_CoreReset>
 800ee84:	4603      	mov	r3, r0
 800ee86:	73fb      	strb	r3, [r7, #15]
 800ee88:	e01a      	b.n	800eec0 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800ee8a:	687b      	ldr	r3, [r7, #4]
 800ee8c:	68db      	ldr	r3, [r3, #12]
 800ee8e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800ee92:	687b      	ldr	r3, [r7, #4]
 800ee94:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800ee96:	6878      	ldr	r0, [r7, #4]
 800ee98:	f001 faec 	bl	8010474 <USB_CoreReset>
 800ee9c:	4603      	mov	r3, r0
 800ee9e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800eea0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d106      	bne.n	800eeb4 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eeaa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800eeae:	687b      	ldr	r3, [r7, #4]
 800eeb0:	639a      	str	r2, [r3, #56]	; 0x38
 800eeb2:	e005      	b.n	800eec0 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800eeb4:	687b      	ldr	r3, [r7, #4]
 800eeb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800eeb8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800eec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eec2:	2b01      	cmp	r3, #1
 800eec4:	d116      	bne.n	800eef4 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800eeca:	b29a      	uxth	r2, r3
 800eecc:	687b      	ldr	r3, [r7, #4]
 800eece:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800eed4:	4b0c      	ldr	r3, [pc, #48]	; (800ef08 <USB_CoreInit+0xd8>)
 800eed6:	4313      	orrs	r3, r2
 800eed8:	687a      	ldr	r2, [r7, #4]
 800eeda:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	689b      	ldr	r3, [r3, #8]
 800eee0:	f043 0206 	orr.w	r2, r3, #6
 800eee4:	687b      	ldr	r3, [r7, #4]
 800eee6:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800eee8:	687b      	ldr	r3, [r7, #4]
 800eeea:	689b      	ldr	r3, [r3, #8]
 800eeec:	f043 0220 	orr.w	r2, r3, #32
 800eef0:	687b      	ldr	r3, [r7, #4]
 800eef2:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800eef4:	7bfb      	ldrb	r3, [r7, #15]
}
 800eef6:	4618      	mov	r0, r3
 800eef8:	3710      	adds	r7, #16
 800eefa:	46bd      	mov	sp, r7
 800eefc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800ef00:	b004      	add	sp, #16
 800ef02:	4770      	bx	lr
 800ef04:	ffbdffbf 	.word	0xffbdffbf
 800ef08:	03ee0000 	.word	0x03ee0000

0800ef0c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800ef0c:	b480      	push	{r7}
 800ef0e:	b087      	sub	sp, #28
 800ef10:	af00      	add	r7, sp, #0
 800ef12:	60f8      	str	r0, [r7, #12]
 800ef14:	60b9      	str	r1, [r7, #8]
 800ef16:	4613      	mov	r3, r2
 800ef18:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800ef1a:	79fb      	ldrb	r3, [r7, #7]
 800ef1c:	2b02      	cmp	r3, #2
 800ef1e:	d165      	bne.n	800efec <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800ef20:	68bb      	ldr	r3, [r7, #8]
 800ef22:	4a41      	ldr	r2, [pc, #260]	; (800f028 <USB_SetTurnaroundTime+0x11c>)
 800ef24:	4293      	cmp	r3, r2
 800ef26:	d906      	bls.n	800ef36 <USB_SetTurnaroundTime+0x2a>
 800ef28:	68bb      	ldr	r3, [r7, #8]
 800ef2a:	4a40      	ldr	r2, [pc, #256]	; (800f02c <USB_SetTurnaroundTime+0x120>)
 800ef2c:	4293      	cmp	r3, r2
 800ef2e:	d202      	bcs.n	800ef36 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800ef30:	230f      	movs	r3, #15
 800ef32:	617b      	str	r3, [r7, #20]
 800ef34:	e062      	b.n	800effc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800ef36:	68bb      	ldr	r3, [r7, #8]
 800ef38:	4a3c      	ldr	r2, [pc, #240]	; (800f02c <USB_SetTurnaroundTime+0x120>)
 800ef3a:	4293      	cmp	r3, r2
 800ef3c:	d306      	bcc.n	800ef4c <USB_SetTurnaroundTime+0x40>
 800ef3e:	68bb      	ldr	r3, [r7, #8]
 800ef40:	4a3b      	ldr	r2, [pc, #236]	; (800f030 <USB_SetTurnaroundTime+0x124>)
 800ef42:	4293      	cmp	r3, r2
 800ef44:	d202      	bcs.n	800ef4c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800ef46:	230e      	movs	r3, #14
 800ef48:	617b      	str	r3, [r7, #20]
 800ef4a:	e057      	b.n	800effc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800ef4c:	68bb      	ldr	r3, [r7, #8]
 800ef4e:	4a38      	ldr	r2, [pc, #224]	; (800f030 <USB_SetTurnaroundTime+0x124>)
 800ef50:	4293      	cmp	r3, r2
 800ef52:	d306      	bcc.n	800ef62 <USB_SetTurnaroundTime+0x56>
 800ef54:	68bb      	ldr	r3, [r7, #8]
 800ef56:	4a37      	ldr	r2, [pc, #220]	; (800f034 <USB_SetTurnaroundTime+0x128>)
 800ef58:	4293      	cmp	r3, r2
 800ef5a:	d202      	bcs.n	800ef62 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800ef5c:	230d      	movs	r3, #13
 800ef5e:	617b      	str	r3, [r7, #20]
 800ef60:	e04c      	b.n	800effc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800ef62:	68bb      	ldr	r3, [r7, #8]
 800ef64:	4a33      	ldr	r2, [pc, #204]	; (800f034 <USB_SetTurnaroundTime+0x128>)
 800ef66:	4293      	cmp	r3, r2
 800ef68:	d306      	bcc.n	800ef78 <USB_SetTurnaroundTime+0x6c>
 800ef6a:	68bb      	ldr	r3, [r7, #8]
 800ef6c:	4a32      	ldr	r2, [pc, #200]	; (800f038 <USB_SetTurnaroundTime+0x12c>)
 800ef6e:	4293      	cmp	r3, r2
 800ef70:	d802      	bhi.n	800ef78 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800ef72:	230c      	movs	r3, #12
 800ef74:	617b      	str	r3, [r7, #20]
 800ef76:	e041      	b.n	800effc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800ef78:	68bb      	ldr	r3, [r7, #8]
 800ef7a:	4a2f      	ldr	r2, [pc, #188]	; (800f038 <USB_SetTurnaroundTime+0x12c>)
 800ef7c:	4293      	cmp	r3, r2
 800ef7e:	d906      	bls.n	800ef8e <USB_SetTurnaroundTime+0x82>
 800ef80:	68bb      	ldr	r3, [r7, #8]
 800ef82:	4a2e      	ldr	r2, [pc, #184]	; (800f03c <USB_SetTurnaroundTime+0x130>)
 800ef84:	4293      	cmp	r3, r2
 800ef86:	d802      	bhi.n	800ef8e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800ef88:	230b      	movs	r3, #11
 800ef8a:	617b      	str	r3, [r7, #20]
 800ef8c:	e036      	b.n	800effc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800ef8e:	68bb      	ldr	r3, [r7, #8]
 800ef90:	4a2a      	ldr	r2, [pc, #168]	; (800f03c <USB_SetTurnaroundTime+0x130>)
 800ef92:	4293      	cmp	r3, r2
 800ef94:	d906      	bls.n	800efa4 <USB_SetTurnaroundTime+0x98>
 800ef96:	68bb      	ldr	r3, [r7, #8]
 800ef98:	4a29      	ldr	r2, [pc, #164]	; (800f040 <USB_SetTurnaroundTime+0x134>)
 800ef9a:	4293      	cmp	r3, r2
 800ef9c:	d802      	bhi.n	800efa4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800ef9e:	230a      	movs	r3, #10
 800efa0:	617b      	str	r3, [r7, #20]
 800efa2:	e02b      	b.n	800effc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800efa4:	68bb      	ldr	r3, [r7, #8]
 800efa6:	4a26      	ldr	r2, [pc, #152]	; (800f040 <USB_SetTurnaroundTime+0x134>)
 800efa8:	4293      	cmp	r3, r2
 800efaa:	d906      	bls.n	800efba <USB_SetTurnaroundTime+0xae>
 800efac:	68bb      	ldr	r3, [r7, #8]
 800efae:	4a25      	ldr	r2, [pc, #148]	; (800f044 <USB_SetTurnaroundTime+0x138>)
 800efb0:	4293      	cmp	r3, r2
 800efb2:	d202      	bcs.n	800efba <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800efb4:	2309      	movs	r3, #9
 800efb6:	617b      	str	r3, [r7, #20]
 800efb8:	e020      	b.n	800effc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800efba:	68bb      	ldr	r3, [r7, #8]
 800efbc:	4a21      	ldr	r2, [pc, #132]	; (800f044 <USB_SetTurnaroundTime+0x138>)
 800efbe:	4293      	cmp	r3, r2
 800efc0:	d306      	bcc.n	800efd0 <USB_SetTurnaroundTime+0xc4>
 800efc2:	68bb      	ldr	r3, [r7, #8]
 800efc4:	4a20      	ldr	r2, [pc, #128]	; (800f048 <USB_SetTurnaroundTime+0x13c>)
 800efc6:	4293      	cmp	r3, r2
 800efc8:	d802      	bhi.n	800efd0 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800efca:	2308      	movs	r3, #8
 800efcc:	617b      	str	r3, [r7, #20]
 800efce:	e015      	b.n	800effc <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 800efd0:	68bb      	ldr	r3, [r7, #8]
 800efd2:	4a1d      	ldr	r2, [pc, #116]	; (800f048 <USB_SetTurnaroundTime+0x13c>)
 800efd4:	4293      	cmp	r3, r2
 800efd6:	d906      	bls.n	800efe6 <USB_SetTurnaroundTime+0xda>
 800efd8:	68bb      	ldr	r3, [r7, #8]
 800efda:	4a1c      	ldr	r2, [pc, #112]	; (800f04c <USB_SetTurnaroundTime+0x140>)
 800efdc:	4293      	cmp	r3, r2
 800efde:	d202      	bcs.n	800efe6 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 800efe0:	2307      	movs	r3, #7
 800efe2:	617b      	str	r3, [r7, #20]
 800efe4:	e00a      	b.n	800effc <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800efe6:	2306      	movs	r3, #6
 800efe8:	617b      	str	r3, [r7, #20]
 800efea:	e007      	b.n	800effc <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800efec:	79fb      	ldrb	r3, [r7, #7]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d102      	bne.n	800eff8 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800eff2:	2309      	movs	r3, #9
 800eff4:	617b      	str	r3, [r7, #20]
 800eff6:	e001      	b.n	800effc <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800eff8:	2309      	movs	r3, #9
 800effa:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800effc:	68fb      	ldr	r3, [r7, #12]
 800effe:	68db      	ldr	r3, [r3, #12]
 800f000:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 800f004:	68fb      	ldr	r3, [r7, #12]
 800f006:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800f008:	68fb      	ldr	r3, [r7, #12]
 800f00a:	68da      	ldr	r2, [r3, #12]
 800f00c:	697b      	ldr	r3, [r7, #20]
 800f00e:	029b      	lsls	r3, r3, #10
 800f010:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800f014:	431a      	orrs	r2, r3
 800f016:	68fb      	ldr	r3, [r7, #12]
 800f018:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800f01a:	2300      	movs	r3, #0
}
 800f01c:	4618      	mov	r0, r3
 800f01e:	371c      	adds	r7, #28
 800f020:	46bd      	mov	sp, r7
 800f022:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f026:	4770      	bx	lr
 800f028:	00d8acbf 	.word	0x00d8acbf
 800f02c:	00e4e1c0 	.word	0x00e4e1c0
 800f030:	00f42400 	.word	0x00f42400
 800f034:	01067380 	.word	0x01067380
 800f038:	011a499f 	.word	0x011a499f
 800f03c:	01312cff 	.word	0x01312cff
 800f040:	014ca43f 	.word	0x014ca43f
 800f044:	016e3600 	.word	0x016e3600
 800f048:	01a6ab1f 	.word	0x01a6ab1f
 800f04c:	01e84800 	.word	0x01e84800

0800f050 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f050:	b480      	push	{r7}
 800f052:	b083      	sub	sp, #12
 800f054:	af00      	add	r7, sp, #0
 800f056:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800f058:	687b      	ldr	r3, [r7, #4]
 800f05a:	689b      	ldr	r3, [r3, #8]
 800f05c:	f043 0201 	orr.w	r2, r3, #1
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f064:	2300      	movs	r3, #0
}
 800f066:	4618      	mov	r0, r3
 800f068:	370c      	adds	r7, #12
 800f06a:	46bd      	mov	sp, r7
 800f06c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f070:	4770      	bx	lr

0800f072 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800f072:	b480      	push	{r7}
 800f074:	b083      	sub	sp, #12
 800f076:	af00      	add	r7, sp, #0
 800f078:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	689b      	ldr	r3, [r3, #8]
 800f07e:	f023 0201 	bic.w	r2, r3, #1
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800f086:	2300      	movs	r3, #0
}
 800f088:	4618      	mov	r0, r3
 800f08a:	370c      	adds	r7, #12
 800f08c:	46bd      	mov	sp, r7
 800f08e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f092:	4770      	bx	lr

0800f094 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800f094:	b580      	push	{r7, lr}
 800f096:	b084      	sub	sp, #16
 800f098:	af00      	add	r7, sp, #0
 800f09a:	6078      	str	r0, [r7, #4]
 800f09c:	460b      	mov	r3, r1
 800f09e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800f0a0:	2300      	movs	r3, #0
 800f0a2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800f0a4:	687b      	ldr	r3, [r7, #4]
 800f0a6:	68db      	ldr	r3, [r3, #12]
 800f0a8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800f0ac:	687b      	ldr	r3, [r7, #4]
 800f0ae:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800f0b0:	78fb      	ldrb	r3, [r7, #3]
 800f0b2:	2b01      	cmp	r3, #1
 800f0b4:	d115      	bne.n	800f0e2 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	68db      	ldr	r3, [r3, #12]
 800f0ba:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f0c2:	2001      	movs	r0, #1
 800f0c4:	f7f9 ffa8 	bl	8009018 <HAL_Delay>
      ms++;
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	3301      	adds	r3, #1
 800f0cc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800f0ce:	6878      	ldr	r0, [r7, #4]
 800f0d0:	f001 f93f 	bl	8010352 <USB_GetMode>
 800f0d4:	4603      	mov	r3, r0
 800f0d6:	2b01      	cmp	r3, #1
 800f0d8:	d01e      	beq.n	800f118 <USB_SetCurrentMode+0x84>
 800f0da:	68fb      	ldr	r3, [r7, #12]
 800f0dc:	2b31      	cmp	r3, #49	; 0x31
 800f0de:	d9f0      	bls.n	800f0c2 <USB_SetCurrentMode+0x2e>
 800f0e0:	e01a      	b.n	800f118 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800f0e2:	78fb      	ldrb	r3, [r7, #3]
 800f0e4:	2b00      	cmp	r3, #0
 800f0e6:	d115      	bne.n	800f114 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	68db      	ldr	r3, [r3, #12]
 800f0ec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800f0f0:	687b      	ldr	r3, [r7, #4]
 800f0f2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800f0f4:	2001      	movs	r0, #1
 800f0f6:	f7f9 ff8f 	bl	8009018 <HAL_Delay>
      ms++;
 800f0fa:	68fb      	ldr	r3, [r7, #12]
 800f0fc:	3301      	adds	r3, #1
 800f0fe:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800f100:	6878      	ldr	r0, [r7, #4]
 800f102:	f001 f926 	bl	8010352 <USB_GetMode>
 800f106:	4603      	mov	r3, r0
 800f108:	2b00      	cmp	r3, #0
 800f10a:	d005      	beq.n	800f118 <USB_SetCurrentMode+0x84>
 800f10c:	68fb      	ldr	r3, [r7, #12]
 800f10e:	2b31      	cmp	r3, #49	; 0x31
 800f110:	d9f0      	bls.n	800f0f4 <USB_SetCurrentMode+0x60>
 800f112:	e001      	b.n	800f118 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800f114:	2301      	movs	r3, #1
 800f116:	e005      	b.n	800f124 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800f118:	68fb      	ldr	r3, [r7, #12]
 800f11a:	2b32      	cmp	r3, #50	; 0x32
 800f11c:	d101      	bne.n	800f122 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800f11e:	2301      	movs	r3, #1
 800f120:	e000      	b.n	800f124 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800f122:	2300      	movs	r3, #0
}
 800f124:	4618      	mov	r0, r3
 800f126:	3710      	adds	r7, #16
 800f128:	46bd      	mov	sp, r7
 800f12a:	bd80      	pop	{r7, pc}

0800f12c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800f12c:	b084      	sub	sp, #16
 800f12e:	b580      	push	{r7, lr}
 800f130:	b086      	sub	sp, #24
 800f132:	af00      	add	r7, sp, #0
 800f134:	6078      	str	r0, [r7, #4]
 800f136:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800f13a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800f13e:	2300      	movs	r3, #0
 800f140:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f142:	687b      	ldr	r3, [r7, #4]
 800f144:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800f146:	2300      	movs	r3, #0
 800f148:	613b      	str	r3, [r7, #16]
 800f14a:	e009      	b.n	800f160 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800f14c:	687a      	ldr	r2, [r7, #4]
 800f14e:	693b      	ldr	r3, [r7, #16]
 800f150:	3340      	adds	r3, #64	; 0x40
 800f152:	009b      	lsls	r3, r3, #2
 800f154:	4413      	add	r3, r2
 800f156:	2200      	movs	r2, #0
 800f158:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800f15a:	693b      	ldr	r3, [r7, #16]
 800f15c:	3301      	adds	r3, #1
 800f15e:	613b      	str	r3, [r7, #16]
 800f160:	693b      	ldr	r3, [r7, #16]
 800f162:	2b0e      	cmp	r3, #14
 800f164:	d9f2      	bls.n	800f14c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800f166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f168:	2b00      	cmp	r3, #0
 800f16a:	d11c      	bne.n	800f1a6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800f16c:	68fb      	ldr	r3, [r7, #12]
 800f16e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f172:	685b      	ldr	r3, [r3, #4]
 800f174:	68fa      	ldr	r2, [r7, #12]
 800f176:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f17a:	f043 0302 	orr.w	r3, r3, #2
 800f17e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800f180:	687b      	ldr	r3, [r7, #4]
 800f182:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f184:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800f188:	687b      	ldr	r3, [r7, #4]
 800f18a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800f18c:	687b      	ldr	r3, [r7, #4]
 800f18e:	681b      	ldr	r3, [r3, #0]
 800f190:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800f1a0:	687b      	ldr	r3, [r7, #4]
 800f1a2:	601a      	str	r2, [r3, #0]
 800f1a4:	e005      	b.n	800f1b2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f1aa:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800f1b2:	68fb      	ldr	r3, [r7, #12]
 800f1b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800f1b8:	461a      	mov	r2, r3
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f1c4:	4619      	mov	r1, r3
 800f1c6:	68fb      	ldr	r3, [r7, #12]
 800f1c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f1cc:	461a      	mov	r2, r3
 800f1ce:	680b      	ldr	r3, [r1, #0]
 800f1d0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800f1d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f1d4:	2b01      	cmp	r3, #1
 800f1d6:	d10c      	bne.n	800f1f2 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800f1d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d104      	bne.n	800f1e8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800f1de:	2100      	movs	r1, #0
 800f1e0:	6878      	ldr	r0, [r7, #4]
 800f1e2:	f000 f965 	bl	800f4b0 <USB_SetDevSpeed>
 800f1e6:	e008      	b.n	800f1fa <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800f1e8:	2101      	movs	r1, #1
 800f1ea:	6878      	ldr	r0, [r7, #4]
 800f1ec:	f000 f960 	bl	800f4b0 <USB_SetDevSpeed>
 800f1f0:	e003      	b.n	800f1fa <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800f1f2:	2103      	movs	r1, #3
 800f1f4:	6878      	ldr	r0, [r7, #4]
 800f1f6:	f000 f95b 	bl	800f4b0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800f1fa:	2110      	movs	r1, #16
 800f1fc:	6878      	ldr	r0, [r7, #4]
 800f1fe:	f000 f8f3 	bl	800f3e8 <USB_FlushTxFifo>
 800f202:	4603      	mov	r3, r0
 800f204:	2b00      	cmp	r3, #0
 800f206:	d001      	beq.n	800f20c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800f208:	2301      	movs	r3, #1
 800f20a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800f20c:	6878      	ldr	r0, [r7, #4]
 800f20e:	f000 f91f 	bl	800f450 <USB_FlushRxFifo>
 800f212:	4603      	mov	r3, r0
 800f214:	2b00      	cmp	r3, #0
 800f216:	d001      	beq.n	800f21c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800f218:	2301      	movs	r3, #1
 800f21a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800f21c:	68fb      	ldr	r3, [r7, #12]
 800f21e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f222:	461a      	mov	r2, r3
 800f224:	2300      	movs	r3, #0
 800f226:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800f228:	68fb      	ldr	r3, [r7, #12]
 800f22a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f22e:	461a      	mov	r2, r3
 800f230:	2300      	movs	r3, #0
 800f232:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f23a:	461a      	mov	r2, r3
 800f23c:	2300      	movs	r3, #0
 800f23e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f240:	2300      	movs	r3, #0
 800f242:	613b      	str	r3, [r7, #16]
 800f244:	e043      	b.n	800f2ce <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f246:	693b      	ldr	r3, [r7, #16]
 800f248:	015a      	lsls	r2, r3, #5
 800f24a:	68fb      	ldr	r3, [r7, #12]
 800f24c:	4413      	add	r3, r2
 800f24e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f258:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f25c:	d118      	bne.n	800f290 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800f25e:	693b      	ldr	r3, [r7, #16]
 800f260:	2b00      	cmp	r3, #0
 800f262:	d10a      	bne.n	800f27a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800f264:	693b      	ldr	r3, [r7, #16]
 800f266:	015a      	lsls	r2, r3, #5
 800f268:	68fb      	ldr	r3, [r7, #12]
 800f26a:	4413      	add	r3, r2
 800f26c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f270:	461a      	mov	r2, r3
 800f272:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f276:	6013      	str	r3, [r2, #0]
 800f278:	e013      	b.n	800f2a2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800f27a:	693b      	ldr	r3, [r7, #16]
 800f27c:	015a      	lsls	r2, r3, #5
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	4413      	add	r3, r2
 800f282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f286:	461a      	mov	r2, r3
 800f288:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f28c:	6013      	str	r3, [r2, #0]
 800f28e:	e008      	b.n	800f2a2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800f290:	693b      	ldr	r3, [r7, #16]
 800f292:	015a      	lsls	r2, r3, #5
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	4413      	add	r3, r2
 800f298:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f29c:	461a      	mov	r2, r3
 800f29e:	2300      	movs	r3, #0
 800f2a0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800f2a2:	693b      	ldr	r3, [r7, #16]
 800f2a4:	015a      	lsls	r2, r3, #5
 800f2a6:	68fb      	ldr	r3, [r7, #12]
 800f2a8:	4413      	add	r3, r2
 800f2aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2ae:	461a      	mov	r2, r3
 800f2b0:	2300      	movs	r3, #0
 800f2b2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800f2b4:	693b      	ldr	r3, [r7, #16]
 800f2b6:	015a      	lsls	r2, r3, #5
 800f2b8:	68fb      	ldr	r3, [r7, #12]
 800f2ba:	4413      	add	r3, r2
 800f2bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f2c0:	461a      	mov	r2, r3
 800f2c2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f2c6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f2c8:	693b      	ldr	r3, [r7, #16]
 800f2ca:	3301      	adds	r3, #1
 800f2cc:	613b      	str	r3, [r7, #16]
 800f2ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f2d0:	693a      	ldr	r2, [r7, #16]
 800f2d2:	429a      	cmp	r2, r3
 800f2d4:	d3b7      	bcc.n	800f246 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f2d6:	2300      	movs	r3, #0
 800f2d8:	613b      	str	r3, [r7, #16]
 800f2da:	e043      	b.n	800f364 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f2dc:	693b      	ldr	r3, [r7, #16]
 800f2de:	015a      	lsls	r2, r3, #5
 800f2e0:	68fb      	ldr	r3, [r7, #12]
 800f2e2:	4413      	add	r3, r2
 800f2e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f2ee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f2f2:	d118      	bne.n	800f326 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 800f2f4:	693b      	ldr	r3, [r7, #16]
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d10a      	bne.n	800f310 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800f2fa:	693b      	ldr	r3, [r7, #16]
 800f2fc:	015a      	lsls	r2, r3, #5
 800f2fe:	68fb      	ldr	r3, [r7, #12]
 800f300:	4413      	add	r3, r2
 800f302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f306:	461a      	mov	r2, r3
 800f308:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800f30c:	6013      	str	r3, [r2, #0]
 800f30e:	e013      	b.n	800f338 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800f310:	693b      	ldr	r3, [r7, #16]
 800f312:	015a      	lsls	r2, r3, #5
 800f314:	68fb      	ldr	r3, [r7, #12]
 800f316:	4413      	add	r3, r2
 800f318:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f31c:	461a      	mov	r2, r3
 800f31e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800f322:	6013      	str	r3, [r2, #0]
 800f324:	e008      	b.n	800f338 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800f326:	693b      	ldr	r3, [r7, #16]
 800f328:	015a      	lsls	r2, r3, #5
 800f32a:	68fb      	ldr	r3, [r7, #12]
 800f32c:	4413      	add	r3, r2
 800f32e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f332:	461a      	mov	r2, r3
 800f334:	2300      	movs	r3, #0
 800f336:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800f338:	693b      	ldr	r3, [r7, #16]
 800f33a:	015a      	lsls	r2, r3, #5
 800f33c:	68fb      	ldr	r3, [r7, #12]
 800f33e:	4413      	add	r3, r2
 800f340:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f344:	461a      	mov	r2, r3
 800f346:	2300      	movs	r3, #0
 800f348:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800f34a:	693b      	ldr	r3, [r7, #16]
 800f34c:	015a      	lsls	r2, r3, #5
 800f34e:	68fb      	ldr	r3, [r7, #12]
 800f350:	4413      	add	r3, r2
 800f352:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f356:	461a      	mov	r2, r3
 800f358:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f35c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800f35e:	693b      	ldr	r3, [r7, #16]
 800f360:	3301      	adds	r3, #1
 800f362:	613b      	str	r3, [r7, #16]
 800f364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f366:	693a      	ldr	r2, [r7, #16]
 800f368:	429a      	cmp	r2, r3
 800f36a:	d3b7      	bcc.n	800f2dc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800f36c:	68fb      	ldr	r3, [r7, #12]
 800f36e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f372:	691b      	ldr	r3, [r3, #16]
 800f374:	68fa      	ldr	r2, [r7, #12]
 800f376:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f37a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800f37e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800f380:	687b      	ldr	r3, [r7, #4]
 800f382:	2200      	movs	r2, #0
 800f384:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800f38c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800f38e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f390:	2b00      	cmp	r3, #0
 800f392:	d105      	bne.n	800f3a0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	699b      	ldr	r3, [r3, #24]
 800f398:	f043 0210 	orr.w	r2, r3, #16
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	699a      	ldr	r2, [r3, #24]
 800f3a4:	4b0e      	ldr	r3, [pc, #56]	; (800f3e0 <USB_DevInit+0x2b4>)
 800f3a6:	4313      	orrs	r3, r2
 800f3a8:	687a      	ldr	r2, [r7, #4]
 800f3aa:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800f3ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800f3ae:	2b00      	cmp	r3, #0
 800f3b0:	d005      	beq.n	800f3be <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	699b      	ldr	r3, [r3, #24]
 800f3b6:	f043 0208 	orr.w	r2, r3, #8
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800f3be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800f3c0:	2b01      	cmp	r3, #1
 800f3c2:	d105      	bne.n	800f3d0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	699a      	ldr	r2, [r3, #24]
 800f3c8:	4b06      	ldr	r3, [pc, #24]	; (800f3e4 <USB_DevInit+0x2b8>)
 800f3ca:	4313      	orrs	r3, r2
 800f3cc:	687a      	ldr	r2, [r7, #4]
 800f3ce:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800f3d0:	7dfb      	ldrb	r3, [r7, #23]
}
 800f3d2:	4618      	mov	r0, r3
 800f3d4:	3718      	adds	r7, #24
 800f3d6:	46bd      	mov	sp, r7
 800f3d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f3dc:	b004      	add	sp, #16
 800f3de:	4770      	bx	lr
 800f3e0:	803c3800 	.word	0x803c3800
 800f3e4:	40000004 	.word	0x40000004

0800f3e8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800f3e8:	b480      	push	{r7}
 800f3ea:	b085      	sub	sp, #20
 800f3ec:	af00      	add	r7, sp, #0
 800f3ee:	6078      	str	r0, [r7, #4]
 800f3f0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800f3f2:	2300      	movs	r3, #0
 800f3f4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f3f6:	68fb      	ldr	r3, [r7, #12]
 800f3f8:	3301      	adds	r3, #1
 800f3fa:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	4a13      	ldr	r2, [pc, #76]	; (800f44c <USB_FlushTxFifo+0x64>)
 800f400:	4293      	cmp	r3, r2
 800f402:	d901      	bls.n	800f408 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 800f404:	2303      	movs	r3, #3
 800f406:	e01b      	b.n	800f440 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	691b      	ldr	r3, [r3, #16]
 800f40c:	2b00      	cmp	r3, #0
 800f40e:	daf2      	bge.n	800f3f6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800f410:	2300      	movs	r3, #0
 800f412:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800f414:	683b      	ldr	r3, [r7, #0]
 800f416:	019b      	lsls	r3, r3, #6
 800f418:	f043 0220 	orr.w	r2, r3, #32
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f420:	68fb      	ldr	r3, [r7, #12]
 800f422:	3301      	adds	r3, #1
 800f424:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	4a08      	ldr	r2, [pc, #32]	; (800f44c <USB_FlushTxFifo+0x64>)
 800f42a:	4293      	cmp	r3, r2
 800f42c:	d901      	bls.n	800f432 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800f42e:	2303      	movs	r3, #3
 800f430:	e006      	b.n	800f440 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	691b      	ldr	r3, [r3, #16]
 800f436:	f003 0320 	and.w	r3, r3, #32
 800f43a:	2b20      	cmp	r3, #32
 800f43c:	d0f0      	beq.n	800f420 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800f43e:	2300      	movs	r3, #0
}
 800f440:	4618      	mov	r0, r3
 800f442:	3714      	adds	r7, #20
 800f444:	46bd      	mov	sp, r7
 800f446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f44a:	4770      	bx	lr
 800f44c:	00030d40 	.word	0x00030d40

0800f450 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800f450:	b480      	push	{r7}
 800f452:	b085      	sub	sp, #20
 800f454:	af00      	add	r7, sp, #0
 800f456:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800f458:	2300      	movs	r3, #0
 800f45a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	3301      	adds	r3, #1
 800f460:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f462:	68fb      	ldr	r3, [r7, #12]
 800f464:	4a11      	ldr	r2, [pc, #68]	; (800f4ac <USB_FlushRxFifo+0x5c>)
 800f466:	4293      	cmp	r3, r2
 800f468:	d901      	bls.n	800f46e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800f46a:	2303      	movs	r3, #3
 800f46c:	e018      	b.n	800f4a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	691b      	ldr	r3, [r3, #16]
 800f472:	2b00      	cmp	r3, #0
 800f474:	daf2      	bge.n	800f45c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800f476:	2300      	movs	r3, #0
 800f478:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800f47a:	687b      	ldr	r3, [r7, #4]
 800f47c:	2210      	movs	r2, #16
 800f47e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	3301      	adds	r3, #1
 800f484:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800f486:	68fb      	ldr	r3, [r7, #12]
 800f488:	4a08      	ldr	r2, [pc, #32]	; (800f4ac <USB_FlushRxFifo+0x5c>)
 800f48a:	4293      	cmp	r3, r2
 800f48c:	d901      	bls.n	800f492 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800f48e:	2303      	movs	r3, #3
 800f490:	e006      	b.n	800f4a0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800f492:	687b      	ldr	r3, [r7, #4]
 800f494:	691b      	ldr	r3, [r3, #16]
 800f496:	f003 0310 	and.w	r3, r3, #16
 800f49a:	2b10      	cmp	r3, #16
 800f49c:	d0f0      	beq.n	800f480 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800f49e:	2300      	movs	r3, #0
}
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	3714      	adds	r7, #20
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4aa:	4770      	bx	lr
 800f4ac:	00030d40 	.word	0x00030d40

0800f4b0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800f4b0:	b480      	push	{r7}
 800f4b2:	b085      	sub	sp, #20
 800f4b4:	af00      	add	r7, sp, #0
 800f4b6:	6078      	str	r0, [r7, #4]
 800f4b8:	460b      	mov	r3, r1
 800f4ba:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800f4c0:	68fb      	ldr	r3, [r7, #12]
 800f4c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f4c6:	681a      	ldr	r2, [r3, #0]
 800f4c8:	78fb      	ldrb	r3, [r7, #3]
 800f4ca:	68f9      	ldr	r1, [r7, #12]
 800f4cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f4d0:	4313      	orrs	r3, r2
 800f4d2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800f4d4:	2300      	movs	r3, #0
}
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	3714      	adds	r7, #20
 800f4da:	46bd      	mov	sp, r7
 800f4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4e0:	4770      	bx	lr

0800f4e2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800f4e2:	b480      	push	{r7}
 800f4e4:	b087      	sub	sp, #28
 800f4e6:	af00      	add	r7, sp, #0
 800f4e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f4ea:	687b      	ldr	r3, [r7, #4]
 800f4ec:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800f4ee:	693b      	ldr	r3, [r7, #16]
 800f4f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f4f4:	689b      	ldr	r3, [r3, #8]
 800f4f6:	f003 0306 	and.w	r3, r3, #6
 800f4fa:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 800f4fc:	68fb      	ldr	r3, [r7, #12]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d102      	bne.n	800f508 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800f502:	2300      	movs	r3, #0
 800f504:	75fb      	strb	r3, [r7, #23]
 800f506:	e00a      	b.n	800f51e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800f508:	68fb      	ldr	r3, [r7, #12]
 800f50a:	2b02      	cmp	r3, #2
 800f50c:	d002      	beq.n	800f514 <USB_GetDevSpeed+0x32>
 800f50e:	68fb      	ldr	r3, [r7, #12]
 800f510:	2b06      	cmp	r3, #6
 800f512:	d102      	bne.n	800f51a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800f514:	2302      	movs	r3, #2
 800f516:	75fb      	strb	r3, [r7, #23]
 800f518:	e001      	b.n	800f51e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800f51a:	230f      	movs	r3, #15
 800f51c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800f51e:	7dfb      	ldrb	r3, [r7, #23]
}
 800f520:	4618      	mov	r0, r3
 800f522:	371c      	adds	r7, #28
 800f524:	46bd      	mov	sp, r7
 800f526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f52a:	4770      	bx	lr

0800f52c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f52c:	b480      	push	{r7}
 800f52e:	b085      	sub	sp, #20
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
 800f534:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f53a:	683b      	ldr	r3, [r7, #0]
 800f53c:	781b      	ldrb	r3, [r3, #0]
 800f53e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800f540:	683b      	ldr	r3, [r7, #0]
 800f542:	785b      	ldrb	r3, [r3, #1]
 800f544:	2b01      	cmp	r3, #1
 800f546:	d139      	bne.n	800f5bc <USB_ActivateEndpoint+0x90>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800f548:	68fb      	ldr	r3, [r7, #12]
 800f54a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f54e:	69da      	ldr	r2, [r3, #28]
 800f550:	683b      	ldr	r3, [r7, #0]
 800f552:	781b      	ldrb	r3, [r3, #0]
 800f554:	f003 030f 	and.w	r3, r3, #15
 800f558:	2101      	movs	r1, #1
 800f55a:	fa01 f303 	lsl.w	r3, r1, r3
 800f55e:	b29b      	uxth	r3, r3
 800f560:	68f9      	ldr	r1, [r7, #12]
 800f562:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f566:	4313      	orrs	r3, r2
 800f568:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800f56a:	68bb      	ldr	r3, [r7, #8]
 800f56c:	015a      	lsls	r2, r3, #5
 800f56e:	68fb      	ldr	r3, [r7, #12]
 800f570:	4413      	add	r3, r2
 800f572:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f57c:	2b00      	cmp	r3, #0
 800f57e:	d153      	bne.n	800f628 <USB_ActivateEndpoint+0xfc>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f580:	68bb      	ldr	r3, [r7, #8]
 800f582:	015a      	lsls	r2, r3, #5
 800f584:	68fb      	ldr	r3, [r7, #12]
 800f586:	4413      	add	r3, r2
 800f588:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f58c:	681a      	ldr	r2, [r3, #0]
 800f58e:	683b      	ldr	r3, [r7, #0]
 800f590:	689b      	ldr	r3, [r3, #8]
 800f592:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f596:	683b      	ldr	r3, [r7, #0]
 800f598:	791b      	ldrb	r3, [r3, #4]
 800f59a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f59c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800f59e:	68bb      	ldr	r3, [r7, #8]
 800f5a0:	059b      	lsls	r3, r3, #22
 800f5a2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800f5a4:	431a      	orrs	r2, r3
 800f5a6:	68bb      	ldr	r3, [r7, #8]
 800f5a8:	0159      	lsls	r1, r3, #5
 800f5aa:	68fb      	ldr	r3, [r7, #12]
 800f5ac:	440b      	add	r3, r1
 800f5ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f5b2:	4619      	mov	r1, r3
 800f5b4:	4b20      	ldr	r3, [pc, #128]	; (800f638 <USB_ActivateEndpoint+0x10c>)
 800f5b6:	4313      	orrs	r3, r2
 800f5b8:	600b      	str	r3, [r1, #0]
 800f5ba:	e035      	b.n	800f628 <USB_ActivateEndpoint+0xfc>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f5c2:	69da      	ldr	r2, [r3, #28]
 800f5c4:	683b      	ldr	r3, [r7, #0]
 800f5c6:	781b      	ldrb	r3, [r3, #0]
 800f5c8:	f003 030f 	and.w	r3, r3, #15
 800f5cc:	2101      	movs	r1, #1
 800f5ce:	fa01 f303 	lsl.w	r3, r1, r3
 800f5d2:	041b      	lsls	r3, r3, #16
 800f5d4:	68f9      	ldr	r1, [r7, #12]
 800f5d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f5da:	4313      	orrs	r3, r2
 800f5dc:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800f5de:	68bb      	ldr	r3, [r7, #8]
 800f5e0:	015a      	lsls	r2, r3, #5
 800f5e2:	68fb      	ldr	r3, [r7, #12]
 800f5e4:	4413      	add	r3, r2
 800f5e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5ea:	681b      	ldr	r3, [r3, #0]
 800f5ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d119      	bne.n	800f628 <USB_ActivateEndpoint+0xfc>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f5f4:	68bb      	ldr	r3, [r7, #8]
 800f5f6:	015a      	lsls	r2, r3, #5
 800f5f8:	68fb      	ldr	r3, [r7, #12]
 800f5fa:	4413      	add	r3, r2
 800f5fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f600:	681a      	ldr	r2, [r3, #0]
 800f602:	683b      	ldr	r3, [r7, #0]
 800f604:	689b      	ldr	r3, [r3, #8]
 800f606:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 800f60a:	683b      	ldr	r3, [r7, #0]
 800f60c:	791b      	ldrb	r3, [r3, #4]
 800f60e:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800f610:	430b      	orrs	r3, r1
 800f612:	431a      	orrs	r2, r3
 800f614:	68bb      	ldr	r3, [r7, #8]
 800f616:	0159      	lsls	r1, r3, #5
 800f618:	68fb      	ldr	r3, [r7, #12]
 800f61a:	440b      	add	r3, r1
 800f61c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f620:	4619      	mov	r1, r3
 800f622:	4b05      	ldr	r3, [pc, #20]	; (800f638 <USB_ActivateEndpoint+0x10c>)
 800f624:	4313      	orrs	r3, r2
 800f626:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 800f628:	2300      	movs	r3, #0
}
 800f62a:	4618      	mov	r0, r3
 800f62c:	3714      	adds	r7, #20
 800f62e:	46bd      	mov	sp, r7
 800f630:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f634:	4770      	bx	lr
 800f636:	bf00      	nop
 800f638:	10008000 	.word	0x10008000

0800f63c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800f63c:	b480      	push	{r7}
 800f63e:	b085      	sub	sp, #20
 800f640:	af00      	add	r7, sp, #0
 800f642:	6078      	str	r0, [r7, #4]
 800f644:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800f64a:	683b      	ldr	r3, [r7, #0]
 800f64c:	781b      	ldrb	r3, [r3, #0]
 800f64e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800f650:	683b      	ldr	r3, [r7, #0]
 800f652:	785b      	ldrb	r3, [r3, #1]
 800f654:	2b01      	cmp	r3, #1
 800f656:	d161      	bne.n	800f71c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800f658:	68bb      	ldr	r3, [r7, #8]
 800f65a:	015a      	lsls	r2, r3, #5
 800f65c:	68fb      	ldr	r3, [r7, #12]
 800f65e:	4413      	add	r3, r2
 800f660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f66a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f66e:	d11f      	bne.n	800f6b0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 800f670:	68bb      	ldr	r3, [r7, #8]
 800f672:	015a      	lsls	r2, r3, #5
 800f674:	68fb      	ldr	r3, [r7, #12]
 800f676:	4413      	add	r3, r2
 800f678:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f67c:	681b      	ldr	r3, [r3, #0]
 800f67e:	68ba      	ldr	r2, [r7, #8]
 800f680:	0151      	lsls	r1, r2, #5
 800f682:	68fa      	ldr	r2, [r7, #12]
 800f684:	440a      	add	r2, r1
 800f686:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f68a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f68e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 800f690:	68bb      	ldr	r3, [r7, #8]
 800f692:	015a      	lsls	r2, r3, #5
 800f694:	68fb      	ldr	r3, [r7, #12]
 800f696:	4413      	add	r3, r2
 800f698:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f69c:	681b      	ldr	r3, [r3, #0]
 800f69e:	68ba      	ldr	r2, [r7, #8]
 800f6a0:	0151      	lsls	r1, r2, #5
 800f6a2:	68fa      	ldr	r2, [r7, #12]
 800f6a4:	440a      	add	r2, r1
 800f6a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f6aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f6ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f6b0:	68fb      	ldr	r3, [r7, #12]
 800f6b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f6b8:	683b      	ldr	r3, [r7, #0]
 800f6ba:	781b      	ldrb	r3, [r3, #0]
 800f6bc:	f003 030f 	and.w	r3, r3, #15
 800f6c0:	2101      	movs	r1, #1
 800f6c2:	fa01 f303 	lsl.w	r3, r1, r3
 800f6c6:	b29b      	uxth	r3, r3
 800f6c8:	43db      	mvns	r3, r3
 800f6ca:	68f9      	ldr	r1, [r7, #12]
 800f6cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f6d0:	4013      	ands	r3, r2
 800f6d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 800f6d4:	68fb      	ldr	r3, [r7, #12]
 800f6d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f6da:	69da      	ldr	r2, [r3, #28]
 800f6dc:	683b      	ldr	r3, [r7, #0]
 800f6de:	781b      	ldrb	r3, [r3, #0]
 800f6e0:	f003 030f 	and.w	r3, r3, #15
 800f6e4:	2101      	movs	r1, #1
 800f6e6:	fa01 f303 	lsl.w	r3, r1, r3
 800f6ea:	b29b      	uxth	r3, r3
 800f6ec:	43db      	mvns	r3, r3
 800f6ee:	68f9      	ldr	r1, [r7, #12]
 800f6f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f6f4:	4013      	ands	r3, r2
 800f6f6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800f6f8:	68bb      	ldr	r3, [r7, #8]
 800f6fa:	015a      	lsls	r2, r3, #5
 800f6fc:	68fb      	ldr	r3, [r7, #12]
 800f6fe:	4413      	add	r3, r2
 800f700:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f704:	681a      	ldr	r2, [r3, #0]
 800f706:	68bb      	ldr	r3, [r7, #8]
 800f708:	0159      	lsls	r1, r3, #5
 800f70a:	68fb      	ldr	r3, [r7, #12]
 800f70c:	440b      	add	r3, r1
 800f70e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f712:	4619      	mov	r1, r3
 800f714:	4b35      	ldr	r3, [pc, #212]	; (800f7ec <USB_DeactivateEndpoint+0x1b0>)
 800f716:	4013      	ands	r3, r2
 800f718:	600b      	str	r3, [r1, #0]
 800f71a:	e060      	b.n	800f7de <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800f71c:	68bb      	ldr	r3, [r7, #8]
 800f71e:	015a      	lsls	r2, r3, #5
 800f720:	68fb      	ldr	r3, [r7, #12]
 800f722:	4413      	add	r3, r2
 800f724:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f728:	681b      	ldr	r3, [r3, #0]
 800f72a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f72e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f732:	d11f      	bne.n	800f774 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800f734:	68bb      	ldr	r3, [r7, #8]
 800f736:	015a      	lsls	r2, r3, #5
 800f738:	68fb      	ldr	r3, [r7, #12]
 800f73a:	4413      	add	r3, r2
 800f73c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	68ba      	ldr	r2, [r7, #8]
 800f744:	0151      	lsls	r1, r2, #5
 800f746:	68fa      	ldr	r2, [r7, #12]
 800f748:	440a      	add	r2, r1
 800f74a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f74e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f752:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 800f754:	68bb      	ldr	r3, [r7, #8]
 800f756:	015a      	lsls	r2, r3, #5
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	4413      	add	r3, r2
 800f75c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f760:	681b      	ldr	r3, [r3, #0]
 800f762:	68ba      	ldr	r2, [r7, #8]
 800f764:	0151      	lsls	r1, r2, #5
 800f766:	68fa      	ldr	r2, [r7, #12]
 800f768:	440a      	add	r2, r1
 800f76a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f76e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800f772:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f77a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800f77c:	683b      	ldr	r3, [r7, #0]
 800f77e:	781b      	ldrb	r3, [r3, #0]
 800f780:	f003 030f 	and.w	r3, r3, #15
 800f784:	2101      	movs	r1, #1
 800f786:	fa01 f303 	lsl.w	r3, r1, r3
 800f78a:	041b      	lsls	r3, r3, #16
 800f78c:	43db      	mvns	r3, r3
 800f78e:	68f9      	ldr	r1, [r7, #12]
 800f790:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f794:	4013      	ands	r3, r2
 800f796:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800f798:	68fb      	ldr	r3, [r7, #12]
 800f79a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f79e:	69da      	ldr	r2, [r3, #28]
 800f7a0:	683b      	ldr	r3, [r7, #0]
 800f7a2:	781b      	ldrb	r3, [r3, #0]
 800f7a4:	f003 030f 	and.w	r3, r3, #15
 800f7a8:	2101      	movs	r1, #1
 800f7aa:	fa01 f303 	lsl.w	r3, r1, r3
 800f7ae:	041b      	lsls	r3, r3, #16
 800f7b0:	43db      	mvns	r3, r3
 800f7b2:	68f9      	ldr	r1, [r7, #12]
 800f7b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f7b8:	4013      	ands	r3, r2
 800f7ba:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800f7bc:	68bb      	ldr	r3, [r7, #8]
 800f7be:	015a      	lsls	r2, r3, #5
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	4413      	add	r3, r2
 800f7c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7c8:	681a      	ldr	r2, [r3, #0]
 800f7ca:	68bb      	ldr	r3, [r7, #8]
 800f7cc:	0159      	lsls	r1, r3, #5
 800f7ce:	68fb      	ldr	r3, [r7, #12]
 800f7d0:	440b      	add	r3, r1
 800f7d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f7d6:	4619      	mov	r1, r3
 800f7d8:	4b05      	ldr	r3, [pc, #20]	; (800f7f0 <USB_DeactivateEndpoint+0x1b4>)
 800f7da:	4013      	ands	r3, r2
 800f7dc:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800f7de:	2300      	movs	r3, #0
}
 800f7e0:	4618      	mov	r0, r3
 800f7e2:	3714      	adds	r7, #20
 800f7e4:	46bd      	mov	sp, r7
 800f7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ea:	4770      	bx	lr
 800f7ec:	ec337800 	.word	0xec337800
 800f7f0:	eff37800 	.word	0xeff37800

0800f7f4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800f7f4:	b580      	push	{r7, lr}
 800f7f6:	b08a      	sub	sp, #40	; 0x28
 800f7f8:	af02      	add	r7, sp, #8
 800f7fa:	60f8      	str	r0, [r7, #12]
 800f7fc:	60b9      	str	r1, [r7, #8]
 800f7fe:	4613      	mov	r3, r2
 800f800:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f802:	68fb      	ldr	r3, [r7, #12]
 800f804:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800f806:	68bb      	ldr	r3, [r7, #8]
 800f808:	781b      	ldrb	r3, [r3, #0]
 800f80a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800f80c:	68bb      	ldr	r3, [r7, #8]
 800f80e:	785b      	ldrb	r3, [r3, #1]
 800f810:	2b01      	cmp	r3, #1
 800f812:	f040 8181 	bne.w	800fb18 <USB_EPStartXfer+0x324>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800f816:	68bb      	ldr	r3, [r7, #8]
 800f818:	691b      	ldr	r3, [r3, #16]
 800f81a:	2b00      	cmp	r3, #0
 800f81c:	d132      	bne.n	800f884 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f81e:	69bb      	ldr	r3, [r7, #24]
 800f820:	015a      	lsls	r2, r3, #5
 800f822:	69fb      	ldr	r3, [r7, #28]
 800f824:	4413      	add	r3, r2
 800f826:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f82a:	691a      	ldr	r2, [r3, #16]
 800f82c:	69bb      	ldr	r3, [r7, #24]
 800f82e:	0159      	lsls	r1, r3, #5
 800f830:	69fb      	ldr	r3, [r7, #28]
 800f832:	440b      	add	r3, r1
 800f834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f838:	4619      	mov	r1, r3
 800f83a:	4ba5      	ldr	r3, [pc, #660]	; (800fad0 <USB_EPStartXfer+0x2dc>)
 800f83c:	4013      	ands	r3, r2
 800f83e:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f840:	69bb      	ldr	r3, [r7, #24]
 800f842:	015a      	lsls	r2, r3, #5
 800f844:	69fb      	ldr	r3, [r7, #28]
 800f846:	4413      	add	r3, r2
 800f848:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f84c:	691b      	ldr	r3, [r3, #16]
 800f84e:	69ba      	ldr	r2, [r7, #24]
 800f850:	0151      	lsls	r1, r2, #5
 800f852:	69fa      	ldr	r2, [r7, #28]
 800f854:	440a      	add	r2, r1
 800f856:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f85a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f85e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f860:	69bb      	ldr	r3, [r7, #24]
 800f862:	015a      	lsls	r2, r3, #5
 800f864:	69fb      	ldr	r3, [r7, #28]
 800f866:	4413      	add	r3, r2
 800f868:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f86c:	691a      	ldr	r2, [r3, #16]
 800f86e:	69bb      	ldr	r3, [r7, #24]
 800f870:	0159      	lsls	r1, r3, #5
 800f872:	69fb      	ldr	r3, [r7, #28]
 800f874:	440b      	add	r3, r1
 800f876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f87a:	4619      	mov	r1, r3
 800f87c:	4b95      	ldr	r3, [pc, #596]	; (800fad4 <USB_EPStartXfer+0x2e0>)
 800f87e:	4013      	ands	r3, r2
 800f880:	610b      	str	r3, [r1, #16]
 800f882:	e092      	b.n	800f9aa <USB_EPStartXfer+0x1b6>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800f884:	69bb      	ldr	r3, [r7, #24]
 800f886:	015a      	lsls	r2, r3, #5
 800f888:	69fb      	ldr	r3, [r7, #28]
 800f88a:	4413      	add	r3, r2
 800f88c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f890:	691a      	ldr	r2, [r3, #16]
 800f892:	69bb      	ldr	r3, [r7, #24]
 800f894:	0159      	lsls	r1, r3, #5
 800f896:	69fb      	ldr	r3, [r7, #28]
 800f898:	440b      	add	r3, r1
 800f89a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f89e:	4619      	mov	r1, r3
 800f8a0:	4b8c      	ldr	r3, [pc, #560]	; (800fad4 <USB_EPStartXfer+0x2e0>)
 800f8a2:	4013      	ands	r3, r2
 800f8a4:	610b      	str	r3, [r1, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800f8a6:	69bb      	ldr	r3, [r7, #24]
 800f8a8:	015a      	lsls	r2, r3, #5
 800f8aa:	69fb      	ldr	r3, [r7, #28]
 800f8ac:	4413      	add	r3, r2
 800f8ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8b2:	691a      	ldr	r2, [r3, #16]
 800f8b4:	69bb      	ldr	r3, [r7, #24]
 800f8b6:	0159      	lsls	r1, r3, #5
 800f8b8:	69fb      	ldr	r3, [r7, #28]
 800f8ba:	440b      	add	r3, r1
 800f8bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8c0:	4619      	mov	r1, r3
 800f8c2:	4b83      	ldr	r3, [pc, #524]	; (800fad0 <USB_EPStartXfer+0x2dc>)
 800f8c4:	4013      	ands	r3, r2
 800f8c6:	610b      	str	r3, [r1, #16]

      if (epnum == 0U)
 800f8c8:	69bb      	ldr	r3, [r7, #24]
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d11a      	bne.n	800f904 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800f8ce:	68bb      	ldr	r3, [r7, #8]
 800f8d0:	691a      	ldr	r2, [r3, #16]
 800f8d2:	68bb      	ldr	r3, [r7, #8]
 800f8d4:	689b      	ldr	r3, [r3, #8]
 800f8d6:	429a      	cmp	r2, r3
 800f8d8:	d903      	bls.n	800f8e2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 800f8da:	68bb      	ldr	r3, [r7, #8]
 800f8dc:	689a      	ldr	r2, [r3, #8]
 800f8de:	68bb      	ldr	r3, [r7, #8]
 800f8e0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800f8e2:	69bb      	ldr	r3, [r7, #24]
 800f8e4:	015a      	lsls	r2, r3, #5
 800f8e6:	69fb      	ldr	r3, [r7, #28]
 800f8e8:	4413      	add	r3, r2
 800f8ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8ee:	691b      	ldr	r3, [r3, #16]
 800f8f0:	69ba      	ldr	r2, [r7, #24]
 800f8f2:	0151      	lsls	r1, r2, #5
 800f8f4:	69fa      	ldr	r2, [r7, #28]
 800f8f6:	440a      	add	r2, r1
 800f8f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f8fc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f900:	6113      	str	r3, [r2, #16]
 800f902:	e01b      	b.n	800f93c <USB_EPStartXfer+0x148>
      }
      else
      {
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800f904:	69bb      	ldr	r3, [r7, #24]
 800f906:	015a      	lsls	r2, r3, #5
 800f908:	69fb      	ldr	r3, [r7, #28]
 800f90a:	4413      	add	r3, r2
 800f90c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f910:	691a      	ldr	r2, [r3, #16]
                                       (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800f912:	68bb      	ldr	r3, [r7, #8]
 800f914:	6919      	ldr	r1, [r3, #16]
 800f916:	68bb      	ldr	r3, [r7, #8]
 800f918:	689b      	ldr	r3, [r3, #8]
 800f91a:	440b      	add	r3, r1
 800f91c:	1e59      	subs	r1, r3, #1
 800f91e:	68bb      	ldr	r3, [r7, #8]
 800f920:	689b      	ldr	r3, [r3, #8]
 800f922:	fbb1 f3f3 	udiv	r3, r1, r3
 800f926:	04d9      	lsls	r1, r3, #19
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800f928:	4b6b      	ldr	r3, [pc, #428]	; (800fad8 <USB_EPStartXfer+0x2e4>)
 800f92a:	400b      	ands	r3, r1
 800f92c:	69b9      	ldr	r1, [r7, #24]
 800f92e:	0148      	lsls	r0, r1, #5
 800f930:	69f9      	ldr	r1, [r7, #28]
 800f932:	4401      	add	r1, r0
 800f934:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f938:	4313      	orrs	r3, r2
 800f93a:	610b      	str	r3, [r1, #16]
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800f93c:	69bb      	ldr	r3, [r7, #24]
 800f93e:	015a      	lsls	r2, r3, #5
 800f940:	69fb      	ldr	r3, [r7, #28]
 800f942:	4413      	add	r3, r2
 800f944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f948:	691a      	ldr	r2, [r3, #16]
 800f94a:	68bb      	ldr	r3, [r7, #8]
 800f94c:	691b      	ldr	r3, [r3, #16]
 800f94e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800f952:	69b9      	ldr	r1, [r7, #24]
 800f954:	0148      	lsls	r0, r1, #5
 800f956:	69f9      	ldr	r1, [r7, #28]
 800f958:	4401      	add	r1, r0
 800f95a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800f95e:	4313      	orrs	r3, r2
 800f960:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800f962:	68bb      	ldr	r3, [r7, #8]
 800f964:	791b      	ldrb	r3, [r3, #4]
 800f966:	2b01      	cmp	r3, #1
 800f968:	d11f      	bne.n	800f9aa <USB_EPStartXfer+0x1b6>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800f96a:	69bb      	ldr	r3, [r7, #24]
 800f96c:	015a      	lsls	r2, r3, #5
 800f96e:	69fb      	ldr	r3, [r7, #28]
 800f970:	4413      	add	r3, r2
 800f972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f976:	691b      	ldr	r3, [r3, #16]
 800f978:	69ba      	ldr	r2, [r7, #24]
 800f97a:	0151      	lsls	r1, r2, #5
 800f97c:	69fa      	ldr	r2, [r7, #28]
 800f97e:	440a      	add	r2, r1
 800f980:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f984:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800f988:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800f98a:	69bb      	ldr	r3, [r7, #24]
 800f98c:	015a      	lsls	r2, r3, #5
 800f98e:	69fb      	ldr	r3, [r7, #28]
 800f990:	4413      	add	r3, r2
 800f992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f996:	691b      	ldr	r3, [r3, #16]
 800f998:	69ba      	ldr	r2, [r7, #24]
 800f99a:	0151      	lsls	r1, r2, #5
 800f99c:	69fa      	ldr	r2, [r7, #28]
 800f99e:	440a      	add	r2, r1
 800f9a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f9a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800f9a8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800f9aa:	79fb      	ldrb	r3, [r7, #7]
 800f9ac:	2b01      	cmp	r3, #1
 800f9ae:	d14b      	bne.n	800fa48 <USB_EPStartXfer+0x254>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800f9b0:	68bb      	ldr	r3, [r7, #8]
 800f9b2:	69db      	ldr	r3, [r3, #28]
 800f9b4:	2b00      	cmp	r3, #0
 800f9b6:	d009      	beq.n	800f9cc <USB_EPStartXfer+0x1d8>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800f9b8:	69bb      	ldr	r3, [r7, #24]
 800f9ba:	015a      	lsls	r2, r3, #5
 800f9bc:	69fb      	ldr	r3, [r7, #28]
 800f9be:	4413      	add	r3, r2
 800f9c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9c4:	461a      	mov	r2, r3
 800f9c6:	68bb      	ldr	r3, [r7, #8]
 800f9c8:	69db      	ldr	r3, [r3, #28]
 800f9ca:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800f9cc:	68bb      	ldr	r3, [r7, #8]
 800f9ce:	791b      	ldrb	r3, [r3, #4]
 800f9d0:	2b01      	cmp	r3, #1
 800f9d2:	d128      	bne.n	800fa26 <USB_EPStartXfer+0x232>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800f9d4:	69fb      	ldr	r3, [r7, #28]
 800f9d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9da:	689b      	ldr	r3, [r3, #8]
 800f9dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f9e0:	2b00      	cmp	r3, #0
 800f9e2:	d110      	bne.n	800fa06 <USB_EPStartXfer+0x212>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800f9e4:	69bb      	ldr	r3, [r7, #24]
 800f9e6:	015a      	lsls	r2, r3, #5
 800f9e8:	69fb      	ldr	r3, [r7, #28]
 800f9ea:	4413      	add	r3, r2
 800f9ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f9f0:	681b      	ldr	r3, [r3, #0]
 800f9f2:	69ba      	ldr	r2, [r7, #24]
 800f9f4:	0151      	lsls	r1, r2, #5
 800f9f6:	69fa      	ldr	r2, [r7, #28]
 800f9f8:	440a      	add	r2, r1
 800f9fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f9fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fa02:	6013      	str	r3, [r2, #0]
 800fa04:	e00f      	b.n	800fa26 <USB_EPStartXfer+0x232>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800fa06:	69bb      	ldr	r3, [r7, #24]
 800fa08:	015a      	lsls	r2, r3, #5
 800fa0a:	69fb      	ldr	r3, [r7, #28]
 800fa0c:	4413      	add	r3, r2
 800fa0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa12:	681b      	ldr	r3, [r3, #0]
 800fa14:	69ba      	ldr	r2, [r7, #24]
 800fa16:	0151      	lsls	r1, r2, #5
 800fa18:	69fa      	ldr	r2, [r7, #28]
 800fa1a:	440a      	add	r2, r1
 800fa1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fa24:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fa26:	69bb      	ldr	r3, [r7, #24]
 800fa28:	015a      	lsls	r2, r3, #5
 800fa2a:	69fb      	ldr	r3, [r7, #28]
 800fa2c:	4413      	add	r3, r2
 800fa2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	69ba      	ldr	r2, [r7, #24]
 800fa36:	0151      	lsls	r1, r2, #5
 800fa38:	69fa      	ldr	r2, [r7, #28]
 800fa3a:	440a      	add	r2, r1
 800fa3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa40:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fa44:	6013      	str	r3, [r2, #0]
 800fa46:	e16a      	b.n	800fd1e <USB_EPStartXfer+0x52a>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800fa48:	69bb      	ldr	r3, [r7, #24]
 800fa4a:	015a      	lsls	r2, r3, #5
 800fa4c:	69fb      	ldr	r3, [r7, #28]
 800fa4e:	4413      	add	r3, r2
 800fa50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	69ba      	ldr	r2, [r7, #24]
 800fa58:	0151      	lsls	r1, r2, #5
 800fa5a:	69fa      	ldr	r2, [r7, #28]
 800fa5c:	440a      	add	r2, r1
 800fa5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fa62:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fa66:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800fa68:	68bb      	ldr	r3, [r7, #8]
 800fa6a:	791b      	ldrb	r3, [r3, #4]
 800fa6c:	2b01      	cmp	r3, #1
 800fa6e:	d015      	beq.n	800fa9c <USB_EPStartXfer+0x2a8>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800fa70:	68bb      	ldr	r3, [r7, #8]
 800fa72:	691b      	ldr	r3, [r3, #16]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	f000 8152 	beq.w	800fd1e <USB_EPStartXfer+0x52a>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800fa7a:	69fb      	ldr	r3, [r7, #28]
 800fa7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fa80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800fa82:	68bb      	ldr	r3, [r7, #8]
 800fa84:	781b      	ldrb	r3, [r3, #0]
 800fa86:	f003 030f 	and.w	r3, r3, #15
 800fa8a:	2101      	movs	r1, #1
 800fa8c:	fa01 f303 	lsl.w	r3, r1, r3
 800fa90:	69f9      	ldr	r1, [r7, #28]
 800fa92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800fa96:	4313      	orrs	r3, r2
 800fa98:	634b      	str	r3, [r1, #52]	; 0x34
 800fa9a:	e140      	b.n	800fd1e <USB_EPStartXfer+0x52a>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fa9c:	69fb      	ldr	r3, [r7, #28]
 800fa9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800faa2:	689b      	ldr	r3, [r3, #8]
 800faa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800faa8:	2b00      	cmp	r3, #0
 800faaa:	d117      	bne.n	800fadc <USB_EPStartXfer+0x2e8>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800faac:	69bb      	ldr	r3, [r7, #24]
 800faae:	015a      	lsls	r2, r3, #5
 800fab0:	69fb      	ldr	r3, [r7, #28]
 800fab2:	4413      	add	r3, r2
 800fab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fab8:	681b      	ldr	r3, [r3, #0]
 800faba:	69ba      	ldr	r2, [r7, #24]
 800fabc:	0151      	lsls	r1, r2, #5
 800fabe:	69fa      	ldr	r2, [r7, #28]
 800fac0:	440a      	add	r2, r1
 800fac2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fac6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800faca:	6013      	str	r3, [r2, #0]
 800facc:	e016      	b.n	800fafc <USB_EPStartXfer+0x308>
 800face:	bf00      	nop
 800fad0:	e007ffff 	.word	0xe007ffff
 800fad4:	fff80000 	.word	0xfff80000
 800fad8:	1ff80000 	.word	0x1ff80000
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800fadc:	69bb      	ldr	r3, [r7, #24]
 800fade:	015a      	lsls	r2, r3, #5
 800fae0:	69fb      	ldr	r3, [r7, #28]
 800fae2:	4413      	add	r3, r2
 800fae4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fae8:	681b      	ldr	r3, [r3, #0]
 800faea:	69ba      	ldr	r2, [r7, #24]
 800faec:	0151      	lsls	r1, r2, #5
 800faee:	69fa      	ldr	r2, [r7, #28]
 800faf0:	440a      	add	r2, r1
 800faf2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800faf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fafa:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800fafc:	68bb      	ldr	r3, [r7, #8]
 800fafe:	68d9      	ldr	r1, [r3, #12]
 800fb00:	68bb      	ldr	r3, [r7, #8]
 800fb02:	781a      	ldrb	r2, [r3, #0]
 800fb04:	68bb      	ldr	r3, [r7, #8]
 800fb06:	691b      	ldr	r3, [r3, #16]
 800fb08:	b298      	uxth	r0, r3
 800fb0a:	79fb      	ldrb	r3, [r7, #7]
 800fb0c:	9300      	str	r3, [sp, #0]
 800fb0e:	4603      	mov	r3, r0
 800fb10:	68f8      	ldr	r0, [r7, #12]
 800fb12:	f000 f9b9 	bl	800fe88 <USB_WritePacket>
 800fb16:	e102      	b.n	800fd1e <USB_EPStartXfer+0x52a>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800fb18:	69bb      	ldr	r3, [r7, #24]
 800fb1a:	015a      	lsls	r2, r3, #5
 800fb1c:	69fb      	ldr	r3, [r7, #28]
 800fb1e:	4413      	add	r3, r2
 800fb20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb24:	691a      	ldr	r2, [r3, #16]
 800fb26:	69bb      	ldr	r3, [r7, #24]
 800fb28:	0159      	lsls	r1, r3, #5
 800fb2a:	69fb      	ldr	r3, [r7, #28]
 800fb2c:	440b      	add	r3, r1
 800fb2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb32:	4619      	mov	r1, r3
 800fb34:	4b7c      	ldr	r3, [pc, #496]	; (800fd28 <USB_EPStartXfer+0x534>)
 800fb36:	4013      	ands	r3, r2
 800fb38:	610b      	str	r3, [r1, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800fb3a:	69bb      	ldr	r3, [r7, #24]
 800fb3c:	015a      	lsls	r2, r3, #5
 800fb3e:	69fb      	ldr	r3, [r7, #28]
 800fb40:	4413      	add	r3, r2
 800fb42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb46:	691a      	ldr	r2, [r3, #16]
 800fb48:	69bb      	ldr	r3, [r7, #24]
 800fb4a:	0159      	lsls	r1, r3, #5
 800fb4c:	69fb      	ldr	r3, [r7, #28]
 800fb4e:	440b      	add	r3, r1
 800fb50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb54:	4619      	mov	r1, r3
 800fb56:	4b75      	ldr	r3, [pc, #468]	; (800fd2c <USB_EPStartXfer+0x538>)
 800fb58:	4013      	ands	r3, r2
 800fb5a:	610b      	str	r3, [r1, #16]

    if (epnum == 0U)
 800fb5c:	69bb      	ldr	r3, [r7, #24]
 800fb5e:	2b00      	cmp	r3, #0
 800fb60:	d12f      	bne.n	800fbc2 <USB_EPStartXfer+0x3ce>
    {
      if (ep->xfer_len > 0U)
 800fb62:	68bb      	ldr	r3, [r7, #8]
 800fb64:	691b      	ldr	r3, [r3, #16]
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d003      	beq.n	800fb72 <USB_EPStartXfer+0x37e>
      {
        ep->xfer_len = ep->maxpacket;
 800fb6a:	68bb      	ldr	r3, [r7, #8]
 800fb6c:	689a      	ldr	r2, [r3, #8]
 800fb6e:	68bb      	ldr	r3, [r7, #8]
 800fb70:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800fb72:	68bb      	ldr	r3, [r7, #8]
 800fb74:	689a      	ldr	r2, [r3, #8]
 800fb76:	68bb      	ldr	r3, [r7, #8]
 800fb78:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800fb7a:	69bb      	ldr	r3, [r7, #24]
 800fb7c:	015a      	lsls	r2, r3, #5
 800fb7e:	69fb      	ldr	r3, [r7, #28]
 800fb80:	4413      	add	r3, r2
 800fb82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fb86:	691a      	ldr	r2, [r3, #16]
 800fb88:	68bb      	ldr	r3, [r7, #8]
 800fb8a:	6a1b      	ldr	r3, [r3, #32]
 800fb8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fb90:	69b9      	ldr	r1, [r7, #24]
 800fb92:	0148      	lsls	r0, r1, #5
 800fb94:	69f9      	ldr	r1, [r7, #28]
 800fb96:	4401      	add	r1, r0
 800fb98:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fb9c:	4313      	orrs	r3, r2
 800fb9e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fba0:	69bb      	ldr	r3, [r7, #24]
 800fba2:	015a      	lsls	r2, r3, #5
 800fba4:	69fb      	ldr	r3, [r7, #28]
 800fba6:	4413      	add	r3, r2
 800fba8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fbac:	691b      	ldr	r3, [r3, #16]
 800fbae:	69ba      	ldr	r2, [r7, #24]
 800fbb0:	0151      	lsls	r1, r2, #5
 800fbb2:	69fa      	ldr	r2, [r7, #28]
 800fbb4:	440a      	add	r2, r1
 800fbb6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fbba:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fbbe:	6113      	str	r3, [r2, #16]
 800fbc0:	e05f      	b.n	800fc82 <USB_EPStartXfer+0x48e>
    }
    else
    {
      if (ep->xfer_len == 0U)
 800fbc2:	68bb      	ldr	r3, [r7, #8]
 800fbc4:	691b      	ldr	r3, [r3, #16]
 800fbc6:	2b00      	cmp	r3, #0
 800fbc8:	d123      	bne.n	800fc12 <USB_EPStartXfer+0x41e>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800fbca:	69bb      	ldr	r3, [r7, #24]
 800fbcc:	015a      	lsls	r2, r3, #5
 800fbce:	69fb      	ldr	r3, [r7, #28]
 800fbd0:	4413      	add	r3, r2
 800fbd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fbd6:	691a      	ldr	r2, [r3, #16]
 800fbd8:	68bb      	ldr	r3, [r7, #8]
 800fbda:	689b      	ldr	r3, [r3, #8]
 800fbdc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fbe0:	69b9      	ldr	r1, [r7, #24]
 800fbe2:	0148      	lsls	r0, r1, #5
 800fbe4:	69f9      	ldr	r1, [r7, #28]
 800fbe6:	4401      	add	r1, r0
 800fbe8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fbec:	4313      	orrs	r3, r2
 800fbee:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800fbf0:	69bb      	ldr	r3, [r7, #24]
 800fbf2:	015a      	lsls	r2, r3, #5
 800fbf4:	69fb      	ldr	r3, [r7, #28]
 800fbf6:	4413      	add	r3, r2
 800fbf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fbfc:	691b      	ldr	r3, [r3, #16]
 800fbfe:	69ba      	ldr	r2, [r7, #24]
 800fc00:	0151      	lsls	r1, r2, #5
 800fc02:	69fa      	ldr	r2, [r7, #28]
 800fc04:	440a      	add	r2, r1
 800fc06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fc0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800fc0e:	6113      	str	r3, [r2, #16]
 800fc10:	e037      	b.n	800fc82 <USB_EPStartXfer+0x48e>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800fc12:	68bb      	ldr	r3, [r7, #8]
 800fc14:	691a      	ldr	r2, [r3, #16]
 800fc16:	68bb      	ldr	r3, [r7, #8]
 800fc18:	689b      	ldr	r3, [r3, #8]
 800fc1a:	4413      	add	r3, r2
 800fc1c:	1e5a      	subs	r2, r3, #1
 800fc1e:	68bb      	ldr	r3, [r7, #8]
 800fc20:	689b      	ldr	r3, [r3, #8]
 800fc22:	fbb2 f3f3 	udiv	r3, r2, r3
 800fc26:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 800fc28:	68bb      	ldr	r3, [r7, #8]
 800fc2a:	689b      	ldr	r3, [r3, #8]
 800fc2c:	8afa      	ldrh	r2, [r7, #22]
 800fc2e:	fb03 f202 	mul.w	r2, r3, r2
 800fc32:	68bb      	ldr	r3, [r7, #8]
 800fc34:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800fc36:	69bb      	ldr	r3, [r7, #24]
 800fc38:	015a      	lsls	r2, r3, #5
 800fc3a:	69fb      	ldr	r3, [r7, #28]
 800fc3c:	4413      	add	r3, r2
 800fc3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc42:	691a      	ldr	r2, [r3, #16]
 800fc44:	8afb      	ldrh	r3, [r7, #22]
 800fc46:	04d9      	lsls	r1, r3, #19
 800fc48:	4b39      	ldr	r3, [pc, #228]	; (800fd30 <USB_EPStartXfer+0x53c>)
 800fc4a:	400b      	ands	r3, r1
 800fc4c:	69b9      	ldr	r1, [r7, #24]
 800fc4e:	0148      	lsls	r0, r1, #5
 800fc50:	69f9      	ldr	r1, [r7, #28]
 800fc52:	4401      	add	r1, r0
 800fc54:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fc58:	4313      	orrs	r3, r2
 800fc5a:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800fc5c:	69bb      	ldr	r3, [r7, #24]
 800fc5e:	015a      	lsls	r2, r3, #5
 800fc60:	69fb      	ldr	r3, [r7, #28]
 800fc62:	4413      	add	r3, r2
 800fc64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fc68:	691a      	ldr	r2, [r3, #16]
 800fc6a:	68bb      	ldr	r3, [r7, #8]
 800fc6c:	6a1b      	ldr	r3, [r3, #32]
 800fc6e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800fc72:	69b9      	ldr	r1, [r7, #24]
 800fc74:	0148      	lsls	r0, r1, #5
 800fc76:	69f9      	ldr	r1, [r7, #28]
 800fc78:	4401      	add	r1, r0
 800fc7a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800fc7e:	4313      	orrs	r3, r2
 800fc80:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 800fc82:	79fb      	ldrb	r3, [r7, #7]
 800fc84:	2b01      	cmp	r3, #1
 800fc86:	d10d      	bne.n	800fca4 <USB_EPStartXfer+0x4b0>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800fc88:	68bb      	ldr	r3, [r7, #8]
 800fc8a:	68db      	ldr	r3, [r3, #12]
 800fc8c:	2b00      	cmp	r3, #0
 800fc8e:	d009      	beq.n	800fca4 <USB_EPStartXfer+0x4b0>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800fc90:	68bb      	ldr	r3, [r7, #8]
 800fc92:	68d9      	ldr	r1, [r3, #12]
 800fc94:	69bb      	ldr	r3, [r7, #24]
 800fc96:	015a      	lsls	r2, r3, #5
 800fc98:	69fb      	ldr	r3, [r7, #28]
 800fc9a:	4413      	add	r3, r2
 800fc9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fca0:	460a      	mov	r2, r1
 800fca2:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800fca4:	68bb      	ldr	r3, [r7, #8]
 800fca6:	791b      	ldrb	r3, [r3, #4]
 800fca8:	2b01      	cmp	r3, #1
 800fcaa:	d128      	bne.n	800fcfe <USB_EPStartXfer+0x50a>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800fcac:	69fb      	ldr	r3, [r7, #28]
 800fcae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fcb2:	689b      	ldr	r3, [r3, #8]
 800fcb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800fcb8:	2b00      	cmp	r3, #0
 800fcba:	d110      	bne.n	800fcde <USB_EPStartXfer+0x4ea>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800fcbc:	69bb      	ldr	r3, [r7, #24]
 800fcbe:	015a      	lsls	r2, r3, #5
 800fcc0:	69fb      	ldr	r3, [r7, #28]
 800fcc2:	4413      	add	r3, r2
 800fcc4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	69ba      	ldr	r2, [r7, #24]
 800fccc:	0151      	lsls	r1, r2, #5
 800fcce:	69fa      	ldr	r2, [r7, #28]
 800fcd0:	440a      	add	r2, r1
 800fcd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fcd6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800fcda:	6013      	str	r3, [r2, #0]
 800fcdc:	e00f      	b.n	800fcfe <USB_EPStartXfer+0x50a>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800fcde:	69bb      	ldr	r3, [r7, #24]
 800fce0:	015a      	lsls	r2, r3, #5
 800fce2:	69fb      	ldr	r3, [r7, #28]
 800fce4:	4413      	add	r3, r2
 800fce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	69ba      	ldr	r2, [r7, #24]
 800fcee:	0151      	lsls	r1, r2, #5
 800fcf0:	69fa      	ldr	r2, [r7, #28]
 800fcf2:	440a      	add	r2, r1
 800fcf4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fcf8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800fcfc:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800fcfe:	69bb      	ldr	r3, [r7, #24]
 800fd00:	015a      	lsls	r2, r3, #5
 800fd02:	69fb      	ldr	r3, [r7, #28]
 800fd04:	4413      	add	r3, r2
 800fd06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fd0a:	681b      	ldr	r3, [r3, #0]
 800fd0c:	69ba      	ldr	r2, [r7, #24]
 800fd0e:	0151      	lsls	r1, r2, #5
 800fd10:	69fa      	ldr	r2, [r7, #28]
 800fd12:	440a      	add	r2, r1
 800fd14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fd18:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800fd1c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800fd1e:	2300      	movs	r3, #0
}
 800fd20:	4618      	mov	r0, r3
 800fd22:	3720      	adds	r7, #32
 800fd24:	46bd      	mov	sp, r7
 800fd26:	bd80      	pop	{r7, pc}
 800fd28:	fff80000 	.word	0xfff80000
 800fd2c:	e007ffff 	.word	0xe007ffff
 800fd30:	1ff80000 	.word	0x1ff80000

0800fd34 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800fd34:	b480      	push	{r7}
 800fd36:	b087      	sub	sp, #28
 800fd38:	af00      	add	r7, sp, #0
 800fd3a:	6078      	str	r0, [r7, #4]
 800fd3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800fd3e:	2300      	movs	r3, #0
 800fd40:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800fd42:	2300      	movs	r3, #0
 800fd44:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fd46:	687b      	ldr	r3, [r7, #4]
 800fd48:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800fd4a:	683b      	ldr	r3, [r7, #0]
 800fd4c:	785b      	ldrb	r3, [r3, #1]
 800fd4e:	2b01      	cmp	r3, #1
 800fd50:	d14a      	bne.n	800fde8 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800fd52:	683b      	ldr	r3, [r7, #0]
 800fd54:	781b      	ldrb	r3, [r3, #0]
 800fd56:	015a      	lsls	r2, r3, #5
 800fd58:	693b      	ldr	r3, [r7, #16]
 800fd5a:	4413      	add	r3, r2
 800fd5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd60:	681b      	ldr	r3, [r3, #0]
 800fd62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fd66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fd6a:	f040 8086 	bne.w	800fe7a <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800fd6e:	683b      	ldr	r3, [r7, #0]
 800fd70:	781b      	ldrb	r3, [r3, #0]
 800fd72:	015a      	lsls	r2, r3, #5
 800fd74:	693b      	ldr	r3, [r7, #16]
 800fd76:	4413      	add	r3, r2
 800fd78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fd7c:	681b      	ldr	r3, [r3, #0]
 800fd7e:	683a      	ldr	r2, [r7, #0]
 800fd80:	7812      	ldrb	r2, [r2, #0]
 800fd82:	0151      	lsls	r1, r2, #5
 800fd84:	693a      	ldr	r2, [r7, #16]
 800fd86:	440a      	add	r2, r1
 800fd88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fd8c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fd90:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800fd92:	683b      	ldr	r3, [r7, #0]
 800fd94:	781b      	ldrb	r3, [r3, #0]
 800fd96:	015a      	lsls	r2, r3, #5
 800fd98:	693b      	ldr	r3, [r7, #16]
 800fd9a:	4413      	add	r3, r2
 800fd9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	683a      	ldr	r2, [r7, #0]
 800fda4:	7812      	ldrb	r2, [r2, #0]
 800fda6:	0151      	lsls	r1, r2, #5
 800fda8:	693a      	ldr	r2, [r7, #16]
 800fdaa:	440a      	add	r2, r1
 800fdac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800fdb0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fdb4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800fdb6:	68fb      	ldr	r3, [r7, #12]
 800fdb8:	3301      	adds	r3, #1
 800fdba:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	f242 7210 	movw	r2, #10000	; 0x2710
 800fdc2:	4293      	cmp	r3, r2
 800fdc4:	d902      	bls.n	800fdcc <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800fdc6:	2301      	movs	r3, #1
 800fdc8:	75fb      	strb	r3, [r7, #23]
          break;
 800fdca:	e056      	b.n	800fe7a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800fdcc:	683b      	ldr	r3, [r7, #0]
 800fdce:	781b      	ldrb	r3, [r3, #0]
 800fdd0:	015a      	lsls	r2, r3, #5
 800fdd2:	693b      	ldr	r3, [r7, #16]
 800fdd4:	4413      	add	r3, r2
 800fdd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fdda:	681b      	ldr	r3, [r3, #0]
 800fddc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fde0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fde4:	d0e7      	beq.n	800fdb6 <USB_EPStopXfer+0x82>
 800fde6:	e048      	b.n	800fe7a <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800fde8:	683b      	ldr	r3, [r7, #0]
 800fdea:	781b      	ldrb	r3, [r3, #0]
 800fdec:	015a      	lsls	r2, r3, #5
 800fdee:	693b      	ldr	r3, [r7, #16]
 800fdf0:	4413      	add	r3, r2
 800fdf2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fdfc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fe00:	d13b      	bne.n	800fe7a <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800fe02:	683b      	ldr	r3, [r7, #0]
 800fe04:	781b      	ldrb	r3, [r3, #0]
 800fe06:	015a      	lsls	r2, r3, #5
 800fe08:	693b      	ldr	r3, [r7, #16]
 800fe0a:	4413      	add	r3, r2
 800fe0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe10:	681b      	ldr	r3, [r3, #0]
 800fe12:	683a      	ldr	r2, [r7, #0]
 800fe14:	7812      	ldrb	r2, [r2, #0]
 800fe16:	0151      	lsls	r1, r2, #5
 800fe18:	693a      	ldr	r2, [r7, #16]
 800fe1a:	440a      	add	r2, r1
 800fe1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fe20:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800fe24:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800fe26:	683b      	ldr	r3, [r7, #0]
 800fe28:	781b      	ldrb	r3, [r3, #0]
 800fe2a:	015a      	lsls	r2, r3, #5
 800fe2c:	693b      	ldr	r3, [r7, #16]
 800fe2e:	4413      	add	r3, r2
 800fe30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	683a      	ldr	r2, [r7, #0]
 800fe38:	7812      	ldrb	r2, [r2, #0]
 800fe3a:	0151      	lsls	r1, r2, #5
 800fe3c:	693a      	ldr	r2, [r7, #16]
 800fe3e:	440a      	add	r2, r1
 800fe40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800fe44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800fe48:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	3301      	adds	r3, #1
 800fe4e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800fe50:	68fb      	ldr	r3, [r7, #12]
 800fe52:	f242 7210 	movw	r2, #10000	; 0x2710
 800fe56:	4293      	cmp	r3, r2
 800fe58:	d902      	bls.n	800fe60 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800fe5a:	2301      	movs	r3, #1
 800fe5c:	75fb      	strb	r3, [r7, #23]
          break;
 800fe5e:	e00c      	b.n	800fe7a <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800fe60:	683b      	ldr	r3, [r7, #0]
 800fe62:	781b      	ldrb	r3, [r3, #0]
 800fe64:	015a      	lsls	r2, r3, #5
 800fe66:	693b      	ldr	r3, [r7, #16]
 800fe68:	4413      	add	r3, r2
 800fe6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fe6e:	681b      	ldr	r3, [r3, #0]
 800fe70:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800fe74:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800fe78:	d0e7      	beq.n	800fe4a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800fe7a:	7dfb      	ldrb	r3, [r7, #23]
}
 800fe7c:	4618      	mov	r0, r3
 800fe7e:	371c      	adds	r7, #28
 800fe80:	46bd      	mov	sp, r7
 800fe82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe86:	4770      	bx	lr

0800fe88 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800fe88:	b480      	push	{r7}
 800fe8a:	b089      	sub	sp, #36	; 0x24
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	60f8      	str	r0, [r7, #12]
 800fe90:	60b9      	str	r1, [r7, #8]
 800fe92:	4611      	mov	r1, r2
 800fe94:	461a      	mov	r2, r3
 800fe96:	460b      	mov	r3, r1
 800fe98:	71fb      	strb	r3, [r7, #7]
 800fe9a:	4613      	mov	r3, r2
 800fe9c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800fe9e:	68fb      	ldr	r3, [r7, #12]
 800fea0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800fea2:	68bb      	ldr	r3, [r7, #8]
 800fea4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800fea6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d123      	bne.n	800fef6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800feae:	88bb      	ldrh	r3, [r7, #4]
 800feb0:	3303      	adds	r3, #3
 800feb2:	089b      	lsrs	r3, r3, #2
 800feb4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800feb6:	2300      	movs	r3, #0
 800feb8:	61bb      	str	r3, [r7, #24]
 800feba:	e018      	b.n	800feee <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800febc:	79fb      	ldrb	r3, [r7, #7]
 800febe:	031a      	lsls	r2, r3, #12
 800fec0:	697b      	ldr	r3, [r7, #20]
 800fec2:	4413      	add	r3, r2
 800fec4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800fec8:	461a      	mov	r2, r3
 800feca:	69fb      	ldr	r3, [r7, #28]
 800fecc:	681b      	ldr	r3, [r3, #0]
 800fece:	6013      	str	r3, [r2, #0]
      pSrc++;
 800fed0:	69fb      	ldr	r3, [r7, #28]
 800fed2:	3301      	adds	r3, #1
 800fed4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800fed6:	69fb      	ldr	r3, [r7, #28]
 800fed8:	3301      	adds	r3, #1
 800feda:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800fedc:	69fb      	ldr	r3, [r7, #28]
 800fede:	3301      	adds	r3, #1
 800fee0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800fee2:	69fb      	ldr	r3, [r7, #28]
 800fee4:	3301      	adds	r3, #1
 800fee6:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800fee8:	69bb      	ldr	r3, [r7, #24]
 800feea:	3301      	adds	r3, #1
 800feec:	61bb      	str	r3, [r7, #24]
 800feee:	69ba      	ldr	r2, [r7, #24]
 800fef0:	693b      	ldr	r3, [r7, #16]
 800fef2:	429a      	cmp	r2, r3
 800fef4:	d3e2      	bcc.n	800febc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800fef6:	2300      	movs	r3, #0
}
 800fef8:	4618      	mov	r0, r3
 800fefa:	3724      	adds	r7, #36	; 0x24
 800fefc:	46bd      	mov	sp, r7
 800fefe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff02:	4770      	bx	lr

0800ff04 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800ff04:	b480      	push	{r7}
 800ff06:	b08b      	sub	sp, #44	; 0x2c
 800ff08:	af00      	add	r7, sp, #0
 800ff0a:	60f8      	str	r0, [r7, #12]
 800ff0c:	60b9      	str	r1, [r7, #8]
 800ff0e:	4613      	mov	r3, r2
 800ff10:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ff12:	68fb      	ldr	r3, [r7, #12]
 800ff14:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800ff16:	68bb      	ldr	r3, [r7, #8]
 800ff18:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800ff1a:	88fb      	ldrh	r3, [r7, #6]
 800ff1c:	089b      	lsrs	r3, r3, #2
 800ff1e:	b29b      	uxth	r3, r3
 800ff20:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800ff22:	88fb      	ldrh	r3, [r7, #6]
 800ff24:	f003 0303 	and.w	r3, r3, #3
 800ff28:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800ff2a:	2300      	movs	r3, #0
 800ff2c:	623b      	str	r3, [r7, #32]
 800ff2e:	e014      	b.n	800ff5a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800ff30:	69bb      	ldr	r3, [r7, #24]
 800ff32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ff36:	681a      	ldr	r2, [r3, #0]
 800ff38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff3a:	601a      	str	r2, [r3, #0]
    pDest++;
 800ff3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff3e:	3301      	adds	r3, #1
 800ff40:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ff42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff44:	3301      	adds	r3, #1
 800ff46:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ff48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff4a:	3301      	adds	r3, #1
 800ff4c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800ff4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff50:	3301      	adds	r3, #1
 800ff52:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800ff54:	6a3b      	ldr	r3, [r7, #32]
 800ff56:	3301      	adds	r3, #1
 800ff58:	623b      	str	r3, [r7, #32]
 800ff5a:	6a3a      	ldr	r2, [r7, #32]
 800ff5c:	697b      	ldr	r3, [r7, #20]
 800ff5e:	429a      	cmp	r2, r3
 800ff60:	d3e6      	bcc.n	800ff30 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800ff62:	8bfb      	ldrh	r3, [r7, #30]
 800ff64:	2b00      	cmp	r3, #0
 800ff66:	d01e      	beq.n	800ffa6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800ff68:	2300      	movs	r3, #0
 800ff6a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800ff6c:	69bb      	ldr	r3, [r7, #24]
 800ff6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ff72:	461a      	mov	r2, r3
 800ff74:	f107 0310 	add.w	r3, r7, #16
 800ff78:	6812      	ldr	r2, [r2, #0]
 800ff7a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800ff7c:	693a      	ldr	r2, [r7, #16]
 800ff7e:	6a3b      	ldr	r3, [r7, #32]
 800ff80:	b2db      	uxtb	r3, r3
 800ff82:	00db      	lsls	r3, r3, #3
 800ff84:	fa22 f303 	lsr.w	r3, r2, r3
 800ff88:	b2da      	uxtb	r2, r3
 800ff8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff8c:	701a      	strb	r2, [r3, #0]
      i++;
 800ff8e:	6a3b      	ldr	r3, [r7, #32]
 800ff90:	3301      	adds	r3, #1
 800ff92:	623b      	str	r3, [r7, #32]
      pDest++;
 800ff94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff96:	3301      	adds	r3, #1
 800ff98:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800ff9a:	8bfb      	ldrh	r3, [r7, #30]
 800ff9c:	3b01      	subs	r3, #1
 800ff9e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800ffa0:	8bfb      	ldrh	r3, [r7, #30]
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d1ea      	bne.n	800ff7c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800ffa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ffa8:	4618      	mov	r0, r3
 800ffaa:	372c      	adds	r7, #44	; 0x2c
 800ffac:	46bd      	mov	sp, r7
 800ffae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffb2:	4770      	bx	lr

0800ffb4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800ffb4:	b480      	push	{r7}
 800ffb6:	b085      	sub	sp, #20
 800ffb8:	af00      	add	r7, sp, #0
 800ffba:	6078      	str	r0, [r7, #4]
 800ffbc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800ffc2:	683b      	ldr	r3, [r7, #0]
 800ffc4:	781b      	ldrb	r3, [r3, #0]
 800ffc6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800ffc8:	683b      	ldr	r3, [r7, #0]
 800ffca:	785b      	ldrb	r3, [r3, #1]
 800ffcc:	2b01      	cmp	r3, #1
 800ffce:	d12c      	bne.n	801002a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800ffd0:	68bb      	ldr	r3, [r7, #8]
 800ffd2:	015a      	lsls	r2, r3, #5
 800ffd4:	68fb      	ldr	r3, [r7, #12]
 800ffd6:	4413      	add	r3, r2
 800ffd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800ffdc:	681b      	ldr	r3, [r3, #0]
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	db12      	blt.n	8010008 <USB_EPSetStall+0x54>
 800ffe2:	68bb      	ldr	r3, [r7, #8]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d00f      	beq.n	8010008 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800ffe8:	68bb      	ldr	r3, [r7, #8]
 800ffea:	015a      	lsls	r2, r3, #5
 800ffec:	68fb      	ldr	r3, [r7, #12]
 800ffee:	4413      	add	r3, r2
 800fff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fff4:	681b      	ldr	r3, [r3, #0]
 800fff6:	68ba      	ldr	r2, [r7, #8]
 800fff8:	0151      	lsls	r1, r2, #5
 800fffa:	68fa      	ldr	r2, [r7, #12]
 800fffc:	440a      	add	r2, r1
 800fffe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010002:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010006:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8010008:	68bb      	ldr	r3, [r7, #8]
 801000a:	015a      	lsls	r2, r3, #5
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	4413      	add	r3, r2
 8010010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	68ba      	ldr	r2, [r7, #8]
 8010018:	0151      	lsls	r1, r2, #5
 801001a:	68fa      	ldr	r2, [r7, #12]
 801001c:	440a      	add	r2, r1
 801001e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8010022:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010026:	6013      	str	r3, [r2, #0]
 8010028:	e02b      	b.n	8010082 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 801002a:	68bb      	ldr	r3, [r7, #8]
 801002c:	015a      	lsls	r2, r3, #5
 801002e:	68fb      	ldr	r3, [r7, #12]
 8010030:	4413      	add	r3, r2
 8010032:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010036:	681b      	ldr	r3, [r3, #0]
 8010038:	2b00      	cmp	r3, #0
 801003a:	db12      	blt.n	8010062 <USB_EPSetStall+0xae>
 801003c:	68bb      	ldr	r3, [r7, #8]
 801003e:	2b00      	cmp	r3, #0
 8010040:	d00f      	beq.n	8010062 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8010042:	68bb      	ldr	r3, [r7, #8]
 8010044:	015a      	lsls	r2, r3, #5
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	4413      	add	r3, r2
 801004a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801004e:	681b      	ldr	r3, [r3, #0]
 8010050:	68ba      	ldr	r2, [r7, #8]
 8010052:	0151      	lsls	r1, r2, #5
 8010054:	68fa      	ldr	r2, [r7, #12]
 8010056:	440a      	add	r2, r1
 8010058:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801005c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8010060:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8010062:	68bb      	ldr	r3, [r7, #8]
 8010064:	015a      	lsls	r2, r3, #5
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	4413      	add	r3, r2
 801006a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801006e:	681b      	ldr	r3, [r3, #0]
 8010070:	68ba      	ldr	r2, [r7, #8]
 8010072:	0151      	lsls	r1, r2, #5
 8010074:	68fa      	ldr	r2, [r7, #12]
 8010076:	440a      	add	r2, r1
 8010078:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801007c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010080:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010082:	2300      	movs	r3, #0
}
 8010084:	4618      	mov	r0, r3
 8010086:	3714      	adds	r7, #20
 8010088:	46bd      	mov	sp, r7
 801008a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801008e:	4770      	bx	lr

08010090 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8010090:	b480      	push	{r7}
 8010092:	b085      	sub	sp, #20
 8010094:	af00      	add	r7, sp, #0
 8010096:	6078      	str	r0, [r7, #4]
 8010098:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801009a:	687b      	ldr	r3, [r7, #4]
 801009c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 801009e:	683b      	ldr	r3, [r7, #0]
 80100a0:	781b      	ldrb	r3, [r3, #0]
 80100a2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80100a4:	683b      	ldr	r3, [r7, #0]
 80100a6:	785b      	ldrb	r3, [r3, #1]
 80100a8:	2b01      	cmp	r3, #1
 80100aa:	d128      	bne.n	80100fe <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80100ac:	68bb      	ldr	r3, [r7, #8]
 80100ae:	015a      	lsls	r2, r3, #5
 80100b0:	68fb      	ldr	r3, [r7, #12]
 80100b2:	4413      	add	r3, r2
 80100b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100b8:	681b      	ldr	r3, [r3, #0]
 80100ba:	68ba      	ldr	r2, [r7, #8]
 80100bc:	0151      	lsls	r1, r2, #5
 80100be:	68fa      	ldr	r2, [r7, #12]
 80100c0:	440a      	add	r2, r1
 80100c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80100c6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80100ca:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80100cc:	683b      	ldr	r3, [r7, #0]
 80100ce:	791b      	ldrb	r3, [r3, #4]
 80100d0:	2b03      	cmp	r3, #3
 80100d2:	d003      	beq.n	80100dc <USB_EPClearStall+0x4c>
 80100d4:	683b      	ldr	r3, [r7, #0]
 80100d6:	791b      	ldrb	r3, [r3, #4]
 80100d8:	2b02      	cmp	r3, #2
 80100da:	d138      	bne.n	801014e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80100dc:	68bb      	ldr	r3, [r7, #8]
 80100de:	015a      	lsls	r2, r3, #5
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	4413      	add	r3, r2
 80100e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	68ba      	ldr	r2, [r7, #8]
 80100ec:	0151      	lsls	r1, r2, #5
 80100ee:	68fa      	ldr	r2, [r7, #12]
 80100f0:	440a      	add	r2, r1
 80100f2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80100f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80100fa:	6013      	str	r3, [r2, #0]
 80100fc:	e027      	b.n	801014e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80100fe:	68bb      	ldr	r3, [r7, #8]
 8010100:	015a      	lsls	r2, r3, #5
 8010102:	68fb      	ldr	r3, [r7, #12]
 8010104:	4413      	add	r3, r2
 8010106:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801010a:	681b      	ldr	r3, [r3, #0]
 801010c:	68ba      	ldr	r2, [r7, #8]
 801010e:	0151      	lsls	r1, r2, #5
 8010110:	68fa      	ldr	r2, [r7, #12]
 8010112:	440a      	add	r2, r1
 8010114:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010118:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 801011c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 801011e:	683b      	ldr	r3, [r7, #0]
 8010120:	791b      	ldrb	r3, [r3, #4]
 8010122:	2b03      	cmp	r3, #3
 8010124:	d003      	beq.n	801012e <USB_EPClearStall+0x9e>
 8010126:	683b      	ldr	r3, [r7, #0]
 8010128:	791b      	ldrb	r3, [r3, #4]
 801012a:	2b02      	cmp	r3, #2
 801012c:	d10f      	bne.n	801014e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 801012e:	68bb      	ldr	r3, [r7, #8]
 8010130:	015a      	lsls	r2, r3, #5
 8010132:	68fb      	ldr	r3, [r7, #12]
 8010134:	4413      	add	r3, r2
 8010136:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801013a:	681b      	ldr	r3, [r3, #0]
 801013c:	68ba      	ldr	r2, [r7, #8]
 801013e:	0151      	lsls	r1, r2, #5
 8010140:	68fa      	ldr	r2, [r7, #12]
 8010142:	440a      	add	r2, r1
 8010144:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010148:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801014c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 801014e:	2300      	movs	r3, #0
}
 8010150:	4618      	mov	r0, r3
 8010152:	3714      	adds	r7, #20
 8010154:	46bd      	mov	sp, r7
 8010156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801015a:	4770      	bx	lr

0801015c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 801015c:	b480      	push	{r7}
 801015e:	b085      	sub	sp, #20
 8010160:	af00      	add	r7, sp, #0
 8010162:	6078      	str	r0, [r7, #4]
 8010164:	460b      	mov	r3, r1
 8010166:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 801016c:	68fb      	ldr	r3, [r7, #12]
 801016e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	68fa      	ldr	r2, [r7, #12]
 8010176:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 801017a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 801017e:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010186:	681a      	ldr	r2, [r3, #0]
 8010188:	78fb      	ldrb	r3, [r7, #3]
 801018a:	011b      	lsls	r3, r3, #4
 801018c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8010190:	68f9      	ldr	r1, [r7, #12]
 8010192:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010196:	4313      	orrs	r3, r2
 8010198:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 801019a:	2300      	movs	r3, #0
}
 801019c:	4618      	mov	r0, r3
 801019e:	3714      	adds	r7, #20
 80101a0:	46bd      	mov	sp, r7
 80101a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101a6:	4770      	bx	lr

080101a8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80101a8:	b480      	push	{r7}
 80101aa:	b085      	sub	sp, #20
 80101ac:	af00      	add	r7, sp, #0
 80101ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80101ba:	681b      	ldr	r3, [r3, #0]
 80101bc:	68fa      	ldr	r2, [r7, #12]
 80101be:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80101c2:	f023 0303 	bic.w	r3, r3, #3
 80101c6:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80101ce:	685b      	ldr	r3, [r3, #4]
 80101d0:	68fa      	ldr	r2, [r7, #12]
 80101d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80101d6:	f023 0302 	bic.w	r3, r3, #2
 80101da:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80101dc:	2300      	movs	r3, #0
}
 80101de:	4618      	mov	r0, r3
 80101e0:	3714      	adds	r7, #20
 80101e2:	46bd      	mov	sp, r7
 80101e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80101e8:	4770      	bx	lr

080101ea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80101ea:	b480      	push	{r7}
 80101ec:	b085      	sub	sp, #20
 80101ee:	af00      	add	r7, sp, #0
 80101f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80101f2:	687b      	ldr	r3, [r7, #4]
 80101f4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	68fa      	ldr	r2, [r7, #12]
 8010200:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8010204:	f023 0303 	bic.w	r3, r3, #3
 8010208:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 801020a:	68fb      	ldr	r3, [r7, #12]
 801020c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010210:	685b      	ldr	r3, [r3, #4]
 8010212:	68fa      	ldr	r2, [r7, #12]
 8010214:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8010218:	f043 0302 	orr.w	r3, r3, #2
 801021c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 801021e:	2300      	movs	r3, #0
}
 8010220:	4618      	mov	r0, r3
 8010222:	3714      	adds	r7, #20
 8010224:	46bd      	mov	sp, r7
 8010226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801022a:	4770      	bx	lr

0801022c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 801022c:	b480      	push	{r7}
 801022e:	b085      	sub	sp, #20
 8010230:	af00      	add	r7, sp, #0
 8010232:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8010234:	687b      	ldr	r3, [r7, #4]
 8010236:	695b      	ldr	r3, [r3, #20]
 8010238:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	699b      	ldr	r3, [r3, #24]
 801023e:	68fa      	ldr	r2, [r7, #12]
 8010240:	4013      	ands	r3, r2
 8010242:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8010244:	68fb      	ldr	r3, [r7, #12]
}
 8010246:	4618      	mov	r0, r3
 8010248:	3714      	adds	r7, #20
 801024a:	46bd      	mov	sp, r7
 801024c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010250:	4770      	bx	lr

08010252 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010252:	b480      	push	{r7}
 8010254:	b085      	sub	sp, #20
 8010256:	af00      	add	r7, sp, #0
 8010258:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801025a:	687b      	ldr	r3, [r7, #4]
 801025c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 801025e:	68fb      	ldr	r3, [r7, #12]
 8010260:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010264:	699b      	ldr	r3, [r3, #24]
 8010266:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8010268:	68fb      	ldr	r3, [r7, #12]
 801026a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801026e:	69db      	ldr	r3, [r3, #28]
 8010270:	68ba      	ldr	r2, [r7, #8]
 8010272:	4013      	ands	r3, r2
 8010274:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8010276:	68bb      	ldr	r3, [r7, #8]
 8010278:	0c1b      	lsrs	r3, r3, #16
}
 801027a:	4618      	mov	r0, r3
 801027c:	3714      	adds	r7, #20
 801027e:	46bd      	mov	sp, r7
 8010280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010284:	4770      	bx	lr

08010286 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8010286:	b480      	push	{r7}
 8010288:	b085      	sub	sp, #20
 801028a:	af00      	add	r7, sp, #0
 801028c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8010292:	68fb      	ldr	r3, [r7, #12]
 8010294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010298:	699b      	ldr	r3, [r3, #24]
 801029a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 801029c:	68fb      	ldr	r3, [r7, #12]
 801029e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102a2:	69db      	ldr	r3, [r3, #28]
 80102a4:	68ba      	ldr	r2, [r7, #8]
 80102a6:	4013      	ands	r3, r2
 80102a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80102aa:	68bb      	ldr	r3, [r7, #8]
 80102ac:	b29b      	uxth	r3, r3
}
 80102ae:	4618      	mov	r0, r3
 80102b0:	3714      	adds	r7, #20
 80102b2:	46bd      	mov	sp, r7
 80102b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102b8:	4770      	bx	lr

080102ba <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80102ba:	b480      	push	{r7}
 80102bc:	b085      	sub	sp, #20
 80102be:	af00      	add	r7, sp, #0
 80102c0:	6078      	str	r0, [r7, #4]
 80102c2:	460b      	mov	r3, r1
 80102c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80102c6:	687b      	ldr	r3, [r7, #4]
 80102c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80102ca:	78fb      	ldrb	r3, [r7, #3]
 80102cc:	015a      	lsls	r2, r3, #5
 80102ce:	68fb      	ldr	r3, [r7, #12]
 80102d0:	4413      	add	r3, r2
 80102d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102d6:	689b      	ldr	r3, [r3, #8]
 80102d8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80102e0:	695b      	ldr	r3, [r3, #20]
 80102e2:	68ba      	ldr	r2, [r7, #8]
 80102e4:	4013      	ands	r3, r2
 80102e6:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80102e8:	68bb      	ldr	r3, [r7, #8]
}
 80102ea:	4618      	mov	r0, r3
 80102ec:	3714      	adds	r7, #20
 80102ee:	46bd      	mov	sp, r7
 80102f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102f4:	4770      	bx	lr

080102f6 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80102f6:	b480      	push	{r7}
 80102f8:	b087      	sub	sp, #28
 80102fa:	af00      	add	r7, sp, #0
 80102fc:	6078      	str	r0, [r7, #4]
 80102fe:	460b      	mov	r3, r1
 8010300:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010302:	687b      	ldr	r3, [r7, #4]
 8010304:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8010306:	697b      	ldr	r3, [r7, #20]
 8010308:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801030c:	691b      	ldr	r3, [r3, #16]
 801030e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8010310:	697b      	ldr	r3, [r7, #20]
 8010312:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010316:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010318:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 801031a:	78fb      	ldrb	r3, [r7, #3]
 801031c:	f003 030f 	and.w	r3, r3, #15
 8010320:	68fa      	ldr	r2, [r7, #12]
 8010322:	fa22 f303 	lsr.w	r3, r2, r3
 8010326:	01db      	lsls	r3, r3, #7
 8010328:	b2db      	uxtb	r3, r3
 801032a:	693a      	ldr	r2, [r7, #16]
 801032c:	4313      	orrs	r3, r2
 801032e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8010330:	78fb      	ldrb	r3, [r7, #3]
 8010332:	015a      	lsls	r2, r3, #5
 8010334:	697b      	ldr	r3, [r7, #20]
 8010336:	4413      	add	r3, r2
 8010338:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801033c:	689b      	ldr	r3, [r3, #8]
 801033e:	693a      	ldr	r2, [r7, #16]
 8010340:	4013      	ands	r3, r2
 8010342:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8010344:	68bb      	ldr	r3, [r7, #8]
}
 8010346:	4618      	mov	r0, r3
 8010348:	371c      	adds	r7, #28
 801034a:	46bd      	mov	sp, r7
 801034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010350:	4770      	bx	lr

08010352 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8010352:	b480      	push	{r7}
 8010354:	b083      	sub	sp, #12
 8010356:	af00      	add	r7, sp, #0
 8010358:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 801035a:	687b      	ldr	r3, [r7, #4]
 801035c:	695b      	ldr	r3, [r3, #20]
 801035e:	f003 0301 	and.w	r3, r3, #1
}
 8010362:	4618      	mov	r0, r3
 8010364:	370c      	adds	r7, #12
 8010366:	46bd      	mov	sp, r7
 8010368:	f85d 7b04 	ldr.w	r7, [sp], #4
 801036c:	4770      	bx	lr
	...

08010370 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8010370:	b480      	push	{r7}
 8010372:	b085      	sub	sp, #20
 8010374:	af00      	add	r7, sp, #0
 8010376:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010378:	687b      	ldr	r3, [r7, #4]
 801037a:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8010382:	681a      	ldr	r2, [r3, #0]
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801038a:	4619      	mov	r1, r3
 801038c:	4b09      	ldr	r3, [pc, #36]	; (80103b4 <USB_ActivateSetup+0x44>)
 801038e:	4013      	ands	r3, r2
 8010390:	600b      	str	r3, [r1, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8010398:	685b      	ldr	r3, [r3, #4]
 801039a:	68fa      	ldr	r2, [r7, #12]
 801039c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80103a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80103a4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80103a6:	2300      	movs	r3, #0
}
 80103a8:	4618      	mov	r0, r3
 80103aa:	3714      	adds	r7, #20
 80103ac:	46bd      	mov	sp, r7
 80103ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80103b2:	4770      	bx	lr
 80103b4:	fffff800 	.word	0xfffff800

080103b8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80103b8:	b480      	push	{r7}
 80103ba:	b087      	sub	sp, #28
 80103bc:	af00      	add	r7, sp, #0
 80103be:	60f8      	str	r0, [r7, #12]
 80103c0:	460b      	mov	r3, r1
 80103c2:	607a      	str	r2, [r7, #4]
 80103c4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80103ca:	68fb      	ldr	r3, [r7, #12]
 80103cc:	333c      	adds	r3, #60	; 0x3c
 80103ce:	3304      	adds	r3, #4
 80103d0:	681b      	ldr	r3, [r3, #0]
 80103d2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80103d4:	693b      	ldr	r3, [r7, #16]
 80103d6:	4a26      	ldr	r2, [pc, #152]	; (8010470 <USB_EP0_OutStart+0xb8>)
 80103d8:	4293      	cmp	r3, r2
 80103da:	d90a      	bls.n	80103f2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80103dc:	697b      	ldr	r3, [r7, #20]
 80103de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103e2:	681b      	ldr	r3, [r3, #0]
 80103e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80103e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80103ec:	d101      	bne.n	80103f2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80103ee:	2300      	movs	r3, #0
 80103f0:	e037      	b.n	8010462 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80103f2:	697b      	ldr	r3, [r7, #20]
 80103f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103f8:	461a      	mov	r2, r3
 80103fa:	2300      	movs	r3, #0
 80103fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80103fe:	697b      	ldr	r3, [r7, #20]
 8010400:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010404:	691b      	ldr	r3, [r3, #16]
 8010406:	697a      	ldr	r2, [r7, #20]
 8010408:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801040c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8010410:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8010412:	697b      	ldr	r3, [r7, #20]
 8010414:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010418:	691b      	ldr	r3, [r3, #16]
 801041a:	697a      	ldr	r2, [r7, #20]
 801041c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010420:	f043 0318 	orr.w	r3, r3, #24
 8010424:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8010426:	697b      	ldr	r3, [r7, #20]
 8010428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801042c:	691b      	ldr	r3, [r3, #16]
 801042e:	697a      	ldr	r2, [r7, #20]
 8010430:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8010434:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8010438:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 801043a:	7afb      	ldrb	r3, [r7, #11]
 801043c:	2b01      	cmp	r3, #1
 801043e:	d10f      	bne.n	8010460 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8010440:	697b      	ldr	r3, [r7, #20]
 8010442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010446:	461a      	mov	r2, r3
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 801044c:	697b      	ldr	r3, [r7, #20]
 801044e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	697a      	ldr	r2, [r7, #20]
 8010456:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801045a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 801045e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8010460:	2300      	movs	r3, #0
}
 8010462:	4618      	mov	r0, r3
 8010464:	371c      	adds	r7, #28
 8010466:	46bd      	mov	sp, r7
 8010468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801046c:	4770      	bx	lr
 801046e:	bf00      	nop
 8010470:	4f54300a 	.word	0x4f54300a

08010474 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8010474:	b480      	push	{r7}
 8010476:	b085      	sub	sp, #20
 8010478:	af00      	add	r7, sp, #0
 801047a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 801047c:	2300      	movs	r3, #0
 801047e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8010480:	68fb      	ldr	r3, [r7, #12]
 8010482:	3301      	adds	r3, #1
 8010484:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8010486:	68fb      	ldr	r3, [r7, #12]
 8010488:	4a13      	ldr	r2, [pc, #76]	; (80104d8 <USB_CoreReset+0x64>)
 801048a:	4293      	cmp	r3, r2
 801048c:	d901      	bls.n	8010492 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 801048e:	2303      	movs	r3, #3
 8010490:	e01b      	b.n	80104ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8010492:	687b      	ldr	r3, [r7, #4]
 8010494:	691b      	ldr	r3, [r3, #16]
 8010496:	2b00      	cmp	r3, #0
 8010498:	daf2      	bge.n	8010480 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 801049a:	2300      	movs	r3, #0
 801049c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 801049e:	687b      	ldr	r3, [r7, #4]
 80104a0:	691b      	ldr	r3, [r3, #16]
 80104a2:	f043 0201 	orr.w	r2, r3, #1
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80104aa:	68fb      	ldr	r3, [r7, #12]
 80104ac:	3301      	adds	r3, #1
 80104ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80104b0:	68fb      	ldr	r3, [r7, #12]
 80104b2:	4a09      	ldr	r2, [pc, #36]	; (80104d8 <USB_CoreReset+0x64>)
 80104b4:	4293      	cmp	r3, r2
 80104b6:	d901      	bls.n	80104bc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80104b8:	2303      	movs	r3, #3
 80104ba:	e006      	b.n	80104ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	691b      	ldr	r3, [r3, #16]
 80104c0:	f003 0301 	and.w	r3, r3, #1
 80104c4:	2b01      	cmp	r3, #1
 80104c6:	d0f0      	beq.n	80104aa <USB_CoreReset+0x36>

  return HAL_OK;
 80104c8:	2300      	movs	r3, #0
}
 80104ca:	4618      	mov	r0, r3
 80104cc:	3714      	adds	r7, #20
 80104ce:	46bd      	mov	sp, r7
 80104d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104d4:	4770      	bx	lr
 80104d6:	bf00      	nop
 80104d8:	00030d40 	.word	0x00030d40

080104dc <canopen_app_user_init>:

void canopen_app_user_init(CANopenNodeSTM32* canopenNode,
							FDCAN_HandleTypeDef* __CANHandle,
							void (*HWInitFunction)(void),
							TIM_HandleTypeDef* __timerHandle)
{
 80104dc:	b580      	push	{r7, lr}
 80104de:	b084      	sub	sp, #16
 80104e0:	af00      	add	r7, sp, #0
 80104e2:	60f8      	str	r0, [r7, #12]
 80104e4:	60b9      	str	r1, [r7, #8]
 80104e6:	607a      	str	r2, [r7, #4]
 80104e8:	603b      	str	r3, [r7, #0]
	canopenNode->CANHandle = __CANHandle;
 80104ea:	68fb      	ldr	r3, [r7, #12]
 80104ec:	68ba      	ldr	r2, [r7, #8]
 80104ee:	609a      	str	r2, [r3, #8]
	canopenNode->HWInitFunction = HWInitFunction;
 80104f0:	68fb      	ldr	r3, [r7, #12]
 80104f2:	687a      	ldr	r2, [r7, #4]
 80104f4:	60da      	str	r2, [r3, #12]
	canopenNode->timerHandle = __timerHandle;
 80104f6:	68fb      	ldr	r3, [r7, #12]
 80104f8:	683a      	ldr	r2, [r7, #0]
 80104fa:	605a      	str	r2, [r3, #4]
	canopenNode->desiredNodeID = 0x02;
 80104fc:	68fb      	ldr	r3, [r7, #12]
 80104fe:	2202      	movs	r2, #2
 8010500:	701a      	strb	r2, [r3, #0]
	canopenNode->baudrate = 1000;
 8010502:	68fb      	ldr	r3, [r7, #12]
 8010504:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8010508:	805a      	strh	r2, [r3, #2]

	 canopen_app_init(canopenNode);
 801050a:	68f8      	ldr	r0, [r7, #12]
 801050c:	f7f7 fa26 	bl	800795c <canopen_app_init>
}
 8010510:	bf00      	nop
 8010512:	3710      	adds	r7, #16
 8010514:	46bd      	mov	sp, r7
 8010516:	bd80      	pop	{r7, pc}

08010518 <canopen_app_user_config>:

void canopen_app_user_config(CANopenNodeSTM32* canopenNode)
{
 8010518:	b580      	push	{r7, lr}
 801051a:	b082      	sub	sp, #8
 801051c:	af00      	add	r7, sp, #0
 801051e:	6078      	str	r0, [r7, #4]
	CO_mapping_user(canopenNode);
 8010520:	6878      	ldr	r0, [r7, #4]
 8010522:	f000 fc3f 	bl	8010da4 <CO_mapping_user>
	SDO_SetParam(canopenNode, 1, PROFILE_POSITION_MODE);
 8010526:	2201      	movs	r2, #1
 8010528:	2101      	movs	r1, #1
 801052a:	6878      	ldr	r0, [r7, #4]
 801052c:	f000 fdb0 	bl	8011090 <SDO_SetParam>
	SDO_SetParam(canopenNode, 2, PROFILE_POSITION_MODE);
 8010530:	2201      	movs	r2, #1
 8010532:	2102      	movs	r1, #2
 8010534:	6878      	ldr	r0, [r7, #4]
 8010536:	f000 fdab 	bl	8011090 <SDO_SetParam>
	PDS_execute(canopenNode, 1);
 801053a:	2101      	movs	r1, #1
 801053c:	6878      	ldr	r0, [r7, #4]
 801053e:	f000 fa8d 	bl	8010a5c <PDS_execute>
	PDS_execute(canopenNode, 2);
 8010542:	2102      	movs	r1, #2
 8010544:	6878      	ldr	r0, [r7, #4]
 8010546:	f000 fa89 	bl	8010a5c <PDS_execute>
}
 801054a:	bf00      	nop
 801054c:	3708      	adds	r7, #8
 801054e:	46bd      	mov	sp, r7
 8010550:	bd80      	pop	{r7, pc}

08010552 <Send_PDOPosition>:
			  Error_Handler();
		}
}

CO_ReturnError_t Send_PDOPosition(CANopenNodeSTM32 *canopenNode, uint32_t __node_id, uint32_t TargetPosition)
{
 8010552:	b580      	push	{r7, lr}
 8010554:	b084      	sub	sp, #16
 8010556:	af00      	add	r7, sp, #0
 8010558:	60f8      	str	r0, [r7, #12]
 801055a:	60b9      	str	r1, [r7, #8]
 801055c:	607a      	str	r2, [r7, #4]
	canopenNode->canOpenStack->CANmodule->txArray->DLC = 4;
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	695b      	ldr	r3, [r3, #20]
 8010562:	685b      	ldr	r3, [r3, #4]
 8010564:	68db      	ldr	r3, [r3, #12]
 8010566:	2204      	movs	r2, #4
 8010568:	711a      	strb	r2, [r3, #4]
	canopenNode->canOpenStack->CANmodule->txArray->ident =  __node_id;
 801056a:	68fb      	ldr	r3, [r7, #12]
 801056c:	695b      	ldr	r3, [r3, #20]
 801056e:	685b      	ldr	r3, [r3, #4]
 8010570:	68db      	ldr	r3, [r3, #12]
 8010572:	68ba      	ldr	r2, [r7, #8]
 8010574:	601a      	str	r2, [r3, #0]

	canopenNode->canOpenStack->CANmodule->txArray->data[0] = TargetPosition 		& 0xFFU;
 8010576:	68fb      	ldr	r3, [r7, #12]
 8010578:	695b      	ldr	r3, [r3, #20]
 801057a:	685b      	ldr	r3, [r3, #4]
 801057c:	68db      	ldr	r3, [r3, #12]
 801057e:	687a      	ldr	r2, [r7, #4]
 8010580:	b2d2      	uxtb	r2, r2
 8010582:	715a      	strb	r2, [r3, #5]
	canopenNode->canOpenStack->CANmodule->txArray->data[1] = (TargetPosition>>8)	& 0xFFU;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	0a1a      	lsrs	r2, r3, #8
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	695b      	ldr	r3, [r3, #20]
 801058c:	685b      	ldr	r3, [r3, #4]
 801058e:	68db      	ldr	r3, [r3, #12]
 8010590:	b2d2      	uxtb	r2, r2
 8010592:	719a      	strb	r2, [r3, #6]
	canopenNode->canOpenStack->CANmodule->txArray->data[2] = (TargetPosition>>16)	& 0xFFU;
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	0c1a      	lsrs	r2, r3, #16
 8010598:	68fb      	ldr	r3, [r7, #12]
 801059a:	695b      	ldr	r3, [r3, #20]
 801059c:	685b      	ldr	r3, [r3, #4]
 801059e:	68db      	ldr	r3, [r3, #12]
 80105a0:	b2d2      	uxtb	r2, r2
 80105a2:	71da      	strb	r2, [r3, #7]
	canopenNode->canOpenStack->CANmodule->txArray->data[3] = (TargetPosition>>24)	& 0xFFU;
 80105a4:	687b      	ldr	r3, [r7, #4]
 80105a6:	0e1a      	lsrs	r2, r3, #24
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	695b      	ldr	r3, [r3, #20]
 80105ac:	685b      	ldr	r3, [r3, #4]
 80105ae:	68db      	ldr	r3, [r3, #12]
 80105b0:	b2d2      	uxtb	r2, r2
 80105b2:	721a      	strb	r2, [r3, #8]

	return CO_CANsend(canopenNode->canOpenStack->CANmodule, canopenNode->canOpenStack->CANmodule->txArray);
 80105b4:	68fb      	ldr	r3, [r7, #12]
 80105b6:	695b      	ldr	r3, [r3, #20]
 80105b8:	685a      	ldr	r2, [r3, #4]
 80105ba:	68fb      	ldr	r3, [r7, #12]
 80105bc:	695b      	ldr	r3, [r3, #20]
 80105be:	685b      	ldr	r3, [r3, #4]
 80105c0:	68db      	ldr	r3, [r3, #12]
 80105c2:	4619      	mov	r1, r3
 80105c4:	4610      	mov	r0, r2
 80105c6:	f7f7 fdd3 	bl	8008170 <CO_CANsend>
 80105ca:	4603      	mov	r3, r0
}
 80105cc:	4618      	mov	r0, r3
 80105ce:	3710      	adds	r7, #16
 80105d0:	46bd      	mov	sp, r7
 80105d2:	bd80      	pop	{r7, pc}

080105d4 <Send_PDOControlWord>:

CO_ReturnError_t Send_PDOControlWord(CANopenNodeSTM32 *canopenNode, uint32_t __node_id, uint16_t ControlWord)
{
 80105d4:	b580      	push	{r7, lr}
 80105d6:	b084      	sub	sp, #16
 80105d8:	af00      	add	r7, sp, #0
 80105da:	60f8      	str	r0, [r7, #12]
 80105dc:	60b9      	str	r1, [r7, #8]
 80105de:	4613      	mov	r3, r2
 80105e0:	80fb      	strh	r3, [r7, #6]
	canopenNode->canOpenStack->CANmodule->txArray->DLC = 2;
 80105e2:	68fb      	ldr	r3, [r7, #12]
 80105e4:	695b      	ldr	r3, [r3, #20]
 80105e6:	685b      	ldr	r3, [r3, #4]
 80105e8:	68db      	ldr	r3, [r3, #12]
 80105ea:	2202      	movs	r2, #2
 80105ec:	711a      	strb	r2, [r3, #4]
	canopenNode->canOpenStack->CANmodule->txArray->ident =  __node_id;
 80105ee:	68fb      	ldr	r3, [r7, #12]
 80105f0:	695b      	ldr	r3, [r3, #20]
 80105f2:	685b      	ldr	r3, [r3, #4]
 80105f4:	68db      	ldr	r3, [r3, #12]
 80105f6:	68ba      	ldr	r2, [r7, #8]
 80105f8:	601a      	str	r2, [r3, #0]

	canopenNode->canOpenStack->CANmodule->txArray->data[0] = ControlWord 		& 0xFFU;
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	695b      	ldr	r3, [r3, #20]
 80105fe:	685b      	ldr	r3, [r3, #4]
 8010600:	68db      	ldr	r3, [r3, #12]
 8010602:	88fa      	ldrh	r2, [r7, #6]
 8010604:	b2d2      	uxtb	r2, r2
 8010606:	715a      	strb	r2, [r3, #5]
	canopenNode->canOpenStack->CANmodule->txArray->data[1] = (ControlWord>>8)	& 0xFFU;
 8010608:	88fb      	ldrh	r3, [r7, #6]
 801060a:	0a1b      	lsrs	r3, r3, #8
 801060c:	b29a      	uxth	r2, r3
 801060e:	68fb      	ldr	r3, [r7, #12]
 8010610:	695b      	ldr	r3, [r3, #20]
 8010612:	685b      	ldr	r3, [r3, #4]
 8010614:	68db      	ldr	r3, [r3, #12]
 8010616:	b2d2      	uxtb	r2, r2
 8010618:	719a      	strb	r2, [r3, #6]

	return CO_CANsend(canopenNode->canOpenStack->CANmodule, canopenNode->canOpenStack->CANmodule->txArray);
 801061a:	68fb      	ldr	r3, [r7, #12]
 801061c:	695b      	ldr	r3, [r3, #20]
 801061e:	685a      	ldr	r2, [r3, #4]
 8010620:	68fb      	ldr	r3, [r7, #12]
 8010622:	695b      	ldr	r3, [r3, #20]
 8010624:	685b      	ldr	r3, [r3, #4]
 8010626:	68db      	ldr	r3, [r3, #12]
 8010628:	4619      	mov	r1, r3
 801062a:	4610      	mov	r0, r2
 801062c:	f7f7 fda0 	bl	8008170 <CO_CANsend>
 8010630:	4603      	mov	r3, r0
}
 8010632:	4618      	mov	r0, r3
 8010634:	3710      	adds	r7, #16
 8010636:	46bd      	mov	sp, r7
 8010638:	bd80      	pop	{r7, pc}
	...

0801063c <CO_PDO_running>:



void CO_PDO_running(CANopenNodeSTM32 *canopenNode, uint8_t node_id, uint32_t targetP)
{
 801063c:	b580      	push	{r7, lr}
 801063e:	b086      	sub	sp, #24
 8010640:	af00      	add	r7, sp, #0
 8010642:	60f8      	str	r0, [r7, #12]
 8010644:	460b      	mov	r3, r1
 8010646:	607a      	str	r2, [r7, #4]
 8010648:	72fb      	strb	r3, [r7, #11]
//	Random_position();
//	uint32_t targetP = 100000;
//	uint32_t randomNumber = (rand() % 20)*10000;
	Send_PDOPosition(canopenNode, 0x300+node_id, targetP);
 801064a:	7afb      	ldrb	r3, [r7, #11]
 801064c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8010650:	687a      	ldr	r2, [r7, #4]
 8010652:	4619      	mov	r1, r3
 8010654:	68f8      	ldr	r0, [r7, #12]
 8010656:	f7ff ff7c 	bl	8010552 <Send_PDOPosition>
	HAL_Delay(1);
 801065a:	2001      	movs	r0, #1
 801065c:	f7f8 fcdc 	bl	8009018 <HAL_Delay>
//	Start of a movement and set relative position
	Send_PDOControlWord(canopenNode, 0x200 + node_id, 0x1F);
 8010660:	7afb      	ldrb	r3, [r7, #11]
 8010662:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8010666:	221f      	movs	r2, #31
 8010668:	4619      	mov	r1, r3
 801066a:	68f8      	ldr	r0, [r7, #12]
 801066c:	f7ff ffb2 	bl	80105d4 <Send_PDOControlWord>
	HAL_Delay(50);
 8010670:	2032      	movs	r0, #50	; 0x32
 8010672:	f7f8 fcd1 	bl	8009018 <HAL_Delay>
	Send_PDOControlWord(canopenNode, 0x200 + node_id, 0x0F);
 8010676:	7afb      	ldrb	r3, [r7, #11]
 8010678:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801067c:	220f      	movs	r2, #15
 801067e:	4619      	mov	r1, r3
 8010680:	68f8      	ldr	r0, [r7, #12]
 8010682:	f7ff ffa7 	bl	80105d4 <Send_PDOControlWord>
	uint32_t actual_p = SDO_user_read(canopenNode, node_id, 0x6064, 0x00);
 8010686:	7af9      	ldrb	r1, [r7, #11]
 8010688:	2300      	movs	r3, #0
 801068a:	f246 0264 	movw	r2, #24676	; 0x6064
 801068e:	68f8      	ldr	r0, [r7, #12]
 8010690:	f000 fd25 	bl	80110de <SDO_user_read>
 8010694:	6178      	str	r0, [r7, #20]
	response_print("Servo: %d 	Target Position: %u		Actual Position: %u\n",node_id, targetP, actual_p);
 8010696:	7af9      	ldrb	r1, [r7, #11]
 8010698:	697b      	ldr	r3, [r7, #20]
 801069a:	687a      	ldr	r2, [r7, #4]
 801069c:	4805      	ldr	r0, [pc, #20]	; (80106b4 <CO_PDO_running+0x78>)
 801069e:	f000 f859 	bl	8010754 <response_print>
//	//Response from status word
//	Send_SDO(canopenNode, 1, 0x40, 0x604100, 0x00);
	HAL_Delay(300);
 80106a2:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80106a6:	f7f8 fcb7 	bl	8009018 <HAL_Delay>
//	{
//		// Reset of the start bit
//		Send_PDOControlWord(&canopenNode_1, 0x201, 0x0F);
//		HAL_Delay(10);
//	}
}
 80106aa:	bf00      	nop
 80106ac:	3718      	adds	r7, #24
 80106ae:	46bd      	mov	sp, r7
 80106b0:	bd80      	pop	{r7, pc}
 80106b2:	bf00      	nop
 80106b4:	080155fc 	.word	0x080155fc

080106b8 <running_servo>:
}



void running_servo(char **argv, uint8_t argv_num)
{
 80106b8:	b580      	push	{r7, lr}
 80106ba:	b082      	sub	sp, #8
 80106bc:	af00      	add	r7, sp, #0
 80106be:	6078      	str	r0, [r7, #4]
 80106c0:	460b      	mov	r3, r1
 80106c2:	70fb      	strb	r3, [r7, #3]

//	uint8_t node_id_1 = chartohex(argv[1]);
//	uint32_t targetP_1 = chartohex(argv[2]);
//	uint8_t node_id_2 = chartohex(argv[3]);
//	uint32_t targetP_2 = chartohex(argv[4]);
	 Params.node_id_1 = atoi(argv[1]);
 80106c4:	687b      	ldr	r3, [r7, #4]
 80106c6:	3304      	adds	r3, #4
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	4618      	mov	r0, r3
 80106cc:	f003 fac4 	bl	8013c58 <atoi>
 80106d0:	4603      	mov	r3, r0
 80106d2:	b2da      	uxtb	r2, r3
 80106d4:	4b11      	ldr	r3, [pc, #68]	; (801071c <running_servo+0x64>)
 80106d6:	701a      	strb	r2, [r3, #0]
	 Params.targetP_1 = atoi(argv[2]);
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	3308      	adds	r3, #8
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	4618      	mov	r0, r3
 80106e0:	f003 faba 	bl	8013c58 <atoi>
 80106e4:	4603      	mov	r3, r0
 80106e6:	461a      	mov	r2, r3
 80106e8:	4b0c      	ldr	r3, [pc, #48]	; (801071c <running_servo+0x64>)
 80106ea:	605a      	str	r2, [r3, #4]
	 Params.node_id_2 = atoi(argv[3]);
 80106ec:	687b      	ldr	r3, [r7, #4]
 80106ee:	330c      	adds	r3, #12
 80106f0:	681b      	ldr	r3, [r3, #0]
 80106f2:	4618      	mov	r0, r3
 80106f4:	f003 fab0 	bl	8013c58 <atoi>
 80106f8:	4603      	mov	r3, r0
 80106fa:	b2da      	uxtb	r2, r3
 80106fc:	4b07      	ldr	r3, [pc, #28]	; (801071c <running_servo+0x64>)
 80106fe:	721a      	strb	r2, [r3, #8]
	 Params.targetP_2 = atoi(argv[4]);
 8010700:	687b      	ldr	r3, [r7, #4]
 8010702:	3310      	adds	r3, #16
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	4618      	mov	r0, r3
 8010708:	f003 faa6 	bl	8013c58 <atoi>
 801070c:	4603      	mov	r3, r0
 801070e:	461a      	mov	r2, r3
 8010710:	4b02      	ldr	r3, [pc, #8]	; (801071c <running_servo+0x64>)
 8010712:	60da      	str	r2, [r3, #12]
//    store_to_buffer(targetP_1, buffer, &index, sizeof(uint32_t));
//    store_to_buffer(node_id_2, buffer, &index, sizeof(uint8_t));
//    store_to_buffer(targetP_2, buffer, &index, sizeof(uint32_t));

//    response_print("%02X %02X %02X %02X\n",Params.node_id_1, Params.node_id_2, Params.targetP_1, Params.targetP_2);
}
 8010714:	bf00      	nop
 8010716:	3708      	adds	r7, #8
 8010718:	46bd      	mov	sp, r7
 801071a:	bd80      	pop	{r7, pc}
 801071c:	24000724 	.word	0x24000724

08010720 <CO_PDO_execute>:

void CO_PDO_execute(CANopenNodeSTM32 *canopenNode)
{
 8010720:	b580      	push	{r7, lr}
 8010722:	b082      	sub	sp, #8
 8010724:	af00      	add	r7, sp, #0
 8010726:	6078      	str	r0, [r7, #4]
	CO_PDO_running(canopenNode, Params.node_id_1, Params.targetP_1);
 8010728:	4b09      	ldr	r3, [pc, #36]	; (8010750 <CO_PDO_execute+0x30>)
 801072a:	781b      	ldrb	r3, [r3, #0]
 801072c:	4a08      	ldr	r2, [pc, #32]	; (8010750 <CO_PDO_execute+0x30>)
 801072e:	6852      	ldr	r2, [r2, #4]
 8010730:	4619      	mov	r1, r3
 8010732:	6878      	ldr	r0, [r7, #4]
 8010734:	f7ff ff82 	bl	801063c <CO_PDO_running>
	CO_PDO_running(canopenNode, Params.node_id_2, Params.targetP_2);
 8010738:	4b05      	ldr	r3, [pc, #20]	; (8010750 <CO_PDO_execute+0x30>)
 801073a:	7a1b      	ldrb	r3, [r3, #8]
 801073c:	4a04      	ldr	r2, [pc, #16]	; (8010750 <CO_PDO_execute+0x30>)
 801073e:	68d2      	ldr	r2, [r2, #12]
 8010740:	4619      	mov	r1, r3
 8010742:	6878      	ldr	r0, [r7, #4]
 8010744:	f7ff ff7a 	bl	801063c <CO_PDO_running>
//	CO_PDO_running(canopenNode, 2 ,9000);
}
 8010748:	bf00      	nop
 801074a:	3708      	adds	r7, #8
 801074c:	46bd      	mov	sp, r7
 801074e:	bd80      	pop	{r7, pc}
 8010750:	24000724 	.word	0x24000724

08010754 <response_print>:
#include "stdarg.h"

//static UART_HandleTypeDef *huart_print;

void response_print(const char* str, ...)
{ 
 8010754:	b40f      	push	{r0, r1, r2, r3}
 8010756:	b580      	push	{r7, lr}
 8010758:	b09a      	sub	sp, #104	; 0x68
 801075a:	af00      	add	r7, sp, #0
	char stringArray[100];  //100: so ky tu trong 1 tham so
//	uint8_t cdc_send_flag = 1;
	
	va_list args;
	va_start(args, str);
 801075c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8010760:	603b      	str	r3, [r7, #0]
	vsprintf(stringArray, str, args);
 8010762:	1d3b      	adds	r3, r7, #4
 8010764:	683a      	ldr	r2, [r7, #0]
 8010766:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010768:	4618      	mov	r0, r3
 801076a:	f003 ff8f 	bl	801468c <vsiprintf>
//	                cdc_send_flag = 0;
//	                break;
//	            }
//	        }
//	    }
	CDC_Transmit_FS((uint8_t *)stringArray, strlen(stringArray));
 801076e:	1d3b      	adds	r3, r7, #4
 8010770:	4618      	mov	r0, r3
 8010772:	f7ef fdbf 	bl	80002f4 <strlen>
 8010776:	4603      	mov	r3, r0
 8010778:	b29a      	uxth	r2, r3
 801077a:	1d3b      	adds	r3, r7, #4
 801077c:	4611      	mov	r1, r2
 801077e:	4618      	mov	r0, r3
 8010780:	f002 fdea 	bl	8013358 <CDC_Transmit_FS>
}
 8010784:	bf00      	nop
 8010786:	3768      	adds	r7, #104	; 0x68
 8010788:	46bd      	mov	sp, r7
 801078a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 801078e:	b004      	add	sp, #16
 8010790:	4770      	bx	lr

08010792 <read_SDO>:


CO_SDO_abortCode_t read_SDO(CO_SDOclient_t *SDO_C, uint8_t nodeId,
                            uint16_t index, uint8_t subIndex,
                            uint8_t *buf, size_t bufSize, size_t *readSize)
{
 8010792:	b580      	push	{r7, lr}
 8010794:	b08a      	sub	sp, #40	; 0x28
 8010796:	af04      	add	r7, sp, #16
 8010798:	6078      	str	r0, [r7, #4]
 801079a:	4608      	mov	r0, r1
 801079c:	4611      	mov	r1, r2
 801079e:	461a      	mov	r2, r3
 80107a0:	4603      	mov	r3, r0
 80107a2:	70fb      	strb	r3, [r7, #3]
 80107a4:	460b      	mov	r3, r1
 80107a6:	803b      	strh	r3, [r7, #0]
 80107a8:	4613      	mov	r3, r2
 80107aa:	70bb      	strb	r3, [r7, #2]
    CO_SDO_return_t SDO_ret;

    // setup client (this can be skipped, if remote device don't change)
    SDO_ret = CO_SDOclient_setup(SDO_C,
                                 CO_CAN_ID_SDO_CLI + nodeId,
 80107ac:	78fb      	ldrb	r3, [r7, #3]
 80107ae:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
    SDO_ret = CO_SDOclient_setup(SDO_C,
 80107b2:	4619      	mov	r1, r3
                                 CO_CAN_ID_SDO_SRV + nodeId,
 80107b4:	78fb      	ldrb	r3, [r7, #3]
 80107b6:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
    SDO_ret = CO_SDOclient_setup(SDO_C,
 80107ba:	461a      	mov	r2, r3
 80107bc:	78fb      	ldrb	r3, [r7, #3]
 80107be:	6878      	ldr	r0, [r7, #4]
 80107c0:	f7f2 ff68 	bl	8003694 <CO_SDOclient_setup>
 80107c4:	4603      	mov	r3, r0
 80107c6:	75fb      	strb	r3, [r7, #23]
                                 nodeId);
    if (SDO_ret != CO_SDO_RT_ok_communicationEnd) {
 80107c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80107cc:	2b00      	cmp	r3, #0
 80107ce:	d002      	beq.n	80107d6 <read_SDO+0x44>
        return CO_SDO_AB_GENERAL;
 80107d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80107d4:	e03b      	b.n	801084e <read_SDO+0xbc>
    }

    // initiate upload
    SDO_ret = CO_SDOclientUploadInitiate(SDO_C, index, subIndex, 1000, false);
 80107d6:	78ba      	ldrb	r2, [r7, #2]
 80107d8:	8839      	ldrh	r1, [r7, #0]
 80107da:	2300      	movs	r3, #0
 80107dc:	9300      	str	r3, [sp, #0]
 80107de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80107e2:	6878      	ldr	r0, [r7, #4]
 80107e4:	f7f3 f9e6 	bl	8003bb4 <CO_SDOclientUploadInitiate>
 80107e8:	4603      	mov	r3, r0
 80107ea:	75fb      	strb	r3, [r7, #23]
    if (SDO_ret != CO_SDO_RT_ok_communicationEnd) {
 80107ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80107f0:	2b00      	cmp	r3, #0
 80107f2:	d002      	beq.n	80107fa <read_SDO+0x68>
        return CO_SDO_AB_GENERAL;
 80107f4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80107f8:	e029      	b.n	801084e <read_SDO+0xbc>
    }

    // upload data
    do {
        uint32_t timeDifference_us = 10000;
 80107fa:	f242 7310 	movw	r3, #10000	; 0x2710
 80107fe:	613b      	str	r3, [r7, #16]
        CO_SDO_abortCode_t abortCode = CO_SDO_AB_NONE;
 8010800:	2300      	movs	r3, #0
 8010802:	60fb      	str	r3, [r7, #12]

        SDO_ret = CO_SDOclientUpload(SDO_C,
 8010804:	f107 030c 	add.w	r3, r7, #12
 8010808:	2200      	movs	r2, #0
 801080a:	9202      	str	r2, [sp, #8]
 801080c:	2200      	movs	r2, #0
 801080e:	9201      	str	r2, [sp, #4]
 8010810:	2200      	movs	r2, #0
 8010812:	9200      	str	r2, [sp, #0]
 8010814:	2200      	movs	r2, #0
 8010816:	6939      	ldr	r1, [r7, #16]
 8010818:	6878      	ldr	r0, [r7, #4]
 801081a:	f7f3 fa0d 	bl	8003c38 <CO_SDOclientUpload>
 801081e:	4603      	mov	r3, r0
 8010820:	75fb      	strb	r3, [r7, #23]
                                     timeDifference_us,
                                     false,
                                     &abortCode,
                                     NULL, NULL, NULL);
        if (SDO_ret < 0) {
 8010822:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010826:	2b00      	cmp	r3, #0
 8010828:	da01      	bge.n	801082e <read_SDO+0x9c>
            return abortCode;
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	e00f      	b.n	801084e <read_SDO+0xbc>
        }

        HAL_Delay(1);
 801082e:	2001      	movs	r0, #1
 8010830:	f7f8 fbf2 	bl	8009018 <HAL_Delay>
    } while(SDO_ret > 0);
 8010834:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8010838:	2b00      	cmp	r3, #0
 801083a:	dcde      	bgt.n	80107fa <read_SDO+0x68>

    // copy data to the user buffer (for long data function must be called
    // several times inside the loop)
    *readSize = CO_SDOclientUploadBufRead(SDO_C, buf, bufSize);
 801083c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801083e:	6a39      	ldr	r1, [r7, #32]
 8010840:	6878      	ldr	r0, [r7, #4]
 8010842:	f7f3 fb9b 	bl	8003f7c <CO_SDOclientUploadBufRead>
 8010846:	4602      	mov	r2, r0
 8010848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801084a:	601a      	str	r2, [r3, #0]

    return CO_SDO_AB_NONE;
 801084c:	2300      	movs	r3, #0
}
 801084e:	4618      	mov	r0, r3
 8010850:	3718      	adds	r7, #24
 8010852:	46bd      	mov	sp, r7
 8010854:	bd80      	pop	{r7, pc}

08010856 <write_SDO>:

CO_SDO_abortCode_t write_SDO(CO_SDOclient_t *SDO_C, uint8_t nodeId,
                             uint16_t index, uint8_t subIndex,
                             uint8_t *data, size_t dataSize)
{
 8010856:	b580      	push	{r7, lr}
 8010858:	b08c      	sub	sp, #48	; 0x30
 801085a:	af04      	add	r7, sp, #16
 801085c:	6078      	str	r0, [r7, #4]
 801085e:	4608      	mov	r0, r1
 8010860:	4611      	mov	r1, r2
 8010862:	461a      	mov	r2, r3
 8010864:	4603      	mov	r3, r0
 8010866:	70fb      	strb	r3, [r7, #3]
 8010868:	460b      	mov	r3, r1
 801086a:	803b      	strh	r3, [r7, #0]
 801086c:	4613      	mov	r3, r2
 801086e:	70bb      	strb	r3, [r7, #2]
    CO_SDO_return_t SDO_ret;
    bool_t bufferPartial = false;
 8010870:	2300      	movs	r3, #0
 8010872:	61fb      	str	r3, [r7, #28]

    // setup client (this can be skipped, if remote device is the same)
    SDO_ret = CO_SDOclient_setup(SDO_C,
                                 CO_CAN_ID_SDO_CLI + nodeId,
 8010874:	78fb      	ldrb	r3, [r7, #3]
 8010876:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
    SDO_ret = CO_SDOclient_setup(SDO_C,
 801087a:	4619      	mov	r1, r3
                                 CO_CAN_ID_SDO_SRV + nodeId,
 801087c:	78fb      	ldrb	r3, [r7, #3]
 801087e:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
    SDO_ret = CO_SDOclient_setup(SDO_C,
 8010882:	461a      	mov	r2, r3
 8010884:	78fb      	ldrb	r3, [r7, #3]
 8010886:	6878      	ldr	r0, [r7, #4]
 8010888:	f7f2 ff04 	bl	8003694 <CO_SDOclient_setup>
 801088c:	4603      	mov	r3, r0
 801088e:	76fb      	strb	r3, [r7, #27]
                                 nodeId);
    if (SDO_ret != CO_SDO_RT_ok_communicationEnd) {
 8010890:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8010894:	2b00      	cmp	r3, #0
 8010896:	d002      	beq.n	801089e <write_SDO+0x48>
        return -1;
 8010898:	f04f 33ff 	mov.w	r3, #4294967295
 801089c:	e041      	b.n	8010922 <write_SDO+0xcc>
    }

    // initiate download
    SDO_ret = CO_SDOclientDownloadInitiate(SDO_C, index, subIndex,
 801089e:	78ba      	ldrb	r2, [r7, #2]
 80108a0:	8839      	ldrh	r1, [r7, #0]
 80108a2:	2300      	movs	r3, #0
 80108a4:	9301      	str	r3, [sp, #4]
 80108a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80108aa:	9300      	str	r3, [sp, #0]
 80108ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108ae:	6878      	ldr	r0, [r7, #4]
 80108b0:	f7f2 ff64 	bl	800377c <CO_SDOclientDownloadInitiate>
 80108b4:	4603      	mov	r3, r0
 80108b6:	76fb      	strb	r3, [r7, #27]
                                           dataSize, 1000, false);
    if (SDO_ret != CO_SDO_RT_ok_communicationEnd) {
 80108b8:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d002      	beq.n	80108c6 <write_SDO+0x70>
        return -1;
 80108c0:	f04f 33ff 	mov.w	r3, #4294967295
 80108c4:	e02d      	b.n	8010922 <write_SDO+0xcc>
    }

    // fill data
    size_t nWritten = CO_SDOclientDownloadBufWrite(SDO_C, data, dataSize);
 80108c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80108c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80108ca:	6878      	ldr	r0, [r7, #4]
 80108cc:	f7f2 ff93 	bl	80037f6 <CO_SDOclientDownloadBufWrite>
 80108d0:	6178      	str	r0, [r7, #20]
    if (nWritten < dataSize) {
 80108d2:	697a      	ldr	r2, [r7, #20]
 80108d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80108d6:	429a      	cmp	r2, r3
 80108d8:	d201      	bcs.n	80108de <write_SDO+0x88>
        bufferPartial = true;
 80108da:	2301      	movs	r3, #1
 80108dc:	61fb      	str	r3, [r7, #28]
        // If SDO Fifo buffer is too small, data can be refilled in the loop.
    }

    //download data
    do {
        uint32_t timeDifference_us = 10000;
 80108de:	f242 7310 	movw	r3, #10000	; 0x2710
 80108e2:	613b      	str	r3, [r7, #16]
        CO_SDO_abortCode_t abortCode = CO_SDO_AB_NONE;
 80108e4:	2300      	movs	r3, #0
 80108e6:	60fb      	str	r3, [r7, #12]

        SDO_ret = CO_SDOclientDownload(SDO_C,
 80108e8:	2300      	movs	r3, #0
 80108ea:	9302      	str	r3, [sp, #8]
 80108ec:	2300      	movs	r3, #0
 80108ee:	9301      	str	r3, [sp, #4]
 80108f0:	f107 030c 	add.w	r3, r7, #12
 80108f4:	9300      	str	r3, [sp, #0]
 80108f6:	69fb      	ldr	r3, [r7, #28]
 80108f8:	2200      	movs	r2, #0
 80108fa:	6939      	ldr	r1, [r7, #16]
 80108fc:	6878      	ldr	r0, [r7, #4]
 80108fe:	f7f2 ff97 	bl	8003830 <CO_SDOclientDownload>
 8010902:	4603      	mov	r3, r0
 8010904:	76fb      	strb	r3, [r7, #27]
                                       timeDifference_us,
                                       false,
                                       bufferPartial,
                                       &abortCode,
                                       NULL, NULL);
        if (SDO_ret < 0) {
 8010906:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801090a:	2b00      	cmp	r3, #0
 801090c:	da01      	bge.n	8010912 <write_SDO+0xbc>
            return abortCode;
 801090e:	68fb      	ldr	r3, [r7, #12]
 8010910:	e007      	b.n	8010922 <write_SDO+0xcc>
        }

        HAL_Delay(1);
 8010912:	2001      	movs	r0, #1
 8010914:	f7f8 fb80 	bl	8009018 <HAL_Delay>
    } while(SDO_ret > 0);
 8010918:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801091c:	2b00      	cmp	r3, #0
 801091e:	dcde      	bgt.n	80108de <write_SDO+0x88>

    return CO_SDO_AB_NONE;
 8010920:	2300      	movs	r3, #0
}
 8010922:	4618      	mov	r0, r3
 8010924:	3720      	adds	r7, #32
 8010926:	46bd      	mov	sp, r7
 8010928:	bd80      	pop	{r7, pc}
	...

0801092c <Switch_On_Disabled>:

static uint8_t data[4];

void Switch_On_Disabled(CANopenNodeSTM32* ____canopenNode, uint8_t __node_id)
{
 801092c:	b580      	push	{r7, lr}
 801092e:	b084      	sub	sp, #16
 8010930:	af02      	add	r7, sp, #8
 8010932:	6078      	str	r0, [r7, #4]
 8010934:	460b      	mov	r3, r1
 8010936:	70fb      	strb	r3, [r7, #3]
	data[0] = 0x00;
 8010938:	4b0e      	ldr	r3, [pc, #56]	; (8010974 <Switch_On_Disabled+0x48>)
 801093a:	2200      	movs	r2, #0
 801093c:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;
 801093e:	4b0d      	ldr	r3, [pc, #52]	; (8010974 <Switch_On_Disabled+0x48>)
 8010940:	2200      	movs	r2, #0
 8010942:	705a      	strb	r2, [r3, #1]
	data[2] = 0x00;
 8010944:	4b0b      	ldr	r3, [pc, #44]	; (8010974 <Switch_On_Disabled+0x48>)
 8010946:	2200      	movs	r2, #0
 8010948:	709a      	strb	r2, [r3, #2]
	data[3] = 0x00;
 801094a:	4b0a      	ldr	r3, [pc, #40]	; (8010974 <Switch_On_Disabled+0x48>)
 801094c:	2200      	movs	r2, #0
 801094e:	70da      	strb	r2, [r3, #3]
	write_SDO(____canopenNode->canOpenStack->SDOclient, __node_id, 0x6040, 0x00, data, 2);
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	695b      	ldr	r3, [r3, #20]
 8010954:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8010956:	78f9      	ldrb	r1, [r7, #3]
 8010958:	2302      	movs	r3, #2
 801095a:	9301      	str	r3, [sp, #4]
 801095c:	4b05      	ldr	r3, [pc, #20]	; (8010974 <Switch_On_Disabled+0x48>)
 801095e:	9300      	str	r3, [sp, #0]
 8010960:	2300      	movs	r3, #0
 8010962:	f246 0240 	movw	r2, #24640	; 0x6040
 8010966:	f7ff ff76 	bl	8010856 <write_SDO>
}
 801096a:	bf00      	nop
 801096c:	3708      	adds	r7, #8
 801096e:	46bd      	mov	sp, r7
 8010970:	bd80      	pop	{r7, pc}
 8010972:	bf00      	nop
 8010974:	24000734 	.word	0x24000734

08010978 <Ready_to_Switch_On>:
void Ready_to_Switch_On(CANopenNodeSTM32* ____canopenNode, uint8_t __node_id)
	{
 8010978:	b580      	push	{r7, lr}
 801097a:	b084      	sub	sp, #16
 801097c:	af02      	add	r7, sp, #8
 801097e:	6078      	str	r0, [r7, #4]
 8010980:	460b      	mov	r3, r1
 8010982:	70fb      	strb	r3, [r7, #3]
		data[0] = 0x06;
 8010984:	4b0e      	ldr	r3, [pc, #56]	; (80109c0 <Ready_to_Switch_On+0x48>)
 8010986:	2206      	movs	r2, #6
 8010988:	701a      	strb	r2, [r3, #0]
		data[1] = 0x00;
 801098a:	4b0d      	ldr	r3, [pc, #52]	; (80109c0 <Ready_to_Switch_On+0x48>)
 801098c:	2200      	movs	r2, #0
 801098e:	705a      	strb	r2, [r3, #1]
		data[2] = 0x00;
 8010990:	4b0b      	ldr	r3, [pc, #44]	; (80109c0 <Ready_to_Switch_On+0x48>)
 8010992:	2200      	movs	r2, #0
 8010994:	709a      	strb	r2, [r3, #2]
		data[3] = 0x00;
 8010996:	4b0a      	ldr	r3, [pc, #40]	; (80109c0 <Ready_to_Switch_On+0x48>)
 8010998:	2200      	movs	r2, #0
 801099a:	70da      	strb	r2, [r3, #3]
		write_SDO(____canopenNode->canOpenStack->SDOclient, __node_id, 0x6040, 0x00, data, 2);
 801099c:	687b      	ldr	r3, [r7, #4]
 801099e:	695b      	ldr	r3, [r3, #20]
 80109a0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80109a2:	78f9      	ldrb	r1, [r7, #3]
 80109a4:	2302      	movs	r3, #2
 80109a6:	9301      	str	r3, [sp, #4]
 80109a8:	4b05      	ldr	r3, [pc, #20]	; (80109c0 <Ready_to_Switch_On+0x48>)
 80109aa:	9300      	str	r3, [sp, #0]
 80109ac:	2300      	movs	r3, #0
 80109ae:	f246 0240 	movw	r2, #24640	; 0x6040
 80109b2:	f7ff ff50 	bl	8010856 <write_SDO>
	}
 80109b6:	bf00      	nop
 80109b8:	3708      	adds	r7, #8
 80109ba:	46bd      	mov	sp, r7
 80109bc:	bd80      	pop	{r7, pc}
 80109be:	bf00      	nop
 80109c0:	24000734 	.word	0x24000734

080109c4 <Switch_On>:
void Switch_On(CANopenNodeSTM32* ____canopenNode, uint8_t __node_id)
	{
 80109c4:	b580      	push	{r7, lr}
 80109c6:	b084      	sub	sp, #16
 80109c8:	af02      	add	r7, sp, #8
 80109ca:	6078      	str	r0, [r7, #4]
 80109cc:	460b      	mov	r3, r1
 80109ce:	70fb      	strb	r3, [r7, #3]
		data[0] = 0x07;
 80109d0:	4b0e      	ldr	r3, [pc, #56]	; (8010a0c <Switch_On+0x48>)
 80109d2:	2207      	movs	r2, #7
 80109d4:	701a      	strb	r2, [r3, #0]
		data[1] = 0x00;
 80109d6:	4b0d      	ldr	r3, [pc, #52]	; (8010a0c <Switch_On+0x48>)
 80109d8:	2200      	movs	r2, #0
 80109da:	705a      	strb	r2, [r3, #1]
		data[2] = 0x00;
 80109dc:	4b0b      	ldr	r3, [pc, #44]	; (8010a0c <Switch_On+0x48>)
 80109de:	2200      	movs	r2, #0
 80109e0:	709a      	strb	r2, [r3, #2]
		data[3] = 0x00;
 80109e2:	4b0a      	ldr	r3, [pc, #40]	; (8010a0c <Switch_On+0x48>)
 80109e4:	2200      	movs	r2, #0
 80109e6:	70da      	strb	r2, [r3, #3]
		write_SDO(____canopenNode->canOpenStack->SDOclient, __node_id, 0x6040, 0x00, data, 2);
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	695b      	ldr	r3, [r3, #20]
 80109ec:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80109ee:	78f9      	ldrb	r1, [r7, #3]
 80109f0:	2302      	movs	r3, #2
 80109f2:	9301      	str	r3, [sp, #4]
 80109f4:	4b05      	ldr	r3, [pc, #20]	; (8010a0c <Switch_On+0x48>)
 80109f6:	9300      	str	r3, [sp, #0]
 80109f8:	2300      	movs	r3, #0
 80109fa:	f246 0240 	movw	r2, #24640	; 0x6040
 80109fe:	f7ff ff2a 	bl	8010856 <write_SDO>
	}
 8010a02:	bf00      	nop
 8010a04:	3708      	adds	r7, #8
 8010a06:	46bd      	mov	sp, r7
 8010a08:	bd80      	pop	{r7, pc}
 8010a0a:	bf00      	nop
 8010a0c:	24000734 	.word	0x24000734

08010a10 <Operation_Enabled>:
void Operation_Enabled(CANopenNodeSTM32* ____canopenNode, uint8_t __node_id)
	{
 8010a10:	b580      	push	{r7, lr}
 8010a12:	b084      	sub	sp, #16
 8010a14:	af02      	add	r7, sp, #8
 8010a16:	6078      	str	r0, [r7, #4]
 8010a18:	460b      	mov	r3, r1
 8010a1a:	70fb      	strb	r3, [r7, #3]
		data[0] = 0x0F;
 8010a1c:	4b0e      	ldr	r3, [pc, #56]	; (8010a58 <Operation_Enabled+0x48>)
 8010a1e:	220f      	movs	r2, #15
 8010a20:	701a      	strb	r2, [r3, #0]
		data[1] = 0x00;
 8010a22:	4b0d      	ldr	r3, [pc, #52]	; (8010a58 <Operation_Enabled+0x48>)
 8010a24:	2200      	movs	r2, #0
 8010a26:	705a      	strb	r2, [r3, #1]
		data[2] = 0x00;
 8010a28:	4b0b      	ldr	r3, [pc, #44]	; (8010a58 <Operation_Enabled+0x48>)
 8010a2a:	2200      	movs	r2, #0
 8010a2c:	709a      	strb	r2, [r3, #2]
		data[3] = 0x00;
 8010a2e:	4b0a      	ldr	r3, [pc, #40]	; (8010a58 <Operation_Enabled+0x48>)
 8010a30:	2200      	movs	r2, #0
 8010a32:	70da      	strb	r2, [r3, #3]
		write_SDO(____canopenNode->canOpenStack->SDOclient, __node_id, 0x6040, 0x00, data, 2);
 8010a34:	687b      	ldr	r3, [r7, #4]
 8010a36:	695b      	ldr	r3, [r3, #20]
 8010a38:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8010a3a:	78f9      	ldrb	r1, [r7, #3]
 8010a3c:	2302      	movs	r3, #2
 8010a3e:	9301      	str	r3, [sp, #4]
 8010a40:	4b05      	ldr	r3, [pc, #20]	; (8010a58 <Operation_Enabled+0x48>)
 8010a42:	9300      	str	r3, [sp, #0]
 8010a44:	2300      	movs	r3, #0
 8010a46:	f246 0240 	movw	r2, #24640	; 0x6040
 8010a4a:	f7ff ff04 	bl	8010856 <write_SDO>
	}
 8010a4e:	bf00      	nop
 8010a50:	3708      	adds	r7, #8
 8010a52:	46bd      	mov	sp, r7
 8010a54:	bd80      	pop	{r7, pc}
 8010a56:	bf00      	nop
 8010a58:	24000734 	.word	0x24000734

08010a5c <PDS_execute>:

void PDS_execute(CANopenNodeSTM32* __canopenNode, uint8_t node_id)
{
 8010a5c:	b580      	push	{r7, lr}
 8010a5e:	b082      	sub	sp, #8
 8010a60:	af00      	add	r7, sp, #0
 8010a62:	6078      	str	r0, [r7, #4]
 8010a64:	460b      	mov	r3, r1
 8010a66:	70fb      	strb	r3, [r7, #3]
	Switch_On_Disabled(__canopenNode, node_id);
 8010a68:	78fb      	ldrb	r3, [r7, #3]
 8010a6a:	4619      	mov	r1, r3
 8010a6c:	6878      	ldr	r0, [r7, #4]
 8010a6e:	f7ff ff5d 	bl	801092c <Switch_On_Disabled>
	Ready_to_Switch_On(__canopenNode, node_id);
 8010a72:	78fb      	ldrb	r3, [r7, #3]
 8010a74:	4619      	mov	r1, r3
 8010a76:	6878      	ldr	r0, [r7, #4]
 8010a78:	f7ff ff7e 	bl	8010978 <Ready_to_Switch_On>
	Switch_On(__canopenNode, node_id);
 8010a7c:	78fb      	ldrb	r3, [r7, #3]
 8010a7e:	4619      	mov	r1, r3
 8010a80:	6878      	ldr	r0, [r7, #4]
 8010a82:	f7ff ff9f 	bl	80109c4 <Switch_On>
	Operation_Enabled(__canopenNode, node_id);
 8010a86:	78fb      	ldrb	r3, [r7, #3]
 8010a88:	4619      	mov	r1, r3
 8010a8a:	6878      	ldr	r0, [r7, #4]
 8010a8c:	f7ff ffc0 	bl	8010a10 <Operation_Enabled>
}
 8010a90:	bf00      	nop
 8010a92:	3708      	adds	r7, #8
 8010a94:	46bd      	mov	sp, r7
 8010a96:	bd80      	pop	{r7, pc}

08010a98 <Disable_PDO>:

void Disable_PDO(CANopenNodeSTM32* ____canopenNode, uint8_t __node_id, uint8_t number_PDO)
{
 8010a98:	b580      	push	{r7, lr}
 8010a9a:	b084      	sub	sp, #16
 8010a9c:	af02      	add	r7, sp, #8
 8010a9e:	6078      	str	r0, [r7, #4]
 8010aa0:	460b      	mov	r3, r1
 8010aa2:	70fb      	strb	r3, [r7, #3]
 8010aa4:	4613      	mov	r3, r2
 8010aa6:	70bb      	strb	r3, [r7, #2]
	 data[0] = 0x00;
 8010aa8:	4b10      	ldr	r3, [pc, #64]	; (8010aec <Disable_PDO+0x54>)
 8010aaa:	2200      	movs	r2, #0
 8010aac:	701a      	strb	r2, [r3, #0]
	 data[1] = 0x00;
 8010aae:	4b0f      	ldr	r3, [pc, #60]	; (8010aec <Disable_PDO+0x54>)
 8010ab0:	2200      	movs	r2, #0
 8010ab2:	705a      	strb	r2, [r3, #1]
	 data[2] = 0x00;
 8010ab4:	4b0d      	ldr	r3, [pc, #52]	; (8010aec <Disable_PDO+0x54>)
 8010ab6:	2200      	movs	r2, #0
 8010ab8:	709a      	strb	r2, [r3, #2]
	 data[3] = 0x80;
 8010aba:	4b0c      	ldr	r3, [pc, #48]	; (8010aec <Disable_PDO+0x54>)
 8010abc:	2280      	movs	r2, #128	; 0x80
 8010abe:	70da      	strb	r2, [r3, #3]
	write_SDO(____canopenNode->canOpenStack->SDOclient, __node_id, OD_H1400_RXPDO_1_PARAM+(number_PDO-1), 0x01, data, 4);
 8010ac0:	687b      	ldr	r3, [r7, #4]
 8010ac2:	695b      	ldr	r3, [r3, #20]
 8010ac4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8010ac6:	78bb      	ldrb	r3, [r7, #2]
 8010ac8:	b29a      	uxth	r2, r3
 8010aca:	f241 33ff 	movw	r3, #5119	; 0x13ff
 8010ace:	4413      	add	r3, r2
 8010ad0:	b29a      	uxth	r2, r3
 8010ad2:	78f9      	ldrb	r1, [r7, #3]
 8010ad4:	2304      	movs	r3, #4
 8010ad6:	9301      	str	r3, [sp, #4]
 8010ad8:	4b04      	ldr	r3, [pc, #16]	; (8010aec <Disable_PDO+0x54>)
 8010ada:	9300      	str	r3, [sp, #0]
 8010adc:	2301      	movs	r3, #1
 8010ade:	f7ff feba 	bl	8010856 <write_SDO>
}
 8010ae2:	bf00      	nop
 8010ae4:	3708      	adds	r7, #8
 8010ae6:	46bd      	mov	sp, r7
 8010ae8:	bd80      	pop	{r7, pc}
 8010aea:	bf00      	nop
 8010aec:	24000734 	.word	0x24000734

08010af0 <set_COB_ID>:
void set_COB_ID(CANopenNodeSTM32* ____canopenNode, uint8_t __node_id, uint8_t number_PDO)
{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b086      	sub	sp, #24
 8010af4:	af02      	add	r7, sp, #8
 8010af6:	6078      	str	r0, [r7, #4]
 8010af8:	460b      	mov	r3, r1
 8010afa:	70fb      	strb	r3, [r7, #3]
 8010afc:	4613      	mov	r3, r2
 8010afe:	70bb      	strb	r3, [r7, #2]
	uint32_t COB_ID_PDO = CO_CAN_ID_RPDO_1 + (number_PDO-1)*0x100 + __node_id;
 8010b00:	78bb      	ldrb	r3, [r7, #2]
 8010b02:	3301      	adds	r3, #1
 8010b04:	021a      	lsls	r2, r3, #8
 8010b06:	78fb      	ldrb	r3, [r7, #3]
 8010b08:	4413      	add	r3, r2
 8010b0a:	60fb      	str	r3, [r7, #12]
	data[0] = COB_ID_PDO 		& 0xFFU;
 8010b0c:	68fb      	ldr	r3, [r7, #12]
 8010b0e:	b2da      	uxtb	r2, r3
 8010b10:	4b10      	ldr	r3, [pc, #64]	; (8010b54 <set_COB_ID+0x64>)
 8010b12:	701a      	strb	r2, [r3, #0]
	data[1] = (COB_ID_PDO>>8) 	& 0xFFU;
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	0a1b      	lsrs	r3, r3, #8
 8010b18:	b2da      	uxtb	r2, r3
 8010b1a:	4b0e      	ldr	r3, [pc, #56]	; (8010b54 <set_COB_ID+0x64>)
 8010b1c:	705a      	strb	r2, [r3, #1]
	data[2] = 0x00;
 8010b1e:	4b0d      	ldr	r3, [pc, #52]	; (8010b54 <set_COB_ID+0x64>)
 8010b20:	2200      	movs	r2, #0
 8010b22:	709a      	strb	r2, [r3, #2]
	data[3] = 0x80;
 8010b24:	4b0b      	ldr	r3, [pc, #44]	; (8010b54 <set_COB_ID+0x64>)
 8010b26:	2280      	movs	r2, #128	; 0x80
 8010b28:	70da      	strb	r2, [r3, #3]
	write_SDO(____canopenNode->canOpenStack->SDOclient, __node_id, OD_H1400_RXPDO_1_PARAM+(number_PDO-1), 0x01, data, 4);
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	695b      	ldr	r3, [r3, #20]
 8010b2e:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8010b30:	78bb      	ldrb	r3, [r7, #2]
 8010b32:	b29a      	uxth	r2, r3
 8010b34:	f241 33ff 	movw	r3, #5119	; 0x13ff
 8010b38:	4413      	add	r3, r2
 8010b3a:	b29a      	uxth	r2, r3
 8010b3c:	78f9      	ldrb	r1, [r7, #3]
 8010b3e:	2304      	movs	r3, #4
 8010b40:	9301      	str	r3, [sp, #4]
 8010b42:	4b04      	ldr	r3, [pc, #16]	; (8010b54 <set_COB_ID+0x64>)
 8010b44:	9300      	str	r3, [sp, #0]
 8010b46:	2301      	movs	r3, #1
 8010b48:	f7ff fe85 	bl	8010856 <write_SDO>
}
 8010b4c:	bf00      	nop
 8010b4e:	3710      	adds	r7, #16
 8010b50:	46bd      	mov	sp, r7
 8010b52:	bd80      	pop	{r7, pc}
 8010b54:	24000734 	.word	0x24000734

08010b58 <set_transmission_type>:
void set_transmission_type(CANopenNodeSTM32* ____canopenNode, uint8_t __node_id, uint8_t number_PDO)
{
 8010b58:	b580      	push	{r7, lr}
 8010b5a:	b084      	sub	sp, #16
 8010b5c:	af02      	add	r7, sp, #8
 8010b5e:	6078      	str	r0, [r7, #4]
 8010b60:	460b      	mov	r3, r1
 8010b62:	70fb      	strb	r3, [r7, #3]
 8010b64:	4613      	mov	r3, r2
 8010b66:	70bb      	strb	r3, [r7, #2]
	data[0] = CO_PDO_TRANSM_TYPE_SYNC_ACYCLIC 		& 0xFFU;
 8010b68:	4b10      	ldr	r3, [pc, #64]	; (8010bac <set_transmission_type+0x54>)
 8010b6a:	2200      	movs	r2, #0
 8010b6c:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;
 8010b6e:	4b0f      	ldr	r3, [pc, #60]	; (8010bac <set_transmission_type+0x54>)
 8010b70:	2200      	movs	r2, #0
 8010b72:	705a      	strb	r2, [r3, #1]
	data[2] = 0x00;
 8010b74:	4b0d      	ldr	r3, [pc, #52]	; (8010bac <set_transmission_type+0x54>)
 8010b76:	2200      	movs	r2, #0
 8010b78:	709a      	strb	r2, [r3, #2]
	data[3] = 0x00;
 8010b7a:	4b0c      	ldr	r3, [pc, #48]	; (8010bac <set_transmission_type+0x54>)
 8010b7c:	2200      	movs	r2, #0
 8010b7e:	70da      	strb	r2, [r3, #3]
	write_SDO(____canopenNode->canOpenStack->SDOclient, __node_id, OD_H1400_RXPDO_1_PARAM+(number_PDO-1), 0x02, data, 2);
 8010b80:	687b      	ldr	r3, [r7, #4]
 8010b82:	695b      	ldr	r3, [r3, #20]
 8010b84:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8010b86:	78bb      	ldrb	r3, [r7, #2]
 8010b88:	b29a      	uxth	r2, r3
 8010b8a:	f241 33ff 	movw	r3, #5119	; 0x13ff
 8010b8e:	4413      	add	r3, r2
 8010b90:	b29a      	uxth	r2, r3
 8010b92:	78f9      	ldrb	r1, [r7, #3]
 8010b94:	2302      	movs	r3, #2
 8010b96:	9301      	str	r3, [sp, #4]
 8010b98:	4b04      	ldr	r3, [pc, #16]	; (8010bac <set_transmission_type+0x54>)
 8010b9a:	9300      	str	r3, [sp, #0]
 8010b9c:	2302      	movs	r3, #2
 8010b9e:	f7ff fe5a 	bl	8010856 <write_SDO>
}
 8010ba2:	bf00      	nop
 8010ba4:	3708      	adds	r7, #8
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	bd80      	pop	{r7, pc}
 8010baa:	bf00      	nop
 8010bac:	24000734 	.word	0x24000734

08010bb0 <deactivating_mapping>:
void deactivating_mapping(CANopenNodeSTM32* ____canopenNode, uint8_t __node_id, uint8_t number_PDO)
{
 8010bb0:	b580      	push	{r7, lr}
 8010bb2:	b084      	sub	sp, #16
 8010bb4:	af02      	add	r7, sp, #8
 8010bb6:	6078      	str	r0, [r7, #4]
 8010bb8:	460b      	mov	r3, r1
 8010bba:	70fb      	strb	r3, [r7, #3]
 8010bbc:	4613      	mov	r3, r2
 8010bbe:	70bb      	strb	r3, [r7, #2]
	data[0] = 0x00;
 8010bc0:	4b10      	ldr	r3, [pc, #64]	; (8010c04 <deactivating_mapping+0x54>)
 8010bc2:	2200      	movs	r2, #0
 8010bc4:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;
 8010bc6:	4b0f      	ldr	r3, [pc, #60]	; (8010c04 <deactivating_mapping+0x54>)
 8010bc8:	2200      	movs	r2, #0
 8010bca:	705a      	strb	r2, [r3, #1]
	data[2] = 0x00;
 8010bcc:	4b0d      	ldr	r3, [pc, #52]	; (8010c04 <deactivating_mapping+0x54>)
 8010bce:	2200      	movs	r2, #0
 8010bd0:	709a      	strb	r2, [r3, #2]
	data[3] = 0x00;
 8010bd2:	4b0c      	ldr	r3, [pc, #48]	; (8010c04 <deactivating_mapping+0x54>)
 8010bd4:	2200      	movs	r2, #0
 8010bd6:	70da      	strb	r2, [r3, #3]
	write_SDO(____canopenNode->canOpenStack->SDOclient, __node_id, OD_H1600_RXPDO_1_MAPPING+(number_PDO-1), 0x00, data, 2);
 8010bd8:	687b      	ldr	r3, [r7, #4]
 8010bda:	695b      	ldr	r3, [r3, #20]
 8010bdc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8010bde:	78bb      	ldrb	r3, [r7, #2]
 8010be0:	b29a      	uxth	r2, r3
 8010be2:	f241 53ff 	movw	r3, #5631	; 0x15ff
 8010be6:	4413      	add	r3, r2
 8010be8:	b29a      	uxth	r2, r3
 8010bea:	78f9      	ldrb	r1, [r7, #3]
 8010bec:	2302      	movs	r3, #2
 8010bee:	9301      	str	r3, [sp, #4]
 8010bf0:	4b04      	ldr	r3, [pc, #16]	; (8010c04 <deactivating_mapping+0x54>)
 8010bf2:	9300      	str	r3, [sp, #0]
 8010bf4:	2300      	movs	r3, #0
 8010bf6:	f7ff fe2e 	bl	8010856 <write_SDO>
}
 8010bfa:	bf00      	nop
 8010bfc:	3708      	adds	r7, #8
 8010bfe:	46bd      	mov	sp, r7
 8010c00:	bd80      	pop	{r7, pc}
 8010c02:	bf00      	nop
 8010c04:	24000734 	.word	0x24000734

08010c08 <mapping_object>:
void mapping_object(CANopenNodeSTM32* ____canopenNode, uint8_t __node_id, uint8_t number_PDO, uint32_t __ObjectToMapping, uint8_t __subIndexToMapping)
{
 8010c08:	b590      	push	{r4, r7, lr}
 8010c0a:	b087      	sub	sp, #28
 8010c0c:	af02      	add	r7, sp, #8
 8010c0e:	60f8      	str	r0, [r7, #12]
 8010c10:	607b      	str	r3, [r7, #4]
 8010c12:	460b      	mov	r3, r1
 8010c14:	72fb      	strb	r3, [r7, #11]
 8010c16:	4613      	mov	r3, r2
 8010c18:	72bb      	strb	r3, [r7, #10]
	data[0] = __ObjectToMapping			& 0xFFU;
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	b2da      	uxtb	r2, r3
 8010c1e:	4b13      	ldr	r3, [pc, #76]	; (8010c6c <mapping_object+0x64>)
 8010c20:	701a      	strb	r2, [r3, #0]
	data[1] = (__ObjectToMapping>>8)	& 0xFFU;
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	0a1b      	lsrs	r3, r3, #8
 8010c26:	b2da      	uxtb	r2, r3
 8010c28:	4b10      	ldr	r3, [pc, #64]	; (8010c6c <mapping_object+0x64>)
 8010c2a:	705a      	strb	r2, [r3, #1]
	data[2] = (__ObjectToMapping>>16)	& 0xFFU;
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	0c1b      	lsrs	r3, r3, #16
 8010c30:	b2da      	uxtb	r2, r3
 8010c32:	4b0e      	ldr	r3, [pc, #56]	; (8010c6c <mapping_object+0x64>)
 8010c34:	709a      	strb	r2, [r3, #2]
	data[3] = (__ObjectToMapping>>24)	& 0xFFU;
 8010c36:	687b      	ldr	r3, [r7, #4]
 8010c38:	0e1b      	lsrs	r3, r3, #24
 8010c3a:	b2da      	uxtb	r2, r3
 8010c3c:	4b0b      	ldr	r3, [pc, #44]	; (8010c6c <mapping_object+0x64>)
 8010c3e:	70da      	strb	r2, [r3, #3]
	write_SDO(____canopenNode->canOpenStack->SDOclient, __node_id, OD_H1600_RXPDO_1_MAPPING+(number_PDO-1), __subIndexToMapping, data, 4);
 8010c40:	68fb      	ldr	r3, [r7, #12]
 8010c42:	695b      	ldr	r3, [r3, #20]
 8010c44:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8010c46:	7abb      	ldrb	r3, [r7, #10]
 8010c48:	b29a      	uxth	r2, r3
 8010c4a:	f241 53ff 	movw	r3, #5631	; 0x15ff
 8010c4e:	4413      	add	r3, r2
 8010c50:	b29a      	uxth	r2, r3
 8010c52:	f897 3020 	ldrb.w	r3, [r7, #32]
 8010c56:	7af9      	ldrb	r1, [r7, #11]
 8010c58:	2404      	movs	r4, #4
 8010c5a:	9401      	str	r4, [sp, #4]
 8010c5c:	4c03      	ldr	r4, [pc, #12]	; (8010c6c <mapping_object+0x64>)
 8010c5e:	9400      	str	r4, [sp, #0]
 8010c60:	f7ff fdf9 	bl	8010856 <write_SDO>
}
 8010c64:	bf00      	nop
 8010c66:	3714      	adds	r7, #20
 8010c68:	46bd      	mov	sp, r7
 8010c6a:	bd90      	pop	{r4, r7, pc}
 8010c6c:	24000734 	.word	0x24000734

08010c70 <Active_mapping>:
void Active_mapping(CANopenNodeSTM32* ____canopenNode, uint8_t __node_id, uint8_t number_PDO)
{
 8010c70:	b580      	push	{r7, lr}
 8010c72:	b084      	sub	sp, #16
 8010c74:	af02      	add	r7, sp, #8
 8010c76:	6078      	str	r0, [r7, #4]
 8010c78:	460b      	mov	r3, r1
 8010c7a:	70fb      	strb	r3, [r7, #3]
 8010c7c:	4613      	mov	r3, r2
 8010c7e:	70bb      	strb	r3, [r7, #2]
	data[0] = 0x01;
 8010c80:	4b10      	ldr	r3, [pc, #64]	; (8010cc4 <Active_mapping+0x54>)
 8010c82:	2201      	movs	r2, #1
 8010c84:	701a      	strb	r2, [r3, #0]
	data[1] = 0x00;
 8010c86:	4b0f      	ldr	r3, [pc, #60]	; (8010cc4 <Active_mapping+0x54>)
 8010c88:	2200      	movs	r2, #0
 8010c8a:	705a      	strb	r2, [r3, #1]
	data[2] = 0x00;
 8010c8c:	4b0d      	ldr	r3, [pc, #52]	; (8010cc4 <Active_mapping+0x54>)
 8010c8e:	2200      	movs	r2, #0
 8010c90:	709a      	strb	r2, [r3, #2]
	data[3] = 0x00;
 8010c92:	4b0c      	ldr	r3, [pc, #48]	; (8010cc4 <Active_mapping+0x54>)
 8010c94:	2200      	movs	r2, #0
 8010c96:	70da      	strb	r2, [r3, #3]
	write_SDO(____canopenNode->canOpenStack->SDOclient, __node_id, OD_H1600_RXPDO_1_MAPPING+(number_PDO-1), 0x00, data, 2);
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	695b      	ldr	r3, [r3, #20]
 8010c9c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8010c9e:	78bb      	ldrb	r3, [r7, #2]
 8010ca0:	b29a      	uxth	r2, r3
 8010ca2:	f241 53ff 	movw	r3, #5631	; 0x15ff
 8010ca6:	4413      	add	r3, r2
 8010ca8:	b29a      	uxth	r2, r3
 8010caa:	78f9      	ldrb	r1, [r7, #3]
 8010cac:	2302      	movs	r3, #2
 8010cae:	9301      	str	r3, [sp, #4]
 8010cb0:	4b04      	ldr	r3, [pc, #16]	; (8010cc4 <Active_mapping+0x54>)
 8010cb2:	9300      	str	r3, [sp, #0]
 8010cb4:	2300      	movs	r3, #0
 8010cb6:	f7ff fdce 	bl	8010856 <write_SDO>
}
 8010cba:	bf00      	nop
 8010cbc:	3708      	adds	r7, #8
 8010cbe:	46bd      	mov	sp, r7
 8010cc0:	bd80      	pop	{r7, pc}
 8010cc2:	bf00      	nop
 8010cc4:	24000734 	.word	0x24000734

08010cc8 <Enable_PDO>:
void Enable_PDO(CANopenNodeSTM32* ____canopenNode, uint8_t __node_id, uint8_t number_PDO)
{
 8010cc8:	b580      	push	{r7, lr}
 8010cca:	b086      	sub	sp, #24
 8010ccc:	af02      	add	r7, sp, #8
 8010cce:	6078      	str	r0, [r7, #4]
 8010cd0:	460b      	mov	r3, r1
 8010cd2:	70fb      	strb	r3, [r7, #3]
 8010cd4:	4613      	mov	r3, r2
 8010cd6:	70bb      	strb	r3, [r7, #2]
	uint32_t COB_ID_PDO = CO_CAN_ID_RPDO_1 + (number_PDO-1)*0x100 + __node_id;
 8010cd8:	78bb      	ldrb	r3, [r7, #2]
 8010cda:	3301      	adds	r3, #1
 8010cdc:	021a      	lsls	r2, r3, #8
 8010cde:	78fb      	ldrb	r3, [r7, #3]
 8010ce0:	4413      	add	r3, r2
 8010ce2:	60fb      	str	r3, [r7, #12]
	data[0] = COB_ID_PDO 		& 0xFFU;
 8010ce4:	68fb      	ldr	r3, [r7, #12]
 8010ce6:	b2da      	uxtb	r2, r3
 8010ce8:	4b10      	ldr	r3, [pc, #64]	; (8010d2c <Enable_PDO+0x64>)
 8010cea:	701a      	strb	r2, [r3, #0]
	data[1] = (COB_ID_PDO>>8) 	& 0xFFU;
 8010cec:	68fb      	ldr	r3, [r7, #12]
 8010cee:	0a1b      	lsrs	r3, r3, #8
 8010cf0:	b2da      	uxtb	r2, r3
 8010cf2:	4b0e      	ldr	r3, [pc, #56]	; (8010d2c <Enable_PDO+0x64>)
 8010cf4:	705a      	strb	r2, [r3, #1]
	data[2] = 0x00;
 8010cf6:	4b0d      	ldr	r3, [pc, #52]	; (8010d2c <Enable_PDO+0x64>)
 8010cf8:	2200      	movs	r2, #0
 8010cfa:	709a      	strb	r2, [r3, #2]
	data[3] = 0x00;
 8010cfc:	4b0b      	ldr	r3, [pc, #44]	; (8010d2c <Enable_PDO+0x64>)
 8010cfe:	2200      	movs	r2, #0
 8010d00:	70da      	strb	r2, [r3, #3]
	write_SDO(____canopenNode->canOpenStack->SDOclient, __node_id, OD_H1400_RXPDO_1_PARAM+(number_PDO-1), 0x01, data, 4);
 8010d02:	687b      	ldr	r3, [r7, #4]
 8010d04:	695b      	ldr	r3, [r3, #20]
 8010d06:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8010d08:	78bb      	ldrb	r3, [r7, #2]
 8010d0a:	b29a      	uxth	r2, r3
 8010d0c:	f241 33ff 	movw	r3, #5119	; 0x13ff
 8010d10:	4413      	add	r3, r2
 8010d12:	b29a      	uxth	r2, r3
 8010d14:	78f9      	ldrb	r1, [r7, #3]
 8010d16:	2304      	movs	r3, #4
 8010d18:	9301      	str	r3, [sp, #4]
 8010d1a:	4b04      	ldr	r3, [pc, #16]	; (8010d2c <Enable_PDO+0x64>)
 8010d1c:	9300      	str	r3, [sp, #0]
 8010d1e:	2301      	movs	r3, #1
 8010d20:	f7ff fd99 	bl	8010856 <write_SDO>
}
 8010d24:	bf00      	nop
 8010d26:	3710      	adds	r7, #16
 8010d28:	46bd      	mov	sp, r7
 8010d2a:	bd80      	pop	{r7, pc}
 8010d2c:	24000734 	.word	0x24000734

08010d30 <PDO_mapping>:

void PDO_mapping(CANopenNodeSTM32* __canopenNode, uint8_t node_id, uint8_t NumberOfPDO, uint32_t ObjectToMapping, uint8_t subIndexToMapping)
{
 8010d30:	b580      	push	{r7, lr}
 8010d32:	b086      	sub	sp, #24
 8010d34:	af02      	add	r7, sp, #8
 8010d36:	60f8      	str	r0, [r7, #12]
 8010d38:	607b      	str	r3, [r7, #4]
 8010d3a:	460b      	mov	r3, r1
 8010d3c:	72fb      	strb	r3, [r7, #11]
 8010d3e:	4613      	mov	r3, r2
 8010d40:	72bb      	strb	r3, [r7, #10]
//	CO_NMT_sendCommand(__canopenNode->canOpenStack->NMT, CO_NMT_RESET_NODE, node_id);
//	HAL_Delay(1000);
//	CO_NMT_sendCommand(__canopenNode->canOpenStack->NMT, CO_NMT_ENTER_PRE_OPERATIONAL, node_id);
//	HAL_Delay(50);

	Disable_PDO(__canopenNode, node_id, NumberOfPDO);
 8010d42:	7aba      	ldrb	r2, [r7, #10]
 8010d44:	7afb      	ldrb	r3, [r7, #11]
 8010d46:	4619      	mov	r1, r3
 8010d48:	68f8      	ldr	r0, [r7, #12]
 8010d4a:	f7ff fea5 	bl	8010a98 <Disable_PDO>
	set_COB_ID(__canopenNode, node_id, NumberOfPDO);
 8010d4e:	7aba      	ldrb	r2, [r7, #10]
 8010d50:	7afb      	ldrb	r3, [r7, #11]
 8010d52:	4619      	mov	r1, r3
 8010d54:	68f8      	ldr	r0, [r7, #12]
 8010d56:	f7ff fecb 	bl	8010af0 <set_COB_ID>
	set_transmission_type(__canopenNode, node_id, NumberOfPDO);
 8010d5a:	7aba      	ldrb	r2, [r7, #10]
 8010d5c:	7afb      	ldrb	r3, [r7, #11]
 8010d5e:	4619      	mov	r1, r3
 8010d60:	68f8      	ldr	r0, [r7, #12]
 8010d62:	f7ff fef9 	bl	8010b58 <set_transmission_type>
	deactivating_mapping(__canopenNode, node_id, NumberOfPDO);
 8010d66:	7aba      	ldrb	r2, [r7, #10]
 8010d68:	7afb      	ldrb	r3, [r7, #11]
 8010d6a:	4619      	mov	r1, r3
 8010d6c:	68f8      	ldr	r0, [r7, #12]
 8010d6e:	f7ff ff1f 	bl	8010bb0 <deactivating_mapping>
	mapping_object(__canopenNode, node_id, NumberOfPDO, ObjectToMapping, subIndexToMapping);
 8010d72:	7aba      	ldrb	r2, [r7, #10]
 8010d74:	7af9      	ldrb	r1, [r7, #11]
 8010d76:	7e3b      	ldrb	r3, [r7, #24]
 8010d78:	9300      	str	r3, [sp, #0]
 8010d7a:	687b      	ldr	r3, [r7, #4]
 8010d7c:	68f8      	ldr	r0, [r7, #12]
 8010d7e:	f7ff ff43 	bl	8010c08 <mapping_object>
	Active_mapping(__canopenNode, node_id, NumberOfPDO);
 8010d82:	7aba      	ldrb	r2, [r7, #10]
 8010d84:	7afb      	ldrb	r3, [r7, #11]
 8010d86:	4619      	mov	r1, r3
 8010d88:	68f8      	ldr	r0, [r7, #12]
 8010d8a:	f7ff ff71 	bl	8010c70 <Active_mapping>
	Enable_PDO(__canopenNode, node_id, NumberOfPDO);
 8010d8e:	7aba      	ldrb	r2, [r7, #10]
 8010d90:	7afb      	ldrb	r3, [r7, #11]
 8010d92:	4619      	mov	r1, r3
 8010d94:	68f8      	ldr	r0, [r7, #12]
 8010d96:	f7ff ff97 	bl	8010cc8 <Enable_PDO>

//	CO_NMT_sendCommand(__canopenNode->canOpenStack->NMT, CO_NMT_ENTER_OPERATIONAL, node_id);
//	HAL_Delay(50);
}
 8010d9a:	bf00      	nop
 8010d9c:	3710      	adds	r7, #16
 8010d9e:	46bd      	mov	sp, r7
 8010da0:	bd80      	pop	{r7, pc}
	...

08010da4 <CO_mapping_user>:

void CO_mapping_user(CANopenNodeSTM32* canopenNode)
{
 8010da4:	b580      	push	{r7, lr}
 8010da6:	b084      	sub	sp, #16
 8010da8:	af02      	add	r7, sp, #8
 8010daa:	6078      	str	r0, [r7, #4]
	CO_NMT_sendCommand(canopenNode->canOpenStack->NMT, CO_NMT_RESET_NODE, 1);
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	695b      	ldr	r3, [r3, #20]
 8010db0:	691b      	ldr	r3, [r3, #16]
 8010db2:	2201      	movs	r2, #1
 8010db4:	2181      	movs	r1, #129	; 0x81
 8010db6:	4618      	mov	r0, r3
 8010db8:	f7f0 fc90 	bl	80016dc <CO_NMT_sendCommand>
	HAL_Delay(1000);
 8010dbc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010dc0:	f7f8 f92a 	bl	8009018 <HAL_Delay>
	CO_NMT_sendCommand(canopenNode->canOpenStack->NMT, CO_NMT_RESET_NODE, 2);
 8010dc4:	687b      	ldr	r3, [r7, #4]
 8010dc6:	695b      	ldr	r3, [r3, #20]
 8010dc8:	691b      	ldr	r3, [r3, #16]
 8010dca:	2202      	movs	r2, #2
 8010dcc:	2181      	movs	r1, #129	; 0x81
 8010dce:	4618      	mov	r0, r3
 8010dd0:	f7f0 fc84 	bl	80016dc <CO_NMT_sendCommand>
	HAL_Delay(1000);
 8010dd4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8010dd8:	f7f8 f91e 	bl	8009018 <HAL_Delay>
	CO_NMT_sendCommand(canopenNode->canOpenStack->NMT, CO_NMT_ENTER_PRE_OPERATIONAL, 1);
 8010ddc:	687b      	ldr	r3, [r7, #4]
 8010dde:	695b      	ldr	r3, [r3, #20]
 8010de0:	691b      	ldr	r3, [r3, #16]
 8010de2:	2201      	movs	r2, #1
 8010de4:	2180      	movs	r1, #128	; 0x80
 8010de6:	4618      	mov	r0, r3
 8010de8:	f7f0 fc78 	bl	80016dc <CO_NMT_sendCommand>
	HAL_Delay(50);
 8010dec:	2032      	movs	r0, #50	; 0x32
 8010dee:	f7f8 f913 	bl	8009018 <HAL_Delay>
	CO_NMT_sendCommand(canopenNode->canOpenStack->NMT, CO_NMT_ENTER_PRE_OPERATIONAL, 2);
 8010df2:	687b      	ldr	r3, [r7, #4]
 8010df4:	695b      	ldr	r3, [r3, #20]
 8010df6:	691b      	ldr	r3, [r3, #16]
 8010df8:	2202      	movs	r2, #2
 8010dfa:	2180      	movs	r1, #128	; 0x80
 8010dfc:	4618      	mov	r0, r3
 8010dfe:	f7f0 fc6d 	bl	80016dc <CO_NMT_sendCommand>
	HAL_Delay(50);
 8010e02:	2032      	movs	r0, #50	; 0x32
 8010e04:	f7f8 f908 	bl	8009018 <HAL_Delay>

	// Active RPDO_1
	PDO_mapping(canopenNode, 1, 1, 0x60400010, 0x01);
 8010e08:	2301      	movs	r3, #1
 8010e0a:	9300      	str	r3, [sp, #0]
 8010e0c:	4b1b      	ldr	r3, [pc, #108]	; (8010e7c <CO_mapping_user+0xd8>)
 8010e0e:	2201      	movs	r2, #1
 8010e10:	2101      	movs	r1, #1
 8010e12:	6878      	ldr	r0, [r7, #4]
 8010e14:	f7ff ff8c 	bl	8010d30 <PDO_mapping>
	PDO_mapping(canopenNode, 2, 1, 0x60400010, 0x01);
 8010e18:	2301      	movs	r3, #1
 8010e1a:	9300      	str	r3, [sp, #0]
 8010e1c:	4b17      	ldr	r3, [pc, #92]	; (8010e7c <CO_mapping_user+0xd8>)
 8010e1e:	2201      	movs	r2, #1
 8010e20:	2102      	movs	r1, #2
 8010e22:	6878      	ldr	r0, [r7, #4]
 8010e24:	f7ff ff84 	bl	8010d30 <PDO_mapping>
	// Active RPDO_2
	PDO_mapping(canopenNode, 1, 2, 0x607A0020, 0x01);
 8010e28:	2301      	movs	r3, #1
 8010e2a:	9300      	str	r3, [sp, #0]
 8010e2c:	4b14      	ldr	r3, [pc, #80]	; (8010e80 <CO_mapping_user+0xdc>)
 8010e2e:	2202      	movs	r2, #2
 8010e30:	2101      	movs	r1, #1
 8010e32:	6878      	ldr	r0, [r7, #4]
 8010e34:	f7ff ff7c 	bl	8010d30 <PDO_mapping>
	PDO_mapping(canopenNode, 2, 2, 0x607A0020, 0x01);
 8010e38:	2301      	movs	r3, #1
 8010e3a:	9300      	str	r3, [sp, #0]
 8010e3c:	4b10      	ldr	r3, [pc, #64]	; (8010e80 <CO_mapping_user+0xdc>)
 8010e3e:	2202      	movs	r2, #2
 8010e40:	2102      	movs	r1, #2
 8010e42:	6878      	ldr	r0, [r7, #4]
 8010e44:	f7ff ff74 	bl	8010d30 <PDO_mapping>

	CO_NMT_sendCommand(canopenNode->canOpenStack->NMT, CO_NMT_ENTER_OPERATIONAL, 1);
 8010e48:	687b      	ldr	r3, [r7, #4]
 8010e4a:	695b      	ldr	r3, [r3, #20]
 8010e4c:	691b      	ldr	r3, [r3, #16]
 8010e4e:	2201      	movs	r2, #1
 8010e50:	2101      	movs	r1, #1
 8010e52:	4618      	mov	r0, r3
 8010e54:	f7f0 fc42 	bl	80016dc <CO_NMT_sendCommand>
	HAL_Delay(50);
 8010e58:	2032      	movs	r0, #50	; 0x32
 8010e5a:	f7f8 f8dd 	bl	8009018 <HAL_Delay>
	CO_NMT_sendCommand(canopenNode->canOpenStack->NMT, CO_NMT_ENTER_OPERATIONAL, 2);
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	695b      	ldr	r3, [r3, #20]
 8010e62:	691b      	ldr	r3, [r3, #16]
 8010e64:	2202      	movs	r2, #2
 8010e66:	2101      	movs	r1, #1
 8010e68:	4618      	mov	r0, r3
 8010e6a:	f7f0 fc37 	bl	80016dc <CO_NMT_sendCommand>
	HAL_Delay(50);
 8010e6e:	2032      	movs	r0, #50	; 0x32
 8010e70:	f7f8 f8d2 	bl	8009018 <HAL_Delay>
}
 8010e74:	bf00      	nop
 8010e76:	3708      	adds	r7, #8
 8010e78:	46bd      	mov	sp, r7
 8010e7a:	bd80      	pop	{r7, pc}
 8010e7c:	60400010 	.word	0x60400010
 8010e80:	607a0020 	.word	0x607a0020

08010e84 <SDO_ProfileVelocity>:

void SDO_ProfileVelocity(CANopenNodeSTM32* ____canopenNode, uint8_t ____node_id, uint32_t Velocity)
{
 8010e84:	b580      	push	{r7, lr}
 8010e86:	b086      	sub	sp, #24
 8010e88:	af02      	add	r7, sp, #8
 8010e8a:	60f8      	str	r0, [r7, #12]
 8010e8c:	460b      	mov	r3, r1
 8010e8e:	607a      	str	r2, [r7, #4]
 8010e90:	72fb      	strb	r3, [r7, #11]
	data[0] = Velocity			& 0xFFU;
 8010e92:	687b      	ldr	r3, [r7, #4]
 8010e94:	b2da      	uxtb	r2, r3
 8010e96:	4b11      	ldr	r3, [pc, #68]	; (8010edc <SDO_ProfileVelocity+0x58>)
 8010e98:	701a      	strb	r2, [r3, #0]
	data[1] = (Velocity>>8)	& 0xFFU;
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	0a1b      	lsrs	r3, r3, #8
 8010e9e:	b2da      	uxtb	r2, r3
 8010ea0:	4b0e      	ldr	r3, [pc, #56]	; (8010edc <SDO_ProfileVelocity+0x58>)
 8010ea2:	705a      	strb	r2, [r3, #1]
	data[2] = (Velocity>>16)	& 0xFFU;
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	0c1b      	lsrs	r3, r3, #16
 8010ea8:	b2da      	uxtb	r2, r3
 8010eaa:	4b0c      	ldr	r3, [pc, #48]	; (8010edc <SDO_ProfileVelocity+0x58>)
 8010eac:	709a      	strb	r2, [r3, #2]
	data[3] = (Velocity>>24)	& 0xFFU;
 8010eae:	687b      	ldr	r3, [r7, #4]
 8010eb0:	0e1b      	lsrs	r3, r3, #24
 8010eb2:	b2da      	uxtb	r2, r3
 8010eb4:	4b09      	ldr	r3, [pc, #36]	; (8010edc <SDO_ProfileVelocity+0x58>)
 8010eb6:	70da      	strb	r2, [r3, #3]
	write_SDO(____canopenNode->canOpenStack->SDOclient, ____node_id, 0x6081, 0x00, data, 4);
 8010eb8:	68fb      	ldr	r3, [r7, #12]
 8010eba:	695b      	ldr	r3, [r3, #20]
 8010ebc:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8010ebe:	7af9      	ldrb	r1, [r7, #11]
 8010ec0:	2304      	movs	r3, #4
 8010ec2:	9301      	str	r3, [sp, #4]
 8010ec4:	4b05      	ldr	r3, [pc, #20]	; (8010edc <SDO_ProfileVelocity+0x58>)
 8010ec6:	9300      	str	r3, [sp, #0]
 8010ec8:	2300      	movs	r3, #0
 8010eca:	f246 0281 	movw	r2, #24705	; 0x6081
 8010ece:	f7ff fcc2 	bl	8010856 <write_SDO>
}
 8010ed2:	bf00      	nop
 8010ed4:	3710      	adds	r7, #16
 8010ed6:	46bd      	mov	sp, r7
 8010ed8:	bd80      	pop	{r7, pc}
 8010eda:	bf00      	nop
 8010edc:	24000734 	.word	0x24000734

08010ee0 <SDO_EndVelocity>:
void SDO_EndVelocity(CANopenNodeSTM32* ____canopenNode, uint8_t ____node_id, uint32_t EndVelocity)
{
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	b086      	sub	sp, #24
 8010ee4:	af02      	add	r7, sp, #8
 8010ee6:	60f8      	str	r0, [r7, #12]
 8010ee8:	460b      	mov	r3, r1
 8010eea:	607a      	str	r2, [r7, #4]
 8010eec:	72fb      	strb	r3, [r7, #11]
	data[0] = EndVelocity			& 0xFFU;
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	b2da      	uxtb	r2, r3
 8010ef2:	4b11      	ldr	r3, [pc, #68]	; (8010f38 <SDO_EndVelocity+0x58>)
 8010ef4:	701a      	strb	r2, [r3, #0]
	data[1] = (EndVelocity>>8)	& 0xFFU;
 8010ef6:	687b      	ldr	r3, [r7, #4]
 8010ef8:	0a1b      	lsrs	r3, r3, #8
 8010efa:	b2da      	uxtb	r2, r3
 8010efc:	4b0e      	ldr	r3, [pc, #56]	; (8010f38 <SDO_EndVelocity+0x58>)
 8010efe:	705a      	strb	r2, [r3, #1]
	data[2] = (EndVelocity>>16)	& 0xFFU;
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	0c1b      	lsrs	r3, r3, #16
 8010f04:	b2da      	uxtb	r2, r3
 8010f06:	4b0c      	ldr	r3, [pc, #48]	; (8010f38 <SDO_EndVelocity+0x58>)
 8010f08:	709a      	strb	r2, [r3, #2]
	data[3] = (EndVelocity>>24)	& 0xFFU;
 8010f0a:	687b      	ldr	r3, [r7, #4]
 8010f0c:	0e1b      	lsrs	r3, r3, #24
 8010f0e:	b2da      	uxtb	r2, r3
 8010f10:	4b09      	ldr	r3, [pc, #36]	; (8010f38 <SDO_EndVelocity+0x58>)
 8010f12:	70da      	strb	r2, [r3, #3]
	write_SDO(____canopenNode->canOpenStack->SDOclient, ____node_id, 0x6082, 0x00, data, 4);
 8010f14:	68fb      	ldr	r3, [r7, #12]
 8010f16:	695b      	ldr	r3, [r3, #20]
 8010f18:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8010f1a:	7af9      	ldrb	r1, [r7, #11]
 8010f1c:	2304      	movs	r3, #4
 8010f1e:	9301      	str	r3, [sp, #4]
 8010f20:	4b05      	ldr	r3, [pc, #20]	; (8010f38 <SDO_EndVelocity+0x58>)
 8010f22:	9300      	str	r3, [sp, #0]
 8010f24:	2300      	movs	r3, #0
 8010f26:	f246 0282 	movw	r2, #24706	; 0x6082
 8010f2a:	f7ff fc94 	bl	8010856 <write_SDO>
}
 8010f2e:	bf00      	nop
 8010f30:	3710      	adds	r7, #16
 8010f32:	46bd      	mov	sp, r7
 8010f34:	bd80      	pop	{r7, pc}
 8010f36:	bf00      	nop
 8010f38:	24000734 	.word	0x24000734

08010f3c <SDO_ProfileAcceleration>:
void SDO_ProfileAcceleration(CANopenNodeSTM32* ____canopenNode, uint8_t ____node_id, uint32_t Acceleration)
{
 8010f3c:	b580      	push	{r7, lr}
 8010f3e:	b086      	sub	sp, #24
 8010f40:	af02      	add	r7, sp, #8
 8010f42:	60f8      	str	r0, [r7, #12]
 8010f44:	460b      	mov	r3, r1
 8010f46:	607a      	str	r2, [r7, #4]
 8010f48:	72fb      	strb	r3, [r7, #11]
	data[0] = Acceleration			& 0xFFU;
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	b2da      	uxtb	r2, r3
 8010f4e:	4b11      	ldr	r3, [pc, #68]	; (8010f94 <SDO_ProfileAcceleration+0x58>)
 8010f50:	701a      	strb	r2, [r3, #0]
	data[1] = (Acceleration>>8)	& 0xFFU;
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	0a1b      	lsrs	r3, r3, #8
 8010f56:	b2da      	uxtb	r2, r3
 8010f58:	4b0e      	ldr	r3, [pc, #56]	; (8010f94 <SDO_ProfileAcceleration+0x58>)
 8010f5a:	705a      	strb	r2, [r3, #1]
	data[2] = (Acceleration>>16)	& 0xFFU;
 8010f5c:	687b      	ldr	r3, [r7, #4]
 8010f5e:	0c1b      	lsrs	r3, r3, #16
 8010f60:	b2da      	uxtb	r2, r3
 8010f62:	4b0c      	ldr	r3, [pc, #48]	; (8010f94 <SDO_ProfileAcceleration+0x58>)
 8010f64:	709a      	strb	r2, [r3, #2]
	data[3] = (Acceleration>>24)	& 0xFFU;
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	0e1b      	lsrs	r3, r3, #24
 8010f6a:	b2da      	uxtb	r2, r3
 8010f6c:	4b09      	ldr	r3, [pc, #36]	; (8010f94 <SDO_ProfileAcceleration+0x58>)
 8010f6e:	70da      	strb	r2, [r3, #3]
	write_SDO(____canopenNode->canOpenStack->SDOclient, ____node_id, 0x6083, 0x00, data, 4);
 8010f70:	68fb      	ldr	r3, [r7, #12]
 8010f72:	695b      	ldr	r3, [r3, #20]
 8010f74:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8010f76:	7af9      	ldrb	r1, [r7, #11]
 8010f78:	2304      	movs	r3, #4
 8010f7a:	9301      	str	r3, [sp, #4]
 8010f7c:	4b05      	ldr	r3, [pc, #20]	; (8010f94 <SDO_ProfileAcceleration+0x58>)
 8010f7e:	9300      	str	r3, [sp, #0]
 8010f80:	2300      	movs	r3, #0
 8010f82:	f246 0283 	movw	r2, #24707	; 0x6083
 8010f86:	f7ff fc66 	bl	8010856 <write_SDO>
}
 8010f8a:	bf00      	nop
 8010f8c:	3710      	adds	r7, #16
 8010f8e:	46bd      	mov	sp, r7
 8010f90:	bd80      	pop	{r7, pc}
 8010f92:	bf00      	nop
 8010f94:	24000734 	.word	0x24000734

08010f98 <SDO_ProfileDeceleration>:
void SDO_ProfileDeceleration(CANopenNodeSTM32* ____canopenNode, uint8_t ____node_id, uint32_t Deceleration)
{
 8010f98:	b580      	push	{r7, lr}
 8010f9a:	b086      	sub	sp, #24
 8010f9c:	af02      	add	r7, sp, #8
 8010f9e:	60f8      	str	r0, [r7, #12]
 8010fa0:	460b      	mov	r3, r1
 8010fa2:	607a      	str	r2, [r7, #4]
 8010fa4:	72fb      	strb	r3, [r7, #11]
	data[0] = Deceleration			& 0xFFU;
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	b2da      	uxtb	r2, r3
 8010faa:	4b11      	ldr	r3, [pc, #68]	; (8010ff0 <SDO_ProfileDeceleration+0x58>)
 8010fac:	701a      	strb	r2, [r3, #0]
	data[1] = (Deceleration>>8)	& 0xFFU;
 8010fae:	687b      	ldr	r3, [r7, #4]
 8010fb0:	0a1b      	lsrs	r3, r3, #8
 8010fb2:	b2da      	uxtb	r2, r3
 8010fb4:	4b0e      	ldr	r3, [pc, #56]	; (8010ff0 <SDO_ProfileDeceleration+0x58>)
 8010fb6:	705a      	strb	r2, [r3, #1]
	data[2] = (Deceleration>>16)	& 0xFFU;
 8010fb8:	687b      	ldr	r3, [r7, #4]
 8010fba:	0c1b      	lsrs	r3, r3, #16
 8010fbc:	b2da      	uxtb	r2, r3
 8010fbe:	4b0c      	ldr	r3, [pc, #48]	; (8010ff0 <SDO_ProfileDeceleration+0x58>)
 8010fc0:	709a      	strb	r2, [r3, #2]
	data[3] = (Deceleration>>24)	& 0xFFU;
 8010fc2:	687b      	ldr	r3, [r7, #4]
 8010fc4:	0e1b      	lsrs	r3, r3, #24
 8010fc6:	b2da      	uxtb	r2, r3
 8010fc8:	4b09      	ldr	r3, [pc, #36]	; (8010ff0 <SDO_ProfileDeceleration+0x58>)
 8010fca:	70da      	strb	r2, [r3, #3]
	write_SDO(____canopenNode->canOpenStack->SDOclient, ____node_id, 0x6084, 0x00, data, 4);
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	695b      	ldr	r3, [r3, #20]
 8010fd0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8010fd2:	7af9      	ldrb	r1, [r7, #11]
 8010fd4:	2304      	movs	r3, #4
 8010fd6:	9301      	str	r3, [sp, #4]
 8010fd8:	4b05      	ldr	r3, [pc, #20]	; (8010ff0 <SDO_ProfileDeceleration+0x58>)
 8010fda:	9300      	str	r3, [sp, #0]
 8010fdc:	2300      	movs	r3, #0
 8010fde:	f246 0284 	movw	r2, #24708	; 0x6084
 8010fe2:	f7ff fc38 	bl	8010856 <write_SDO>
}
 8010fe6:	bf00      	nop
 8010fe8:	3710      	adds	r7, #16
 8010fea:	46bd      	mov	sp, r7
 8010fec:	bd80      	pop	{r7, pc}
 8010fee:	bf00      	nop
 8010ff0:	24000734 	.word	0x24000734

08010ff4 <SDO_Position>:
void SDO_Position(CANopenNodeSTM32* __canopenNode, uint8_t __node_id)
{
 8010ff4:	b580      	push	{r7, lr}
 8010ff6:	b082      	sub	sp, #8
 8010ff8:	af00      	add	r7, sp, #0
 8010ffa:	6078      	str	r0, [r7, #4]
 8010ffc:	460b      	mov	r3, r1
 8010ffe:	70fb      	strb	r3, [r7, #3]
	SDO_ProfileVelocity(__canopenNode,  __node_id,  0xC350);
 8011000:	78fb      	ldrb	r3, [r7, #3]
 8011002:	f24c 3250 	movw	r2, #50000	; 0xc350
 8011006:	4619      	mov	r1, r3
 8011008:	6878      	ldr	r0, [r7, #4]
 801100a:	f7ff ff3b 	bl	8010e84 <SDO_ProfileVelocity>
	SDO_EndVelocity(__canopenNode,  __node_id,  0x00);
 801100e:	78fb      	ldrb	r3, [r7, #3]
 8011010:	2200      	movs	r2, #0
 8011012:	4619      	mov	r1, r3
 8011014:	6878      	ldr	r0, [r7, #4]
 8011016:	f7ff ff63 	bl	8010ee0 <SDO_EndVelocity>
	SDO_ProfileAcceleration(__canopenNode,  __node_id,  0x61A8);
 801101a:	78fb      	ldrb	r3, [r7, #3]
 801101c:	f246 12a8 	movw	r2, #25000	; 0x61a8
 8011020:	4619      	mov	r1, r3
 8011022:	6878      	ldr	r0, [r7, #4]
 8011024:	f7ff ff8a 	bl	8010f3c <SDO_ProfileAcceleration>
	SDO_ProfileDeceleration(__canopenNode,  __node_id,  0x30D4);
 8011028:	78fb      	ldrb	r3, [r7, #3]
 801102a:	f243 02d4 	movw	r2, #12500	; 0x30d4
 801102e:	4619      	mov	r1, r3
 8011030:	6878      	ldr	r0, [r7, #4]
 8011032:	f7ff ffb1 	bl	8010f98 <SDO_ProfileDeceleration>
}
 8011036:	bf00      	nop
 8011038:	3708      	adds	r7, #8
 801103a:	46bd      	mov	sp, r7
 801103c:	bd80      	pop	{r7, pc}
	...

08011040 <SDOmode>:
uint8_t SDOmode(CANopenNodeSTM32* __canopenNode, uint8_t __node_id, OPERATION_MODE mode)
{
 8011040:	b580      	push	{r7, lr}
 8011042:	b084      	sub	sp, #16
 8011044:	af02      	add	r7, sp, #8
 8011046:	6078      	str	r0, [r7, #4]
 8011048:	460b      	mov	r3, r1
 801104a:	70fb      	strb	r3, [r7, #3]
 801104c:	4613      	mov	r3, r2
 801104e:	70bb      	strb	r3, [r7, #2]
	data[0] = mode	& 0xFFU;
 8011050:	4a0e      	ldr	r2, [pc, #56]	; (801108c <SDOmode+0x4c>)
 8011052:	78bb      	ldrb	r3, [r7, #2]
 8011054:	7013      	strb	r3, [r2, #0]
	data[1] = 0x00;
 8011056:	4b0d      	ldr	r3, [pc, #52]	; (801108c <SDOmode+0x4c>)
 8011058:	2200      	movs	r2, #0
 801105a:	705a      	strb	r2, [r3, #1]
	data[2] = 0x00;
 801105c:	4b0b      	ldr	r3, [pc, #44]	; (801108c <SDOmode+0x4c>)
 801105e:	2200      	movs	r2, #0
 8011060:	709a      	strb	r2, [r3, #2]
	data[3] = 0x00;
 8011062:	4b0a      	ldr	r3, [pc, #40]	; (801108c <SDOmode+0x4c>)
 8011064:	2200      	movs	r2, #0
 8011066:	70da      	strb	r2, [r3, #3]
	write_SDO(__canopenNode->canOpenStack->SDOclient, __node_id, 0x6060, 0x00, data, 1);
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	695b      	ldr	r3, [r3, #20]
 801106c:	6a98      	ldr	r0, [r3, #40]	; 0x28
 801106e:	78f9      	ldrb	r1, [r7, #3]
 8011070:	2301      	movs	r3, #1
 8011072:	9301      	str	r3, [sp, #4]
 8011074:	4b05      	ldr	r3, [pc, #20]	; (801108c <SDOmode+0x4c>)
 8011076:	9300      	str	r3, [sp, #0]
 8011078:	2300      	movs	r3, #0
 801107a:	f246 0260 	movw	r2, #24672	; 0x6060
 801107e:	f7ff fbea 	bl	8010856 <write_SDO>
	return mode;
 8011082:	78bb      	ldrb	r3, [r7, #2]
}
 8011084:	4618      	mov	r0, r3
 8011086:	3708      	adds	r7, #8
 8011088:	46bd      	mov	sp, r7
 801108a:	bd80      	pop	{r7, pc}
 801108c:	24000734 	.word	0x24000734

08011090 <SDO_SetParam>:
void SDO_SetParam(CANopenNodeSTM32* canopenNode, uint8_t node_id, OPERATION_MODE mode)
{
 8011090:	b580      	push	{r7, lr}
 8011092:	b082      	sub	sp, #8
 8011094:	af00      	add	r7, sp, #0
 8011096:	6078      	str	r0, [r7, #4]
 8011098:	460b      	mov	r3, r1
 801109a:	70fb      	strb	r3, [r7, #3]
 801109c:	4613      	mov	r3, r2
 801109e:	70bb      	strb	r3, [r7, #2]
	SDOmode(canopenNode, node_id, mode);
 80110a0:	78ba      	ldrb	r2, [r7, #2]
 80110a2:	78fb      	ldrb	r3, [r7, #3]
 80110a4:	4619      	mov	r1, r3
 80110a6:	6878      	ldr	r0, [r7, #4]
 80110a8:	f7ff ffca 	bl	8011040 <SDOmode>
	switch(mode){
 80110ac:	78bb      	ldrb	r3, [r7, #2]
 80110ae:	2b04      	cmp	r3, #4
 80110b0:	d00c      	beq.n	80110cc <SDO_SetParam+0x3c>
 80110b2:	2b04      	cmp	r3, #4
 80110b4:	dc0c      	bgt.n	80110d0 <SDO_SetParam+0x40>
 80110b6:	2b01      	cmp	r3, #1
 80110b8:	d002      	beq.n	80110c0 <SDO_SetParam+0x30>
 80110ba:	2b03      	cmp	r3, #3
 80110bc:	d00a      	beq.n	80110d4 <SDO_SetParam+0x44>
	case PROFILE_TORQUE_MODE:
	{
		break;
	}
	default:
		break;
 80110be:	e007      	b.n	80110d0 <SDO_SetParam+0x40>
		SDO_Position(canopenNode, node_id);
 80110c0:	78fb      	ldrb	r3, [r7, #3]
 80110c2:	4619      	mov	r1, r3
 80110c4:	6878      	ldr	r0, [r7, #4]
 80110c6:	f7ff ff95 	bl	8010ff4 <SDO_Position>
		break;
 80110ca:	e004      	b.n	80110d6 <SDO_SetParam+0x46>
		break;
 80110cc:	bf00      	nop
 80110ce:	e002      	b.n	80110d6 <SDO_SetParam+0x46>
		break;
 80110d0:	bf00      	nop
 80110d2:	e000      	b.n	80110d6 <SDO_SetParam+0x46>
		break;
 80110d4:	bf00      	nop
	}
}
 80110d6:	bf00      	nop
 80110d8:	3708      	adds	r7, #8
 80110da:	46bd      	mov	sp, r7
 80110dc:	bd80      	pop	{r7, pc}

080110de <SDO_user_read>:




uint32_t SDO_user_read(CANopenNodeSTM32* canopenNode, uint8_t node_id, uint16_t index, uint8_t subIndex)
{
 80110de:	b590      	push	{r4, r7, lr}
 80110e0:	b089      	sub	sp, #36	; 0x24
 80110e2:	af04      	add	r7, sp, #16
 80110e4:	6078      	str	r0, [r7, #4]
 80110e6:	4608      	mov	r0, r1
 80110e8:	4611      	mov	r1, r2
 80110ea:	461a      	mov	r2, r3
 80110ec:	4603      	mov	r3, r0
 80110ee:	70fb      	strb	r3, [r7, #3]
 80110f0:	460b      	mov	r3, r1
 80110f2:	803b      	strh	r3, [r7, #0]
 80110f4:	4613      	mov	r3, r2
 80110f6:	70bb      	strb	r3, [r7, #2]
	uint8_t dataread = 0x00;
 80110f8:	2300      	movs	r3, #0
 80110fa:	73fb      	strb	r3, [r7, #15]
	size_t actual_size_data = 0;
 80110fc:	2300      	movs	r3, #0
 80110fe:	60bb      	str	r3, [r7, #8]
	read_SDO(canopenNode->canOpenStack->SDOclient, node_id, index, subIndex, &dataread, 4, &actual_size_data);
 8011100:	687b      	ldr	r3, [r7, #4]
 8011102:	695b      	ldr	r3, [r3, #20]
 8011104:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8011106:	78bc      	ldrb	r4, [r7, #2]
 8011108:	883a      	ldrh	r2, [r7, #0]
 801110a:	78f9      	ldrb	r1, [r7, #3]
 801110c:	f107 0308 	add.w	r3, r7, #8
 8011110:	9302      	str	r3, [sp, #8]
 8011112:	2304      	movs	r3, #4
 8011114:	9301      	str	r3, [sp, #4]
 8011116:	f107 030f 	add.w	r3, r7, #15
 801111a:	9300      	str	r3, [sp, #0]
 801111c:	4623      	mov	r3, r4
 801111e:	f7ff fb38 	bl	8010792 <read_SDO>
	return dataread;
 8011122:	7bfb      	ldrb	r3, [r7, #15]
}
 8011124:	4618      	mov	r0, r3
 8011126:	3714      	adds	r7, #20
 8011128:	46bd      	mov	sp, r7
 801112a:	bd90      	pop	{r4, r7, pc}

0801112c <find_command_info>:

extern const	cli_command_entry_t command_entry_table[];
CANopenNodeSTM32 *canopenNode;
//	/*1
const cli_command_info_t* find_command_info(char *cmd)
{
 801112c:	b580      	push	{r7, lr}
 801112e:	b084      	sub	sp, #16
 8011130:	af00      	add	r7, sp, #0
 8011132:	6078      	str	r0, [r7, #4]
	const cli_command_entry_t *command_entry = command_entry_table;
 8011134:	4b0d      	ldr	r3, [pc, #52]	; (801116c <find_command_info+0x40>)
 8011136:	60fb      	str	r3, [r7, #12]
	while(command_entry -> command_info != NULL)
 8011138:	e00e      	b.n	8011158 <find_command_info+0x2c>
	{
		if(strcmp(command_entry ->name, cmd) == 0)
 801113a:	68fb      	ldr	r3, [r7, #12]
 801113c:	681b      	ldr	r3, [r3, #0]
 801113e:	6879      	ldr	r1, [r7, #4]
 8011140:	4618      	mov	r0, r3
 8011142:	f7ef f8cd 	bl	80002e0 <strcmp>
 8011146:	4603      	mov	r3, r0
 8011148:	2b00      	cmp	r3, #0
 801114a:	d102      	bne.n	8011152 <find_command_info+0x26>
		{
			return command_entry -> command_info;
 801114c:	68fb      	ldr	r3, [r7, #12]
 801114e:	685b      	ldr	r3, [r3, #4]
 8011150:	e007      	b.n	8011162 <find_command_info+0x36>
		}
		command_entry++;
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	3308      	adds	r3, #8
 8011156:	60fb      	str	r3, [r7, #12]
	while(command_entry -> command_info != NULL)
 8011158:	68fb      	ldr	r3, [r7, #12]
 801115a:	685b      	ldr	r3, [r3, #4]
 801115c:	2b00      	cmp	r3, #0
 801115e:	d1ec      	bne.n	801113a <find_command_info+0xe>
	}
	return NULL;
 8011160:	2300      	movs	r3, #0
}
 8011162:	4618      	mov	r0, r3
 8011164:	3710      	adds	r7, #16
 8011166:	46bd      	mov	sp, r7
 8011168:	bd80      	pop	{r7, pc}
 801116a:	bf00      	nop
 801116c:	08015e14 	.word	0x08015e14

08011170 <cli_command_excute>:
//	}
//	return NULL;
//}

void cli_command_excute(char *uart_buff, uint8_t len)
{
 8011170:	b580      	push	{r7, lr}
 8011172:	b090      	sub	sp, #64	; 0x40
 8011174:	af00      	add	r7, sp, #0
 8011176:	6078      	str	r0, [r7, #4]
 8011178:	460b      	mov	r3, r1
 801117a:	70fb      	strb	r3, [r7, #3]
	char *argv[10];				
	uint8_t argv_num = 0;
 801117c:	2300      	movs	r3, #0
 801117e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	char *pch;
	pch = strtok(uart_buff," ");
 8011182:	4918      	ldr	r1, [pc, #96]	; (80111e4 <cli_command_excute+0x74>)
 8011184:	6878      	ldr	r0, [r7, #4]
 8011186:	f003 f983 	bl	8014490 <strtok>
 801118a:	63b8      	str	r0, [r7, #56]	; 0x38
	while(pch != NULL)
 801118c:	e00f      	b.n	80111ae <cli_command_excute+0x3e>
	{		
		argv[argv_num++] = pch;
 801118e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8011192:	1c5a      	adds	r2, r3, #1
 8011194:	f887 203f 	strb.w	r2, [r7, #63]	; 0x3f
 8011198:	009b      	lsls	r3, r3, #2
 801119a:	3340      	adds	r3, #64	; 0x40
 801119c:	443b      	add	r3, r7
 801119e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80111a0:	f843 2c34 	str.w	r2, [r3, #-52]
		pch = strtok (NULL, " "); 
 80111a4:	490f      	ldr	r1, [pc, #60]	; (80111e4 <cli_command_excute+0x74>)
 80111a6:	2000      	movs	r0, #0
 80111a8:	f003 f972 	bl	8014490 <strtok>
 80111ac:	63b8      	str	r0, [r7, #56]	; 0x38
	while(pch != NULL)
 80111ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	d1ec      	bne.n	801118e <cli_command_excute+0x1e>
	}
	// /*	1
//	const cli_command_entry_t *command_entry_help = command_entry_table;
	const cli_command_info_t* command_info = find_command_info(argv[0]);
 80111b4:	68fb      	ldr	r3, [r7, #12]
 80111b6:	4618      	mov	r0, r3
 80111b8:	f7ff ffb8 	bl	801112c <find_command_info>
 80111bc:	6378      	str	r0, [r7, #52]	; 0x34
	if(command_info != NULL)
 80111be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111c0:	2b00      	cmp	r3, #0
 80111c2:	d008      	beq.n	80111d6 <cli_command_excute+0x66>
	{
		command_info->function(argv,argv_num);
 80111c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80111c6:	681b      	ldr	r3, [r3, #0]
 80111c8:	f897 103f 	ldrb.w	r1, [r7, #63]	; 0x3f
 80111cc:	f107 020c 	add.w	r2, r7, #12
 80111d0:	4610      	mov	r0, r2
 80111d2:	4798      	blx	r3
	else
	{
		response_print("find not found command");
	}
	*/
}
 80111d4:	e002      	b.n	80111dc <cli_command_excute+0x6c>
		response_print("find not found command \n");
 80111d6:	4804      	ldr	r0, [pc, #16]	; (80111e8 <cli_command_excute+0x78>)
 80111d8:	f7ff fabc 	bl	8010754 <response_print>
}
 80111dc:	bf00      	nop
 80111de:	3740      	adds	r7, #64	; 0x40
 80111e0:	46bd      	mov	sp, r7
 80111e2:	bd80      	pop	{r7, pc}
 80111e4:	08015634 	.word	0x08015634
 80111e8:	08015638 	.word	0x08015638

080111ec <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80111ec:	b580      	push	{r7, lr}
 80111ee:	b084      	sub	sp, #16
 80111f0:	af00      	add	r7, sp, #0
 80111f2:	6078      	str	r0, [r7, #4]
 80111f4:	460b      	mov	r3, r1
 80111f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80111f8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80111fc:	f002 fce8 	bl	8013bd0 <USBD_static_malloc>
 8011200:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	2b00      	cmp	r3, #0
 8011206:	d109      	bne.n	801121c <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8011208:	687b      	ldr	r3, [r7, #4]
 801120a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801120e:	687b      	ldr	r3, [r7, #4]
 8011210:	32b0      	adds	r2, #176	; 0xb0
 8011212:	2100      	movs	r1, #0
 8011214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8011218:	2302      	movs	r3, #2
 801121a:	e0d4      	b.n	80113c6 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 801121c:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8011220:	2100      	movs	r1, #0
 8011222:	68f8      	ldr	r0, [r7, #12]
 8011224:	f002 ff54 	bl	80140d0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8011228:	687b      	ldr	r3, [r7, #4]
 801122a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801122e:	687b      	ldr	r3, [r7, #4]
 8011230:	32b0      	adds	r2, #176	; 0xb0
 8011232:	68f9      	ldr	r1, [r7, #12]
 8011234:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8011238:	687b      	ldr	r3, [r7, #4]
 801123a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801123e:	687b      	ldr	r3, [r7, #4]
 8011240:	32b0      	adds	r2, #176	; 0xb0
 8011242:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 801124c:	687b      	ldr	r3, [r7, #4]
 801124e:	7c1b      	ldrb	r3, [r3, #16]
 8011250:	2b00      	cmp	r3, #0
 8011252:	d138      	bne.n	80112c6 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8011254:	4b5e      	ldr	r3, [pc, #376]	; (80113d0 <USBD_CDC_Init+0x1e4>)
 8011256:	7819      	ldrb	r1, [r3, #0]
 8011258:	f44f 7300 	mov.w	r3, #512	; 0x200
 801125c:	2202      	movs	r2, #2
 801125e:	6878      	ldr	r0, [r7, #4]
 8011260:	f002 fb93 	bl	801398a <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8011264:	4b5a      	ldr	r3, [pc, #360]	; (80113d0 <USBD_CDC_Init+0x1e4>)
 8011266:	781b      	ldrb	r3, [r3, #0]
 8011268:	f003 020f 	and.w	r2, r3, #15
 801126c:	6879      	ldr	r1, [r7, #4]
 801126e:	4613      	mov	r3, r2
 8011270:	009b      	lsls	r3, r3, #2
 8011272:	4413      	add	r3, r2
 8011274:	009b      	lsls	r3, r3, #2
 8011276:	440b      	add	r3, r1
 8011278:	3324      	adds	r3, #36	; 0x24
 801127a:	2201      	movs	r2, #1
 801127c:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 801127e:	4b55      	ldr	r3, [pc, #340]	; (80113d4 <USBD_CDC_Init+0x1e8>)
 8011280:	7819      	ldrb	r1, [r3, #0]
 8011282:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011286:	2202      	movs	r2, #2
 8011288:	6878      	ldr	r0, [r7, #4]
 801128a:	f002 fb7e 	bl	801398a <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 801128e:	4b51      	ldr	r3, [pc, #324]	; (80113d4 <USBD_CDC_Init+0x1e8>)
 8011290:	781b      	ldrb	r3, [r3, #0]
 8011292:	f003 020f 	and.w	r2, r3, #15
 8011296:	6879      	ldr	r1, [r7, #4]
 8011298:	4613      	mov	r3, r2
 801129a:	009b      	lsls	r3, r3, #2
 801129c:	4413      	add	r3, r2
 801129e:	009b      	lsls	r3, r3, #2
 80112a0:	440b      	add	r3, r1
 80112a2:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80112a6:	2201      	movs	r2, #1
 80112a8:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80112aa:	4b4b      	ldr	r3, [pc, #300]	; (80113d8 <USBD_CDC_Init+0x1ec>)
 80112ac:	781b      	ldrb	r3, [r3, #0]
 80112ae:	f003 020f 	and.w	r2, r3, #15
 80112b2:	6879      	ldr	r1, [r7, #4]
 80112b4:	4613      	mov	r3, r2
 80112b6:	009b      	lsls	r3, r3, #2
 80112b8:	4413      	add	r3, r2
 80112ba:	009b      	lsls	r3, r3, #2
 80112bc:	440b      	add	r3, r1
 80112be:	3326      	adds	r3, #38	; 0x26
 80112c0:	2210      	movs	r2, #16
 80112c2:	801a      	strh	r2, [r3, #0]
 80112c4:	e035      	b.n	8011332 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80112c6:	4b42      	ldr	r3, [pc, #264]	; (80113d0 <USBD_CDC_Init+0x1e4>)
 80112c8:	7819      	ldrb	r1, [r3, #0]
 80112ca:	2340      	movs	r3, #64	; 0x40
 80112cc:	2202      	movs	r2, #2
 80112ce:	6878      	ldr	r0, [r7, #4]
 80112d0:	f002 fb5b 	bl	801398a <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80112d4:	4b3e      	ldr	r3, [pc, #248]	; (80113d0 <USBD_CDC_Init+0x1e4>)
 80112d6:	781b      	ldrb	r3, [r3, #0]
 80112d8:	f003 020f 	and.w	r2, r3, #15
 80112dc:	6879      	ldr	r1, [r7, #4]
 80112de:	4613      	mov	r3, r2
 80112e0:	009b      	lsls	r3, r3, #2
 80112e2:	4413      	add	r3, r2
 80112e4:	009b      	lsls	r3, r3, #2
 80112e6:	440b      	add	r3, r1
 80112e8:	3324      	adds	r3, #36	; 0x24
 80112ea:	2201      	movs	r2, #1
 80112ec:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80112ee:	4b39      	ldr	r3, [pc, #228]	; (80113d4 <USBD_CDC_Init+0x1e8>)
 80112f0:	7819      	ldrb	r1, [r3, #0]
 80112f2:	2340      	movs	r3, #64	; 0x40
 80112f4:	2202      	movs	r2, #2
 80112f6:	6878      	ldr	r0, [r7, #4]
 80112f8:	f002 fb47 	bl	801398a <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80112fc:	4b35      	ldr	r3, [pc, #212]	; (80113d4 <USBD_CDC_Init+0x1e8>)
 80112fe:	781b      	ldrb	r3, [r3, #0]
 8011300:	f003 020f 	and.w	r2, r3, #15
 8011304:	6879      	ldr	r1, [r7, #4]
 8011306:	4613      	mov	r3, r2
 8011308:	009b      	lsls	r3, r3, #2
 801130a:	4413      	add	r3, r2
 801130c:	009b      	lsls	r3, r3, #2
 801130e:	440b      	add	r3, r1
 8011310:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011314:	2201      	movs	r2, #1
 8011316:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8011318:	4b2f      	ldr	r3, [pc, #188]	; (80113d8 <USBD_CDC_Init+0x1ec>)
 801131a:	781b      	ldrb	r3, [r3, #0]
 801131c:	f003 020f 	and.w	r2, r3, #15
 8011320:	6879      	ldr	r1, [r7, #4]
 8011322:	4613      	mov	r3, r2
 8011324:	009b      	lsls	r3, r3, #2
 8011326:	4413      	add	r3, r2
 8011328:	009b      	lsls	r3, r3, #2
 801132a:	440b      	add	r3, r1
 801132c:	3326      	adds	r3, #38	; 0x26
 801132e:	2210      	movs	r2, #16
 8011330:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8011332:	4b29      	ldr	r3, [pc, #164]	; (80113d8 <USBD_CDC_Init+0x1ec>)
 8011334:	7819      	ldrb	r1, [r3, #0]
 8011336:	2308      	movs	r3, #8
 8011338:	2203      	movs	r2, #3
 801133a:	6878      	ldr	r0, [r7, #4]
 801133c:	f002 fb25 	bl	801398a <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8011340:	4b25      	ldr	r3, [pc, #148]	; (80113d8 <USBD_CDC_Init+0x1ec>)
 8011342:	781b      	ldrb	r3, [r3, #0]
 8011344:	f003 020f 	and.w	r2, r3, #15
 8011348:	6879      	ldr	r1, [r7, #4]
 801134a:	4613      	mov	r3, r2
 801134c:	009b      	lsls	r3, r3, #2
 801134e:	4413      	add	r3, r2
 8011350:	009b      	lsls	r3, r3, #2
 8011352:	440b      	add	r3, r1
 8011354:	3324      	adds	r3, #36	; 0x24
 8011356:	2201      	movs	r2, #1
 8011358:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 801135a:	68fb      	ldr	r3, [r7, #12]
 801135c:	2200      	movs	r2, #0
 801135e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011368:	687a      	ldr	r2, [r7, #4]
 801136a:	33b0      	adds	r3, #176	; 0xb0
 801136c:	009b      	lsls	r3, r3, #2
 801136e:	4413      	add	r3, r2
 8011370:	685b      	ldr	r3, [r3, #4]
 8011372:	681b      	ldr	r3, [r3, #0]
 8011374:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8011376:	68fb      	ldr	r3, [r7, #12]
 8011378:	2200      	movs	r2, #0
 801137a:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 801137e:	68fb      	ldr	r3, [r7, #12]
 8011380:	2200      	movs	r2, #0
 8011382:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8011386:	68fb      	ldr	r3, [r7, #12]
 8011388:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 801138c:	2b00      	cmp	r3, #0
 801138e:	d101      	bne.n	8011394 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8011390:	2302      	movs	r3, #2
 8011392:	e018      	b.n	80113c6 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011394:	687b      	ldr	r3, [r7, #4]
 8011396:	7c1b      	ldrb	r3, [r3, #16]
 8011398:	2b00      	cmp	r3, #0
 801139a:	d10a      	bne.n	80113b2 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 801139c:	4b0d      	ldr	r3, [pc, #52]	; (80113d4 <USBD_CDC_Init+0x1e8>)
 801139e:	7819      	ldrb	r1, [r3, #0]
 80113a0:	68fb      	ldr	r3, [r7, #12]
 80113a2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80113a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80113aa:	6878      	ldr	r0, [r7, #4]
 80113ac:	f002 fbdc 	bl	8013b68 <USBD_LL_PrepareReceive>
 80113b0:	e008      	b.n	80113c4 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80113b2:	4b08      	ldr	r3, [pc, #32]	; (80113d4 <USBD_CDC_Init+0x1e8>)
 80113b4:	7819      	ldrb	r1, [r3, #0]
 80113b6:	68fb      	ldr	r3, [r7, #12]
 80113b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80113bc:	2340      	movs	r3, #64	; 0x40
 80113be:	6878      	ldr	r0, [r7, #4]
 80113c0:	f002 fbd2 	bl	8013b68 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80113c4:	2300      	movs	r3, #0
}
 80113c6:	4618      	mov	r0, r3
 80113c8:	3710      	adds	r7, #16
 80113ca:	46bd      	mov	sp, r7
 80113cc:	bd80      	pop	{r7, pc}
 80113ce:	bf00      	nop
 80113d0:	24000467 	.word	0x24000467
 80113d4:	24000468 	.word	0x24000468
 80113d8:	24000469 	.word	0x24000469

080113dc <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80113dc:	b580      	push	{r7, lr}
 80113de:	b082      	sub	sp, #8
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	6078      	str	r0, [r7, #4]
 80113e4:	460b      	mov	r3, r1
 80113e6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 80113e8:	4b3a      	ldr	r3, [pc, #232]	; (80114d4 <USBD_CDC_DeInit+0xf8>)
 80113ea:	781b      	ldrb	r3, [r3, #0]
 80113ec:	4619      	mov	r1, r3
 80113ee:	6878      	ldr	r0, [r7, #4]
 80113f0:	f002 faf1 	bl	80139d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 80113f4:	4b37      	ldr	r3, [pc, #220]	; (80114d4 <USBD_CDC_DeInit+0xf8>)
 80113f6:	781b      	ldrb	r3, [r3, #0]
 80113f8:	f003 020f 	and.w	r2, r3, #15
 80113fc:	6879      	ldr	r1, [r7, #4]
 80113fe:	4613      	mov	r3, r2
 8011400:	009b      	lsls	r3, r3, #2
 8011402:	4413      	add	r3, r2
 8011404:	009b      	lsls	r3, r3, #2
 8011406:	440b      	add	r3, r1
 8011408:	3324      	adds	r3, #36	; 0x24
 801140a:	2200      	movs	r2, #0
 801140c:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 801140e:	4b32      	ldr	r3, [pc, #200]	; (80114d8 <USBD_CDC_DeInit+0xfc>)
 8011410:	781b      	ldrb	r3, [r3, #0]
 8011412:	4619      	mov	r1, r3
 8011414:	6878      	ldr	r0, [r7, #4]
 8011416:	f002 fade 	bl	80139d6 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 801141a:	4b2f      	ldr	r3, [pc, #188]	; (80114d8 <USBD_CDC_DeInit+0xfc>)
 801141c:	781b      	ldrb	r3, [r3, #0]
 801141e:	f003 020f 	and.w	r2, r3, #15
 8011422:	6879      	ldr	r1, [r7, #4]
 8011424:	4613      	mov	r3, r2
 8011426:	009b      	lsls	r3, r3, #2
 8011428:	4413      	add	r3, r2
 801142a:	009b      	lsls	r3, r3, #2
 801142c:	440b      	add	r3, r1
 801142e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8011432:	2200      	movs	r2, #0
 8011434:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8011436:	4b29      	ldr	r3, [pc, #164]	; (80114dc <USBD_CDC_DeInit+0x100>)
 8011438:	781b      	ldrb	r3, [r3, #0]
 801143a:	4619      	mov	r1, r3
 801143c:	6878      	ldr	r0, [r7, #4]
 801143e:	f002 faca 	bl	80139d6 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8011442:	4b26      	ldr	r3, [pc, #152]	; (80114dc <USBD_CDC_DeInit+0x100>)
 8011444:	781b      	ldrb	r3, [r3, #0]
 8011446:	f003 020f 	and.w	r2, r3, #15
 801144a:	6879      	ldr	r1, [r7, #4]
 801144c:	4613      	mov	r3, r2
 801144e:	009b      	lsls	r3, r3, #2
 8011450:	4413      	add	r3, r2
 8011452:	009b      	lsls	r3, r3, #2
 8011454:	440b      	add	r3, r1
 8011456:	3324      	adds	r3, #36	; 0x24
 8011458:	2200      	movs	r2, #0
 801145a:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 801145c:	4b1f      	ldr	r3, [pc, #124]	; (80114dc <USBD_CDC_DeInit+0x100>)
 801145e:	781b      	ldrb	r3, [r3, #0]
 8011460:	f003 020f 	and.w	r2, r3, #15
 8011464:	6879      	ldr	r1, [r7, #4]
 8011466:	4613      	mov	r3, r2
 8011468:	009b      	lsls	r3, r3, #2
 801146a:	4413      	add	r3, r2
 801146c:	009b      	lsls	r3, r3, #2
 801146e:	440b      	add	r3, r1
 8011470:	3326      	adds	r3, #38	; 0x26
 8011472:	2200      	movs	r2, #0
 8011474:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8011476:	687b      	ldr	r3, [r7, #4]
 8011478:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801147c:	687b      	ldr	r3, [r7, #4]
 801147e:	32b0      	adds	r2, #176	; 0xb0
 8011480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011484:	2b00      	cmp	r3, #0
 8011486:	d01f      	beq.n	80114c8 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8011488:	687b      	ldr	r3, [r7, #4]
 801148a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801148e:	687a      	ldr	r2, [r7, #4]
 8011490:	33b0      	adds	r3, #176	; 0xb0
 8011492:	009b      	lsls	r3, r3, #2
 8011494:	4413      	add	r3, r2
 8011496:	685b      	ldr	r3, [r3, #4]
 8011498:	685b      	ldr	r3, [r3, #4]
 801149a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 801149c:	687b      	ldr	r3, [r7, #4]
 801149e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	32b0      	adds	r2, #176	; 0xb0
 80114a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80114aa:	4618      	mov	r0, r3
 80114ac:	f002 fb9e 	bl	8013bec <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80114b6:	687b      	ldr	r3, [r7, #4]
 80114b8:	32b0      	adds	r2, #176	; 0xb0
 80114ba:	2100      	movs	r1, #0
 80114bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80114c0:	687b      	ldr	r3, [r7, #4]
 80114c2:	2200      	movs	r2, #0
 80114c4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80114c8:	2300      	movs	r3, #0
}
 80114ca:	4618      	mov	r0, r3
 80114cc:	3708      	adds	r7, #8
 80114ce:	46bd      	mov	sp, r7
 80114d0:	bd80      	pop	{r7, pc}
 80114d2:	bf00      	nop
 80114d4:	24000467 	.word	0x24000467
 80114d8:	24000468 	.word	0x24000468
 80114dc:	24000469 	.word	0x24000469

080114e0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 80114e0:	b580      	push	{r7, lr}
 80114e2:	b086      	sub	sp, #24
 80114e4:	af00      	add	r7, sp, #0
 80114e6:	6078      	str	r0, [r7, #4]
 80114e8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80114f0:	687b      	ldr	r3, [r7, #4]
 80114f2:	32b0      	adds	r2, #176	; 0xb0
 80114f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80114f8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 80114fa:	2300      	movs	r3, #0
 80114fc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 80114fe:	2300      	movs	r3, #0
 8011500:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8011502:	2300      	movs	r3, #0
 8011504:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8011506:	693b      	ldr	r3, [r7, #16]
 8011508:	2b00      	cmp	r3, #0
 801150a:	d101      	bne.n	8011510 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 801150c:	2303      	movs	r3, #3
 801150e:	e0bf      	b.n	8011690 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8011510:	683b      	ldr	r3, [r7, #0]
 8011512:	781b      	ldrb	r3, [r3, #0]
 8011514:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8011518:	2b00      	cmp	r3, #0
 801151a:	d050      	beq.n	80115be <USBD_CDC_Setup+0xde>
 801151c:	2b20      	cmp	r3, #32
 801151e:	f040 80af 	bne.w	8011680 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8011522:	683b      	ldr	r3, [r7, #0]
 8011524:	88db      	ldrh	r3, [r3, #6]
 8011526:	2b00      	cmp	r3, #0
 8011528:	d03a      	beq.n	80115a0 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801152a:	683b      	ldr	r3, [r7, #0]
 801152c:	781b      	ldrb	r3, [r3, #0]
 801152e:	b25b      	sxtb	r3, r3
 8011530:	2b00      	cmp	r3, #0
 8011532:	da1b      	bge.n	801156c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8011534:	687b      	ldr	r3, [r7, #4]
 8011536:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801153a:	687a      	ldr	r2, [r7, #4]
 801153c:	33b0      	adds	r3, #176	; 0xb0
 801153e:	009b      	lsls	r3, r3, #2
 8011540:	4413      	add	r3, r2
 8011542:	685b      	ldr	r3, [r3, #4]
 8011544:	689b      	ldr	r3, [r3, #8]
 8011546:	683a      	ldr	r2, [r7, #0]
 8011548:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 801154a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 801154c:	683a      	ldr	r2, [r7, #0]
 801154e:	88d2      	ldrh	r2, [r2, #6]
 8011550:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8011552:	683b      	ldr	r3, [r7, #0]
 8011554:	88db      	ldrh	r3, [r3, #6]
 8011556:	2b07      	cmp	r3, #7
 8011558:	bf28      	it	cs
 801155a:	2307      	movcs	r3, #7
 801155c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 801155e:	693b      	ldr	r3, [r7, #16]
 8011560:	89fa      	ldrh	r2, [r7, #14]
 8011562:	4619      	mov	r1, r3
 8011564:	6878      	ldr	r0, [r7, #4]
 8011566:	f001 fd89 	bl	801307c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 801156a:	e090      	b.n	801168e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 801156c:	683b      	ldr	r3, [r7, #0]
 801156e:	785a      	ldrb	r2, [r3, #1]
 8011570:	693b      	ldr	r3, [r7, #16]
 8011572:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8011576:	683b      	ldr	r3, [r7, #0]
 8011578:	88db      	ldrh	r3, [r3, #6]
 801157a:	2b3f      	cmp	r3, #63	; 0x3f
 801157c:	d803      	bhi.n	8011586 <USBD_CDC_Setup+0xa6>
 801157e:	683b      	ldr	r3, [r7, #0]
 8011580:	88db      	ldrh	r3, [r3, #6]
 8011582:	b2da      	uxtb	r2, r3
 8011584:	e000      	b.n	8011588 <USBD_CDC_Setup+0xa8>
 8011586:	2240      	movs	r2, #64	; 0x40
 8011588:	693b      	ldr	r3, [r7, #16]
 801158a:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 801158e:	6939      	ldr	r1, [r7, #16]
 8011590:	693b      	ldr	r3, [r7, #16]
 8011592:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8011596:	461a      	mov	r2, r3
 8011598:	6878      	ldr	r0, [r7, #4]
 801159a:	f001 fd9b 	bl	80130d4 <USBD_CtlPrepareRx>
      break;
 801159e:	e076      	b.n	801168e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80115a0:	687b      	ldr	r3, [r7, #4]
 80115a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80115a6:	687a      	ldr	r2, [r7, #4]
 80115a8:	33b0      	adds	r3, #176	; 0xb0
 80115aa:	009b      	lsls	r3, r3, #2
 80115ac:	4413      	add	r3, r2
 80115ae:	685b      	ldr	r3, [r3, #4]
 80115b0:	689b      	ldr	r3, [r3, #8]
 80115b2:	683a      	ldr	r2, [r7, #0]
 80115b4:	7850      	ldrb	r0, [r2, #1]
 80115b6:	2200      	movs	r2, #0
 80115b8:	6839      	ldr	r1, [r7, #0]
 80115ba:	4798      	blx	r3
      break;
 80115bc:	e067      	b.n	801168e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80115be:	683b      	ldr	r3, [r7, #0]
 80115c0:	785b      	ldrb	r3, [r3, #1]
 80115c2:	2b0b      	cmp	r3, #11
 80115c4:	d851      	bhi.n	801166a <USBD_CDC_Setup+0x18a>
 80115c6:	a201      	add	r2, pc, #4	; (adr r2, 80115cc <USBD_CDC_Setup+0xec>)
 80115c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115cc:	080115fd 	.word	0x080115fd
 80115d0:	08011679 	.word	0x08011679
 80115d4:	0801166b 	.word	0x0801166b
 80115d8:	0801166b 	.word	0x0801166b
 80115dc:	0801166b 	.word	0x0801166b
 80115e0:	0801166b 	.word	0x0801166b
 80115e4:	0801166b 	.word	0x0801166b
 80115e8:	0801166b 	.word	0x0801166b
 80115ec:	0801166b 	.word	0x0801166b
 80115f0:	0801166b 	.word	0x0801166b
 80115f4:	08011627 	.word	0x08011627
 80115f8:	08011651 	.word	0x08011651
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80115fc:	687b      	ldr	r3, [r7, #4]
 80115fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011602:	b2db      	uxtb	r3, r3
 8011604:	2b03      	cmp	r3, #3
 8011606:	d107      	bne.n	8011618 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8011608:	f107 030a 	add.w	r3, r7, #10
 801160c:	2202      	movs	r2, #2
 801160e:	4619      	mov	r1, r3
 8011610:	6878      	ldr	r0, [r7, #4]
 8011612:	f001 fd33 	bl	801307c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011616:	e032      	b.n	801167e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8011618:	6839      	ldr	r1, [r7, #0]
 801161a:	6878      	ldr	r0, [r7, #4]
 801161c:	f001 fcbd 	bl	8012f9a <USBD_CtlError>
            ret = USBD_FAIL;
 8011620:	2303      	movs	r3, #3
 8011622:	75fb      	strb	r3, [r7, #23]
          break;
 8011624:	e02b      	b.n	801167e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801162c:	b2db      	uxtb	r3, r3
 801162e:	2b03      	cmp	r3, #3
 8011630:	d107      	bne.n	8011642 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8011632:	f107 030d 	add.w	r3, r7, #13
 8011636:	2201      	movs	r2, #1
 8011638:	4619      	mov	r1, r3
 801163a:	6878      	ldr	r0, [r7, #4]
 801163c:	f001 fd1e 	bl	801307c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8011640:	e01d      	b.n	801167e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8011642:	6839      	ldr	r1, [r7, #0]
 8011644:	6878      	ldr	r0, [r7, #4]
 8011646:	f001 fca8 	bl	8012f9a <USBD_CtlError>
            ret = USBD_FAIL;
 801164a:	2303      	movs	r3, #3
 801164c:	75fb      	strb	r3, [r7, #23]
          break;
 801164e:	e016      	b.n	801167e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011656:	b2db      	uxtb	r3, r3
 8011658:	2b03      	cmp	r3, #3
 801165a:	d00f      	beq.n	801167c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 801165c:	6839      	ldr	r1, [r7, #0]
 801165e:	6878      	ldr	r0, [r7, #4]
 8011660:	f001 fc9b 	bl	8012f9a <USBD_CtlError>
            ret = USBD_FAIL;
 8011664:	2303      	movs	r3, #3
 8011666:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8011668:	e008      	b.n	801167c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801166a:	6839      	ldr	r1, [r7, #0]
 801166c:	6878      	ldr	r0, [r7, #4]
 801166e:	f001 fc94 	bl	8012f9a <USBD_CtlError>
          ret = USBD_FAIL;
 8011672:	2303      	movs	r3, #3
 8011674:	75fb      	strb	r3, [r7, #23]
          break;
 8011676:	e002      	b.n	801167e <USBD_CDC_Setup+0x19e>
          break;
 8011678:	bf00      	nop
 801167a:	e008      	b.n	801168e <USBD_CDC_Setup+0x1ae>
          break;
 801167c:	bf00      	nop
      }
      break;
 801167e:	e006      	b.n	801168e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8011680:	6839      	ldr	r1, [r7, #0]
 8011682:	6878      	ldr	r0, [r7, #4]
 8011684:	f001 fc89 	bl	8012f9a <USBD_CtlError>
      ret = USBD_FAIL;
 8011688:	2303      	movs	r3, #3
 801168a:	75fb      	strb	r3, [r7, #23]
      break;
 801168c:	bf00      	nop
  }

  return (uint8_t)ret;
 801168e:	7dfb      	ldrb	r3, [r7, #23]
}
 8011690:	4618      	mov	r0, r3
 8011692:	3718      	adds	r7, #24
 8011694:	46bd      	mov	sp, r7
 8011696:	bd80      	pop	{r7, pc}

08011698 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011698:	b580      	push	{r7, lr}
 801169a:	b084      	sub	sp, #16
 801169c:	af00      	add	r7, sp, #0
 801169e:	6078      	str	r0, [r7, #4]
 80116a0:	460b      	mov	r3, r1
 80116a2:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80116a4:	687b      	ldr	r3, [r7, #4]
 80116a6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80116aa:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80116ac:	687b      	ldr	r3, [r7, #4]
 80116ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80116b2:	687b      	ldr	r3, [r7, #4]
 80116b4:	32b0      	adds	r2, #176	; 0xb0
 80116b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80116ba:	2b00      	cmp	r3, #0
 80116bc:	d101      	bne.n	80116c2 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80116be:	2303      	movs	r3, #3
 80116c0:	e065      	b.n	801178e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80116c2:	687b      	ldr	r3, [r7, #4]
 80116c4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80116c8:	687b      	ldr	r3, [r7, #4]
 80116ca:	32b0      	adds	r2, #176	; 0xb0
 80116cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80116d0:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80116d2:	78fb      	ldrb	r3, [r7, #3]
 80116d4:	f003 020f 	and.w	r2, r3, #15
 80116d8:	6879      	ldr	r1, [r7, #4]
 80116da:	4613      	mov	r3, r2
 80116dc:	009b      	lsls	r3, r3, #2
 80116de:	4413      	add	r3, r2
 80116e0:	009b      	lsls	r3, r3, #2
 80116e2:	440b      	add	r3, r1
 80116e4:	3318      	adds	r3, #24
 80116e6:	681b      	ldr	r3, [r3, #0]
 80116e8:	2b00      	cmp	r3, #0
 80116ea:	d02f      	beq.n	801174c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 80116ec:	78fb      	ldrb	r3, [r7, #3]
 80116ee:	f003 020f 	and.w	r2, r3, #15
 80116f2:	6879      	ldr	r1, [r7, #4]
 80116f4:	4613      	mov	r3, r2
 80116f6:	009b      	lsls	r3, r3, #2
 80116f8:	4413      	add	r3, r2
 80116fa:	009b      	lsls	r3, r3, #2
 80116fc:	440b      	add	r3, r1
 80116fe:	3318      	adds	r3, #24
 8011700:	681a      	ldr	r2, [r3, #0]
 8011702:	78fb      	ldrb	r3, [r7, #3]
 8011704:	f003 010f 	and.w	r1, r3, #15
 8011708:	68f8      	ldr	r0, [r7, #12]
 801170a:	460b      	mov	r3, r1
 801170c:	00db      	lsls	r3, r3, #3
 801170e:	440b      	add	r3, r1
 8011710:	009b      	lsls	r3, r3, #2
 8011712:	4403      	add	r3, r0
 8011714:	3344      	adds	r3, #68	; 0x44
 8011716:	681b      	ldr	r3, [r3, #0]
 8011718:	fbb2 f1f3 	udiv	r1, r2, r3
 801171c:	fb01 f303 	mul.w	r3, r1, r3
 8011720:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8011722:	2b00      	cmp	r3, #0
 8011724:	d112      	bne.n	801174c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8011726:	78fb      	ldrb	r3, [r7, #3]
 8011728:	f003 020f 	and.w	r2, r3, #15
 801172c:	6879      	ldr	r1, [r7, #4]
 801172e:	4613      	mov	r3, r2
 8011730:	009b      	lsls	r3, r3, #2
 8011732:	4413      	add	r3, r2
 8011734:	009b      	lsls	r3, r3, #2
 8011736:	440b      	add	r3, r1
 8011738:	3318      	adds	r3, #24
 801173a:	2200      	movs	r2, #0
 801173c:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 801173e:	78f9      	ldrb	r1, [r7, #3]
 8011740:	2300      	movs	r3, #0
 8011742:	2200      	movs	r2, #0
 8011744:	6878      	ldr	r0, [r7, #4]
 8011746:	f002 f9ee 	bl	8013b26 <USBD_LL_Transmit>
 801174a:	e01f      	b.n	801178c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 801174c:	68bb      	ldr	r3, [r7, #8]
 801174e:	2200      	movs	r2, #0
 8011750:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801175a:	687a      	ldr	r2, [r7, #4]
 801175c:	33b0      	adds	r3, #176	; 0xb0
 801175e:	009b      	lsls	r3, r3, #2
 8011760:	4413      	add	r3, r2
 8011762:	685b      	ldr	r3, [r3, #4]
 8011764:	691b      	ldr	r3, [r3, #16]
 8011766:	2b00      	cmp	r3, #0
 8011768:	d010      	beq.n	801178c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801176a:	687b      	ldr	r3, [r7, #4]
 801176c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011770:	687a      	ldr	r2, [r7, #4]
 8011772:	33b0      	adds	r3, #176	; 0xb0
 8011774:	009b      	lsls	r3, r3, #2
 8011776:	4413      	add	r3, r2
 8011778:	685b      	ldr	r3, [r3, #4]
 801177a:	691b      	ldr	r3, [r3, #16]
 801177c:	68ba      	ldr	r2, [r7, #8]
 801177e:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8011782:	68ba      	ldr	r2, [r7, #8]
 8011784:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8011788:	78fa      	ldrb	r2, [r7, #3]
 801178a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 801178c:	2300      	movs	r3, #0
}
 801178e:	4618      	mov	r0, r3
 8011790:	3710      	adds	r7, #16
 8011792:	46bd      	mov	sp, r7
 8011794:	bd80      	pop	{r7, pc}

08011796 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8011796:	b580      	push	{r7, lr}
 8011798:	b084      	sub	sp, #16
 801179a:	af00      	add	r7, sp, #0
 801179c:	6078      	str	r0, [r7, #4]
 801179e:	460b      	mov	r3, r1
 80117a0:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80117a2:	687b      	ldr	r3, [r7, #4]
 80117a4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	32b0      	adds	r2, #176	; 0xb0
 80117ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117b0:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80117b2:	687b      	ldr	r3, [r7, #4]
 80117b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80117b8:	687b      	ldr	r3, [r7, #4]
 80117ba:	32b0      	adds	r2, #176	; 0xb0
 80117bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d101      	bne.n	80117c8 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80117c4:	2303      	movs	r3, #3
 80117c6:	e01a      	b.n	80117fe <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80117c8:	78fb      	ldrb	r3, [r7, #3]
 80117ca:	4619      	mov	r1, r3
 80117cc:	6878      	ldr	r0, [r7, #4]
 80117ce:	f002 f9ec 	bl	8013baa <USBD_LL_GetRxDataSize>
 80117d2:	4602      	mov	r2, r0
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80117da:	687b      	ldr	r3, [r7, #4]
 80117dc:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80117e0:	687a      	ldr	r2, [r7, #4]
 80117e2:	33b0      	adds	r3, #176	; 0xb0
 80117e4:	009b      	lsls	r3, r3, #2
 80117e6:	4413      	add	r3, r2
 80117e8:	685b      	ldr	r3, [r3, #4]
 80117ea:	68db      	ldr	r3, [r3, #12]
 80117ec:	68fa      	ldr	r2, [r7, #12]
 80117ee:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 80117f2:	68fa      	ldr	r2, [r7, #12]
 80117f4:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 80117f8:	4611      	mov	r1, r2
 80117fa:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 80117fc:	2300      	movs	r3, #0
}
 80117fe:	4618      	mov	r0, r3
 8011800:	3710      	adds	r7, #16
 8011802:	46bd      	mov	sp, r7
 8011804:	bd80      	pop	{r7, pc}

08011806 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8011806:	b580      	push	{r7, lr}
 8011808:	b084      	sub	sp, #16
 801180a:	af00      	add	r7, sp, #0
 801180c:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 801180e:	687b      	ldr	r3, [r7, #4]
 8011810:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	32b0      	adds	r2, #176	; 0xb0
 8011818:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801181c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 801181e:	68fb      	ldr	r3, [r7, #12]
 8011820:	2b00      	cmp	r3, #0
 8011822:	d101      	bne.n	8011828 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8011824:	2303      	movs	r3, #3
 8011826:	e025      	b.n	8011874 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801182e:	687a      	ldr	r2, [r7, #4]
 8011830:	33b0      	adds	r3, #176	; 0xb0
 8011832:	009b      	lsls	r3, r3, #2
 8011834:	4413      	add	r3, r2
 8011836:	685b      	ldr	r3, [r3, #4]
 8011838:	2b00      	cmp	r3, #0
 801183a:	d01a      	beq.n	8011872 <USBD_CDC_EP0_RxReady+0x6c>
 801183c:	68fb      	ldr	r3, [r7, #12]
 801183e:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8011842:	2bff      	cmp	r3, #255	; 0xff
 8011844:	d015      	beq.n	8011872 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801184c:	687a      	ldr	r2, [r7, #4]
 801184e:	33b0      	adds	r3, #176	; 0xb0
 8011850:	009b      	lsls	r3, r3, #2
 8011852:	4413      	add	r3, r2
 8011854:	685b      	ldr	r3, [r3, #4]
 8011856:	689b      	ldr	r3, [r3, #8]
 8011858:	68fa      	ldr	r2, [r7, #12]
 801185a:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 801185e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8011860:	68fa      	ldr	r2, [r7, #12]
 8011862:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8011866:	b292      	uxth	r2, r2
 8011868:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801186a:	68fb      	ldr	r3, [r7, #12]
 801186c:	22ff      	movs	r2, #255	; 0xff
 801186e:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8011872:	2300      	movs	r3, #0
}
 8011874:	4618      	mov	r0, r3
 8011876:	3710      	adds	r7, #16
 8011878:	46bd      	mov	sp, r7
 801187a:	bd80      	pop	{r7, pc}

0801187c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 801187c:	b580      	push	{r7, lr}
 801187e:	b086      	sub	sp, #24
 8011880:	af00      	add	r7, sp, #0
 8011882:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8011884:	2182      	movs	r1, #130	; 0x82
 8011886:	4818      	ldr	r0, [pc, #96]	; (80118e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8011888:	f000 fd4f 	bl	801232a <USBD_GetEpDesc>
 801188c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801188e:	2101      	movs	r1, #1
 8011890:	4815      	ldr	r0, [pc, #84]	; (80118e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8011892:	f000 fd4a 	bl	801232a <USBD_GetEpDesc>
 8011896:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011898:	2181      	movs	r1, #129	; 0x81
 801189a:	4813      	ldr	r0, [pc, #76]	; (80118e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 801189c:	f000 fd45 	bl	801232a <USBD_GetEpDesc>
 80118a0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80118a2:	697b      	ldr	r3, [r7, #20]
 80118a4:	2b00      	cmp	r3, #0
 80118a6:	d002      	beq.n	80118ae <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80118a8:	697b      	ldr	r3, [r7, #20]
 80118aa:	2210      	movs	r2, #16
 80118ac:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80118ae:	693b      	ldr	r3, [r7, #16]
 80118b0:	2b00      	cmp	r3, #0
 80118b2:	d006      	beq.n	80118c2 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80118b4:	693b      	ldr	r3, [r7, #16]
 80118b6:	2200      	movs	r2, #0
 80118b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80118bc:	711a      	strb	r2, [r3, #4]
 80118be:	2200      	movs	r2, #0
 80118c0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80118c2:	68fb      	ldr	r3, [r7, #12]
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	d006      	beq.n	80118d6 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80118c8:	68fb      	ldr	r3, [r7, #12]
 80118ca:	2200      	movs	r2, #0
 80118cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80118d0:	711a      	strb	r2, [r3, #4]
 80118d2:	2200      	movs	r2, #0
 80118d4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80118d6:	687b      	ldr	r3, [r7, #4]
 80118d8:	2243      	movs	r2, #67	; 0x43
 80118da:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80118dc:	4b02      	ldr	r3, [pc, #8]	; (80118e8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80118de:	4618      	mov	r0, r3
 80118e0:	3718      	adds	r7, #24
 80118e2:	46bd      	mov	sp, r7
 80118e4:	bd80      	pop	{r7, pc}
 80118e6:	bf00      	nop
 80118e8:	24000424 	.word	0x24000424

080118ec <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 80118ec:	b580      	push	{r7, lr}
 80118ee:	b086      	sub	sp, #24
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80118f4:	2182      	movs	r1, #130	; 0x82
 80118f6:	4818      	ldr	r0, [pc, #96]	; (8011958 <USBD_CDC_GetHSCfgDesc+0x6c>)
 80118f8:	f000 fd17 	bl	801232a <USBD_GetEpDesc>
 80118fc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80118fe:	2101      	movs	r1, #1
 8011900:	4815      	ldr	r0, [pc, #84]	; (8011958 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8011902:	f000 fd12 	bl	801232a <USBD_GetEpDesc>
 8011906:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011908:	2181      	movs	r1, #129	; 0x81
 801190a:	4813      	ldr	r0, [pc, #76]	; (8011958 <USBD_CDC_GetHSCfgDesc+0x6c>)
 801190c:	f000 fd0d 	bl	801232a <USBD_GetEpDesc>
 8011910:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8011912:	697b      	ldr	r3, [r7, #20]
 8011914:	2b00      	cmp	r3, #0
 8011916:	d002      	beq.n	801191e <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8011918:	697b      	ldr	r3, [r7, #20]
 801191a:	2210      	movs	r2, #16
 801191c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801191e:	693b      	ldr	r3, [r7, #16]
 8011920:	2b00      	cmp	r3, #0
 8011922:	d006      	beq.n	8011932 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8011924:	693b      	ldr	r3, [r7, #16]
 8011926:	2200      	movs	r2, #0
 8011928:	711a      	strb	r2, [r3, #4]
 801192a:	2200      	movs	r2, #0
 801192c:	f042 0202 	orr.w	r2, r2, #2
 8011930:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	2b00      	cmp	r3, #0
 8011936:	d006      	beq.n	8011946 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	2200      	movs	r2, #0
 801193c:	711a      	strb	r2, [r3, #4]
 801193e:	2200      	movs	r2, #0
 8011940:	f042 0202 	orr.w	r2, r2, #2
 8011944:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8011946:	687b      	ldr	r3, [r7, #4]
 8011948:	2243      	movs	r2, #67	; 0x43
 801194a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 801194c:	4b02      	ldr	r3, [pc, #8]	; (8011958 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 801194e:	4618      	mov	r0, r3
 8011950:	3718      	adds	r7, #24
 8011952:	46bd      	mov	sp, r7
 8011954:	bd80      	pop	{r7, pc}
 8011956:	bf00      	nop
 8011958:	24000424 	.word	0x24000424

0801195c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 801195c:	b580      	push	{r7, lr}
 801195e:	b086      	sub	sp, #24
 8011960:	af00      	add	r7, sp, #0
 8011962:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8011964:	2182      	movs	r1, #130	; 0x82
 8011966:	4818      	ldr	r0, [pc, #96]	; (80119c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8011968:	f000 fcdf 	bl	801232a <USBD_GetEpDesc>
 801196c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 801196e:	2101      	movs	r1, #1
 8011970:	4815      	ldr	r0, [pc, #84]	; (80119c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8011972:	f000 fcda 	bl	801232a <USBD_GetEpDesc>
 8011976:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8011978:	2181      	movs	r1, #129	; 0x81
 801197a:	4813      	ldr	r0, [pc, #76]	; (80119c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801197c:	f000 fcd5 	bl	801232a <USBD_GetEpDesc>
 8011980:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8011982:	697b      	ldr	r3, [r7, #20]
 8011984:	2b00      	cmp	r3, #0
 8011986:	d002      	beq.n	801198e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8011988:	697b      	ldr	r3, [r7, #20]
 801198a:	2210      	movs	r2, #16
 801198c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 801198e:	693b      	ldr	r3, [r7, #16]
 8011990:	2b00      	cmp	r3, #0
 8011992:	d006      	beq.n	80119a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8011994:	693b      	ldr	r3, [r7, #16]
 8011996:	2200      	movs	r2, #0
 8011998:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801199c:	711a      	strb	r2, [r3, #4]
 801199e:	2200      	movs	r2, #0
 80119a0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80119a2:	68fb      	ldr	r3, [r7, #12]
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d006      	beq.n	80119b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	2200      	movs	r2, #0
 80119ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80119b0:	711a      	strb	r2, [r3, #4]
 80119b2:	2200      	movs	r2, #0
 80119b4:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80119b6:	687b      	ldr	r3, [r7, #4]
 80119b8:	2243      	movs	r2, #67	; 0x43
 80119ba:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80119bc:	4b02      	ldr	r3, [pc, #8]	; (80119c8 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80119be:	4618      	mov	r0, r3
 80119c0:	3718      	adds	r7, #24
 80119c2:	46bd      	mov	sp, r7
 80119c4:	bd80      	pop	{r7, pc}
 80119c6:	bf00      	nop
 80119c8:	24000424 	.word	0x24000424

080119cc <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80119cc:	b480      	push	{r7}
 80119ce:	b083      	sub	sp, #12
 80119d0:	af00      	add	r7, sp, #0
 80119d2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	220a      	movs	r2, #10
 80119d8:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80119da:	4b03      	ldr	r3, [pc, #12]	; (80119e8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80119dc:	4618      	mov	r0, r3
 80119de:	370c      	adds	r7, #12
 80119e0:	46bd      	mov	sp, r7
 80119e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119e6:	4770      	bx	lr
 80119e8:	240003e0 	.word	0x240003e0

080119ec <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 80119ec:	b480      	push	{r7}
 80119ee:	b083      	sub	sp, #12
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	6078      	str	r0, [r7, #4]
 80119f4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 80119f6:	683b      	ldr	r3, [r7, #0]
 80119f8:	2b00      	cmp	r3, #0
 80119fa:	d101      	bne.n	8011a00 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 80119fc:	2303      	movs	r3, #3
 80119fe:	e009      	b.n	8011a14 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8011a00:	687b      	ldr	r3, [r7, #4]
 8011a02:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8011a06:	687a      	ldr	r2, [r7, #4]
 8011a08:	33b0      	adds	r3, #176	; 0xb0
 8011a0a:	009b      	lsls	r3, r3, #2
 8011a0c:	4413      	add	r3, r2
 8011a0e:	683a      	ldr	r2, [r7, #0]
 8011a10:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8011a12:	2300      	movs	r3, #0
}
 8011a14:	4618      	mov	r0, r3
 8011a16:	370c      	adds	r7, #12
 8011a18:	46bd      	mov	sp, r7
 8011a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a1e:	4770      	bx	lr

08011a20 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8011a20:	b480      	push	{r7}
 8011a22:	b087      	sub	sp, #28
 8011a24:	af00      	add	r7, sp, #0
 8011a26:	60f8      	str	r0, [r7, #12]
 8011a28:	60b9      	str	r1, [r7, #8]
 8011a2a:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011a2c:	68fb      	ldr	r3, [r7, #12]
 8011a2e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011a32:	68fb      	ldr	r3, [r7, #12]
 8011a34:	32b0      	adds	r2, #176	; 0xb0
 8011a36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a3a:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8011a3c:	697b      	ldr	r3, [r7, #20]
 8011a3e:	2b00      	cmp	r3, #0
 8011a40:	d101      	bne.n	8011a46 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8011a42:	2303      	movs	r3, #3
 8011a44:	e008      	b.n	8011a58 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8011a46:	697b      	ldr	r3, [r7, #20]
 8011a48:	68ba      	ldr	r2, [r7, #8]
 8011a4a:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8011a4e:	697b      	ldr	r3, [r7, #20]
 8011a50:	687a      	ldr	r2, [r7, #4]
 8011a52:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8011a56:	2300      	movs	r3, #0
}
 8011a58:	4618      	mov	r0, r3
 8011a5a:	371c      	adds	r7, #28
 8011a5c:	46bd      	mov	sp, r7
 8011a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a62:	4770      	bx	lr

08011a64 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8011a64:	b480      	push	{r7}
 8011a66:	b085      	sub	sp, #20
 8011a68:	af00      	add	r7, sp, #0
 8011a6a:	6078      	str	r0, [r7, #4]
 8011a6c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011a6e:	687b      	ldr	r3, [r7, #4]
 8011a70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	32b0      	adds	r2, #176	; 0xb0
 8011a78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011a7c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8011a7e:	68fb      	ldr	r3, [r7, #12]
 8011a80:	2b00      	cmp	r3, #0
 8011a82:	d101      	bne.n	8011a88 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8011a84:	2303      	movs	r3, #3
 8011a86:	e004      	b.n	8011a92 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	683a      	ldr	r2, [r7, #0]
 8011a8c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8011a90:	2300      	movs	r3, #0
}
 8011a92:	4618      	mov	r0, r3
 8011a94:	3714      	adds	r7, #20
 8011a96:	46bd      	mov	sp, r7
 8011a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a9c:	4770      	bx	lr
	...

08011aa0 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8011aa0:	b580      	push	{r7, lr}
 8011aa2:	b084      	sub	sp, #16
 8011aa4:	af00      	add	r7, sp, #0
 8011aa6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011aa8:	687b      	ldr	r3, [r7, #4]
 8011aaa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011aae:	687b      	ldr	r3, [r7, #4]
 8011ab0:	32b0      	adds	r2, #176	; 0xb0
 8011ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ab6:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 8011ab8:	2301      	movs	r3, #1
 8011aba:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 8011abc:	68bb      	ldr	r3, [r7, #8]
 8011abe:	2b00      	cmp	r3, #0
 8011ac0:	d101      	bne.n	8011ac6 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8011ac2:	2303      	movs	r3, #3
 8011ac4:	e025      	b.n	8011b12 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 8011ac6:	68bb      	ldr	r3, [r7, #8]
 8011ac8:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d11f      	bne.n	8011b10 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8011ad0:	68bb      	ldr	r3, [r7, #8]
 8011ad2:	2201      	movs	r2, #1
 8011ad4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8011ad8:	4b10      	ldr	r3, [pc, #64]	; (8011b1c <USBD_CDC_TransmitPacket+0x7c>)
 8011ada:	781b      	ldrb	r3, [r3, #0]
 8011adc:	f003 020f 	and.w	r2, r3, #15
 8011ae0:	68bb      	ldr	r3, [r7, #8]
 8011ae2:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 8011ae6:	6878      	ldr	r0, [r7, #4]
 8011ae8:	4613      	mov	r3, r2
 8011aea:	009b      	lsls	r3, r3, #2
 8011aec:	4413      	add	r3, r2
 8011aee:	009b      	lsls	r3, r3, #2
 8011af0:	4403      	add	r3, r0
 8011af2:	3318      	adds	r3, #24
 8011af4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 8011af6:	4b09      	ldr	r3, [pc, #36]	; (8011b1c <USBD_CDC_TransmitPacket+0x7c>)
 8011af8:	7819      	ldrb	r1, [r3, #0]
 8011afa:	68bb      	ldr	r3, [r7, #8]
 8011afc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8011b00:	68bb      	ldr	r3, [r7, #8]
 8011b02:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 8011b06:	6878      	ldr	r0, [r7, #4]
 8011b08:	f002 f80d 	bl	8013b26 <USBD_LL_Transmit>

    ret = USBD_OK;
 8011b0c:	2300      	movs	r3, #0
 8011b0e:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8011b10:	7bfb      	ldrb	r3, [r7, #15]
}
 8011b12:	4618      	mov	r0, r3
 8011b14:	3710      	adds	r7, #16
 8011b16:	46bd      	mov	sp, r7
 8011b18:	bd80      	pop	{r7, pc}
 8011b1a:	bf00      	nop
 8011b1c:	24000467 	.word	0x24000467

08011b20 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8011b20:	b580      	push	{r7, lr}
 8011b22:	b084      	sub	sp, #16
 8011b24:	af00      	add	r7, sp, #0
 8011b26:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8011b28:	687b      	ldr	r3, [r7, #4]
 8011b2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011b2e:	687b      	ldr	r3, [r7, #4]
 8011b30:	32b0      	adds	r2, #176	; 0xb0
 8011b32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b36:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8011b38:	687b      	ldr	r3, [r7, #4]
 8011b3a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011b3e:	687b      	ldr	r3, [r7, #4]
 8011b40:	32b0      	adds	r2, #176	; 0xb0
 8011b42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d101      	bne.n	8011b4e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8011b4a:	2303      	movs	r3, #3
 8011b4c:	e018      	b.n	8011b80 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	7c1b      	ldrb	r3, [r3, #16]
 8011b52:	2b00      	cmp	r3, #0
 8011b54:	d10a      	bne.n	8011b6c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011b56:	4b0c      	ldr	r3, [pc, #48]	; (8011b88 <USBD_CDC_ReceivePacket+0x68>)
 8011b58:	7819      	ldrb	r1, [r3, #0]
 8011b5a:	68fb      	ldr	r3, [r7, #12]
 8011b5c:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011b60:	f44f 7300 	mov.w	r3, #512	; 0x200
 8011b64:	6878      	ldr	r0, [r7, #4]
 8011b66:	f001 ffff 	bl	8013b68 <USBD_LL_PrepareReceive>
 8011b6a:	e008      	b.n	8011b7e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8011b6c:	4b06      	ldr	r3, [pc, #24]	; (8011b88 <USBD_CDC_ReceivePacket+0x68>)
 8011b6e:	7819      	ldrb	r1, [r3, #0]
 8011b70:	68fb      	ldr	r3, [r7, #12]
 8011b72:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8011b76:	2340      	movs	r3, #64	; 0x40
 8011b78:	6878      	ldr	r0, [r7, #4]
 8011b7a:	f001 fff5 	bl	8013b68 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8011b7e:	2300      	movs	r3, #0
}
 8011b80:	4618      	mov	r0, r3
 8011b82:	3710      	adds	r7, #16
 8011b84:	46bd      	mov	sp, r7
 8011b86:	bd80      	pop	{r7, pc}
 8011b88:	24000468 	.word	0x24000468

08011b8c <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8011b8c:	b580      	push	{r7, lr}
 8011b8e:	b086      	sub	sp, #24
 8011b90:	af00      	add	r7, sp, #0
 8011b92:	60f8      	str	r0, [r7, #12]
 8011b94:	60b9      	str	r1, [r7, #8]
 8011b96:	4613      	mov	r3, r2
 8011b98:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8011b9a:	68fb      	ldr	r3, [r7, #12]
 8011b9c:	2b00      	cmp	r3, #0
 8011b9e:	d101      	bne.n	8011ba4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011ba0:	2303      	movs	r3, #3
 8011ba2:	e01f      	b.n	8011be4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8011ba4:	68fb      	ldr	r3, [r7, #12]
 8011ba6:	2200      	movs	r2, #0
 8011ba8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8011bac:	68fb      	ldr	r3, [r7, #12]
 8011bae:	2200      	movs	r2, #0
 8011bb0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8011bb4:	68fb      	ldr	r3, [r7, #12]
 8011bb6:	2200      	movs	r2, #0
 8011bb8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8011bbc:	68bb      	ldr	r3, [r7, #8]
 8011bbe:	2b00      	cmp	r3, #0
 8011bc0:	d003      	beq.n	8011bca <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8011bc2:	68fb      	ldr	r3, [r7, #12]
 8011bc4:	68ba      	ldr	r2, [r7, #8]
 8011bc6:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8011bca:	68fb      	ldr	r3, [r7, #12]
 8011bcc:	2201      	movs	r2, #1
 8011bce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8011bd2:	68fb      	ldr	r3, [r7, #12]
 8011bd4:	79fa      	ldrb	r2, [r7, #7]
 8011bd6:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8011bd8:	68f8      	ldr	r0, [r7, #12]
 8011bda:	f001 fe6b 	bl	80138b4 <USBD_LL_Init>
 8011bde:	4603      	mov	r3, r0
 8011be0:	75fb      	strb	r3, [r7, #23]

  return ret;
 8011be2:	7dfb      	ldrb	r3, [r7, #23]
}
 8011be4:	4618      	mov	r0, r3
 8011be6:	3718      	adds	r7, #24
 8011be8:	46bd      	mov	sp, r7
 8011bea:	bd80      	pop	{r7, pc}

08011bec <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8011bec:	b580      	push	{r7, lr}
 8011bee:	b084      	sub	sp, #16
 8011bf0:	af00      	add	r7, sp, #0
 8011bf2:	6078      	str	r0, [r7, #4]
 8011bf4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8011bf6:	2300      	movs	r3, #0
 8011bf8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8011bfa:	683b      	ldr	r3, [r7, #0]
 8011bfc:	2b00      	cmp	r3, #0
 8011bfe:	d101      	bne.n	8011c04 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8011c00:	2303      	movs	r3, #3
 8011c02:	e025      	b.n	8011c50 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8011c04:	687b      	ldr	r3, [r7, #4]
 8011c06:	683a      	ldr	r2, [r7, #0]
 8011c08:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8011c0c:	687b      	ldr	r3, [r7, #4]
 8011c0e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	32ae      	adds	r2, #174	; 0xae
 8011c16:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c1c:	2b00      	cmp	r3, #0
 8011c1e:	d00f      	beq.n	8011c40 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8011c20:	687b      	ldr	r3, [r7, #4]
 8011c22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8011c26:	687b      	ldr	r3, [r7, #4]
 8011c28:	32ae      	adds	r2, #174	; 0xae
 8011c2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011c30:	f107 020e 	add.w	r2, r7, #14
 8011c34:	4610      	mov	r0, r2
 8011c36:	4798      	blx	r3
 8011c38:	4602      	mov	r2, r0
 8011c3a:	687b      	ldr	r3, [r7, #4]
 8011c3c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8011c46:	1c5a      	adds	r2, r3, #1
 8011c48:	687b      	ldr	r3, [r7, #4]
 8011c4a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8011c4e:	2300      	movs	r3, #0
}
 8011c50:	4618      	mov	r0, r3
 8011c52:	3710      	adds	r7, #16
 8011c54:	46bd      	mov	sp, r7
 8011c56:	bd80      	pop	{r7, pc}

08011c58 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8011c58:	b580      	push	{r7, lr}
 8011c5a:	b082      	sub	sp, #8
 8011c5c:	af00      	add	r7, sp, #0
 8011c5e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8011c60:	6878      	ldr	r0, [r7, #4]
 8011c62:	f001 fe77 	bl	8013954 <USBD_LL_Start>
 8011c66:	4603      	mov	r3, r0
}
 8011c68:	4618      	mov	r0, r3
 8011c6a:	3708      	adds	r7, #8
 8011c6c:	46bd      	mov	sp, r7
 8011c6e:	bd80      	pop	{r7, pc}

08011c70 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8011c70:	b480      	push	{r7}
 8011c72:	b083      	sub	sp, #12
 8011c74:	af00      	add	r7, sp, #0
 8011c76:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8011c78:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8011c7a:	4618      	mov	r0, r3
 8011c7c:	370c      	adds	r7, #12
 8011c7e:	46bd      	mov	sp, r7
 8011c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c84:	4770      	bx	lr

08011c86 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011c86:	b580      	push	{r7, lr}
 8011c88:	b084      	sub	sp, #16
 8011c8a:	af00      	add	r7, sp, #0
 8011c8c:	6078      	str	r0, [r7, #4]
 8011c8e:	460b      	mov	r3, r1
 8011c90:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8011c92:	2300      	movs	r3, #0
 8011c94:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011c9c:	2b00      	cmp	r3, #0
 8011c9e:	d009      	beq.n	8011cb4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8011ca0:	687b      	ldr	r3, [r7, #4]
 8011ca2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	78fa      	ldrb	r2, [r7, #3]
 8011caa:	4611      	mov	r1, r2
 8011cac:	6878      	ldr	r0, [r7, #4]
 8011cae:	4798      	blx	r3
 8011cb0:	4603      	mov	r3, r0
 8011cb2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cb6:	4618      	mov	r0, r3
 8011cb8:	3710      	adds	r7, #16
 8011cba:	46bd      	mov	sp, r7
 8011cbc:	bd80      	pop	{r7, pc}

08011cbe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8011cbe:	b580      	push	{r7, lr}
 8011cc0:	b084      	sub	sp, #16
 8011cc2:	af00      	add	r7, sp, #0
 8011cc4:	6078      	str	r0, [r7, #4]
 8011cc6:	460b      	mov	r3, r1
 8011cc8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8011cca:	2300      	movs	r3, #0
 8011ccc:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8011cce:	687b      	ldr	r3, [r7, #4]
 8011cd0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011cd4:	685b      	ldr	r3, [r3, #4]
 8011cd6:	78fa      	ldrb	r2, [r7, #3]
 8011cd8:	4611      	mov	r1, r2
 8011cda:	6878      	ldr	r0, [r7, #4]
 8011cdc:	4798      	blx	r3
 8011cde:	4603      	mov	r3, r0
 8011ce0:	2b00      	cmp	r3, #0
 8011ce2:	d001      	beq.n	8011ce8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8011ce4:	2303      	movs	r3, #3
 8011ce6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8011ce8:	7bfb      	ldrb	r3, [r7, #15]
}
 8011cea:	4618      	mov	r0, r3
 8011cec:	3710      	adds	r7, #16
 8011cee:	46bd      	mov	sp, r7
 8011cf0:	bd80      	pop	{r7, pc}

08011cf2 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8011cf2:	b580      	push	{r7, lr}
 8011cf4:	b084      	sub	sp, #16
 8011cf6:	af00      	add	r7, sp, #0
 8011cf8:	6078      	str	r0, [r7, #4]
 8011cfa:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8011cfc:	687b      	ldr	r3, [r7, #4]
 8011cfe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011d02:	6839      	ldr	r1, [r7, #0]
 8011d04:	4618      	mov	r0, r3
 8011d06:	f001 f90e 	bl	8012f26 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8011d0a:	687b      	ldr	r3, [r7, #4]
 8011d0c:	2201      	movs	r2, #1
 8011d0e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8011d12:	687b      	ldr	r3, [r7, #4]
 8011d14:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8011d18:	461a      	mov	r2, r3
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011d26:	f003 031f 	and.w	r3, r3, #31
 8011d2a:	2b02      	cmp	r3, #2
 8011d2c:	d01a      	beq.n	8011d64 <USBD_LL_SetupStage+0x72>
 8011d2e:	2b02      	cmp	r3, #2
 8011d30:	d822      	bhi.n	8011d78 <USBD_LL_SetupStage+0x86>
 8011d32:	2b00      	cmp	r3, #0
 8011d34:	d002      	beq.n	8011d3c <USBD_LL_SetupStage+0x4a>
 8011d36:	2b01      	cmp	r3, #1
 8011d38:	d00a      	beq.n	8011d50 <USBD_LL_SetupStage+0x5e>
 8011d3a:	e01d      	b.n	8011d78 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8011d3c:	687b      	ldr	r3, [r7, #4]
 8011d3e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011d42:	4619      	mov	r1, r3
 8011d44:	6878      	ldr	r0, [r7, #4]
 8011d46:	f000 fb65 	bl	8012414 <USBD_StdDevReq>
 8011d4a:	4603      	mov	r3, r0
 8011d4c:	73fb      	strb	r3, [r7, #15]
      break;
 8011d4e:	e020      	b.n	8011d92 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8011d50:	687b      	ldr	r3, [r7, #4]
 8011d52:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011d56:	4619      	mov	r1, r3
 8011d58:	6878      	ldr	r0, [r7, #4]
 8011d5a:	f000 fbcd 	bl	80124f8 <USBD_StdItfReq>
 8011d5e:	4603      	mov	r3, r0
 8011d60:	73fb      	strb	r3, [r7, #15]
      break;
 8011d62:	e016      	b.n	8011d92 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8011d6a:	4619      	mov	r1, r3
 8011d6c:	6878      	ldr	r0, [r7, #4]
 8011d6e:	f000 fc2f 	bl	80125d0 <USBD_StdEPReq>
 8011d72:	4603      	mov	r3, r0
 8011d74:	73fb      	strb	r3, [r7, #15]
      break;
 8011d76:	e00c      	b.n	8011d92 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011d7e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8011d82:	b2db      	uxtb	r3, r3
 8011d84:	4619      	mov	r1, r3
 8011d86:	6878      	ldr	r0, [r7, #4]
 8011d88:	f001 fe44 	bl	8013a14 <USBD_LL_StallEP>
 8011d8c:	4603      	mov	r3, r0
 8011d8e:	73fb      	strb	r3, [r7, #15]
      break;
 8011d90:	bf00      	nop
  }

  return ret;
 8011d92:	7bfb      	ldrb	r3, [r7, #15]
}
 8011d94:	4618      	mov	r0, r3
 8011d96:	3710      	adds	r7, #16
 8011d98:	46bd      	mov	sp, r7
 8011d9a:	bd80      	pop	{r7, pc}

08011d9c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8011d9c:	b580      	push	{r7, lr}
 8011d9e:	b086      	sub	sp, #24
 8011da0:	af00      	add	r7, sp, #0
 8011da2:	60f8      	str	r0, [r7, #12]
 8011da4:	460b      	mov	r3, r1
 8011da6:	607a      	str	r2, [r7, #4]
 8011da8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8011daa:	2300      	movs	r3, #0
 8011dac:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8011dae:	7afb      	ldrb	r3, [r7, #11]
 8011db0:	2b00      	cmp	r3, #0
 8011db2:	d16e      	bne.n	8011e92 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8011db4:	68fb      	ldr	r3, [r7, #12]
 8011db6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8011dba:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8011dbc:	68fb      	ldr	r3, [r7, #12]
 8011dbe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011dc2:	2b03      	cmp	r3, #3
 8011dc4:	f040 8098 	bne.w	8011ef8 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8011dc8:	693b      	ldr	r3, [r7, #16]
 8011dca:	689a      	ldr	r2, [r3, #8]
 8011dcc:	693b      	ldr	r3, [r7, #16]
 8011dce:	68db      	ldr	r3, [r3, #12]
 8011dd0:	429a      	cmp	r2, r3
 8011dd2:	d913      	bls.n	8011dfc <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8011dd4:	693b      	ldr	r3, [r7, #16]
 8011dd6:	689a      	ldr	r2, [r3, #8]
 8011dd8:	693b      	ldr	r3, [r7, #16]
 8011dda:	68db      	ldr	r3, [r3, #12]
 8011ddc:	1ad2      	subs	r2, r2, r3
 8011dde:	693b      	ldr	r3, [r7, #16]
 8011de0:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8011de2:	693b      	ldr	r3, [r7, #16]
 8011de4:	68da      	ldr	r2, [r3, #12]
 8011de6:	693b      	ldr	r3, [r7, #16]
 8011de8:	689b      	ldr	r3, [r3, #8]
 8011dea:	4293      	cmp	r3, r2
 8011dec:	bf28      	it	cs
 8011dee:	4613      	movcs	r3, r2
 8011df0:	461a      	mov	r2, r3
 8011df2:	6879      	ldr	r1, [r7, #4]
 8011df4:	68f8      	ldr	r0, [r7, #12]
 8011df6:	f001 f98a 	bl	801310e <USBD_CtlContinueRx>
 8011dfa:	e07d      	b.n	8011ef8 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8011e02:	f003 031f 	and.w	r3, r3, #31
 8011e06:	2b02      	cmp	r3, #2
 8011e08:	d014      	beq.n	8011e34 <USBD_LL_DataOutStage+0x98>
 8011e0a:	2b02      	cmp	r3, #2
 8011e0c:	d81d      	bhi.n	8011e4a <USBD_LL_DataOutStage+0xae>
 8011e0e:	2b00      	cmp	r3, #0
 8011e10:	d002      	beq.n	8011e18 <USBD_LL_DataOutStage+0x7c>
 8011e12:	2b01      	cmp	r3, #1
 8011e14:	d003      	beq.n	8011e1e <USBD_LL_DataOutStage+0x82>
 8011e16:	e018      	b.n	8011e4a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8011e18:	2300      	movs	r3, #0
 8011e1a:	75bb      	strb	r3, [r7, #22]
            break;
 8011e1c:	e018      	b.n	8011e50 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8011e1e:	68fb      	ldr	r3, [r7, #12]
 8011e20:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8011e24:	b2db      	uxtb	r3, r3
 8011e26:	4619      	mov	r1, r3
 8011e28:	68f8      	ldr	r0, [r7, #12]
 8011e2a:	f000 fa64 	bl	80122f6 <USBD_CoreFindIF>
 8011e2e:	4603      	mov	r3, r0
 8011e30:	75bb      	strb	r3, [r7, #22]
            break;
 8011e32:	e00d      	b.n	8011e50 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8011e3a:	b2db      	uxtb	r3, r3
 8011e3c:	4619      	mov	r1, r3
 8011e3e:	68f8      	ldr	r0, [r7, #12]
 8011e40:	f000 fa66 	bl	8012310 <USBD_CoreFindEP>
 8011e44:	4603      	mov	r3, r0
 8011e46:	75bb      	strb	r3, [r7, #22]
            break;
 8011e48:	e002      	b.n	8011e50 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8011e4a:	2300      	movs	r3, #0
 8011e4c:	75bb      	strb	r3, [r7, #22]
            break;
 8011e4e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8011e50:	7dbb      	ldrb	r3, [r7, #22]
 8011e52:	2b00      	cmp	r3, #0
 8011e54:	d119      	bne.n	8011e8a <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011e56:	68fb      	ldr	r3, [r7, #12]
 8011e58:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011e5c:	b2db      	uxtb	r3, r3
 8011e5e:	2b03      	cmp	r3, #3
 8011e60:	d113      	bne.n	8011e8a <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8011e62:	7dba      	ldrb	r2, [r7, #22]
 8011e64:	68fb      	ldr	r3, [r7, #12]
 8011e66:	32ae      	adds	r2, #174	; 0xae
 8011e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e6c:	691b      	ldr	r3, [r3, #16]
 8011e6e:	2b00      	cmp	r3, #0
 8011e70:	d00b      	beq.n	8011e8a <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8011e72:	7dba      	ldrb	r2, [r7, #22]
 8011e74:	68fb      	ldr	r3, [r7, #12]
 8011e76:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8011e7a:	7dba      	ldrb	r2, [r7, #22]
 8011e7c:	68fb      	ldr	r3, [r7, #12]
 8011e7e:	32ae      	adds	r2, #174	; 0xae
 8011e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011e84:	691b      	ldr	r3, [r3, #16]
 8011e86:	68f8      	ldr	r0, [r7, #12]
 8011e88:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8011e8a:	68f8      	ldr	r0, [r7, #12]
 8011e8c:	f001 f950 	bl	8013130 <USBD_CtlSendStatus>
 8011e90:	e032      	b.n	8011ef8 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8011e92:	7afb      	ldrb	r3, [r7, #11]
 8011e94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011e98:	b2db      	uxtb	r3, r3
 8011e9a:	4619      	mov	r1, r3
 8011e9c:	68f8      	ldr	r0, [r7, #12]
 8011e9e:	f000 fa37 	bl	8012310 <USBD_CoreFindEP>
 8011ea2:	4603      	mov	r3, r0
 8011ea4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8011ea6:	7dbb      	ldrb	r3, [r7, #22]
 8011ea8:	2bff      	cmp	r3, #255	; 0xff
 8011eaa:	d025      	beq.n	8011ef8 <USBD_LL_DataOutStage+0x15c>
 8011eac:	7dbb      	ldrb	r3, [r7, #22]
 8011eae:	2b00      	cmp	r3, #0
 8011eb0:	d122      	bne.n	8011ef8 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011eb8:	b2db      	uxtb	r3, r3
 8011eba:	2b03      	cmp	r3, #3
 8011ebc:	d117      	bne.n	8011eee <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8011ebe:	7dba      	ldrb	r2, [r7, #22]
 8011ec0:	68fb      	ldr	r3, [r7, #12]
 8011ec2:	32ae      	adds	r2, #174	; 0xae
 8011ec4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ec8:	699b      	ldr	r3, [r3, #24]
 8011eca:	2b00      	cmp	r3, #0
 8011ecc:	d00f      	beq.n	8011eee <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8011ece:	7dba      	ldrb	r2, [r7, #22]
 8011ed0:	68fb      	ldr	r3, [r7, #12]
 8011ed2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8011ed6:	7dba      	ldrb	r2, [r7, #22]
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	32ae      	adds	r2, #174	; 0xae
 8011edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8011ee0:	699b      	ldr	r3, [r3, #24]
 8011ee2:	7afa      	ldrb	r2, [r7, #11]
 8011ee4:	4611      	mov	r1, r2
 8011ee6:	68f8      	ldr	r0, [r7, #12]
 8011ee8:	4798      	blx	r3
 8011eea:	4603      	mov	r3, r0
 8011eec:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8011eee:	7dfb      	ldrb	r3, [r7, #23]
 8011ef0:	2b00      	cmp	r3, #0
 8011ef2:	d001      	beq.n	8011ef8 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8011ef4:	7dfb      	ldrb	r3, [r7, #23]
 8011ef6:	e000      	b.n	8011efa <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8011ef8:	2300      	movs	r3, #0
}
 8011efa:	4618      	mov	r0, r3
 8011efc:	3718      	adds	r7, #24
 8011efe:	46bd      	mov	sp, r7
 8011f00:	bd80      	pop	{r7, pc}

08011f02 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8011f02:	b580      	push	{r7, lr}
 8011f04:	b086      	sub	sp, #24
 8011f06:	af00      	add	r7, sp, #0
 8011f08:	60f8      	str	r0, [r7, #12]
 8011f0a:	460b      	mov	r3, r1
 8011f0c:	607a      	str	r2, [r7, #4]
 8011f0e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8011f10:	7afb      	ldrb	r3, [r7, #11]
 8011f12:	2b00      	cmp	r3, #0
 8011f14:	d16f      	bne.n	8011ff6 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	3314      	adds	r3, #20
 8011f1a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8011f22:	2b02      	cmp	r3, #2
 8011f24:	d15a      	bne.n	8011fdc <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8011f26:	693b      	ldr	r3, [r7, #16]
 8011f28:	689a      	ldr	r2, [r3, #8]
 8011f2a:	693b      	ldr	r3, [r7, #16]
 8011f2c:	68db      	ldr	r3, [r3, #12]
 8011f2e:	429a      	cmp	r2, r3
 8011f30:	d914      	bls.n	8011f5c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8011f32:	693b      	ldr	r3, [r7, #16]
 8011f34:	689a      	ldr	r2, [r3, #8]
 8011f36:	693b      	ldr	r3, [r7, #16]
 8011f38:	68db      	ldr	r3, [r3, #12]
 8011f3a:	1ad2      	subs	r2, r2, r3
 8011f3c:	693b      	ldr	r3, [r7, #16]
 8011f3e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8011f40:	693b      	ldr	r3, [r7, #16]
 8011f42:	689b      	ldr	r3, [r3, #8]
 8011f44:	461a      	mov	r2, r3
 8011f46:	6879      	ldr	r1, [r7, #4]
 8011f48:	68f8      	ldr	r0, [r7, #12]
 8011f4a:	f001 f8b2 	bl	80130b2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011f4e:	2300      	movs	r3, #0
 8011f50:	2200      	movs	r2, #0
 8011f52:	2100      	movs	r1, #0
 8011f54:	68f8      	ldr	r0, [r7, #12]
 8011f56:	f001 fe07 	bl	8013b68 <USBD_LL_PrepareReceive>
 8011f5a:	e03f      	b.n	8011fdc <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8011f5c:	693b      	ldr	r3, [r7, #16]
 8011f5e:	68da      	ldr	r2, [r3, #12]
 8011f60:	693b      	ldr	r3, [r7, #16]
 8011f62:	689b      	ldr	r3, [r3, #8]
 8011f64:	429a      	cmp	r2, r3
 8011f66:	d11c      	bne.n	8011fa2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8011f68:	693b      	ldr	r3, [r7, #16]
 8011f6a:	685a      	ldr	r2, [r3, #4]
 8011f6c:	693b      	ldr	r3, [r7, #16]
 8011f6e:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8011f70:	429a      	cmp	r2, r3
 8011f72:	d316      	bcc.n	8011fa2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8011f74:	693b      	ldr	r3, [r7, #16]
 8011f76:	685a      	ldr	r2, [r3, #4]
 8011f78:	68fb      	ldr	r3, [r7, #12]
 8011f7a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8011f7e:	429a      	cmp	r2, r3
 8011f80:	d20f      	bcs.n	8011fa2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8011f82:	2200      	movs	r2, #0
 8011f84:	2100      	movs	r1, #0
 8011f86:	68f8      	ldr	r0, [r7, #12]
 8011f88:	f001 f893 	bl	80130b2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8011f8c:	68fb      	ldr	r3, [r7, #12]
 8011f8e:	2200      	movs	r2, #0
 8011f90:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8011f94:	2300      	movs	r3, #0
 8011f96:	2200      	movs	r2, #0
 8011f98:	2100      	movs	r1, #0
 8011f9a:	68f8      	ldr	r0, [r7, #12]
 8011f9c:	f001 fde4 	bl	8013b68 <USBD_LL_PrepareReceive>
 8011fa0:	e01c      	b.n	8011fdc <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8011fa8:	b2db      	uxtb	r3, r3
 8011faa:	2b03      	cmp	r3, #3
 8011fac:	d10f      	bne.n	8011fce <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8011fae:	68fb      	ldr	r3, [r7, #12]
 8011fb0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011fb4:	68db      	ldr	r3, [r3, #12]
 8011fb6:	2b00      	cmp	r3, #0
 8011fb8:	d009      	beq.n	8011fce <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8011fba:	68fb      	ldr	r3, [r7, #12]
 8011fbc:	2200      	movs	r2, #0
 8011fbe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8011fc2:	68fb      	ldr	r3, [r7, #12]
 8011fc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8011fc8:	68db      	ldr	r3, [r3, #12]
 8011fca:	68f8      	ldr	r0, [r7, #12]
 8011fcc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8011fce:	2180      	movs	r1, #128	; 0x80
 8011fd0:	68f8      	ldr	r0, [r7, #12]
 8011fd2:	f001 fd1f 	bl	8013a14 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8011fd6:	68f8      	ldr	r0, [r7, #12]
 8011fd8:	f001 f8bd 	bl	8013156 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d03a      	beq.n	801205c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8011fe6:	68f8      	ldr	r0, [r7, #12]
 8011fe8:	f7ff fe42 	bl	8011c70 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8011fec:	68fb      	ldr	r3, [r7, #12]
 8011fee:	2200      	movs	r2, #0
 8011ff0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8011ff4:	e032      	b.n	801205c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8011ff6:	7afb      	ldrb	r3, [r7, #11]
 8011ff8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8011ffc:	b2db      	uxtb	r3, r3
 8011ffe:	4619      	mov	r1, r3
 8012000:	68f8      	ldr	r0, [r7, #12]
 8012002:	f000 f985 	bl	8012310 <USBD_CoreFindEP>
 8012006:	4603      	mov	r3, r0
 8012008:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801200a:	7dfb      	ldrb	r3, [r7, #23]
 801200c:	2bff      	cmp	r3, #255	; 0xff
 801200e:	d025      	beq.n	801205c <USBD_LL_DataInStage+0x15a>
 8012010:	7dfb      	ldrb	r3, [r7, #23]
 8012012:	2b00      	cmp	r3, #0
 8012014:	d122      	bne.n	801205c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012016:	68fb      	ldr	r3, [r7, #12]
 8012018:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801201c:	b2db      	uxtb	r3, r3
 801201e:	2b03      	cmp	r3, #3
 8012020:	d11c      	bne.n	801205c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8012022:	7dfa      	ldrb	r2, [r7, #23]
 8012024:	68fb      	ldr	r3, [r7, #12]
 8012026:	32ae      	adds	r2, #174	; 0xae
 8012028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801202c:	695b      	ldr	r3, [r3, #20]
 801202e:	2b00      	cmp	r3, #0
 8012030:	d014      	beq.n	801205c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8012032:	7dfa      	ldrb	r2, [r7, #23]
 8012034:	68fb      	ldr	r3, [r7, #12]
 8012036:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 801203a:	7dfa      	ldrb	r2, [r7, #23]
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	32ae      	adds	r2, #174	; 0xae
 8012040:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012044:	695b      	ldr	r3, [r3, #20]
 8012046:	7afa      	ldrb	r2, [r7, #11]
 8012048:	4611      	mov	r1, r2
 801204a:	68f8      	ldr	r0, [r7, #12]
 801204c:	4798      	blx	r3
 801204e:	4603      	mov	r3, r0
 8012050:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8012052:	7dbb      	ldrb	r3, [r7, #22]
 8012054:	2b00      	cmp	r3, #0
 8012056:	d001      	beq.n	801205c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8012058:	7dbb      	ldrb	r3, [r7, #22]
 801205a:	e000      	b.n	801205e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 801205c:	2300      	movs	r3, #0
}
 801205e:	4618      	mov	r0, r3
 8012060:	3718      	adds	r7, #24
 8012062:	46bd      	mov	sp, r7
 8012064:	bd80      	pop	{r7, pc}

08012066 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8012066:	b580      	push	{r7, lr}
 8012068:	b084      	sub	sp, #16
 801206a:	af00      	add	r7, sp, #0
 801206c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 801206e:	2300      	movs	r3, #0
 8012070:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8012072:	687b      	ldr	r3, [r7, #4]
 8012074:	2201      	movs	r2, #1
 8012076:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 801207a:	687b      	ldr	r3, [r7, #4]
 801207c:	2200      	movs	r2, #0
 801207e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8012082:	687b      	ldr	r3, [r7, #4]
 8012084:	2200      	movs	r2, #0
 8012086:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8012088:	687b      	ldr	r3, [r7, #4]
 801208a:	2200      	movs	r2, #0
 801208c:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8012090:	687b      	ldr	r3, [r7, #4]
 8012092:	2200      	movs	r2, #0
 8012094:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8012098:	687b      	ldr	r3, [r7, #4]
 801209a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801209e:	2b00      	cmp	r3, #0
 80120a0:	d014      	beq.n	80120cc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80120a2:	687b      	ldr	r3, [r7, #4]
 80120a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120a8:	685b      	ldr	r3, [r3, #4]
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d00e      	beq.n	80120cc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80120ae:	687b      	ldr	r3, [r7, #4]
 80120b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80120b4:	685b      	ldr	r3, [r3, #4]
 80120b6:	687a      	ldr	r2, [r7, #4]
 80120b8:	6852      	ldr	r2, [r2, #4]
 80120ba:	b2d2      	uxtb	r2, r2
 80120bc:	4611      	mov	r1, r2
 80120be:	6878      	ldr	r0, [r7, #4]
 80120c0:	4798      	blx	r3
 80120c2:	4603      	mov	r3, r0
 80120c4:	2b00      	cmp	r3, #0
 80120c6:	d001      	beq.n	80120cc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80120c8:	2303      	movs	r3, #3
 80120ca:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80120cc:	2340      	movs	r3, #64	; 0x40
 80120ce:	2200      	movs	r2, #0
 80120d0:	2100      	movs	r1, #0
 80120d2:	6878      	ldr	r0, [r7, #4]
 80120d4:	f001 fc59 	bl	801398a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	2201      	movs	r2, #1
 80120dc:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80120e0:	687b      	ldr	r3, [r7, #4]
 80120e2:	2240      	movs	r2, #64	; 0x40
 80120e4:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80120e8:	2340      	movs	r3, #64	; 0x40
 80120ea:	2200      	movs	r2, #0
 80120ec:	2180      	movs	r1, #128	; 0x80
 80120ee:	6878      	ldr	r0, [r7, #4]
 80120f0:	f001 fc4b 	bl	801398a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	2201      	movs	r2, #1
 80120f8:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80120fa:	687b      	ldr	r3, [r7, #4]
 80120fc:	2240      	movs	r2, #64	; 0x40
 80120fe:	621a      	str	r2, [r3, #32]

  return ret;
 8012100:	7bfb      	ldrb	r3, [r7, #15]
}
 8012102:	4618      	mov	r0, r3
 8012104:	3710      	adds	r7, #16
 8012106:	46bd      	mov	sp, r7
 8012108:	bd80      	pop	{r7, pc}

0801210a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 801210a:	b480      	push	{r7}
 801210c:	b083      	sub	sp, #12
 801210e:	af00      	add	r7, sp, #0
 8012110:	6078      	str	r0, [r7, #4]
 8012112:	460b      	mov	r3, r1
 8012114:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8012116:	687b      	ldr	r3, [r7, #4]
 8012118:	78fa      	ldrb	r2, [r7, #3]
 801211a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 801211c:	2300      	movs	r3, #0
}
 801211e:	4618      	mov	r0, r3
 8012120:	370c      	adds	r7, #12
 8012122:	46bd      	mov	sp, r7
 8012124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012128:	4770      	bx	lr

0801212a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 801212a:	b480      	push	{r7}
 801212c:	b083      	sub	sp, #12
 801212e:	af00      	add	r7, sp, #0
 8012130:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8012132:	687b      	ldr	r3, [r7, #4]
 8012134:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012138:	b2db      	uxtb	r3, r3
 801213a:	2b04      	cmp	r3, #4
 801213c:	d006      	beq.n	801214c <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012144:	b2da      	uxtb	r2, r3
 8012146:	687b      	ldr	r3, [r7, #4]
 8012148:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	2204      	movs	r2, #4
 8012150:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8012154:	2300      	movs	r3, #0
}
 8012156:	4618      	mov	r0, r3
 8012158:	370c      	adds	r7, #12
 801215a:	46bd      	mov	sp, r7
 801215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012160:	4770      	bx	lr

08012162 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8012162:	b480      	push	{r7}
 8012164:	b083      	sub	sp, #12
 8012166:	af00      	add	r7, sp, #0
 8012168:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 801216a:	687b      	ldr	r3, [r7, #4]
 801216c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012170:	b2db      	uxtb	r3, r3
 8012172:	2b04      	cmp	r3, #4
 8012174:	d106      	bne.n	8012184 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8012176:	687b      	ldr	r3, [r7, #4]
 8012178:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 801217c:	b2da      	uxtb	r2, r3
 801217e:	687b      	ldr	r3, [r7, #4]
 8012180:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8012184:	2300      	movs	r3, #0
}
 8012186:	4618      	mov	r0, r3
 8012188:	370c      	adds	r7, #12
 801218a:	46bd      	mov	sp, r7
 801218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012190:	4770      	bx	lr

08012192 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8012192:	b580      	push	{r7, lr}
 8012194:	b082      	sub	sp, #8
 8012196:	af00      	add	r7, sp, #0
 8012198:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801219a:	687b      	ldr	r3, [r7, #4]
 801219c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80121a0:	b2db      	uxtb	r3, r3
 80121a2:	2b03      	cmp	r3, #3
 80121a4:	d110      	bne.n	80121c8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80121a6:	687b      	ldr	r3, [r7, #4]
 80121a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80121ac:	2b00      	cmp	r3, #0
 80121ae:	d00b      	beq.n	80121c8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80121b0:	687b      	ldr	r3, [r7, #4]
 80121b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80121b6:	69db      	ldr	r3, [r3, #28]
 80121b8:	2b00      	cmp	r3, #0
 80121ba:	d005      	beq.n	80121c8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80121bc:	687b      	ldr	r3, [r7, #4]
 80121be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80121c2:	69db      	ldr	r3, [r3, #28]
 80121c4:	6878      	ldr	r0, [r7, #4]
 80121c6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80121c8:	2300      	movs	r3, #0
}
 80121ca:	4618      	mov	r0, r3
 80121cc:	3708      	adds	r7, #8
 80121ce:	46bd      	mov	sp, r7
 80121d0:	bd80      	pop	{r7, pc}

080121d2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80121d2:	b580      	push	{r7, lr}
 80121d4:	b082      	sub	sp, #8
 80121d6:	af00      	add	r7, sp, #0
 80121d8:	6078      	str	r0, [r7, #4]
 80121da:	460b      	mov	r3, r1
 80121dc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	32ae      	adds	r2, #174	; 0xae
 80121e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	d101      	bne.n	80121f4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80121f0:	2303      	movs	r3, #3
 80121f2:	e01c      	b.n	801222e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80121f4:	687b      	ldr	r3, [r7, #4]
 80121f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80121fa:	b2db      	uxtb	r3, r3
 80121fc:	2b03      	cmp	r3, #3
 80121fe:	d115      	bne.n	801222c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012206:	687b      	ldr	r3, [r7, #4]
 8012208:	32ae      	adds	r2, #174	; 0xae
 801220a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801220e:	6a1b      	ldr	r3, [r3, #32]
 8012210:	2b00      	cmp	r3, #0
 8012212:	d00b      	beq.n	801222c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801221a:	687b      	ldr	r3, [r7, #4]
 801221c:	32ae      	adds	r2, #174	; 0xae
 801221e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012222:	6a1b      	ldr	r3, [r3, #32]
 8012224:	78fa      	ldrb	r2, [r7, #3]
 8012226:	4611      	mov	r1, r2
 8012228:	6878      	ldr	r0, [r7, #4]
 801222a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 801222c:	2300      	movs	r3, #0
}
 801222e:	4618      	mov	r0, r3
 8012230:	3708      	adds	r7, #8
 8012232:	46bd      	mov	sp, r7
 8012234:	bd80      	pop	{r7, pc}

08012236 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8012236:	b580      	push	{r7, lr}
 8012238:	b082      	sub	sp, #8
 801223a:	af00      	add	r7, sp, #0
 801223c:	6078      	str	r0, [r7, #4]
 801223e:	460b      	mov	r3, r1
 8012240:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	32ae      	adds	r2, #174	; 0xae
 801224c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012250:	2b00      	cmp	r3, #0
 8012252:	d101      	bne.n	8012258 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8012254:	2303      	movs	r3, #3
 8012256:	e01c      	b.n	8012292 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801225e:	b2db      	uxtb	r3, r3
 8012260:	2b03      	cmp	r3, #3
 8012262:	d115      	bne.n	8012290 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8012264:	687b      	ldr	r3, [r7, #4]
 8012266:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	32ae      	adds	r2, #174	; 0xae
 801226e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012274:	2b00      	cmp	r3, #0
 8012276:	d00b      	beq.n	8012290 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8012278:	687b      	ldr	r3, [r7, #4]
 801227a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 801227e:	687b      	ldr	r3, [r7, #4]
 8012280:	32ae      	adds	r2, #174	; 0xae
 8012282:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012288:	78fa      	ldrb	r2, [r7, #3]
 801228a:	4611      	mov	r1, r2
 801228c:	6878      	ldr	r0, [r7, #4]
 801228e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8012290:	2300      	movs	r3, #0
}
 8012292:	4618      	mov	r0, r3
 8012294:	3708      	adds	r7, #8
 8012296:	46bd      	mov	sp, r7
 8012298:	bd80      	pop	{r7, pc}

0801229a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 801229a:	b480      	push	{r7}
 801229c:	b083      	sub	sp, #12
 801229e:	af00      	add	r7, sp, #0
 80122a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80122a2:	2300      	movs	r3, #0
}
 80122a4:	4618      	mov	r0, r3
 80122a6:	370c      	adds	r7, #12
 80122a8:	46bd      	mov	sp, r7
 80122aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ae:	4770      	bx	lr

080122b0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80122b0:	b580      	push	{r7, lr}
 80122b2:	b084      	sub	sp, #16
 80122b4:	af00      	add	r7, sp, #0
 80122b6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80122b8:	2300      	movs	r3, #0
 80122ba:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	2201      	movs	r2, #1
 80122c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d00e      	beq.n	80122ec <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80122d4:	685b      	ldr	r3, [r3, #4]
 80122d6:	687a      	ldr	r2, [r7, #4]
 80122d8:	6852      	ldr	r2, [r2, #4]
 80122da:	b2d2      	uxtb	r2, r2
 80122dc:	4611      	mov	r1, r2
 80122de:	6878      	ldr	r0, [r7, #4]
 80122e0:	4798      	blx	r3
 80122e2:	4603      	mov	r3, r0
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d001      	beq.n	80122ec <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80122e8:	2303      	movs	r3, #3
 80122ea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80122ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80122ee:	4618      	mov	r0, r3
 80122f0:	3710      	adds	r7, #16
 80122f2:	46bd      	mov	sp, r7
 80122f4:	bd80      	pop	{r7, pc}

080122f6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80122f6:	b480      	push	{r7}
 80122f8:	b083      	sub	sp, #12
 80122fa:	af00      	add	r7, sp, #0
 80122fc:	6078      	str	r0, [r7, #4]
 80122fe:	460b      	mov	r3, r1
 8012300:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8012302:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8012304:	4618      	mov	r0, r3
 8012306:	370c      	adds	r7, #12
 8012308:	46bd      	mov	sp, r7
 801230a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801230e:	4770      	bx	lr

08012310 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8012310:	b480      	push	{r7}
 8012312:	b083      	sub	sp, #12
 8012314:	af00      	add	r7, sp, #0
 8012316:	6078      	str	r0, [r7, #4]
 8012318:	460b      	mov	r3, r1
 801231a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 801231c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 801231e:	4618      	mov	r0, r3
 8012320:	370c      	adds	r7, #12
 8012322:	46bd      	mov	sp, r7
 8012324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012328:	4770      	bx	lr

0801232a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 801232a:	b580      	push	{r7, lr}
 801232c:	b086      	sub	sp, #24
 801232e:	af00      	add	r7, sp, #0
 8012330:	6078      	str	r0, [r7, #4]
 8012332:	460b      	mov	r3, r1
 8012334:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 801233a:	687b      	ldr	r3, [r7, #4]
 801233c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 801233e:	2300      	movs	r3, #0
 8012340:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8012342:	68fb      	ldr	r3, [r7, #12]
 8012344:	885b      	ldrh	r3, [r3, #2]
 8012346:	b29a      	uxth	r2, r3
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	781b      	ldrb	r3, [r3, #0]
 801234c:	b29b      	uxth	r3, r3
 801234e:	429a      	cmp	r2, r3
 8012350:	d920      	bls.n	8012394 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8012352:	68fb      	ldr	r3, [r7, #12]
 8012354:	781b      	ldrb	r3, [r3, #0]
 8012356:	b29b      	uxth	r3, r3
 8012358:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 801235a:	e013      	b.n	8012384 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 801235c:	f107 030a 	add.w	r3, r7, #10
 8012360:	4619      	mov	r1, r3
 8012362:	6978      	ldr	r0, [r7, #20]
 8012364:	f000 f81b 	bl	801239e <USBD_GetNextDesc>
 8012368:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 801236a:	697b      	ldr	r3, [r7, #20]
 801236c:	785b      	ldrb	r3, [r3, #1]
 801236e:	2b05      	cmp	r3, #5
 8012370:	d108      	bne.n	8012384 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8012372:	697b      	ldr	r3, [r7, #20]
 8012374:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8012376:	693b      	ldr	r3, [r7, #16]
 8012378:	789b      	ldrb	r3, [r3, #2]
 801237a:	78fa      	ldrb	r2, [r7, #3]
 801237c:	429a      	cmp	r2, r3
 801237e:	d008      	beq.n	8012392 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8012380:	2300      	movs	r3, #0
 8012382:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8012384:	68fb      	ldr	r3, [r7, #12]
 8012386:	885b      	ldrh	r3, [r3, #2]
 8012388:	b29a      	uxth	r2, r3
 801238a:	897b      	ldrh	r3, [r7, #10]
 801238c:	429a      	cmp	r2, r3
 801238e:	d8e5      	bhi.n	801235c <USBD_GetEpDesc+0x32>
 8012390:	e000      	b.n	8012394 <USBD_GetEpDesc+0x6a>
          break;
 8012392:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8012394:	693b      	ldr	r3, [r7, #16]
}
 8012396:	4618      	mov	r0, r3
 8012398:	3718      	adds	r7, #24
 801239a:	46bd      	mov	sp, r7
 801239c:	bd80      	pop	{r7, pc}

0801239e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 801239e:	b480      	push	{r7}
 80123a0:	b085      	sub	sp, #20
 80123a2:	af00      	add	r7, sp, #0
 80123a4:	6078      	str	r0, [r7, #4]
 80123a6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80123ac:	683b      	ldr	r3, [r7, #0]
 80123ae:	881a      	ldrh	r2, [r3, #0]
 80123b0:	68fb      	ldr	r3, [r7, #12]
 80123b2:	781b      	ldrb	r3, [r3, #0]
 80123b4:	b29b      	uxth	r3, r3
 80123b6:	4413      	add	r3, r2
 80123b8:	b29a      	uxth	r2, r3
 80123ba:	683b      	ldr	r3, [r7, #0]
 80123bc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	781b      	ldrb	r3, [r3, #0]
 80123c2:	461a      	mov	r2, r3
 80123c4:	687b      	ldr	r3, [r7, #4]
 80123c6:	4413      	add	r3, r2
 80123c8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80123ca:	68fb      	ldr	r3, [r7, #12]
}
 80123cc:	4618      	mov	r0, r3
 80123ce:	3714      	adds	r7, #20
 80123d0:	46bd      	mov	sp, r7
 80123d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123d6:	4770      	bx	lr

080123d8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80123d8:	b480      	push	{r7}
 80123da:	b087      	sub	sp, #28
 80123dc:	af00      	add	r7, sp, #0
 80123de:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 80123e0:	687b      	ldr	r3, [r7, #4]
 80123e2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80123e4:	697b      	ldr	r3, [r7, #20]
 80123e6:	781b      	ldrb	r3, [r3, #0]
 80123e8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80123ea:	697b      	ldr	r3, [r7, #20]
 80123ec:	3301      	adds	r3, #1
 80123ee:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80123f0:	697b      	ldr	r3, [r7, #20]
 80123f2:	781b      	ldrb	r3, [r3, #0]
 80123f4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80123f6:	8a3b      	ldrh	r3, [r7, #16]
 80123f8:	021b      	lsls	r3, r3, #8
 80123fa:	b21a      	sxth	r2, r3
 80123fc:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8012400:	4313      	orrs	r3, r2
 8012402:	b21b      	sxth	r3, r3
 8012404:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8012406:	89fb      	ldrh	r3, [r7, #14]
}
 8012408:	4618      	mov	r0, r3
 801240a:	371c      	adds	r7, #28
 801240c:	46bd      	mov	sp, r7
 801240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012412:	4770      	bx	lr

08012414 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012414:	b580      	push	{r7, lr}
 8012416:	b084      	sub	sp, #16
 8012418:	af00      	add	r7, sp, #0
 801241a:	6078      	str	r0, [r7, #4]
 801241c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801241e:	2300      	movs	r3, #0
 8012420:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012422:	683b      	ldr	r3, [r7, #0]
 8012424:	781b      	ldrb	r3, [r3, #0]
 8012426:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801242a:	2b40      	cmp	r3, #64	; 0x40
 801242c:	d005      	beq.n	801243a <USBD_StdDevReq+0x26>
 801242e:	2b40      	cmp	r3, #64	; 0x40
 8012430:	d857      	bhi.n	80124e2 <USBD_StdDevReq+0xce>
 8012432:	2b00      	cmp	r3, #0
 8012434:	d00f      	beq.n	8012456 <USBD_StdDevReq+0x42>
 8012436:	2b20      	cmp	r3, #32
 8012438:	d153      	bne.n	80124e2 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 801243a:	687b      	ldr	r3, [r7, #4]
 801243c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8012440:	687b      	ldr	r3, [r7, #4]
 8012442:	32ae      	adds	r2, #174	; 0xae
 8012444:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012448:	689b      	ldr	r3, [r3, #8]
 801244a:	6839      	ldr	r1, [r7, #0]
 801244c:	6878      	ldr	r0, [r7, #4]
 801244e:	4798      	blx	r3
 8012450:	4603      	mov	r3, r0
 8012452:	73fb      	strb	r3, [r7, #15]
      break;
 8012454:	e04a      	b.n	80124ec <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012456:	683b      	ldr	r3, [r7, #0]
 8012458:	785b      	ldrb	r3, [r3, #1]
 801245a:	2b09      	cmp	r3, #9
 801245c:	d83b      	bhi.n	80124d6 <USBD_StdDevReq+0xc2>
 801245e:	a201      	add	r2, pc, #4	; (adr r2, 8012464 <USBD_StdDevReq+0x50>)
 8012460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012464:	080124b9 	.word	0x080124b9
 8012468:	080124cd 	.word	0x080124cd
 801246c:	080124d7 	.word	0x080124d7
 8012470:	080124c3 	.word	0x080124c3
 8012474:	080124d7 	.word	0x080124d7
 8012478:	08012497 	.word	0x08012497
 801247c:	0801248d 	.word	0x0801248d
 8012480:	080124d7 	.word	0x080124d7
 8012484:	080124af 	.word	0x080124af
 8012488:	080124a1 	.word	0x080124a1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 801248c:	6839      	ldr	r1, [r7, #0]
 801248e:	6878      	ldr	r0, [r7, #4]
 8012490:	f000 fa3c 	bl	801290c <USBD_GetDescriptor>
          break;
 8012494:	e024      	b.n	80124e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8012496:	6839      	ldr	r1, [r7, #0]
 8012498:	6878      	ldr	r0, [r7, #4]
 801249a:	f000 fba1 	bl	8012be0 <USBD_SetAddress>
          break;
 801249e:	e01f      	b.n	80124e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80124a0:	6839      	ldr	r1, [r7, #0]
 80124a2:	6878      	ldr	r0, [r7, #4]
 80124a4:	f000 fbe0 	bl	8012c68 <USBD_SetConfig>
 80124a8:	4603      	mov	r3, r0
 80124aa:	73fb      	strb	r3, [r7, #15]
          break;
 80124ac:	e018      	b.n	80124e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80124ae:	6839      	ldr	r1, [r7, #0]
 80124b0:	6878      	ldr	r0, [r7, #4]
 80124b2:	f000 fc83 	bl	8012dbc <USBD_GetConfig>
          break;
 80124b6:	e013      	b.n	80124e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80124b8:	6839      	ldr	r1, [r7, #0]
 80124ba:	6878      	ldr	r0, [r7, #4]
 80124bc:	f000 fcb4 	bl	8012e28 <USBD_GetStatus>
          break;
 80124c0:	e00e      	b.n	80124e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80124c2:	6839      	ldr	r1, [r7, #0]
 80124c4:	6878      	ldr	r0, [r7, #4]
 80124c6:	f000 fce3 	bl	8012e90 <USBD_SetFeature>
          break;
 80124ca:	e009      	b.n	80124e0 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80124cc:	6839      	ldr	r1, [r7, #0]
 80124ce:	6878      	ldr	r0, [r7, #4]
 80124d0:	f000 fd07 	bl	8012ee2 <USBD_ClrFeature>
          break;
 80124d4:	e004      	b.n	80124e0 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80124d6:	6839      	ldr	r1, [r7, #0]
 80124d8:	6878      	ldr	r0, [r7, #4]
 80124da:	f000 fd5e 	bl	8012f9a <USBD_CtlError>
          break;
 80124de:	bf00      	nop
      }
      break;
 80124e0:	e004      	b.n	80124ec <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80124e2:	6839      	ldr	r1, [r7, #0]
 80124e4:	6878      	ldr	r0, [r7, #4]
 80124e6:	f000 fd58 	bl	8012f9a <USBD_CtlError>
      break;
 80124ea:	bf00      	nop
  }

  return ret;
 80124ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80124ee:	4618      	mov	r0, r3
 80124f0:	3710      	adds	r7, #16
 80124f2:	46bd      	mov	sp, r7
 80124f4:	bd80      	pop	{r7, pc}
 80124f6:	bf00      	nop

080124f8 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80124f8:	b580      	push	{r7, lr}
 80124fa:	b084      	sub	sp, #16
 80124fc:	af00      	add	r7, sp, #0
 80124fe:	6078      	str	r0, [r7, #4]
 8012500:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012502:	2300      	movs	r3, #0
 8012504:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8012506:	683b      	ldr	r3, [r7, #0]
 8012508:	781b      	ldrb	r3, [r3, #0]
 801250a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801250e:	2b40      	cmp	r3, #64	; 0x40
 8012510:	d005      	beq.n	801251e <USBD_StdItfReq+0x26>
 8012512:	2b40      	cmp	r3, #64	; 0x40
 8012514:	d852      	bhi.n	80125bc <USBD_StdItfReq+0xc4>
 8012516:	2b00      	cmp	r3, #0
 8012518:	d001      	beq.n	801251e <USBD_StdItfReq+0x26>
 801251a:	2b20      	cmp	r3, #32
 801251c:	d14e      	bne.n	80125bc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012524:	b2db      	uxtb	r3, r3
 8012526:	3b01      	subs	r3, #1
 8012528:	2b02      	cmp	r3, #2
 801252a:	d840      	bhi.n	80125ae <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 801252c:	683b      	ldr	r3, [r7, #0]
 801252e:	889b      	ldrh	r3, [r3, #4]
 8012530:	b2db      	uxtb	r3, r3
 8012532:	2b01      	cmp	r3, #1
 8012534:	d836      	bhi.n	80125a4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8012536:	683b      	ldr	r3, [r7, #0]
 8012538:	889b      	ldrh	r3, [r3, #4]
 801253a:	b2db      	uxtb	r3, r3
 801253c:	4619      	mov	r1, r3
 801253e:	6878      	ldr	r0, [r7, #4]
 8012540:	f7ff fed9 	bl	80122f6 <USBD_CoreFindIF>
 8012544:	4603      	mov	r3, r0
 8012546:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012548:	7bbb      	ldrb	r3, [r7, #14]
 801254a:	2bff      	cmp	r3, #255	; 0xff
 801254c:	d01d      	beq.n	801258a <USBD_StdItfReq+0x92>
 801254e:	7bbb      	ldrb	r3, [r7, #14]
 8012550:	2b00      	cmp	r3, #0
 8012552:	d11a      	bne.n	801258a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8012554:	7bba      	ldrb	r2, [r7, #14]
 8012556:	687b      	ldr	r3, [r7, #4]
 8012558:	32ae      	adds	r2, #174	; 0xae
 801255a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801255e:	689b      	ldr	r3, [r3, #8]
 8012560:	2b00      	cmp	r3, #0
 8012562:	d00f      	beq.n	8012584 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8012564:	7bba      	ldrb	r2, [r7, #14]
 8012566:	687b      	ldr	r3, [r7, #4]
 8012568:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 801256c:	7bba      	ldrb	r2, [r7, #14]
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	32ae      	adds	r2, #174	; 0xae
 8012572:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012576:	689b      	ldr	r3, [r3, #8]
 8012578:	6839      	ldr	r1, [r7, #0]
 801257a:	6878      	ldr	r0, [r7, #4]
 801257c:	4798      	blx	r3
 801257e:	4603      	mov	r3, r0
 8012580:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8012582:	e004      	b.n	801258e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8012584:	2303      	movs	r3, #3
 8012586:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8012588:	e001      	b.n	801258e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 801258a:	2303      	movs	r3, #3
 801258c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 801258e:	683b      	ldr	r3, [r7, #0]
 8012590:	88db      	ldrh	r3, [r3, #6]
 8012592:	2b00      	cmp	r3, #0
 8012594:	d110      	bne.n	80125b8 <USBD_StdItfReq+0xc0>
 8012596:	7bfb      	ldrb	r3, [r7, #15]
 8012598:	2b00      	cmp	r3, #0
 801259a:	d10d      	bne.n	80125b8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 801259c:	6878      	ldr	r0, [r7, #4]
 801259e:	f000 fdc7 	bl	8013130 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80125a2:	e009      	b.n	80125b8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80125a4:	6839      	ldr	r1, [r7, #0]
 80125a6:	6878      	ldr	r0, [r7, #4]
 80125a8:	f000 fcf7 	bl	8012f9a <USBD_CtlError>
          break;
 80125ac:	e004      	b.n	80125b8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80125ae:	6839      	ldr	r1, [r7, #0]
 80125b0:	6878      	ldr	r0, [r7, #4]
 80125b2:	f000 fcf2 	bl	8012f9a <USBD_CtlError>
          break;
 80125b6:	e000      	b.n	80125ba <USBD_StdItfReq+0xc2>
          break;
 80125b8:	bf00      	nop
      }
      break;
 80125ba:	e004      	b.n	80125c6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80125bc:	6839      	ldr	r1, [r7, #0]
 80125be:	6878      	ldr	r0, [r7, #4]
 80125c0:	f000 fceb 	bl	8012f9a <USBD_CtlError>
      break;
 80125c4:	bf00      	nop
  }

  return ret;
 80125c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80125c8:	4618      	mov	r0, r3
 80125ca:	3710      	adds	r7, #16
 80125cc:	46bd      	mov	sp, r7
 80125ce:	bd80      	pop	{r7, pc}

080125d0 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80125d0:	b580      	push	{r7, lr}
 80125d2:	b084      	sub	sp, #16
 80125d4:	af00      	add	r7, sp, #0
 80125d6:	6078      	str	r0, [r7, #4]
 80125d8:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80125da:	2300      	movs	r3, #0
 80125dc:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80125de:	683b      	ldr	r3, [r7, #0]
 80125e0:	889b      	ldrh	r3, [r3, #4]
 80125e2:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80125e4:	683b      	ldr	r3, [r7, #0]
 80125e6:	781b      	ldrb	r3, [r3, #0]
 80125e8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80125ec:	2b40      	cmp	r3, #64	; 0x40
 80125ee:	d007      	beq.n	8012600 <USBD_StdEPReq+0x30>
 80125f0:	2b40      	cmp	r3, #64	; 0x40
 80125f2:	f200 817f 	bhi.w	80128f4 <USBD_StdEPReq+0x324>
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d02a      	beq.n	8012650 <USBD_StdEPReq+0x80>
 80125fa:	2b20      	cmp	r3, #32
 80125fc:	f040 817a 	bne.w	80128f4 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8012600:	7bbb      	ldrb	r3, [r7, #14]
 8012602:	4619      	mov	r1, r3
 8012604:	6878      	ldr	r0, [r7, #4]
 8012606:	f7ff fe83 	bl	8012310 <USBD_CoreFindEP>
 801260a:	4603      	mov	r3, r0
 801260c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801260e:	7b7b      	ldrb	r3, [r7, #13]
 8012610:	2bff      	cmp	r3, #255	; 0xff
 8012612:	f000 8174 	beq.w	80128fe <USBD_StdEPReq+0x32e>
 8012616:	7b7b      	ldrb	r3, [r7, #13]
 8012618:	2b00      	cmp	r3, #0
 801261a:	f040 8170 	bne.w	80128fe <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 801261e:	7b7a      	ldrb	r2, [r7, #13]
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8012626:	7b7a      	ldrb	r2, [r7, #13]
 8012628:	687b      	ldr	r3, [r7, #4]
 801262a:	32ae      	adds	r2, #174	; 0xae
 801262c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012630:	689b      	ldr	r3, [r3, #8]
 8012632:	2b00      	cmp	r3, #0
 8012634:	f000 8163 	beq.w	80128fe <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8012638:	7b7a      	ldrb	r2, [r7, #13]
 801263a:	687b      	ldr	r3, [r7, #4]
 801263c:	32ae      	adds	r2, #174	; 0xae
 801263e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012642:	689b      	ldr	r3, [r3, #8]
 8012644:	6839      	ldr	r1, [r7, #0]
 8012646:	6878      	ldr	r0, [r7, #4]
 8012648:	4798      	blx	r3
 801264a:	4603      	mov	r3, r0
 801264c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 801264e:	e156      	b.n	80128fe <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8012650:	683b      	ldr	r3, [r7, #0]
 8012652:	785b      	ldrb	r3, [r3, #1]
 8012654:	2b03      	cmp	r3, #3
 8012656:	d008      	beq.n	801266a <USBD_StdEPReq+0x9a>
 8012658:	2b03      	cmp	r3, #3
 801265a:	f300 8145 	bgt.w	80128e8 <USBD_StdEPReq+0x318>
 801265e:	2b00      	cmp	r3, #0
 8012660:	f000 809b 	beq.w	801279a <USBD_StdEPReq+0x1ca>
 8012664:	2b01      	cmp	r3, #1
 8012666:	d03c      	beq.n	80126e2 <USBD_StdEPReq+0x112>
 8012668:	e13e      	b.n	80128e8 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012670:	b2db      	uxtb	r3, r3
 8012672:	2b02      	cmp	r3, #2
 8012674:	d002      	beq.n	801267c <USBD_StdEPReq+0xac>
 8012676:	2b03      	cmp	r3, #3
 8012678:	d016      	beq.n	80126a8 <USBD_StdEPReq+0xd8>
 801267a:	e02c      	b.n	80126d6 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801267c:	7bbb      	ldrb	r3, [r7, #14]
 801267e:	2b00      	cmp	r3, #0
 8012680:	d00d      	beq.n	801269e <USBD_StdEPReq+0xce>
 8012682:	7bbb      	ldrb	r3, [r7, #14]
 8012684:	2b80      	cmp	r3, #128	; 0x80
 8012686:	d00a      	beq.n	801269e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012688:	7bbb      	ldrb	r3, [r7, #14]
 801268a:	4619      	mov	r1, r3
 801268c:	6878      	ldr	r0, [r7, #4]
 801268e:	f001 f9c1 	bl	8013a14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8012692:	2180      	movs	r1, #128	; 0x80
 8012694:	6878      	ldr	r0, [r7, #4]
 8012696:	f001 f9bd 	bl	8013a14 <USBD_LL_StallEP>
 801269a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801269c:	e020      	b.n	80126e0 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 801269e:	6839      	ldr	r1, [r7, #0]
 80126a0:	6878      	ldr	r0, [r7, #4]
 80126a2:	f000 fc7a 	bl	8012f9a <USBD_CtlError>
              break;
 80126a6:	e01b      	b.n	80126e0 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80126a8:	683b      	ldr	r3, [r7, #0]
 80126aa:	885b      	ldrh	r3, [r3, #2]
 80126ac:	2b00      	cmp	r3, #0
 80126ae:	d10e      	bne.n	80126ce <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80126b0:	7bbb      	ldrb	r3, [r7, #14]
 80126b2:	2b00      	cmp	r3, #0
 80126b4:	d00b      	beq.n	80126ce <USBD_StdEPReq+0xfe>
 80126b6:	7bbb      	ldrb	r3, [r7, #14]
 80126b8:	2b80      	cmp	r3, #128	; 0x80
 80126ba:	d008      	beq.n	80126ce <USBD_StdEPReq+0xfe>
 80126bc:	683b      	ldr	r3, [r7, #0]
 80126be:	88db      	ldrh	r3, [r3, #6]
 80126c0:	2b00      	cmp	r3, #0
 80126c2:	d104      	bne.n	80126ce <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80126c4:	7bbb      	ldrb	r3, [r7, #14]
 80126c6:	4619      	mov	r1, r3
 80126c8:	6878      	ldr	r0, [r7, #4]
 80126ca:	f001 f9a3 	bl	8013a14 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80126ce:	6878      	ldr	r0, [r7, #4]
 80126d0:	f000 fd2e 	bl	8013130 <USBD_CtlSendStatus>

              break;
 80126d4:	e004      	b.n	80126e0 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80126d6:	6839      	ldr	r1, [r7, #0]
 80126d8:	6878      	ldr	r0, [r7, #4]
 80126da:	f000 fc5e 	bl	8012f9a <USBD_CtlError>
              break;
 80126de:	bf00      	nop
          }
          break;
 80126e0:	e107      	b.n	80128f2 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80126e8:	b2db      	uxtb	r3, r3
 80126ea:	2b02      	cmp	r3, #2
 80126ec:	d002      	beq.n	80126f4 <USBD_StdEPReq+0x124>
 80126ee:	2b03      	cmp	r3, #3
 80126f0:	d016      	beq.n	8012720 <USBD_StdEPReq+0x150>
 80126f2:	e04b      	b.n	801278c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80126f4:	7bbb      	ldrb	r3, [r7, #14]
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	d00d      	beq.n	8012716 <USBD_StdEPReq+0x146>
 80126fa:	7bbb      	ldrb	r3, [r7, #14]
 80126fc:	2b80      	cmp	r3, #128	; 0x80
 80126fe:	d00a      	beq.n	8012716 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8012700:	7bbb      	ldrb	r3, [r7, #14]
 8012702:	4619      	mov	r1, r3
 8012704:	6878      	ldr	r0, [r7, #4]
 8012706:	f001 f985 	bl	8013a14 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801270a:	2180      	movs	r1, #128	; 0x80
 801270c:	6878      	ldr	r0, [r7, #4]
 801270e:	f001 f981 	bl	8013a14 <USBD_LL_StallEP>
 8012712:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8012714:	e040      	b.n	8012798 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8012716:	6839      	ldr	r1, [r7, #0]
 8012718:	6878      	ldr	r0, [r7, #4]
 801271a:	f000 fc3e 	bl	8012f9a <USBD_CtlError>
              break;
 801271e:	e03b      	b.n	8012798 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8012720:	683b      	ldr	r3, [r7, #0]
 8012722:	885b      	ldrh	r3, [r3, #2]
 8012724:	2b00      	cmp	r3, #0
 8012726:	d136      	bne.n	8012796 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8012728:	7bbb      	ldrb	r3, [r7, #14]
 801272a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801272e:	2b00      	cmp	r3, #0
 8012730:	d004      	beq.n	801273c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8012732:	7bbb      	ldrb	r3, [r7, #14]
 8012734:	4619      	mov	r1, r3
 8012736:	6878      	ldr	r0, [r7, #4]
 8012738:	f001 f98b 	bl	8013a52 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 801273c:	6878      	ldr	r0, [r7, #4]
 801273e:	f000 fcf7 	bl	8013130 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8012742:	7bbb      	ldrb	r3, [r7, #14]
 8012744:	4619      	mov	r1, r3
 8012746:	6878      	ldr	r0, [r7, #4]
 8012748:	f7ff fde2 	bl	8012310 <USBD_CoreFindEP>
 801274c:	4603      	mov	r3, r0
 801274e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8012750:	7b7b      	ldrb	r3, [r7, #13]
 8012752:	2bff      	cmp	r3, #255	; 0xff
 8012754:	d01f      	beq.n	8012796 <USBD_StdEPReq+0x1c6>
 8012756:	7b7b      	ldrb	r3, [r7, #13]
 8012758:	2b00      	cmp	r3, #0
 801275a:	d11c      	bne.n	8012796 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 801275c:	7b7a      	ldrb	r2, [r7, #13]
 801275e:	687b      	ldr	r3, [r7, #4]
 8012760:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8012764:	7b7a      	ldrb	r2, [r7, #13]
 8012766:	687b      	ldr	r3, [r7, #4]
 8012768:	32ae      	adds	r2, #174	; 0xae
 801276a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801276e:	689b      	ldr	r3, [r3, #8]
 8012770:	2b00      	cmp	r3, #0
 8012772:	d010      	beq.n	8012796 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8012774:	7b7a      	ldrb	r2, [r7, #13]
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	32ae      	adds	r2, #174	; 0xae
 801277a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801277e:	689b      	ldr	r3, [r3, #8]
 8012780:	6839      	ldr	r1, [r7, #0]
 8012782:	6878      	ldr	r0, [r7, #4]
 8012784:	4798      	blx	r3
 8012786:	4603      	mov	r3, r0
 8012788:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 801278a:	e004      	b.n	8012796 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 801278c:	6839      	ldr	r1, [r7, #0]
 801278e:	6878      	ldr	r0, [r7, #4]
 8012790:	f000 fc03 	bl	8012f9a <USBD_CtlError>
              break;
 8012794:	e000      	b.n	8012798 <USBD_StdEPReq+0x1c8>
              break;
 8012796:	bf00      	nop
          }
          break;
 8012798:	e0ab      	b.n	80128f2 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 801279a:	687b      	ldr	r3, [r7, #4]
 801279c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80127a0:	b2db      	uxtb	r3, r3
 80127a2:	2b02      	cmp	r3, #2
 80127a4:	d002      	beq.n	80127ac <USBD_StdEPReq+0x1dc>
 80127a6:	2b03      	cmp	r3, #3
 80127a8:	d032      	beq.n	8012810 <USBD_StdEPReq+0x240>
 80127aa:	e097      	b.n	80128dc <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80127ac:	7bbb      	ldrb	r3, [r7, #14]
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	d007      	beq.n	80127c2 <USBD_StdEPReq+0x1f2>
 80127b2:	7bbb      	ldrb	r3, [r7, #14]
 80127b4:	2b80      	cmp	r3, #128	; 0x80
 80127b6:	d004      	beq.n	80127c2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80127b8:	6839      	ldr	r1, [r7, #0]
 80127ba:	6878      	ldr	r0, [r7, #4]
 80127bc:	f000 fbed 	bl	8012f9a <USBD_CtlError>
                break;
 80127c0:	e091      	b.n	80128e6 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80127c2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80127c6:	2b00      	cmp	r3, #0
 80127c8:	da0b      	bge.n	80127e2 <USBD_StdEPReq+0x212>
 80127ca:	7bbb      	ldrb	r3, [r7, #14]
 80127cc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80127d0:	4613      	mov	r3, r2
 80127d2:	009b      	lsls	r3, r3, #2
 80127d4:	4413      	add	r3, r2
 80127d6:	009b      	lsls	r3, r3, #2
 80127d8:	3310      	adds	r3, #16
 80127da:	687a      	ldr	r2, [r7, #4]
 80127dc:	4413      	add	r3, r2
 80127de:	3304      	adds	r3, #4
 80127e0:	e00b      	b.n	80127fa <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80127e2:	7bbb      	ldrb	r3, [r7, #14]
 80127e4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80127e8:	4613      	mov	r3, r2
 80127ea:	009b      	lsls	r3, r3, #2
 80127ec:	4413      	add	r3, r2
 80127ee:	009b      	lsls	r3, r3, #2
 80127f0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80127f4:	687a      	ldr	r2, [r7, #4]
 80127f6:	4413      	add	r3, r2
 80127f8:	3304      	adds	r3, #4
 80127fa:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80127fc:	68bb      	ldr	r3, [r7, #8]
 80127fe:	2200      	movs	r2, #0
 8012800:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8012802:	68bb      	ldr	r3, [r7, #8]
 8012804:	2202      	movs	r2, #2
 8012806:	4619      	mov	r1, r3
 8012808:	6878      	ldr	r0, [r7, #4]
 801280a:	f000 fc37 	bl	801307c <USBD_CtlSendData>
              break;
 801280e:	e06a      	b.n	80128e6 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8012810:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012814:	2b00      	cmp	r3, #0
 8012816:	da11      	bge.n	801283c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8012818:	7bbb      	ldrb	r3, [r7, #14]
 801281a:	f003 020f 	and.w	r2, r3, #15
 801281e:	6879      	ldr	r1, [r7, #4]
 8012820:	4613      	mov	r3, r2
 8012822:	009b      	lsls	r3, r3, #2
 8012824:	4413      	add	r3, r2
 8012826:	009b      	lsls	r3, r3, #2
 8012828:	440b      	add	r3, r1
 801282a:	3324      	adds	r3, #36	; 0x24
 801282c:	881b      	ldrh	r3, [r3, #0]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d117      	bne.n	8012862 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8012832:	6839      	ldr	r1, [r7, #0]
 8012834:	6878      	ldr	r0, [r7, #4]
 8012836:	f000 fbb0 	bl	8012f9a <USBD_CtlError>
                  break;
 801283a:	e054      	b.n	80128e6 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 801283c:	7bbb      	ldrb	r3, [r7, #14]
 801283e:	f003 020f 	and.w	r2, r3, #15
 8012842:	6879      	ldr	r1, [r7, #4]
 8012844:	4613      	mov	r3, r2
 8012846:	009b      	lsls	r3, r3, #2
 8012848:	4413      	add	r3, r2
 801284a:	009b      	lsls	r3, r3, #2
 801284c:	440b      	add	r3, r1
 801284e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8012852:	881b      	ldrh	r3, [r3, #0]
 8012854:	2b00      	cmp	r3, #0
 8012856:	d104      	bne.n	8012862 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8012858:	6839      	ldr	r1, [r7, #0]
 801285a:	6878      	ldr	r0, [r7, #4]
 801285c:	f000 fb9d 	bl	8012f9a <USBD_CtlError>
                  break;
 8012860:	e041      	b.n	80128e6 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012862:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8012866:	2b00      	cmp	r3, #0
 8012868:	da0b      	bge.n	8012882 <USBD_StdEPReq+0x2b2>
 801286a:	7bbb      	ldrb	r3, [r7, #14]
 801286c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8012870:	4613      	mov	r3, r2
 8012872:	009b      	lsls	r3, r3, #2
 8012874:	4413      	add	r3, r2
 8012876:	009b      	lsls	r3, r3, #2
 8012878:	3310      	adds	r3, #16
 801287a:	687a      	ldr	r2, [r7, #4]
 801287c:	4413      	add	r3, r2
 801287e:	3304      	adds	r3, #4
 8012880:	e00b      	b.n	801289a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8012882:	7bbb      	ldrb	r3, [r7, #14]
 8012884:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8012888:	4613      	mov	r3, r2
 801288a:	009b      	lsls	r3, r3, #2
 801288c:	4413      	add	r3, r2
 801288e:	009b      	lsls	r3, r3, #2
 8012890:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8012894:	687a      	ldr	r2, [r7, #4]
 8012896:	4413      	add	r3, r2
 8012898:	3304      	adds	r3, #4
 801289a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 801289c:	7bbb      	ldrb	r3, [r7, #14]
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d002      	beq.n	80128a8 <USBD_StdEPReq+0x2d8>
 80128a2:	7bbb      	ldrb	r3, [r7, #14]
 80128a4:	2b80      	cmp	r3, #128	; 0x80
 80128a6:	d103      	bne.n	80128b0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80128a8:	68bb      	ldr	r3, [r7, #8]
 80128aa:	2200      	movs	r2, #0
 80128ac:	601a      	str	r2, [r3, #0]
 80128ae:	e00e      	b.n	80128ce <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80128b0:	7bbb      	ldrb	r3, [r7, #14]
 80128b2:	4619      	mov	r1, r3
 80128b4:	6878      	ldr	r0, [r7, #4]
 80128b6:	f001 f8eb 	bl	8013a90 <USBD_LL_IsStallEP>
 80128ba:	4603      	mov	r3, r0
 80128bc:	2b00      	cmp	r3, #0
 80128be:	d003      	beq.n	80128c8 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80128c0:	68bb      	ldr	r3, [r7, #8]
 80128c2:	2201      	movs	r2, #1
 80128c4:	601a      	str	r2, [r3, #0]
 80128c6:	e002      	b.n	80128ce <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80128c8:	68bb      	ldr	r3, [r7, #8]
 80128ca:	2200      	movs	r2, #0
 80128cc:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80128ce:	68bb      	ldr	r3, [r7, #8]
 80128d0:	2202      	movs	r2, #2
 80128d2:	4619      	mov	r1, r3
 80128d4:	6878      	ldr	r0, [r7, #4]
 80128d6:	f000 fbd1 	bl	801307c <USBD_CtlSendData>
              break;
 80128da:	e004      	b.n	80128e6 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80128dc:	6839      	ldr	r1, [r7, #0]
 80128de:	6878      	ldr	r0, [r7, #4]
 80128e0:	f000 fb5b 	bl	8012f9a <USBD_CtlError>
              break;
 80128e4:	bf00      	nop
          }
          break;
 80128e6:	e004      	b.n	80128f2 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80128e8:	6839      	ldr	r1, [r7, #0]
 80128ea:	6878      	ldr	r0, [r7, #4]
 80128ec:	f000 fb55 	bl	8012f9a <USBD_CtlError>
          break;
 80128f0:	bf00      	nop
      }
      break;
 80128f2:	e005      	b.n	8012900 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80128f4:	6839      	ldr	r1, [r7, #0]
 80128f6:	6878      	ldr	r0, [r7, #4]
 80128f8:	f000 fb4f 	bl	8012f9a <USBD_CtlError>
      break;
 80128fc:	e000      	b.n	8012900 <USBD_StdEPReq+0x330>
      break;
 80128fe:	bf00      	nop
  }

  return ret;
 8012900:	7bfb      	ldrb	r3, [r7, #15]
}
 8012902:	4618      	mov	r0, r3
 8012904:	3710      	adds	r7, #16
 8012906:	46bd      	mov	sp, r7
 8012908:	bd80      	pop	{r7, pc}
	...

0801290c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801290c:	b580      	push	{r7, lr}
 801290e:	b084      	sub	sp, #16
 8012910:	af00      	add	r7, sp, #0
 8012912:	6078      	str	r0, [r7, #4]
 8012914:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8012916:	2300      	movs	r3, #0
 8012918:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 801291a:	2300      	movs	r3, #0
 801291c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 801291e:	2300      	movs	r3, #0
 8012920:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8012922:	683b      	ldr	r3, [r7, #0]
 8012924:	885b      	ldrh	r3, [r3, #2]
 8012926:	0a1b      	lsrs	r3, r3, #8
 8012928:	b29b      	uxth	r3, r3
 801292a:	3b01      	subs	r3, #1
 801292c:	2b06      	cmp	r3, #6
 801292e:	f200 8128 	bhi.w	8012b82 <USBD_GetDescriptor+0x276>
 8012932:	a201      	add	r2, pc, #4	; (adr r2, 8012938 <USBD_GetDescriptor+0x2c>)
 8012934:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012938:	08012955 	.word	0x08012955
 801293c:	0801296d 	.word	0x0801296d
 8012940:	080129ad 	.word	0x080129ad
 8012944:	08012b83 	.word	0x08012b83
 8012948:	08012b83 	.word	0x08012b83
 801294c:	08012b23 	.word	0x08012b23
 8012950:	08012b4f 	.word	0x08012b4f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8012954:	687b      	ldr	r3, [r7, #4]
 8012956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801295a:	681b      	ldr	r3, [r3, #0]
 801295c:	687a      	ldr	r2, [r7, #4]
 801295e:	7c12      	ldrb	r2, [r2, #16]
 8012960:	f107 0108 	add.w	r1, r7, #8
 8012964:	4610      	mov	r0, r2
 8012966:	4798      	blx	r3
 8012968:	60f8      	str	r0, [r7, #12]
      break;
 801296a:	e112      	b.n	8012b92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	7c1b      	ldrb	r3, [r3, #16]
 8012970:	2b00      	cmp	r3, #0
 8012972:	d10d      	bne.n	8012990 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801297a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801297c:	f107 0208 	add.w	r2, r7, #8
 8012980:	4610      	mov	r0, r2
 8012982:	4798      	blx	r3
 8012984:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8012986:	68fb      	ldr	r3, [r7, #12]
 8012988:	3301      	adds	r3, #1
 801298a:	2202      	movs	r2, #2
 801298c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 801298e:	e100      	b.n	8012b92 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8012990:	687b      	ldr	r3, [r7, #4]
 8012992:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012998:	f107 0208 	add.w	r2, r7, #8
 801299c:	4610      	mov	r0, r2
 801299e:	4798      	blx	r3
 80129a0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80129a2:	68fb      	ldr	r3, [r7, #12]
 80129a4:	3301      	adds	r3, #1
 80129a6:	2202      	movs	r2, #2
 80129a8:	701a      	strb	r2, [r3, #0]
      break;
 80129aa:	e0f2      	b.n	8012b92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80129ac:	683b      	ldr	r3, [r7, #0]
 80129ae:	885b      	ldrh	r3, [r3, #2]
 80129b0:	b2db      	uxtb	r3, r3
 80129b2:	2b05      	cmp	r3, #5
 80129b4:	f200 80ac 	bhi.w	8012b10 <USBD_GetDescriptor+0x204>
 80129b8:	a201      	add	r2, pc, #4	; (adr r2, 80129c0 <USBD_GetDescriptor+0xb4>)
 80129ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80129be:	bf00      	nop
 80129c0:	080129d9 	.word	0x080129d9
 80129c4:	08012a0d 	.word	0x08012a0d
 80129c8:	08012a41 	.word	0x08012a41
 80129cc:	08012a75 	.word	0x08012a75
 80129d0:	08012aa9 	.word	0x08012aa9
 80129d4:	08012add 	.word	0x08012add
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80129de:	685b      	ldr	r3, [r3, #4]
 80129e0:	2b00      	cmp	r3, #0
 80129e2:	d00b      	beq.n	80129fc <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80129ea:	685b      	ldr	r3, [r3, #4]
 80129ec:	687a      	ldr	r2, [r7, #4]
 80129ee:	7c12      	ldrb	r2, [r2, #16]
 80129f0:	f107 0108 	add.w	r1, r7, #8
 80129f4:	4610      	mov	r0, r2
 80129f6:	4798      	blx	r3
 80129f8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80129fa:	e091      	b.n	8012b20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80129fc:	6839      	ldr	r1, [r7, #0]
 80129fe:	6878      	ldr	r0, [r7, #4]
 8012a00:	f000 facb 	bl	8012f9a <USBD_CtlError>
            err++;
 8012a04:	7afb      	ldrb	r3, [r7, #11]
 8012a06:	3301      	adds	r3, #1
 8012a08:	72fb      	strb	r3, [r7, #11]
          break;
 8012a0a:	e089      	b.n	8012b20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012a12:	689b      	ldr	r3, [r3, #8]
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d00b      	beq.n	8012a30 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8012a18:	687b      	ldr	r3, [r7, #4]
 8012a1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012a1e:	689b      	ldr	r3, [r3, #8]
 8012a20:	687a      	ldr	r2, [r7, #4]
 8012a22:	7c12      	ldrb	r2, [r2, #16]
 8012a24:	f107 0108 	add.w	r1, r7, #8
 8012a28:	4610      	mov	r0, r2
 8012a2a:	4798      	blx	r3
 8012a2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012a2e:	e077      	b.n	8012b20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012a30:	6839      	ldr	r1, [r7, #0]
 8012a32:	6878      	ldr	r0, [r7, #4]
 8012a34:	f000 fab1 	bl	8012f9a <USBD_CtlError>
            err++;
 8012a38:	7afb      	ldrb	r3, [r7, #11]
 8012a3a:	3301      	adds	r3, #1
 8012a3c:	72fb      	strb	r3, [r7, #11]
          break;
 8012a3e:	e06f      	b.n	8012b20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012a46:	68db      	ldr	r3, [r3, #12]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d00b      	beq.n	8012a64 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012a52:	68db      	ldr	r3, [r3, #12]
 8012a54:	687a      	ldr	r2, [r7, #4]
 8012a56:	7c12      	ldrb	r2, [r2, #16]
 8012a58:	f107 0108 	add.w	r1, r7, #8
 8012a5c:	4610      	mov	r0, r2
 8012a5e:	4798      	blx	r3
 8012a60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012a62:	e05d      	b.n	8012b20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012a64:	6839      	ldr	r1, [r7, #0]
 8012a66:	6878      	ldr	r0, [r7, #4]
 8012a68:	f000 fa97 	bl	8012f9a <USBD_CtlError>
            err++;
 8012a6c:	7afb      	ldrb	r3, [r7, #11]
 8012a6e:	3301      	adds	r3, #1
 8012a70:	72fb      	strb	r3, [r7, #11]
          break;
 8012a72:	e055      	b.n	8012b20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8012a74:	687b      	ldr	r3, [r7, #4]
 8012a76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012a7a:	691b      	ldr	r3, [r3, #16]
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d00b      	beq.n	8012a98 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8012a80:	687b      	ldr	r3, [r7, #4]
 8012a82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012a86:	691b      	ldr	r3, [r3, #16]
 8012a88:	687a      	ldr	r2, [r7, #4]
 8012a8a:	7c12      	ldrb	r2, [r2, #16]
 8012a8c:	f107 0108 	add.w	r1, r7, #8
 8012a90:	4610      	mov	r0, r2
 8012a92:	4798      	blx	r3
 8012a94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012a96:	e043      	b.n	8012b20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012a98:	6839      	ldr	r1, [r7, #0]
 8012a9a:	6878      	ldr	r0, [r7, #4]
 8012a9c:	f000 fa7d 	bl	8012f9a <USBD_CtlError>
            err++;
 8012aa0:	7afb      	ldrb	r3, [r7, #11]
 8012aa2:	3301      	adds	r3, #1
 8012aa4:	72fb      	strb	r3, [r7, #11]
          break;
 8012aa6:	e03b      	b.n	8012b20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8012aa8:	687b      	ldr	r3, [r7, #4]
 8012aaa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012aae:	695b      	ldr	r3, [r3, #20]
 8012ab0:	2b00      	cmp	r3, #0
 8012ab2:	d00b      	beq.n	8012acc <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012aba:	695b      	ldr	r3, [r3, #20]
 8012abc:	687a      	ldr	r2, [r7, #4]
 8012abe:	7c12      	ldrb	r2, [r2, #16]
 8012ac0:	f107 0108 	add.w	r1, r7, #8
 8012ac4:	4610      	mov	r0, r2
 8012ac6:	4798      	blx	r3
 8012ac8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012aca:	e029      	b.n	8012b20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012acc:	6839      	ldr	r1, [r7, #0]
 8012ace:	6878      	ldr	r0, [r7, #4]
 8012ad0:	f000 fa63 	bl	8012f9a <USBD_CtlError>
            err++;
 8012ad4:	7afb      	ldrb	r3, [r7, #11]
 8012ad6:	3301      	adds	r3, #1
 8012ad8:	72fb      	strb	r3, [r7, #11]
          break;
 8012ada:	e021      	b.n	8012b20 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012ae2:	699b      	ldr	r3, [r3, #24]
 8012ae4:	2b00      	cmp	r3, #0
 8012ae6:	d00b      	beq.n	8012b00 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8012ae8:	687b      	ldr	r3, [r7, #4]
 8012aea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8012aee:	699b      	ldr	r3, [r3, #24]
 8012af0:	687a      	ldr	r2, [r7, #4]
 8012af2:	7c12      	ldrb	r2, [r2, #16]
 8012af4:	f107 0108 	add.w	r1, r7, #8
 8012af8:	4610      	mov	r0, r2
 8012afa:	4798      	blx	r3
 8012afc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8012afe:	e00f      	b.n	8012b20 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8012b00:	6839      	ldr	r1, [r7, #0]
 8012b02:	6878      	ldr	r0, [r7, #4]
 8012b04:	f000 fa49 	bl	8012f9a <USBD_CtlError>
            err++;
 8012b08:	7afb      	ldrb	r3, [r7, #11]
 8012b0a:	3301      	adds	r3, #1
 8012b0c:	72fb      	strb	r3, [r7, #11]
          break;
 8012b0e:	e007      	b.n	8012b20 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8012b10:	6839      	ldr	r1, [r7, #0]
 8012b12:	6878      	ldr	r0, [r7, #4]
 8012b14:	f000 fa41 	bl	8012f9a <USBD_CtlError>
          err++;
 8012b18:	7afb      	ldrb	r3, [r7, #11]
 8012b1a:	3301      	adds	r3, #1
 8012b1c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8012b1e:	bf00      	nop
      }
      break;
 8012b20:	e037      	b.n	8012b92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	7c1b      	ldrb	r3, [r3, #16]
 8012b26:	2b00      	cmp	r3, #0
 8012b28:	d109      	bne.n	8012b3e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012b30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012b32:	f107 0208 	add.w	r2, r7, #8
 8012b36:	4610      	mov	r0, r2
 8012b38:	4798      	blx	r3
 8012b3a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012b3c:	e029      	b.n	8012b92 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8012b3e:	6839      	ldr	r1, [r7, #0]
 8012b40:	6878      	ldr	r0, [r7, #4]
 8012b42:	f000 fa2a 	bl	8012f9a <USBD_CtlError>
        err++;
 8012b46:	7afb      	ldrb	r3, [r7, #11]
 8012b48:	3301      	adds	r3, #1
 8012b4a:	72fb      	strb	r3, [r7, #11]
      break;
 8012b4c:	e021      	b.n	8012b92 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8012b4e:	687b      	ldr	r3, [r7, #4]
 8012b50:	7c1b      	ldrb	r3, [r3, #16]
 8012b52:	2b00      	cmp	r3, #0
 8012b54:	d10d      	bne.n	8012b72 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8012b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8012b5e:	f107 0208 	add.w	r2, r7, #8
 8012b62:	4610      	mov	r0, r2
 8012b64:	4798      	blx	r3
 8012b66:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	3301      	adds	r3, #1
 8012b6c:	2207      	movs	r2, #7
 8012b6e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8012b70:	e00f      	b.n	8012b92 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8012b72:	6839      	ldr	r1, [r7, #0]
 8012b74:	6878      	ldr	r0, [r7, #4]
 8012b76:	f000 fa10 	bl	8012f9a <USBD_CtlError>
        err++;
 8012b7a:	7afb      	ldrb	r3, [r7, #11]
 8012b7c:	3301      	adds	r3, #1
 8012b7e:	72fb      	strb	r3, [r7, #11]
      break;
 8012b80:	e007      	b.n	8012b92 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8012b82:	6839      	ldr	r1, [r7, #0]
 8012b84:	6878      	ldr	r0, [r7, #4]
 8012b86:	f000 fa08 	bl	8012f9a <USBD_CtlError>
      err++;
 8012b8a:	7afb      	ldrb	r3, [r7, #11]
 8012b8c:	3301      	adds	r3, #1
 8012b8e:	72fb      	strb	r3, [r7, #11]
      break;
 8012b90:	bf00      	nop
  }

  if (err != 0U)
 8012b92:	7afb      	ldrb	r3, [r7, #11]
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d11e      	bne.n	8012bd6 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8012b98:	683b      	ldr	r3, [r7, #0]
 8012b9a:	88db      	ldrh	r3, [r3, #6]
 8012b9c:	2b00      	cmp	r3, #0
 8012b9e:	d016      	beq.n	8012bce <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8012ba0:	893b      	ldrh	r3, [r7, #8]
 8012ba2:	2b00      	cmp	r3, #0
 8012ba4:	d00e      	beq.n	8012bc4 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8012ba6:	683b      	ldr	r3, [r7, #0]
 8012ba8:	88da      	ldrh	r2, [r3, #6]
 8012baa:	893b      	ldrh	r3, [r7, #8]
 8012bac:	4293      	cmp	r3, r2
 8012bae:	bf28      	it	cs
 8012bb0:	4613      	movcs	r3, r2
 8012bb2:	b29b      	uxth	r3, r3
 8012bb4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8012bb6:	893b      	ldrh	r3, [r7, #8]
 8012bb8:	461a      	mov	r2, r3
 8012bba:	68f9      	ldr	r1, [r7, #12]
 8012bbc:	6878      	ldr	r0, [r7, #4]
 8012bbe:	f000 fa5d 	bl	801307c <USBD_CtlSendData>
 8012bc2:	e009      	b.n	8012bd8 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8012bc4:	6839      	ldr	r1, [r7, #0]
 8012bc6:	6878      	ldr	r0, [r7, #4]
 8012bc8:	f000 f9e7 	bl	8012f9a <USBD_CtlError>
 8012bcc:	e004      	b.n	8012bd8 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8012bce:	6878      	ldr	r0, [r7, #4]
 8012bd0:	f000 faae 	bl	8013130 <USBD_CtlSendStatus>
 8012bd4:	e000      	b.n	8012bd8 <USBD_GetDescriptor+0x2cc>
    return;
 8012bd6:	bf00      	nop
  }
}
 8012bd8:	3710      	adds	r7, #16
 8012bda:	46bd      	mov	sp, r7
 8012bdc:	bd80      	pop	{r7, pc}
 8012bde:	bf00      	nop

08012be0 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012be0:	b580      	push	{r7, lr}
 8012be2:	b084      	sub	sp, #16
 8012be4:	af00      	add	r7, sp, #0
 8012be6:	6078      	str	r0, [r7, #4]
 8012be8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8012bea:	683b      	ldr	r3, [r7, #0]
 8012bec:	889b      	ldrh	r3, [r3, #4]
 8012bee:	2b00      	cmp	r3, #0
 8012bf0:	d131      	bne.n	8012c56 <USBD_SetAddress+0x76>
 8012bf2:	683b      	ldr	r3, [r7, #0]
 8012bf4:	88db      	ldrh	r3, [r3, #6]
 8012bf6:	2b00      	cmp	r3, #0
 8012bf8:	d12d      	bne.n	8012c56 <USBD_SetAddress+0x76>
 8012bfa:	683b      	ldr	r3, [r7, #0]
 8012bfc:	885b      	ldrh	r3, [r3, #2]
 8012bfe:	2b7f      	cmp	r3, #127	; 0x7f
 8012c00:	d829      	bhi.n	8012c56 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8012c02:	683b      	ldr	r3, [r7, #0]
 8012c04:	885b      	ldrh	r3, [r3, #2]
 8012c06:	b2db      	uxtb	r3, r3
 8012c08:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012c0c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012c14:	b2db      	uxtb	r3, r3
 8012c16:	2b03      	cmp	r3, #3
 8012c18:	d104      	bne.n	8012c24 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8012c1a:	6839      	ldr	r1, [r7, #0]
 8012c1c:	6878      	ldr	r0, [r7, #4]
 8012c1e:	f000 f9bc 	bl	8012f9a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012c22:	e01d      	b.n	8012c60 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8012c24:	687b      	ldr	r3, [r7, #4]
 8012c26:	7bfa      	ldrb	r2, [r7, #15]
 8012c28:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8012c2c:	7bfb      	ldrb	r3, [r7, #15]
 8012c2e:	4619      	mov	r1, r3
 8012c30:	6878      	ldr	r0, [r7, #4]
 8012c32:	f000 ff59 	bl	8013ae8 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8012c36:	6878      	ldr	r0, [r7, #4]
 8012c38:	f000 fa7a 	bl	8013130 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8012c3c:	7bfb      	ldrb	r3, [r7, #15]
 8012c3e:	2b00      	cmp	r3, #0
 8012c40:	d004      	beq.n	8012c4c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012c42:	687b      	ldr	r3, [r7, #4]
 8012c44:	2202      	movs	r2, #2
 8012c46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012c4a:	e009      	b.n	8012c60 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	2201      	movs	r2, #1
 8012c50:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8012c54:	e004      	b.n	8012c60 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8012c56:	6839      	ldr	r1, [r7, #0]
 8012c58:	6878      	ldr	r0, [r7, #4]
 8012c5a:	f000 f99e 	bl	8012f9a <USBD_CtlError>
  }
}
 8012c5e:	bf00      	nop
 8012c60:	bf00      	nop
 8012c62:	3710      	adds	r7, #16
 8012c64:	46bd      	mov	sp, r7
 8012c66:	bd80      	pop	{r7, pc}

08012c68 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012c68:	b580      	push	{r7, lr}
 8012c6a:	b084      	sub	sp, #16
 8012c6c:	af00      	add	r7, sp, #0
 8012c6e:	6078      	str	r0, [r7, #4]
 8012c70:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8012c72:	2300      	movs	r3, #0
 8012c74:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8012c76:	683b      	ldr	r3, [r7, #0]
 8012c78:	885b      	ldrh	r3, [r3, #2]
 8012c7a:	b2da      	uxtb	r2, r3
 8012c7c:	4b4e      	ldr	r3, [pc, #312]	; (8012db8 <USBD_SetConfig+0x150>)
 8012c7e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8012c80:	4b4d      	ldr	r3, [pc, #308]	; (8012db8 <USBD_SetConfig+0x150>)
 8012c82:	781b      	ldrb	r3, [r3, #0]
 8012c84:	2b01      	cmp	r3, #1
 8012c86:	d905      	bls.n	8012c94 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8012c88:	6839      	ldr	r1, [r7, #0]
 8012c8a:	6878      	ldr	r0, [r7, #4]
 8012c8c:	f000 f985 	bl	8012f9a <USBD_CtlError>
    return USBD_FAIL;
 8012c90:	2303      	movs	r3, #3
 8012c92:	e08c      	b.n	8012dae <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8012c94:	687b      	ldr	r3, [r7, #4]
 8012c96:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012c9a:	b2db      	uxtb	r3, r3
 8012c9c:	2b02      	cmp	r3, #2
 8012c9e:	d002      	beq.n	8012ca6 <USBD_SetConfig+0x3e>
 8012ca0:	2b03      	cmp	r3, #3
 8012ca2:	d029      	beq.n	8012cf8 <USBD_SetConfig+0x90>
 8012ca4:	e075      	b.n	8012d92 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8012ca6:	4b44      	ldr	r3, [pc, #272]	; (8012db8 <USBD_SetConfig+0x150>)
 8012ca8:	781b      	ldrb	r3, [r3, #0]
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d020      	beq.n	8012cf0 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8012cae:	4b42      	ldr	r3, [pc, #264]	; (8012db8 <USBD_SetConfig+0x150>)
 8012cb0:	781b      	ldrb	r3, [r3, #0]
 8012cb2:	461a      	mov	r2, r3
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012cb8:	4b3f      	ldr	r3, [pc, #252]	; (8012db8 <USBD_SetConfig+0x150>)
 8012cba:	781b      	ldrb	r3, [r3, #0]
 8012cbc:	4619      	mov	r1, r3
 8012cbe:	6878      	ldr	r0, [r7, #4]
 8012cc0:	f7fe ffe1 	bl	8011c86 <USBD_SetClassConfig>
 8012cc4:	4603      	mov	r3, r0
 8012cc6:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8012cc8:	7bfb      	ldrb	r3, [r7, #15]
 8012cca:	2b00      	cmp	r3, #0
 8012ccc:	d008      	beq.n	8012ce0 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8012cce:	6839      	ldr	r1, [r7, #0]
 8012cd0:	6878      	ldr	r0, [r7, #4]
 8012cd2:	f000 f962 	bl	8012f9a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	2202      	movs	r2, #2
 8012cda:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012cde:	e065      	b.n	8012dac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012ce0:	6878      	ldr	r0, [r7, #4]
 8012ce2:	f000 fa25 	bl	8013130 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8012ce6:	687b      	ldr	r3, [r7, #4]
 8012ce8:	2203      	movs	r2, #3
 8012cea:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012cee:	e05d      	b.n	8012dac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012cf0:	6878      	ldr	r0, [r7, #4]
 8012cf2:	f000 fa1d 	bl	8013130 <USBD_CtlSendStatus>
      break;
 8012cf6:	e059      	b.n	8012dac <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8012cf8:	4b2f      	ldr	r3, [pc, #188]	; (8012db8 <USBD_SetConfig+0x150>)
 8012cfa:	781b      	ldrb	r3, [r3, #0]
 8012cfc:	2b00      	cmp	r3, #0
 8012cfe:	d112      	bne.n	8012d26 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8012d00:	687b      	ldr	r3, [r7, #4]
 8012d02:	2202      	movs	r2, #2
 8012d04:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8012d08:	4b2b      	ldr	r3, [pc, #172]	; (8012db8 <USBD_SetConfig+0x150>)
 8012d0a:	781b      	ldrb	r3, [r3, #0]
 8012d0c:	461a      	mov	r2, r3
 8012d0e:	687b      	ldr	r3, [r7, #4]
 8012d10:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012d12:	4b29      	ldr	r3, [pc, #164]	; (8012db8 <USBD_SetConfig+0x150>)
 8012d14:	781b      	ldrb	r3, [r3, #0]
 8012d16:	4619      	mov	r1, r3
 8012d18:	6878      	ldr	r0, [r7, #4]
 8012d1a:	f7fe ffd0 	bl	8011cbe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8012d1e:	6878      	ldr	r0, [r7, #4]
 8012d20:	f000 fa06 	bl	8013130 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8012d24:	e042      	b.n	8012dac <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8012d26:	4b24      	ldr	r3, [pc, #144]	; (8012db8 <USBD_SetConfig+0x150>)
 8012d28:	781b      	ldrb	r3, [r3, #0]
 8012d2a:	461a      	mov	r2, r3
 8012d2c:	687b      	ldr	r3, [r7, #4]
 8012d2e:	685b      	ldr	r3, [r3, #4]
 8012d30:	429a      	cmp	r2, r3
 8012d32:	d02a      	beq.n	8012d8a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012d34:	687b      	ldr	r3, [r7, #4]
 8012d36:	685b      	ldr	r3, [r3, #4]
 8012d38:	b2db      	uxtb	r3, r3
 8012d3a:	4619      	mov	r1, r3
 8012d3c:	6878      	ldr	r0, [r7, #4]
 8012d3e:	f7fe ffbe 	bl	8011cbe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8012d42:	4b1d      	ldr	r3, [pc, #116]	; (8012db8 <USBD_SetConfig+0x150>)
 8012d44:	781b      	ldrb	r3, [r3, #0]
 8012d46:	461a      	mov	r2, r3
 8012d48:	687b      	ldr	r3, [r7, #4]
 8012d4a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8012d4c:	4b1a      	ldr	r3, [pc, #104]	; (8012db8 <USBD_SetConfig+0x150>)
 8012d4e:	781b      	ldrb	r3, [r3, #0]
 8012d50:	4619      	mov	r1, r3
 8012d52:	6878      	ldr	r0, [r7, #4]
 8012d54:	f7fe ff97 	bl	8011c86 <USBD_SetClassConfig>
 8012d58:	4603      	mov	r3, r0
 8012d5a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8012d5c:	7bfb      	ldrb	r3, [r7, #15]
 8012d5e:	2b00      	cmp	r3, #0
 8012d60:	d00f      	beq.n	8012d82 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8012d62:	6839      	ldr	r1, [r7, #0]
 8012d64:	6878      	ldr	r0, [r7, #4]
 8012d66:	f000 f918 	bl	8012f9a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8012d6a:	687b      	ldr	r3, [r7, #4]
 8012d6c:	685b      	ldr	r3, [r3, #4]
 8012d6e:	b2db      	uxtb	r3, r3
 8012d70:	4619      	mov	r1, r3
 8012d72:	6878      	ldr	r0, [r7, #4]
 8012d74:	f7fe ffa3 	bl	8011cbe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	2202      	movs	r2, #2
 8012d7c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8012d80:	e014      	b.n	8012dac <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8012d82:	6878      	ldr	r0, [r7, #4]
 8012d84:	f000 f9d4 	bl	8013130 <USBD_CtlSendStatus>
      break;
 8012d88:	e010      	b.n	8012dac <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8012d8a:	6878      	ldr	r0, [r7, #4]
 8012d8c:	f000 f9d0 	bl	8013130 <USBD_CtlSendStatus>
      break;
 8012d90:	e00c      	b.n	8012dac <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8012d92:	6839      	ldr	r1, [r7, #0]
 8012d94:	6878      	ldr	r0, [r7, #4]
 8012d96:	f000 f900 	bl	8012f9a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8012d9a:	4b07      	ldr	r3, [pc, #28]	; (8012db8 <USBD_SetConfig+0x150>)
 8012d9c:	781b      	ldrb	r3, [r3, #0]
 8012d9e:	4619      	mov	r1, r3
 8012da0:	6878      	ldr	r0, [r7, #4]
 8012da2:	f7fe ff8c 	bl	8011cbe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8012da6:	2303      	movs	r3, #3
 8012da8:	73fb      	strb	r3, [r7, #15]
      break;
 8012daa:	bf00      	nop
  }

  return ret;
 8012dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8012dae:	4618      	mov	r0, r3
 8012db0:	3710      	adds	r7, #16
 8012db2:	46bd      	mov	sp, r7
 8012db4:	bd80      	pop	{r7, pc}
 8012db6:	bf00      	nop
 8012db8:	24000738 	.word	0x24000738

08012dbc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012dbc:	b580      	push	{r7, lr}
 8012dbe:	b082      	sub	sp, #8
 8012dc0:	af00      	add	r7, sp, #0
 8012dc2:	6078      	str	r0, [r7, #4]
 8012dc4:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8012dc6:	683b      	ldr	r3, [r7, #0]
 8012dc8:	88db      	ldrh	r3, [r3, #6]
 8012dca:	2b01      	cmp	r3, #1
 8012dcc:	d004      	beq.n	8012dd8 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8012dce:	6839      	ldr	r1, [r7, #0]
 8012dd0:	6878      	ldr	r0, [r7, #4]
 8012dd2:	f000 f8e2 	bl	8012f9a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8012dd6:	e023      	b.n	8012e20 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8012dd8:	687b      	ldr	r3, [r7, #4]
 8012dda:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012dde:	b2db      	uxtb	r3, r3
 8012de0:	2b02      	cmp	r3, #2
 8012de2:	dc02      	bgt.n	8012dea <USBD_GetConfig+0x2e>
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	dc03      	bgt.n	8012df0 <USBD_GetConfig+0x34>
 8012de8:	e015      	b.n	8012e16 <USBD_GetConfig+0x5a>
 8012dea:	2b03      	cmp	r3, #3
 8012dec:	d00b      	beq.n	8012e06 <USBD_GetConfig+0x4a>
 8012dee:	e012      	b.n	8012e16 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8012df0:	687b      	ldr	r3, [r7, #4]
 8012df2:	2200      	movs	r2, #0
 8012df4:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8012df6:	687b      	ldr	r3, [r7, #4]
 8012df8:	3308      	adds	r3, #8
 8012dfa:	2201      	movs	r2, #1
 8012dfc:	4619      	mov	r1, r3
 8012dfe:	6878      	ldr	r0, [r7, #4]
 8012e00:	f000 f93c 	bl	801307c <USBD_CtlSendData>
        break;
 8012e04:	e00c      	b.n	8012e20 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8012e06:	687b      	ldr	r3, [r7, #4]
 8012e08:	3304      	adds	r3, #4
 8012e0a:	2201      	movs	r2, #1
 8012e0c:	4619      	mov	r1, r3
 8012e0e:	6878      	ldr	r0, [r7, #4]
 8012e10:	f000 f934 	bl	801307c <USBD_CtlSendData>
        break;
 8012e14:	e004      	b.n	8012e20 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8012e16:	6839      	ldr	r1, [r7, #0]
 8012e18:	6878      	ldr	r0, [r7, #4]
 8012e1a:	f000 f8be 	bl	8012f9a <USBD_CtlError>
        break;
 8012e1e:	bf00      	nop
}
 8012e20:	bf00      	nop
 8012e22:	3708      	adds	r7, #8
 8012e24:	46bd      	mov	sp, r7
 8012e26:	bd80      	pop	{r7, pc}

08012e28 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012e28:	b580      	push	{r7, lr}
 8012e2a:	b082      	sub	sp, #8
 8012e2c:	af00      	add	r7, sp, #0
 8012e2e:	6078      	str	r0, [r7, #4]
 8012e30:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012e32:	687b      	ldr	r3, [r7, #4]
 8012e34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012e38:	b2db      	uxtb	r3, r3
 8012e3a:	3b01      	subs	r3, #1
 8012e3c:	2b02      	cmp	r3, #2
 8012e3e:	d81e      	bhi.n	8012e7e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8012e40:	683b      	ldr	r3, [r7, #0]
 8012e42:	88db      	ldrh	r3, [r3, #6]
 8012e44:	2b02      	cmp	r3, #2
 8012e46:	d004      	beq.n	8012e52 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8012e48:	6839      	ldr	r1, [r7, #0]
 8012e4a:	6878      	ldr	r0, [r7, #4]
 8012e4c:	f000 f8a5 	bl	8012f9a <USBD_CtlError>
        break;
 8012e50:	e01a      	b.n	8012e88 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	2201      	movs	r2, #1
 8012e56:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8012e5e:	2b00      	cmp	r3, #0
 8012e60:	d005      	beq.n	8012e6e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8012e62:	687b      	ldr	r3, [r7, #4]
 8012e64:	68db      	ldr	r3, [r3, #12]
 8012e66:	f043 0202 	orr.w	r2, r3, #2
 8012e6a:	687b      	ldr	r3, [r7, #4]
 8012e6c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8012e6e:	687b      	ldr	r3, [r7, #4]
 8012e70:	330c      	adds	r3, #12
 8012e72:	2202      	movs	r2, #2
 8012e74:	4619      	mov	r1, r3
 8012e76:	6878      	ldr	r0, [r7, #4]
 8012e78:	f000 f900 	bl	801307c <USBD_CtlSendData>
      break;
 8012e7c:	e004      	b.n	8012e88 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8012e7e:	6839      	ldr	r1, [r7, #0]
 8012e80:	6878      	ldr	r0, [r7, #4]
 8012e82:	f000 f88a 	bl	8012f9a <USBD_CtlError>
      break;
 8012e86:	bf00      	nop
  }
}
 8012e88:	bf00      	nop
 8012e8a:	3708      	adds	r7, #8
 8012e8c:	46bd      	mov	sp, r7
 8012e8e:	bd80      	pop	{r7, pc}

08012e90 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012e90:	b580      	push	{r7, lr}
 8012e92:	b082      	sub	sp, #8
 8012e94:	af00      	add	r7, sp, #0
 8012e96:	6078      	str	r0, [r7, #4]
 8012e98:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012e9a:	683b      	ldr	r3, [r7, #0]
 8012e9c:	885b      	ldrh	r3, [r3, #2]
 8012e9e:	2b01      	cmp	r3, #1
 8012ea0:	d107      	bne.n	8012eb2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8012ea2:	687b      	ldr	r3, [r7, #4]
 8012ea4:	2201      	movs	r2, #1
 8012ea6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8012eaa:	6878      	ldr	r0, [r7, #4]
 8012eac:	f000 f940 	bl	8013130 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8012eb0:	e013      	b.n	8012eda <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8012eb2:	683b      	ldr	r3, [r7, #0]
 8012eb4:	885b      	ldrh	r3, [r3, #2]
 8012eb6:	2b02      	cmp	r3, #2
 8012eb8:	d10b      	bne.n	8012ed2 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 8012eba:	683b      	ldr	r3, [r7, #0]
 8012ebc:	889b      	ldrh	r3, [r3, #4]
 8012ebe:	0a1b      	lsrs	r3, r3, #8
 8012ec0:	b29b      	uxth	r3, r3
 8012ec2:	b2da      	uxtb	r2, r3
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8012eca:	6878      	ldr	r0, [r7, #4]
 8012ecc:	f000 f930 	bl	8013130 <USBD_CtlSendStatus>
}
 8012ed0:	e003      	b.n	8012eda <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8012ed2:	6839      	ldr	r1, [r7, #0]
 8012ed4:	6878      	ldr	r0, [r7, #4]
 8012ed6:	f000 f860 	bl	8012f9a <USBD_CtlError>
}
 8012eda:	bf00      	nop
 8012edc:	3708      	adds	r7, #8
 8012ede:	46bd      	mov	sp, r7
 8012ee0:	bd80      	pop	{r7, pc}

08012ee2 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012ee2:	b580      	push	{r7, lr}
 8012ee4:	b082      	sub	sp, #8
 8012ee6:	af00      	add	r7, sp, #0
 8012ee8:	6078      	str	r0, [r7, #4]
 8012eea:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8012eec:	687b      	ldr	r3, [r7, #4]
 8012eee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8012ef2:	b2db      	uxtb	r3, r3
 8012ef4:	3b01      	subs	r3, #1
 8012ef6:	2b02      	cmp	r3, #2
 8012ef8:	d80b      	bhi.n	8012f12 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8012efa:	683b      	ldr	r3, [r7, #0]
 8012efc:	885b      	ldrh	r3, [r3, #2]
 8012efe:	2b01      	cmp	r3, #1
 8012f00:	d10c      	bne.n	8012f1c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8012f02:	687b      	ldr	r3, [r7, #4]
 8012f04:	2200      	movs	r2, #0
 8012f06:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8012f0a:	6878      	ldr	r0, [r7, #4]
 8012f0c:	f000 f910 	bl	8013130 <USBD_CtlSendStatus>
      }
      break;
 8012f10:	e004      	b.n	8012f1c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8012f12:	6839      	ldr	r1, [r7, #0]
 8012f14:	6878      	ldr	r0, [r7, #4]
 8012f16:	f000 f840 	bl	8012f9a <USBD_CtlError>
      break;
 8012f1a:	e000      	b.n	8012f1e <USBD_ClrFeature+0x3c>
      break;
 8012f1c:	bf00      	nop
  }
}
 8012f1e:	bf00      	nop
 8012f20:	3708      	adds	r7, #8
 8012f22:	46bd      	mov	sp, r7
 8012f24:	bd80      	pop	{r7, pc}

08012f26 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8012f26:	b580      	push	{r7, lr}
 8012f28:	b084      	sub	sp, #16
 8012f2a:	af00      	add	r7, sp, #0
 8012f2c:	6078      	str	r0, [r7, #4]
 8012f2e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8012f30:	683b      	ldr	r3, [r7, #0]
 8012f32:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8012f34:	68fb      	ldr	r3, [r7, #12]
 8012f36:	781a      	ldrb	r2, [r3, #0]
 8012f38:	687b      	ldr	r3, [r7, #4]
 8012f3a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8012f3c:	68fb      	ldr	r3, [r7, #12]
 8012f3e:	3301      	adds	r3, #1
 8012f40:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8012f42:	68fb      	ldr	r3, [r7, #12]
 8012f44:	781a      	ldrb	r2, [r3, #0]
 8012f46:	687b      	ldr	r3, [r7, #4]
 8012f48:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8012f4a:	68fb      	ldr	r3, [r7, #12]
 8012f4c:	3301      	adds	r3, #1
 8012f4e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8012f50:	68f8      	ldr	r0, [r7, #12]
 8012f52:	f7ff fa41 	bl	80123d8 <SWAPBYTE>
 8012f56:	4603      	mov	r3, r0
 8012f58:	461a      	mov	r2, r3
 8012f5a:	687b      	ldr	r3, [r7, #4]
 8012f5c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8012f5e:	68fb      	ldr	r3, [r7, #12]
 8012f60:	3301      	adds	r3, #1
 8012f62:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012f64:	68fb      	ldr	r3, [r7, #12]
 8012f66:	3301      	adds	r3, #1
 8012f68:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8012f6a:	68f8      	ldr	r0, [r7, #12]
 8012f6c:	f7ff fa34 	bl	80123d8 <SWAPBYTE>
 8012f70:	4603      	mov	r3, r0
 8012f72:	461a      	mov	r2, r3
 8012f74:	687b      	ldr	r3, [r7, #4]
 8012f76:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8012f78:	68fb      	ldr	r3, [r7, #12]
 8012f7a:	3301      	adds	r3, #1
 8012f7c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	3301      	adds	r3, #1
 8012f82:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8012f84:	68f8      	ldr	r0, [r7, #12]
 8012f86:	f7ff fa27 	bl	80123d8 <SWAPBYTE>
 8012f8a:	4603      	mov	r3, r0
 8012f8c:	461a      	mov	r2, r3
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	80da      	strh	r2, [r3, #6]
}
 8012f92:	bf00      	nop
 8012f94:	3710      	adds	r7, #16
 8012f96:	46bd      	mov	sp, r7
 8012f98:	bd80      	pop	{r7, pc}

08012f9a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8012f9a:	b580      	push	{r7, lr}
 8012f9c:	b082      	sub	sp, #8
 8012f9e:	af00      	add	r7, sp, #0
 8012fa0:	6078      	str	r0, [r7, #4]
 8012fa2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8012fa4:	2180      	movs	r1, #128	; 0x80
 8012fa6:	6878      	ldr	r0, [r7, #4]
 8012fa8:	f000 fd34 	bl	8013a14 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8012fac:	2100      	movs	r1, #0
 8012fae:	6878      	ldr	r0, [r7, #4]
 8012fb0:	f000 fd30 	bl	8013a14 <USBD_LL_StallEP>
}
 8012fb4:	bf00      	nop
 8012fb6:	3708      	adds	r7, #8
 8012fb8:	46bd      	mov	sp, r7
 8012fba:	bd80      	pop	{r7, pc}

08012fbc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8012fbc:	b580      	push	{r7, lr}
 8012fbe:	b086      	sub	sp, #24
 8012fc0:	af00      	add	r7, sp, #0
 8012fc2:	60f8      	str	r0, [r7, #12]
 8012fc4:	60b9      	str	r1, [r7, #8]
 8012fc6:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8012fc8:	2300      	movs	r3, #0
 8012fca:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	2b00      	cmp	r3, #0
 8012fd0:	d036      	beq.n	8013040 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8012fd2:	68fb      	ldr	r3, [r7, #12]
 8012fd4:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8012fd6:	6938      	ldr	r0, [r7, #16]
 8012fd8:	f000 f836 	bl	8013048 <USBD_GetLen>
 8012fdc:	4603      	mov	r3, r0
 8012fde:	3301      	adds	r3, #1
 8012fe0:	b29b      	uxth	r3, r3
 8012fe2:	005b      	lsls	r3, r3, #1
 8012fe4:	b29a      	uxth	r2, r3
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8012fea:	7dfb      	ldrb	r3, [r7, #23]
 8012fec:	68ba      	ldr	r2, [r7, #8]
 8012fee:	4413      	add	r3, r2
 8012ff0:	687a      	ldr	r2, [r7, #4]
 8012ff2:	7812      	ldrb	r2, [r2, #0]
 8012ff4:	701a      	strb	r2, [r3, #0]
  idx++;
 8012ff6:	7dfb      	ldrb	r3, [r7, #23]
 8012ff8:	3301      	adds	r3, #1
 8012ffa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8012ffc:	7dfb      	ldrb	r3, [r7, #23]
 8012ffe:	68ba      	ldr	r2, [r7, #8]
 8013000:	4413      	add	r3, r2
 8013002:	2203      	movs	r2, #3
 8013004:	701a      	strb	r2, [r3, #0]
  idx++;
 8013006:	7dfb      	ldrb	r3, [r7, #23]
 8013008:	3301      	adds	r3, #1
 801300a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 801300c:	e013      	b.n	8013036 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 801300e:	7dfb      	ldrb	r3, [r7, #23]
 8013010:	68ba      	ldr	r2, [r7, #8]
 8013012:	4413      	add	r3, r2
 8013014:	693a      	ldr	r2, [r7, #16]
 8013016:	7812      	ldrb	r2, [r2, #0]
 8013018:	701a      	strb	r2, [r3, #0]
    pdesc++;
 801301a:	693b      	ldr	r3, [r7, #16]
 801301c:	3301      	adds	r3, #1
 801301e:	613b      	str	r3, [r7, #16]
    idx++;
 8013020:	7dfb      	ldrb	r3, [r7, #23]
 8013022:	3301      	adds	r3, #1
 8013024:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8013026:	7dfb      	ldrb	r3, [r7, #23]
 8013028:	68ba      	ldr	r2, [r7, #8]
 801302a:	4413      	add	r3, r2
 801302c:	2200      	movs	r2, #0
 801302e:	701a      	strb	r2, [r3, #0]
    idx++;
 8013030:	7dfb      	ldrb	r3, [r7, #23]
 8013032:	3301      	adds	r3, #1
 8013034:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8013036:	693b      	ldr	r3, [r7, #16]
 8013038:	781b      	ldrb	r3, [r3, #0]
 801303a:	2b00      	cmp	r3, #0
 801303c:	d1e7      	bne.n	801300e <USBD_GetString+0x52>
 801303e:	e000      	b.n	8013042 <USBD_GetString+0x86>
    return;
 8013040:	bf00      	nop
  }
}
 8013042:	3718      	adds	r7, #24
 8013044:	46bd      	mov	sp, r7
 8013046:	bd80      	pop	{r7, pc}

08013048 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8013048:	b480      	push	{r7}
 801304a:	b085      	sub	sp, #20
 801304c:	af00      	add	r7, sp, #0
 801304e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8013050:	2300      	movs	r3, #0
 8013052:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8013054:	687b      	ldr	r3, [r7, #4]
 8013056:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8013058:	e005      	b.n	8013066 <USBD_GetLen+0x1e>
  {
    len++;
 801305a:	7bfb      	ldrb	r3, [r7, #15]
 801305c:	3301      	adds	r3, #1
 801305e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8013060:	68bb      	ldr	r3, [r7, #8]
 8013062:	3301      	adds	r3, #1
 8013064:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8013066:	68bb      	ldr	r3, [r7, #8]
 8013068:	781b      	ldrb	r3, [r3, #0]
 801306a:	2b00      	cmp	r3, #0
 801306c:	d1f5      	bne.n	801305a <USBD_GetLen+0x12>
  }

  return len;
 801306e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013070:	4618      	mov	r0, r3
 8013072:	3714      	adds	r7, #20
 8013074:	46bd      	mov	sp, r7
 8013076:	f85d 7b04 	ldr.w	r7, [sp], #4
 801307a:	4770      	bx	lr

0801307c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 801307c:	b580      	push	{r7, lr}
 801307e:	b084      	sub	sp, #16
 8013080:	af00      	add	r7, sp, #0
 8013082:	60f8      	str	r0, [r7, #12]
 8013084:	60b9      	str	r1, [r7, #8]
 8013086:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	2202      	movs	r2, #2
 801308c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8013090:	68fb      	ldr	r3, [r7, #12]
 8013092:	687a      	ldr	r2, [r7, #4]
 8013094:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8013096:	68fb      	ldr	r3, [r7, #12]
 8013098:	687a      	ldr	r2, [r7, #4]
 801309a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 801309c:	687b      	ldr	r3, [r7, #4]
 801309e:	68ba      	ldr	r2, [r7, #8]
 80130a0:	2100      	movs	r1, #0
 80130a2:	68f8      	ldr	r0, [r7, #12]
 80130a4:	f000 fd3f 	bl	8013b26 <USBD_LL_Transmit>

  return USBD_OK;
 80130a8:	2300      	movs	r3, #0
}
 80130aa:	4618      	mov	r0, r3
 80130ac:	3710      	adds	r7, #16
 80130ae:	46bd      	mov	sp, r7
 80130b0:	bd80      	pop	{r7, pc}

080130b2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80130b2:	b580      	push	{r7, lr}
 80130b4:	b084      	sub	sp, #16
 80130b6:	af00      	add	r7, sp, #0
 80130b8:	60f8      	str	r0, [r7, #12]
 80130ba:	60b9      	str	r1, [r7, #8]
 80130bc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80130be:	687b      	ldr	r3, [r7, #4]
 80130c0:	68ba      	ldr	r2, [r7, #8]
 80130c2:	2100      	movs	r1, #0
 80130c4:	68f8      	ldr	r0, [r7, #12]
 80130c6:	f000 fd2e 	bl	8013b26 <USBD_LL_Transmit>

  return USBD_OK;
 80130ca:	2300      	movs	r3, #0
}
 80130cc:	4618      	mov	r0, r3
 80130ce:	3710      	adds	r7, #16
 80130d0:	46bd      	mov	sp, r7
 80130d2:	bd80      	pop	{r7, pc}

080130d4 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80130d4:	b580      	push	{r7, lr}
 80130d6:	b084      	sub	sp, #16
 80130d8:	af00      	add	r7, sp, #0
 80130da:	60f8      	str	r0, [r7, #12]
 80130dc:	60b9      	str	r1, [r7, #8]
 80130de:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 80130e0:	68fb      	ldr	r3, [r7, #12]
 80130e2:	2203      	movs	r2, #3
 80130e4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 80130e8:	68fb      	ldr	r3, [r7, #12]
 80130ea:	687a      	ldr	r2, [r7, #4]
 80130ec:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	687a      	ldr	r2, [r7, #4]
 80130f4:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	68ba      	ldr	r2, [r7, #8]
 80130fc:	2100      	movs	r1, #0
 80130fe:	68f8      	ldr	r0, [r7, #12]
 8013100:	f000 fd32 	bl	8013b68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013104:	2300      	movs	r3, #0
}
 8013106:	4618      	mov	r0, r3
 8013108:	3710      	adds	r7, #16
 801310a:	46bd      	mov	sp, r7
 801310c:	bd80      	pop	{r7, pc}

0801310e <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 801310e:	b580      	push	{r7, lr}
 8013110:	b084      	sub	sp, #16
 8013112:	af00      	add	r7, sp, #0
 8013114:	60f8      	str	r0, [r7, #12]
 8013116:	60b9      	str	r1, [r7, #8]
 8013118:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	68ba      	ldr	r2, [r7, #8]
 801311e:	2100      	movs	r1, #0
 8013120:	68f8      	ldr	r0, [r7, #12]
 8013122:	f000 fd21 	bl	8013b68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013126:	2300      	movs	r3, #0
}
 8013128:	4618      	mov	r0, r3
 801312a:	3710      	adds	r7, #16
 801312c:	46bd      	mov	sp, r7
 801312e:	bd80      	pop	{r7, pc}

08013130 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8013130:	b580      	push	{r7, lr}
 8013132:	b082      	sub	sp, #8
 8013134:	af00      	add	r7, sp, #0
 8013136:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	2204      	movs	r2, #4
 801313c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8013140:	2300      	movs	r3, #0
 8013142:	2200      	movs	r2, #0
 8013144:	2100      	movs	r1, #0
 8013146:	6878      	ldr	r0, [r7, #4]
 8013148:	f000 fced 	bl	8013b26 <USBD_LL_Transmit>

  return USBD_OK;
 801314c:	2300      	movs	r3, #0
}
 801314e:	4618      	mov	r0, r3
 8013150:	3708      	adds	r7, #8
 8013152:	46bd      	mov	sp, r7
 8013154:	bd80      	pop	{r7, pc}

08013156 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8013156:	b580      	push	{r7, lr}
 8013158:	b082      	sub	sp, #8
 801315a:	af00      	add	r7, sp, #0
 801315c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 801315e:	687b      	ldr	r3, [r7, #4]
 8013160:	2205      	movs	r2, #5
 8013162:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8013166:	2300      	movs	r3, #0
 8013168:	2200      	movs	r2, #0
 801316a:	2100      	movs	r1, #0
 801316c:	6878      	ldr	r0, [r7, #4]
 801316e:	f000 fcfb 	bl	8013b68 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8013172:	2300      	movs	r3, #0
}
 8013174:	4618      	mov	r0, r3
 8013176:	3708      	adds	r7, #8
 8013178:	46bd      	mov	sp, r7
 801317a:	bd80      	pop	{r7, pc}

0801317c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 801317c:	b580      	push	{r7, lr}
 801317e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8013180:	2200      	movs	r2, #0
 8013182:	4913      	ldr	r1, [pc, #76]	; (80131d0 <MX_USB_DEVICE_Init+0x54>)
 8013184:	4813      	ldr	r0, [pc, #76]	; (80131d4 <MX_USB_DEVICE_Init+0x58>)
 8013186:	f7fe fd01 	bl	8011b8c <USBD_Init>
 801318a:	4603      	mov	r3, r0
 801318c:	2b00      	cmp	r3, #0
 801318e:	d001      	beq.n	8013194 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8013190:	f7f5 fbea 	bl	8008968 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8013194:	4910      	ldr	r1, [pc, #64]	; (80131d8 <MX_USB_DEVICE_Init+0x5c>)
 8013196:	480f      	ldr	r0, [pc, #60]	; (80131d4 <MX_USB_DEVICE_Init+0x58>)
 8013198:	f7fe fd28 	bl	8011bec <USBD_RegisterClass>
 801319c:	4603      	mov	r3, r0
 801319e:	2b00      	cmp	r3, #0
 80131a0:	d001      	beq.n	80131a6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80131a2:	f7f5 fbe1 	bl	8008968 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80131a6:	490d      	ldr	r1, [pc, #52]	; (80131dc <MX_USB_DEVICE_Init+0x60>)
 80131a8:	480a      	ldr	r0, [pc, #40]	; (80131d4 <MX_USB_DEVICE_Init+0x58>)
 80131aa:	f7fe fc1f 	bl	80119ec <USBD_CDC_RegisterInterface>
 80131ae:	4603      	mov	r3, r0
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d001      	beq.n	80131b8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80131b4:	f7f5 fbd8 	bl	8008968 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80131b8:	4806      	ldr	r0, [pc, #24]	; (80131d4 <MX_USB_DEVICE_Init+0x58>)
 80131ba:	f7fe fd4d 	bl	8011c58 <USBD_Start>
 80131be:	4603      	mov	r3, r0
 80131c0:	2b00      	cmp	r3, #0
 80131c2:	d001      	beq.n	80131c8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80131c4:	f7f5 fbd0 	bl	8008968 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */
  HAL_PWREx_EnableUSBVoltageDetector();
 80131c8:	f7f8 ffb6 	bl	800c138 <HAL_PWREx_EnableUSBVoltageDetector>

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80131cc:	bf00      	nop
 80131ce:	bd80      	pop	{r7, pc}
 80131d0:	24000480 	.word	0x24000480
 80131d4:	2400073c 	.word	0x2400073c
 80131d8:	240003ec 	.word	0x240003ec
 80131dc:	2400046c 	.word	0x2400046c

080131e0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80131e0:	b580      	push	{r7, lr}
 80131e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80131e4:	2200      	movs	r2, #0
 80131e6:	4905      	ldr	r1, [pc, #20]	; (80131fc <CDC_Init_FS+0x1c>)
 80131e8:	4805      	ldr	r0, [pc, #20]	; (8013200 <CDC_Init_FS+0x20>)
 80131ea:	f7fe fc19 	bl	8011a20 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80131ee:	4905      	ldr	r1, [pc, #20]	; (8013204 <CDC_Init_FS+0x24>)
 80131f0:	4803      	ldr	r0, [pc, #12]	; (8013200 <CDC_Init_FS+0x20>)
 80131f2:	f7fe fc37 	bl	8011a64 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80131f6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80131f8:	4618      	mov	r0, r3
 80131fa:	bd80      	pop	{r7, pc}
 80131fc:	24001218 	.word	0x24001218
 8013200:	2400073c 	.word	0x2400073c
 8013204:	24000a18 	.word	0x24000a18

08013208 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8013208:	b480      	push	{r7}
 801320a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801320c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801320e:	4618      	mov	r0, r3
 8013210:	46bd      	mov	sp, r7
 8013212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013216:	4770      	bx	lr

08013218 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8013218:	b480      	push	{r7}
 801321a:	b083      	sub	sp, #12
 801321c:	af00      	add	r7, sp, #0
 801321e:	4603      	mov	r3, r0
 8013220:	6039      	str	r1, [r7, #0]
 8013222:	71fb      	strb	r3, [r7, #7]
 8013224:	4613      	mov	r3, r2
 8013226:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8013228:	79fb      	ldrb	r3, [r7, #7]
 801322a:	2b23      	cmp	r3, #35	; 0x23
 801322c:	d84a      	bhi.n	80132c4 <CDC_Control_FS+0xac>
 801322e:	a201      	add	r2, pc, #4	; (adr r2, 8013234 <CDC_Control_FS+0x1c>)
 8013230:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013234:	080132c5 	.word	0x080132c5
 8013238:	080132c5 	.word	0x080132c5
 801323c:	080132c5 	.word	0x080132c5
 8013240:	080132c5 	.word	0x080132c5
 8013244:	080132c5 	.word	0x080132c5
 8013248:	080132c5 	.word	0x080132c5
 801324c:	080132c5 	.word	0x080132c5
 8013250:	080132c5 	.word	0x080132c5
 8013254:	080132c5 	.word	0x080132c5
 8013258:	080132c5 	.word	0x080132c5
 801325c:	080132c5 	.word	0x080132c5
 8013260:	080132c5 	.word	0x080132c5
 8013264:	080132c5 	.word	0x080132c5
 8013268:	080132c5 	.word	0x080132c5
 801326c:	080132c5 	.word	0x080132c5
 8013270:	080132c5 	.word	0x080132c5
 8013274:	080132c5 	.word	0x080132c5
 8013278:	080132c5 	.word	0x080132c5
 801327c:	080132c5 	.word	0x080132c5
 8013280:	080132c5 	.word	0x080132c5
 8013284:	080132c5 	.word	0x080132c5
 8013288:	080132c5 	.word	0x080132c5
 801328c:	080132c5 	.word	0x080132c5
 8013290:	080132c5 	.word	0x080132c5
 8013294:	080132c5 	.word	0x080132c5
 8013298:	080132c5 	.word	0x080132c5
 801329c:	080132c5 	.word	0x080132c5
 80132a0:	080132c5 	.word	0x080132c5
 80132a4:	080132c5 	.word	0x080132c5
 80132a8:	080132c5 	.word	0x080132c5
 80132ac:	080132c5 	.word	0x080132c5
 80132b0:	080132c5 	.word	0x080132c5
 80132b4:	080132c5 	.word	0x080132c5
 80132b8:	080132c5 	.word	0x080132c5
 80132bc:	080132c5 	.word	0x080132c5
 80132c0:	080132c5 	.word	0x080132c5
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80132c4:	bf00      	nop
  }

  return (USBD_OK);
 80132c6:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80132c8:	4618      	mov	r0, r3
 80132ca:	370c      	adds	r7, #12
 80132cc:	46bd      	mov	sp, r7
 80132ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d2:	4770      	bx	lr

080132d4 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80132d4:	b580      	push	{r7, lr}
 80132d6:	b082      	sub	sp, #8
 80132d8:	af00      	add	r7, sp, #0
 80132da:	6078      	str	r0, [r7, #4]
 80132dc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80132de:	6879      	ldr	r1, [r7, #4]
 80132e0:	4819      	ldr	r0, [pc, #100]	; (8013348 <CDC_Receive_FS+0x74>)
 80132e2:	f7fe fbbf 	bl	8011a64 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80132e6:	4818      	ldr	r0, [pc, #96]	; (8013348 <CDC_Receive_FS+0x74>)
 80132e8:	f7fe fc1a 	bl	8011b20 <USBD_CDC_ReceivePacket>

//  memset(usb_buffer, '\0', 100);
  usb_len = (uint8_t)* Len;
 80132ec:	683b      	ldr	r3, [r7, #0]
 80132ee:	681b      	ldr	r3, [r3, #0]
 80132f0:	b2da      	uxtb	r2, r3
 80132f2:	4b16      	ldr	r3, [pc, #88]	; (801334c <CDC_Receive_FS+0x78>)
 80132f4:	701a      	strb	r2, [r3, #0]
  memcpy(usb_buffer, Buf, usb_len);
 80132f6:	4b15      	ldr	r3, [pc, #84]	; (801334c <CDC_Receive_FS+0x78>)
 80132f8:	781b      	ldrb	r3, [r3, #0]
 80132fa:	461a      	mov	r2, r3
 80132fc:	6879      	ldr	r1, [r7, #4]
 80132fe:	4814      	ldr	r0, [pc, #80]	; (8013350 <CDC_Receive_FS+0x7c>)
 8013300:	f000 febe 	bl	8014080 <memcpy>
  if(usb_buffer[usb_len-1] == '\n')
 8013304:	4b11      	ldr	r3, [pc, #68]	; (801334c <CDC_Receive_FS+0x78>)
 8013306:	781b      	ldrb	r3, [r3, #0]
 8013308:	3b01      	subs	r3, #1
 801330a:	4a11      	ldr	r2, [pc, #68]	; (8013350 <CDC_Receive_FS+0x7c>)
 801330c:	5cd3      	ldrb	r3, [r2, r3]
 801330e:	2b0a      	cmp	r3, #10
 8013310:	d108      	bne.n	8013324 <CDC_Receive_FS+0x50>
  {
	  usb_flag = 1;
 8013312:	4b10      	ldr	r3, [pc, #64]	; (8013354 <CDC_Receive_FS+0x80>)
 8013314:	2201      	movs	r2, #1
 8013316:	701a      	strb	r2, [r3, #0]
	  usb_buffer[usb_len] = '\0';
 8013318:	4b0c      	ldr	r3, [pc, #48]	; (801334c <CDC_Receive_FS+0x78>)
 801331a:	781b      	ldrb	r3, [r3, #0]
 801331c:	461a      	mov	r2, r3
 801331e:	4b0c      	ldr	r3, [pc, #48]	; (8013350 <CDC_Receive_FS+0x7c>)
 8013320:	2100      	movs	r1, #0
 8013322:	5499      	strb	r1, [r3, r2]
  }
  if(usb_flag)
 8013324:	4b0b      	ldr	r3, [pc, #44]	; (8013354 <CDC_Receive_FS+0x80>)
 8013326:	781b      	ldrb	r3, [r3, #0]
 8013328:	2b00      	cmp	r3, #0
 801332a:	d008      	beq.n	801333e <CDC_Receive_FS+0x6a>
  {
	cli_command_excute(usb_buffer, usb_len);
 801332c:	4b07      	ldr	r3, [pc, #28]	; (801334c <CDC_Receive_FS+0x78>)
 801332e:	781b      	ldrb	r3, [r3, #0]
 8013330:	4619      	mov	r1, r3
 8013332:	4807      	ldr	r0, [pc, #28]	; (8013350 <CDC_Receive_FS+0x7c>)
 8013334:	f7fd ff1c 	bl	8011170 <cli_command_excute>
	usb_flag = 0;
 8013338:	4b06      	ldr	r3, [pc, #24]	; (8013354 <CDC_Receive_FS+0x80>)
 801333a:	2200      	movs	r2, #0
 801333c:	701a      	strb	r2, [r3, #0]
  }
//  memset(Buf, '\0', 100);

  return (USBD_OK);
 801333e:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8013340:	4618      	mov	r0, r3
 8013342:	3708      	adds	r7, #8
 8013344:	46bd      	mov	sp, r7
 8013346:	bd80      	pop	{r7, pc}
 8013348:	2400073c 	.word	0x2400073c
 801334c:	24000718 	.word	0x24000718
 8013350:	240006b4 	.word	0x240006b4
 8013354:	24000719 	.word	0x24000719

08013358 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8013358:	b580      	push	{r7, lr}
 801335a:	b084      	sub	sp, #16
 801335c:	af00      	add	r7, sp, #0
 801335e:	6078      	str	r0, [r7, #4]
 8013360:	460b      	mov	r3, r1
 8013362:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8013364:	2300      	movs	r3, #0
 8013366:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8013368:	4b0d      	ldr	r3, [pc, #52]	; (80133a0 <CDC_Transmit_FS+0x48>)
 801336a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 801336e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8013370:	68bb      	ldr	r3, [r7, #8]
 8013372:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8013376:	2b00      	cmp	r3, #0
 8013378:	d001      	beq.n	801337e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 801337a:	2301      	movs	r3, #1
 801337c:	e00b      	b.n	8013396 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801337e:	887b      	ldrh	r3, [r7, #2]
 8013380:	461a      	mov	r2, r3
 8013382:	6879      	ldr	r1, [r7, #4]
 8013384:	4806      	ldr	r0, [pc, #24]	; (80133a0 <CDC_Transmit_FS+0x48>)
 8013386:	f7fe fb4b 	bl	8011a20 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 801338a:	4805      	ldr	r0, [pc, #20]	; (80133a0 <CDC_Transmit_FS+0x48>)
 801338c:	f7fe fb88 	bl	8011aa0 <USBD_CDC_TransmitPacket>
 8013390:	4603      	mov	r3, r0
 8013392:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8013394:	7bfb      	ldrb	r3, [r7, #15]
}
 8013396:	4618      	mov	r0, r3
 8013398:	3710      	adds	r7, #16
 801339a:	46bd      	mov	sp, r7
 801339c:	bd80      	pop	{r7, pc}
 801339e:	bf00      	nop
 80133a0:	2400073c 	.word	0x2400073c

080133a4 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80133a4:	b480      	push	{r7}
 80133a6:	b087      	sub	sp, #28
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	60f8      	str	r0, [r7, #12]
 80133ac:	60b9      	str	r1, [r7, #8]
 80133ae:	4613      	mov	r3, r2
 80133b0:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80133b2:	2300      	movs	r3, #0
 80133b4:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80133b6:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80133ba:	4618      	mov	r0, r3
 80133bc:	371c      	adds	r7, #28
 80133be:	46bd      	mov	sp, r7
 80133c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133c4:	4770      	bx	lr
	...

080133c8 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80133c8:	b480      	push	{r7}
 80133ca:	b083      	sub	sp, #12
 80133cc:	af00      	add	r7, sp, #0
 80133ce:	4603      	mov	r3, r0
 80133d0:	6039      	str	r1, [r7, #0]
 80133d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80133d4:	683b      	ldr	r3, [r7, #0]
 80133d6:	2212      	movs	r2, #18
 80133d8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80133da:	4b03      	ldr	r3, [pc, #12]	; (80133e8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80133dc:	4618      	mov	r0, r3
 80133de:	370c      	adds	r7, #12
 80133e0:	46bd      	mov	sp, r7
 80133e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133e6:	4770      	bx	lr
 80133e8:	2400049c 	.word	0x2400049c

080133ec <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80133ec:	b480      	push	{r7}
 80133ee:	b083      	sub	sp, #12
 80133f0:	af00      	add	r7, sp, #0
 80133f2:	4603      	mov	r3, r0
 80133f4:	6039      	str	r1, [r7, #0]
 80133f6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80133f8:	683b      	ldr	r3, [r7, #0]
 80133fa:	2204      	movs	r2, #4
 80133fc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80133fe:	4b03      	ldr	r3, [pc, #12]	; (801340c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8013400:	4618      	mov	r0, r3
 8013402:	370c      	adds	r7, #12
 8013404:	46bd      	mov	sp, r7
 8013406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801340a:	4770      	bx	lr
 801340c:	240004b0 	.word	0x240004b0

08013410 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013410:	b580      	push	{r7, lr}
 8013412:	b082      	sub	sp, #8
 8013414:	af00      	add	r7, sp, #0
 8013416:	4603      	mov	r3, r0
 8013418:	6039      	str	r1, [r7, #0]
 801341a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 801341c:	79fb      	ldrb	r3, [r7, #7]
 801341e:	2b00      	cmp	r3, #0
 8013420:	d105      	bne.n	801342e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8013422:	683a      	ldr	r2, [r7, #0]
 8013424:	4907      	ldr	r1, [pc, #28]	; (8013444 <USBD_FS_ProductStrDescriptor+0x34>)
 8013426:	4808      	ldr	r0, [pc, #32]	; (8013448 <USBD_FS_ProductStrDescriptor+0x38>)
 8013428:	f7ff fdc8 	bl	8012fbc <USBD_GetString>
 801342c:	e004      	b.n	8013438 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801342e:	683a      	ldr	r2, [r7, #0]
 8013430:	4904      	ldr	r1, [pc, #16]	; (8013444 <USBD_FS_ProductStrDescriptor+0x34>)
 8013432:	4805      	ldr	r0, [pc, #20]	; (8013448 <USBD_FS_ProductStrDescriptor+0x38>)
 8013434:	f7ff fdc2 	bl	8012fbc <USBD_GetString>
  }
  return USBD_StrDesc;
 8013438:	4b02      	ldr	r3, [pc, #8]	; (8013444 <USBD_FS_ProductStrDescriptor+0x34>)
}
 801343a:	4618      	mov	r0, r3
 801343c:	3708      	adds	r7, #8
 801343e:	46bd      	mov	sp, r7
 8013440:	bd80      	pop	{r7, pc}
 8013442:	bf00      	nop
 8013444:	24001a18 	.word	0x24001a18
 8013448:	08015694 	.word	0x08015694

0801344c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801344c:	b580      	push	{r7, lr}
 801344e:	b082      	sub	sp, #8
 8013450:	af00      	add	r7, sp, #0
 8013452:	4603      	mov	r3, r0
 8013454:	6039      	str	r1, [r7, #0]
 8013456:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8013458:	683a      	ldr	r2, [r7, #0]
 801345a:	4904      	ldr	r1, [pc, #16]	; (801346c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 801345c:	4804      	ldr	r0, [pc, #16]	; (8013470 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 801345e:	f7ff fdad 	bl	8012fbc <USBD_GetString>
  return USBD_StrDesc;
 8013462:	4b02      	ldr	r3, [pc, #8]	; (801346c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8013464:	4618      	mov	r0, r3
 8013466:	3708      	adds	r7, #8
 8013468:	46bd      	mov	sp, r7
 801346a:	bd80      	pop	{r7, pc}
 801346c:	24001a18 	.word	0x24001a18
 8013470:	080156a8 	.word	0x080156a8

08013474 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013474:	b580      	push	{r7, lr}
 8013476:	b082      	sub	sp, #8
 8013478:	af00      	add	r7, sp, #0
 801347a:	4603      	mov	r3, r0
 801347c:	6039      	str	r1, [r7, #0]
 801347e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8013480:	683b      	ldr	r3, [r7, #0]
 8013482:	221a      	movs	r2, #26
 8013484:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8013486:	f000 f843 	bl	8013510 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 801348a:	4b02      	ldr	r3, [pc, #8]	; (8013494 <USBD_FS_SerialStrDescriptor+0x20>)
}
 801348c:	4618      	mov	r0, r3
 801348e:	3708      	adds	r7, #8
 8013490:	46bd      	mov	sp, r7
 8013492:	bd80      	pop	{r7, pc}
 8013494:	240004b4 	.word	0x240004b4

08013498 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8013498:	b580      	push	{r7, lr}
 801349a:	b082      	sub	sp, #8
 801349c:	af00      	add	r7, sp, #0
 801349e:	4603      	mov	r3, r0
 80134a0:	6039      	str	r1, [r7, #0]
 80134a2:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80134a4:	79fb      	ldrb	r3, [r7, #7]
 80134a6:	2b00      	cmp	r3, #0
 80134a8:	d105      	bne.n	80134b6 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80134aa:	683a      	ldr	r2, [r7, #0]
 80134ac:	4907      	ldr	r1, [pc, #28]	; (80134cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80134ae:	4808      	ldr	r0, [pc, #32]	; (80134d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80134b0:	f7ff fd84 	bl	8012fbc <USBD_GetString>
 80134b4:	e004      	b.n	80134c0 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80134b6:	683a      	ldr	r2, [r7, #0]
 80134b8:	4904      	ldr	r1, [pc, #16]	; (80134cc <USBD_FS_ConfigStrDescriptor+0x34>)
 80134ba:	4805      	ldr	r0, [pc, #20]	; (80134d0 <USBD_FS_ConfigStrDescriptor+0x38>)
 80134bc:	f7ff fd7e 	bl	8012fbc <USBD_GetString>
  }
  return USBD_StrDesc;
 80134c0:	4b02      	ldr	r3, [pc, #8]	; (80134cc <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80134c2:	4618      	mov	r0, r3
 80134c4:	3708      	adds	r7, #8
 80134c6:	46bd      	mov	sp, r7
 80134c8:	bd80      	pop	{r7, pc}
 80134ca:	bf00      	nop
 80134cc:	24001a18 	.word	0x24001a18
 80134d0:	080156bc 	.word	0x080156bc

080134d4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80134d4:	b580      	push	{r7, lr}
 80134d6:	b082      	sub	sp, #8
 80134d8:	af00      	add	r7, sp, #0
 80134da:	4603      	mov	r3, r0
 80134dc:	6039      	str	r1, [r7, #0]
 80134de:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80134e0:	79fb      	ldrb	r3, [r7, #7]
 80134e2:	2b00      	cmp	r3, #0
 80134e4:	d105      	bne.n	80134f2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80134e6:	683a      	ldr	r2, [r7, #0]
 80134e8:	4907      	ldr	r1, [pc, #28]	; (8013508 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80134ea:	4808      	ldr	r0, [pc, #32]	; (801350c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80134ec:	f7ff fd66 	bl	8012fbc <USBD_GetString>
 80134f0:	e004      	b.n	80134fc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80134f2:	683a      	ldr	r2, [r7, #0]
 80134f4:	4904      	ldr	r1, [pc, #16]	; (8013508 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80134f6:	4805      	ldr	r0, [pc, #20]	; (801350c <USBD_FS_InterfaceStrDescriptor+0x38>)
 80134f8:	f7ff fd60 	bl	8012fbc <USBD_GetString>
  }
  return USBD_StrDesc;
 80134fc:	4b02      	ldr	r3, [pc, #8]	; (8013508 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80134fe:	4618      	mov	r0, r3
 8013500:	3708      	adds	r7, #8
 8013502:	46bd      	mov	sp, r7
 8013504:	bd80      	pop	{r7, pc}
 8013506:	bf00      	nop
 8013508:	24001a18 	.word	0x24001a18
 801350c:	080156c8 	.word	0x080156c8

08013510 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8013510:	b580      	push	{r7, lr}
 8013512:	b084      	sub	sp, #16
 8013514:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8013516:	4b0f      	ldr	r3, [pc, #60]	; (8013554 <Get_SerialNum+0x44>)
 8013518:	681b      	ldr	r3, [r3, #0]
 801351a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 801351c:	4b0e      	ldr	r3, [pc, #56]	; (8013558 <Get_SerialNum+0x48>)
 801351e:	681b      	ldr	r3, [r3, #0]
 8013520:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8013522:	4b0e      	ldr	r3, [pc, #56]	; (801355c <Get_SerialNum+0x4c>)
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8013528:	68fa      	ldr	r2, [r7, #12]
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	4413      	add	r3, r2
 801352e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8013530:	68fb      	ldr	r3, [r7, #12]
 8013532:	2b00      	cmp	r3, #0
 8013534:	d009      	beq.n	801354a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8013536:	2208      	movs	r2, #8
 8013538:	4909      	ldr	r1, [pc, #36]	; (8013560 <Get_SerialNum+0x50>)
 801353a:	68f8      	ldr	r0, [r7, #12]
 801353c:	f000 f814 	bl	8013568 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8013540:	2204      	movs	r2, #4
 8013542:	4908      	ldr	r1, [pc, #32]	; (8013564 <Get_SerialNum+0x54>)
 8013544:	68b8      	ldr	r0, [r7, #8]
 8013546:	f000 f80f 	bl	8013568 <IntToUnicode>
  }
}
 801354a:	bf00      	nop
 801354c:	3710      	adds	r7, #16
 801354e:	46bd      	mov	sp, r7
 8013550:	bd80      	pop	{r7, pc}
 8013552:	bf00      	nop
 8013554:	1ff1e800 	.word	0x1ff1e800
 8013558:	1ff1e804 	.word	0x1ff1e804
 801355c:	1ff1e808 	.word	0x1ff1e808
 8013560:	240004b6 	.word	0x240004b6
 8013564:	240004c6 	.word	0x240004c6

08013568 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8013568:	b480      	push	{r7}
 801356a:	b087      	sub	sp, #28
 801356c:	af00      	add	r7, sp, #0
 801356e:	60f8      	str	r0, [r7, #12]
 8013570:	60b9      	str	r1, [r7, #8]
 8013572:	4613      	mov	r3, r2
 8013574:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8013576:	2300      	movs	r3, #0
 8013578:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 801357a:	2300      	movs	r3, #0
 801357c:	75fb      	strb	r3, [r7, #23]
 801357e:	e027      	b.n	80135d0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8013580:	68fb      	ldr	r3, [r7, #12]
 8013582:	0f1b      	lsrs	r3, r3, #28
 8013584:	2b09      	cmp	r3, #9
 8013586:	d80b      	bhi.n	80135a0 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8013588:	68fb      	ldr	r3, [r7, #12]
 801358a:	0f1b      	lsrs	r3, r3, #28
 801358c:	b2da      	uxtb	r2, r3
 801358e:	7dfb      	ldrb	r3, [r7, #23]
 8013590:	005b      	lsls	r3, r3, #1
 8013592:	4619      	mov	r1, r3
 8013594:	68bb      	ldr	r3, [r7, #8]
 8013596:	440b      	add	r3, r1
 8013598:	3230      	adds	r2, #48	; 0x30
 801359a:	b2d2      	uxtb	r2, r2
 801359c:	701a      	strb	r2, [r3, #0]
 801359e:	e00a      	b.n	80135b6 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80135a0:	68fb      	ldr	r3, [r7, #12]
 80135a2:	0f1b      	lsrs	r3, r3, #28
 80135a4:	b2da      	uxtb	r2, r3
 80135a6:	7dfb      	ldrb	r3, [r7, #23]
 80135a8:	005b      	lsls	r3, r3, #1
 80135aa:	4619      	mov	r1, r3
 80135ac:	68bb      	ldr	r3, [r7, #8]
 80135ae:	440b      	add	r3, r1
 80135b0:	3237      	adds	r2, #55	; 0x37
 80135b2:	b2d2      	uxtb	r2, r2
 80135b4:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80135b6:	68fb      	ldr	r3, [r7, #12]
 80135b8:	011b      	lsls	r3, r3, #4
 80135ba:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80135bc:	7dfb      	ldrb	r3, [r7, #23]
 80135be:	005b      	lsls	r3, r3, #1
 80135c0:	3301      	adds	r3, #1
 80135c2:	68ba      	ldr	r2, [r7, #8]
 80135c4:	4413      	add	r3, r2
 80135c6:	2200      	movs	r2, #0
 80135c8:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80135ca:	7dfb      	ldrb	r3, [r7, #23]
 80135cc:	3301      	adds	r3, #1
 80135ce:	75fb      	strb	r3, [r7, #23]
 80135d0:	7dfa      	ldrb	r2, [r7, #23]
 80135d2:	79fb      	ldrb	r3, [r7, #7]
 80135d4:	429a      	cmp	r2, r3
 80135d6:	d3d3      	bcc.n	8013580 <IntToUnicode+0x18>
  }
}
 80135d8:	bf00      	nop
 80135da:	bf00      	nop
 80135dc:	371c      	adds	r7, #28
 80135de:	46bd      	mov	sp, r7
 80135e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135e4:	4770      	bx	lr
	...

080135e8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80135e8:	b580      	push	{r7, lr}
 80135ea:	b0ba      	sub	sp, #232	; 0xe8
 80135ec:	af00      	add	r7, sp, #0
 80135ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80135f0:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80135f4:	2200      	movs	r2, #0
 80135f6:	601a      	str	r2, [r3, #0]
 80135f8:	605a      	str	r2, [r3, #4]
 80135fa:	609a      	str	r2, [r3, #8]
 80135fc:	60da      	str	r2, [r3, #12]
 80135fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8013600:	f107 0310 	add.w	r3, r7, #16
 8013604:	22c0      	movs	r2, #192	; 0xc0
 8013606:	2100      	movs	r1, #0
 8013608:	4618      	mov	r0, r3
 801360a:	f000 fd61 	bl	80140d0 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	4a2c      	ldr	r2, [pc, #176]	; (80136c4 <HAL_PCD_MspInit+0xdc>)
 8013614:	4293      	cmp	r3, r2
 8013616:	d151      	bne.n	80136bc <HAL_PCD_MspInit+0xd4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8013618:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 801361c:	f04f 0300 	mov.w	r3, #0
 8013620:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8013624:	f44f 1340 	mov.w	r3, #3145728	; 0x300000
 8013628:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 801362c:	f107 0310 	add.w	r3, r7, #16
 8013630:	4618      	mov	r0, r3
 8013632:	f7f9 fd4b 	bl	800d0cc <HAL_RCCEx_PeriphCLKConfig>
 8013636:	4603      	mov	r3, r0
 8013638:	2b00      	cmp	r3, #0
 801363a:	d001      	beq.n	8013640 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 801363c:	f7f5 f994 	bl	8008968 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8013640:	f7f8 fd7a 	bl	800c138 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8013644:	4b20      	ldr	r3, [pc, #128]	; (80136c8 <HAL_PCD_MspInit+0xe0>)
 8013646:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801364a:	4a1f      	ldr	r2, [pc, #124]	; (80136c8 <HAL_PCD_MspInit+0xe0>)
 801364c:	f043 0301 	orr.w	r3, r3, #1
 8013650:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8013654:	4b1c      	ldr	r3, [pc, #112]	; (80136c8 <HAL_PCD_MspInit+0xe0>)
 8013656:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 801365a:	f003 0301 	and.w	r3, r3, #1
 801365e:	60fb      	str	r3, [r7, #12]
 8013660:	68fb      	ldr	r3, [r7, #12]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8013662:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8013666:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801366a:	2302      	movs	r3, #2
 801366c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8013670:	2300      	movs	r3, #0
 8013672:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8013676:	2300      	movs	r3, #0
 8013678:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 801367c:	230a      	movs	r3, #10
 801367e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8013682:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8013686:	4619      	mov	r1, r3
 8013688:	4810      	ldr	r0, [pc, #64]	; (80136cc <HAL_PCD_MspInit+0xe4>)
 801368a:	f7f7 f899 	bl	800a7c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 801368e:	4b0e      	ldr	r3, [pc, #56]	; (80136c8 <HAL_PCD_MspInit+0xe0>)
 8013690:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8013694:	4a0c      	ldr	r2, [pc, #48]	; (80136c8 <HAL_PCD_MspInit+0xe0>)
 8013696:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801369a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 801369e:	4b0a      	ldr	r3, [pc, #40]	; (80136c8 <HAL_PCD_MspInit+0xe0>)
 80136a0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80136a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80136a8:	60bb      	str	r3, [r7, #8]
 80136aa:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80136ac:	2200      	movs	r2, #0
 80136ae:	2100      	movs	r1, #0
 80136b0:	2065      	movs	r0, #101	; 0x65
 80136b2:	f7f5 fdd2 	bl	800925a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80136b6:	2065      	movs	r0, #101	; 0x65
 80136b8:	f7f5 fde9 	bl	800928e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80136bc:	bf00      	nop
 80136be:	37e8      	adds	r7, #232	; 0xe8
 80136c0:	46bd      	mov	sp, r7
 80136c2:	bd80      	pop	{r7, pc}
 80136c4:	40080000 	.word	0x40080000
 80136c8:	58024400 	.word	0x58024400
 80136cc:	58020000 	.word	0x58020000

080136d0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80136d0:	b580      	push	{r7, lr}
 80136d2:	b082      	sub	sp, #8
 80136d4:	af00      	add	r7, sp, #0
 80136d6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80136d8:	687b      	ldr	r3, [r7, #4]
 80136da:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80136de:	687b      	ldr	r3, [r7, #4]
 80136e0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80136e4:	4619      	mov	r1, r3
 80136e6:	4610      	mov	r0, r2
 80136e8:	f7fe fb03 	bl	8011cf2 <USBD_LL_SetupStage>
}
 80136ec:	bf00      	nop
 80136ee:	3708      	adds	r7, #8
 80136f0:	46bd      	mov	sp, r7
 80136f2:	bd80      	pop	{r7, pc}

080136f4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80136f4:	b580      	push	{r7, lr}
 80136f6:	b082      	sub	sp, #8
 80136f8:	af00      	add	r7, sp, #0
 80136fa:	6078      	str	r0, [r7, #4]
 80136fc:	460b      	mov	r3, r1
 80136fe:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8013700:	687b      	ldr	r3, [r7, #4]
 8013702:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8013706:	78fa      	ldrb	r2, [r7, #3]
 8013708:	6879      	ldr	r1, [r7, #4]
 801370a:	4613      	mov	r3, r2
 801370c:	00db      	lsls	r3, r3, #3
 801370e:	4413      	add	r3, r2
 8013710:	009b      	lsls	r3, r3, #2
 8013712:	440b      	add	r3, r1
 8013714:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8013718:	681a      	ldr	r2, [r3, #0]
 801371a:	78fb      	ldrb	r3, [r7, #3]
 801371c:	4619      	mov	r1, r3
 801371e:	f7fe fb3d 	bl	8011d9c <USBD_LL_DataOutStage>
}
 8013722:	bf00      	nop
 8013724:	3708      	adds	r7, #8
 8013726:	46bd      	mov	sp, r7
 8013728:	bd80      	pop	{r7, pc}

0801372a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801372a:	b580      	push	{r7, lr}
 801372c:	b082      	sub	sp, #8
 801372e:	af00      	add	r7, sp, #0
 8013730:	6078      	str	r0, [r7, #4]
 8013732:	460b      	mov	r3, r1
 8013734:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8013736:	687b      	ldr	r3, [r7, #4]
 8013738:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801373c:	78fa      	ldrb	r2, [r7, #3]
 801373e:	6879      	ldr	r1, [r7, #4]
 8013740:	4613      	mov	r3, r2
 8013742:	00db      	lsls	r3, r3, #3
 8013744:	4413      	add	r3, r2
 8013746:	009b      	lsls	r3, r3, #2
 8013748:	440b      	add	r3, r1
 801374a:	3348      	adds	r3, #72	; 0x48
 801374c:	681a      	ldr	r2, [r3, #0]
 801374e:	78fb      	ldrb	r3, [r7, #3]
 8013750:	4619      	mov	r1, r3
 8013752:	f7fe fbd6 	bl	8011f02 <USBD_LL_DataInStage>
}
 8013756:	bf00      	nop
 8013758:	3708      	adds	r7, #8
 801375a:	46bd      	mov	sp, r7
 801375c:	bd80      	pop	{r7, pc}

0801375e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801375e:	b580      	push	{r7, lr}
 8013760:	b082      	sub	sp, #8
 8013762:	af00      	add	r7, sp, #0
 8013764:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801376c:	4618      	mov	r0, r3
 801376e:	f7fe fd10 	bl	8012192 <USBD_LL_SOF>
}
 8013772:	bf00      	nop
 8013774:	3708      	adds	r7, #8
 8013776:	46bd      	mov	sp, r7
 8013778:	bd80      	pop	{r7, pc}

0801377a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801377a:	b580      	push	{r7, lr}
 801377c:	b084      	sub	sp, #16
 801377e:	af00      	add	r7, sp, #0
 8013780:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8013782:	2301      	movs	r3, #1
 8013784:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	691b      	ldr	r3, [r3, #16]
 801378a:	2b00      	cmp	r3, #0
 801378c:	d102      	bne.n	8013794 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801378e:	2300      	movs	r3, #0
 8013790:	73fb      	strb	r3, [r7, #15]
 8013792:	e008      	b.n	80137a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	691b      	ldr	r3, [r3, #16]
 8013798:	2b02      	cmp	r3, #2
 801379a:	d102      	bne.n	80137a2 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801379c:	2301      	movs	r3, #1
 801379e:	73fb      	strb	r3, [r7, #15]
 80137a0:	e001      	b.n	80137a6 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80137a2:	f7f5 f8e1 	bl	8008968 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80137a6:	687b      	ldr	r3, [r7, #4]
 80137a8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80137ac:	7bfa      	ldrb	r2, [r7, #15]
 80137ae:	4611      	mov	r1, r2
 80137b0:	4618      	mov	r0, r3
 80137b2:	f7fe fcaa 	bl	801210a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80137bc:	4618      	mov	r0, r3
 80137be:	f7fe fc52 	bl	8012066 <USBD_LL_Reset>
}
 80137c2:	bf00      	nop
 80137c4:	3710      	adds	r7, #16
 80137c6:	46bd      	mov	sp, r7
 80137c8:	bd80      	pop	{r7, pc}
	...

080137cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80137cc:	b580      	push	{r7, lr}
 80137ce:	b082      	sub	sp, #8
 80137d0:	af00      	add	r7, sp, #0
 80137d2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80137da:	4618      	mov	r0, r3
 80137dc:	f7fe fca5 	bl	801212a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80137e0:	687b      	ldr	r3, [r7, #4]
 80137e2:	681b      	ldr	r3, [r3, #0]
 80137e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80137e8:	681b      	ldr	r3, [r3, #0]
 80137ea:	687a      	ldr	r2, [r7, #4]
 80137ec:	6812      	ldr	r2, [r2, #0]
 80137ee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80137f2:	f043 0301 	orr.w	r3, r3, #1
 80137f6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	6a1b      	ldr	r3, [r3, #32]
 80137fc:	2b00      	cmp	r3, #0
 80137fe:	d005      	beq.n	801380c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8013800:	4b04      	ldr	r3, [pc, #16]	; (8013814 <HAL_PCD_SuspendCallback+0x48>)
 8013802:	691b      	ldr	r3, [r3, #16]
 8013804:	4a03      	ldr	r2, [pc, #12]	; (8013814 <HAL_PCD_SuspendCallback+0x48>)
 8013806:	f043 0306 	orr.w	r3, r3, #6
 801380a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 801380c:	bf00      	nop
 801380e:	3708      	adds	r7, #8
 8013810:	46bd      	mov	sp, r7
 8013812:	bd80      	pop	{r7, pc}
 8013814:	e000ed00 	.word	0xe000ed00

08013818 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013818:	b580      	push	{r7, lr}
 801381a:	b082      	sub	sp, #8
 801381c:	af00      	add	r7, sp, #0
 801381e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8013820:	687b      	ldr	r3, [r7, #4]
 8013822:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013826:	4618      	mov	r0, r3
 8013828:	f7fe fc9b 	bl	8012162 <USBD_LL_Resume>
}
 801382c:	bf00      	nop
 801382e:	3708      	adds	r7, #8
 8013830:	46bd      	mov	sp, r7
 8013832:	bd80      	pop	{r7, pc}

08013834 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013834:	b580      	push	{r7, lr}
 8013836:	b082      	sub	sp, #8
 8013838:	af00      	add	r7, sp, #0
 801383a:	6078      	str	r0, [r7, #4]
 801383c:	460b      	mov	r3, r1
 801383e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013840:	687b      	ldr	r3, [r7, #4]
 8013842:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8013846:	78fa      	ldrb	r2, [r7, #3]
 8013848:	4611      	mov	r1, r2
 801384a:	4618      	mov	r0, r3
 801384c:	f7fe fcf3 	bl	8012236 <USBD_LL_IsoOUTIncomplete>
}
 8013850:	bf00      	nop
 8013852:	3708      	adds	r7, #8
 8013854:	46bd      	mov	sp, r7
 8013856:	bd80      	pop	{r7, pc}

08013858 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013858:	b580      	push	{r7, lr}
 801385a:	b082      	sub	sp, #8
 801385c:	af00      	add	r7, sp, #0
 801385e:	6078      	str	r0, [r7, #4]
 8013860:	460b      	mov	r3, r1
 8013862:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8013864:	687b      	ldr	r3, [r7, #4]
 8013866:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801386a:	78fa      	ldrb	r2, [r7, #3]
 801386c:	4611      	mov	r1, r2
 801386e:	4618      	mov	r0, r3
 8013870:	f7fe fcaf 	bl	80121d2 <USBD_LL_IsoINIncomplete>
}
 8013874:	bf00      	nop
 8013876:	3708      	adds	r7, #8
 8013878:	46bd      	mov	sp, r7
 801387a:	bd80      	pop	{r7, pc}

0801387c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801387c:	b580      	push	{r7, lr}
 801387e:	b082      	sub	sp, #8
 8013880:	af00      	add	r7, sp, #0
 8013882:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801388a:	4618      	mov	r0, r3
 801388c:	f7fe fd05 	bl	801229a <USBD_LL_DevConnected>
}
 8013890:	bf00      	nop
 8013892:	3708      	adds	r7, #8
 8013894:	46bd      	mov	sp, r7
 8013896:	bd80      	pop	{r7, pc}

08013898 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8013898:	b580      	push	{r7, lr}
 801389a:	b082      	sub	sp, #8
 801389c:	af00      	add	r7, sp, #0
 801389e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80138a0:	687b      	ldr	r3, [r7, #4]
 80138a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80138a6:	4618      	mov	r0, r3
 80138a8:	f7fe fd02 	bl	80122b0 <USBD_LL_DevDisconnected>
}
 80138ac:	bf00      	nop
 80138ae:	3708      	adds	r7, #8
 80138b0:	46bd      	mov	sp, r7
 80138b2:	bd80      	pop	{r7, pc}

080138b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80138b4:	b580      	push	{r7, lr}
 80138b6:	b082      	sub	sp, #8
 80138b8:	af00      	add	r7, sp, #0
 80138ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80138bc:	687b      	ldr	r3, [r7, #4]
 80138be:	781b      	ldrb	r3, [r3, #0]
 80138c0:	2b00      	cmp	r3, #0
 80138c2:	d13e      	bne.n	8013942 <USBD_LL_Init+0x8e>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80138c4:	4a21      	ldr	r2, [pc, #132]	; (801394c <USBD_LL_Init+0x98>)
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	4a1f      	ldr	r2, [pc, #124]	; (801394c <USBD_LL_Init+0x98>)
 80138d0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80138d4:	4b1d      	ldr	r3, [pc, #116]	; (801394c <USBD_LL_Init+0x98>)
 80138d6:	4a1e      	ldr	r2, [pc, #120]	; (8013950 <USBD_LL_Init+0x9c>)
 80138d8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80138da:	4b1c      	ldr	r3, [pc, #112]	; (801394c <USBD_LL_Init+0x98>)
 80138dc:	2209      	movs	r2, #9
 80138de:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80138e0:	4b1a      	ldr	r3, [pc, #104]	; (801394c <USBD_LL_Init+0x98>)
 80138e2:	2202      	movs	r2, #2
 80138e4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80138e6:	4b19      	ldr	r3, [pc, #100]	; (801394c <USBD_LL_Init+0x98>)
 80138e8:	2200      	movs	r2, #0
 80138ea:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80138ec:	4b17      	ldr	r3, [pc, #92]	; (801394c <USBD_LL_Init+0x98>)
 80138ee:	2202      	movs	r2, #2
 80138f0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80138f2:	4b16      	ldr	r3, [pc, #88]	; (801394c <USBD_LL_Init+0x98>)
 80138f4:	2200      	movs	r2, #0
 80138f6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80138f8:	4b14      	ldr	r3, [pc, #80]	; (801394c <USBD_LL_Init+0x98>)
 80138fa:	2200      	movs	r2, #0
 80138fc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80138fe:	4b13      	ldr	r3, [pc, #76]	; (801394c <USBD_LL_Init+0x98>)
 8013900:	2200      	movs	r2, #0
 8013902:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = DISABLE;
 8013904:	4b11      	ldr	r3, [pc, #68]	; (801394c <USBD_LL_Init+0x98>)
 8013906:	2200      	movs	r2, #0
 8013908:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 801390a:	4b10      	ldr	r3, [pc, #64]	; (801394c <USBD_LL_Init+0x98>)
 801390c:	2200      	movs	r2, #0
 801390e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8013910:	4b0e      	ldr	r3, [pc, #56]	; (801394c <USBD_LL_Init+0x98>)
 8013912:	2200      	movs	r2, #0
 8013914:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8013916:	480d      	ldr	r0, [pc, #52]	; (801394c <USBD_LL_Init+0x98>)
 8013918:	f7f7 f91b 	bl	800ab52 <HAL_PCD_Init>
 801391c:	4603      	mov	r3, r0
 801391e:	2b00      	cmp	r3, #0
 8013920:	d001      	beq.n	8013926 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8013922:	f7f5 f821 	bl	8008968 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN TxRx_Configuration */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8013926:	2180      	movs	r1, #128	; 0x80
 8013928:	4808      	ldr	r0, [pc, #32]	; (801394c <USBD_LL_Init+0x98>)
 801392a:	f7f8 fb8a 	bl	800c042 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 801392e:	2240      	movs	r2, #64	; 0x40
 8013930:	2100      	movs	r1, #0
 8013932:	4806      	ldr	r0, [pc, #24]	; (801394c <USBD_LL_Init+0x98>)
 8013934:	f7f8 fb3e 	bl	800bfb4 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8013938:	2280      	movs	r2, #128	; 0x80
 801393a:	2101      	movs	r1, #1
 801393c:	4803      	ldr	r0, [pc, #12]	; (801394c <USBD_LL_Init+0x98>)
 801393e:	f7f8 fb39 	bl	800bfb4 <HAL_PCDEx_SetTxFiFo>
  /* USER CODE END TxRx_Configuration */
  }
  return USBD_OK;
 8013942:	2300      	movs	r3, #0
}
 8013944:	4618      	mov	r0, r3
 8013946:	3708      	adds	r7, #8
 8013948:	46bd      	mov	sp, r7
 801394a:	bd80      	pop	{r7, pc}
 801394c:	24001c18 	.word	0x24001c18
 8013950:	40080000 	.word	0x40080000

08013954 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8013954:	b580      	push	{r7, lr}
 8013956:	b084      	sub	sp, #16
 8013958:	af00      	add	r7, sp, #0
 801395a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801395c:	2300      	movs	r3, #0
 801395e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013960:	2300      	movs	r3, #0
 8013962:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801396a:	4618      	mov	r0, r3
 801396c:	f7f7 fa15 	bl	800ad9a <HAL_PCD_Start>
 8013970:	4603      	mov	r3, r0
 8013972:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013974:	7bfb      	ldrb	r3, [r7, #15]
 8013976:	4618      	mov	r0, r3
 8013978:	f000 f942 	bl	8013c00 <USBD_Get_USB_Status>
 801397c:	4603      	mov	r3, r0
 801397e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013980:	7bbb      	ldrb	r3, [r7, #14]
}
 8013982:	4618      	mov	r0, r3
 8013984:	3710      	adds	r7, #16
 8013986:	46bd      	mov	sp, r7
 8013988:	bd80      	pop	{r7, pc}

0801398a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801398a:	b580      	push	{r7, lr}
 801398c:	b084      	sub	sp, #16
 801398e:	af00      	add	r7, sp, #0
 8013990:	6078      	str	r0, [r7, #4]
 8013992:	4608      	mov	r0, r1
 8013994:	4611      	mov	r1, r2
 8013996:	461a      	mov	r2, r3
 8013998:	4603      	mov	r3, r0
 801399a:	70fb      	strb	r3, [r7, #3]
 801399c:	460b      	mov	r3, r1
 801399e:	70bb      	strb	r3, [r7, #2]
 80139a0:	4613      	mov	r3, r2
 80139a2:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80139a4:	2300      	movs	r3, #0
 80139a6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80139a8:	2300      	movs	r3, #0
 80139aa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80139ac:	687b      	ldr	r3, [r7, #4]
 80139ae:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80139b2:	78bb      	ldrb	r3, [r7, #2]
 80139b4:	883a      	ldrh	r2, [r7, #0]
 80139b6:	78f9      	ldrb	r1, [r7, #3]
 80139b8:	f7f7 ff15 	bl	800b7e6 <HAL_PCD_EP_Open>
 80139bc:	4603      	mov	r3, r0
 80139be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80139c0:	7bfb      	ldrb	r3, [r7, #15]
 80139c2:	4618      	mov	r0, r3
 80139c4:	f000 f91c 	bl	8013c00 <USBD_Get_USB_Status>
 80139c8:	4603      	mov	r3, r0
 80139ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80139cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80139ce:	4618      	mov	r0, r3
 80139d0:	3710      	adds	r7, #16
 80139d2:	46bd      	mov	sp, r7
 80139d4:	bd80      	pop	{r7, pc}

080139d6 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80139d6:	b580      	push	{r7, lr}
 80139d8:	b084      	sub	sp, #16
 80139da:	af00      	add	r7, sp, #0
 80139dc:	6078      	str	r0, [r7, #4]
 80139de:	460b      	mov	r3, r1
 80139e0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80139e2:	2300      	movs	r3, #0
 80139e4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80139e6:	2300      	movs	r3, #0
 80139e8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80139f0:	78fa      	ldrb	r2, [r7, #3]
 80139f2:	4611      	mov	r1, r2
 80139f4:	4618      	mov	r0, r3
 80139f6:	f7f7 ff5e 	bl	800b8b6 <HAL_PCD_EP_Close>
 80139fa:	4603      	mov	r3, r0
 80139fc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80139fe:	7bfb      	ldrb	r3, [r7, #15]
 8013a00:	4618      	mov	r0, r3
 8013a02:	f000 f8fd 	bl	8013c00 <USBD_Get_USB_Status>
 8013a06:	4603      	mov	r3, r0
 8013a08:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013a0a:	7bbb      	ldrb	r3, [r7, #14]
}
 8013a0c:	4618      	mov	r0, r3
 8013a0e:	3710      	adds	r7, #16
 8013a10:	46bd      	mov	sp, r7
 8013a12:	bd80      	pop	{r7, pc}

08013a14 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013a14:	b580      	push	{r7, lr}
 8013a16:	b084      	sub	sp, #16
 8013a18:	af00      	add	r7, sp, #0
 8013a1a:	6078      	str	r0, [r7, #4]
 8013a1c:	460b      	mov	r3, r1
 8013a1e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013a20:	2300      	movs	r3, #0
 8013a22:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013a24:	2300      	movs	r3, #0
 8013a26:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013a2e:	78fa      	ldrb	r2, [r7, #3]
 8013a30:	4611      	mov	r1, r2
 8013a32:	4618      	mov	r0, r3
 8013a34:	f7f8 f818 	bl	800ba68 <HAL_PCD_EP_SetStall>
 8013a38:	4603      	mov	r3, r0
 8013a3a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013a3c:	7bfb      	ldrb	r3, [r7, #15]
 8013a3e:	4618      	mov	r0, r3
 8013a40:	f000 f8de 	bl	8013c00 <USBD_Get_USB_Status>
 8013a44:	4603      	mov	r3, r0
 8013a46:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013a48:	7bbb      	ldrb	r3, [r7, #14]
}
 8013a4a:	4618      	mov	r0, r3
 8013a4c:	3710      	adds	r7, #16
 8013a4e:	46bd      	mov	sp, r7
 8013a50:	bd80      	pop	{r7, pc}

08013a52 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013a52:	b580      	push	{r7, lr}
 8013a54:	b084      	sub	sp, #16
 8013a56:	af00      	add	r7, sp, #0
 8013a58:	6078      	str	r0, [r7, #4]
 8013a5a:	460b      	mov	r3, r1
 8013a5c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013a5e:	2300      	movs	r3, #0
 8013a60:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013a62:	2300      	movs	r3, #0
 8013a64:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8013a66:	687b      	ldr	r3, [r7, #4]
 8013a68:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013a6c:	78fa      	ldrb	r2, [r7, #3]
 8013a6e:	4611      	mov	r1, r2
 8013a70:	4618      	mov	r0, r3
 8013a72:	f7f8 f85d 	bl	800bb30 <HAL_PCD_EP_ClrStall>
 8013a76:	4603      	mov	r3, r0
 8013a78:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013a7a:	7bfb      	ldrb	r3, [r7, #15]
 8013a7c:	4618      	mov	r0, r3
 8013a7e:	f000 f8bf 	bl	8013c00 <USBD_Get_USB_Status>
 8013a82:	4603      	mov	r3, r0
 8013a84:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013a86:	7bbb      	ldrb	r3, [r7, #14]
}
 8013a88:	4618      	mov	r0, r3
 8013a8a:	3710      	adds	r7, #16
 8013a8c:	46bd      	mov	sp, r7
 8013a8e:	bd80      	pop	{r7, pc}

08013a90 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013a90:	b480      	push	{r7}
 8013a92:	b085      	sub	sp, #20
 8013a94:	af00      	add	r7, sp, #0
 8013a96:	6078      	str	r0, [r7, #4]
 8013a98:	460b      	mov	r3, r1
 8013a9a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8013a9c:	687b      	ldr	r3, [r7, #4]
 8013a9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013aa2:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8013aa4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	da0b      	bge.n	8013ac4 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8013aac:	78fb      	ldrb	r3, [r7, #3]
 8013aae:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013ab2:	68f9      	ldr	r1, [r7, #12]
 8013ab4:	4613      	mov	r3, r2
 8013ab6:	00db      	lsls	r3, r3, #3
 8013ab8:	4413      	add	r3, r2
 8013aba:	009b      	lsls	r3, r3, #2
 8013abc:	440b      	add	r3, r1
 8013abe:	333e      	adds	r3, #62	; 0x3e
 8013ac0:	781b      	ldrb	r3, [r3, #0]
 8013ac2:	e00b      	b.n	8013adc <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8013ac4:	78fb      	ldrb	r3, [r7, #3]
 8013ac6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8013aca:	68f9      	ldr	r1, [r7, #12]
 8013acc:	4613      	mov	r3, r2
 8013ace:	00db      	lsls	r3, r3, #3
 8013ad0:	4413      	add	r3, r2
 8013ad2:	009b      	lsls	r3, r3, #2
 8013ad4:	440b      	add	r3, r1
 8013ad6:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8013ada:	781b      	ldrb	r3, [r3, #0]
  }
}
 8013adc:	4618      	mov	r0, r3
 8013ade:	3714      	adds	r7, #20
 8013ae0:	46bd      	mov	sp, r7
 8013ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ae6:	4770      	bx	lr

08013ae8 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8013ae8:	b580      	push	{r7, lr}
 8013aea:	b084      	sub	sp, #16
 8013aec:	af00      	add	r7, sp, #0
 8013aee:	6078      	str	r0, [r7, #4]
 8013af0:	460b      	mov	r3, r1
 8013af2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013af4:	2300      	movs	r3, #0
 8013af6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013af8:	2300      	movs	r3, #0
 8013afa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8013afc:	687b      	ldr	r3, [r7, #4]
 8013afe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013b02:	78fa      	ldrb	r2, [r7, #3]
 8013b04:	4611      	mov	r1, r2
 8013b06:	4618      	mov	r0, r3
 8013b08:	f7f7 fe48 	bl	800b79c <HAL_PCD_SetAddress>
 8013b0c:	4603      	mov	r3, r0
 8013b0e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013b10:	7bfb      	ldrb	r3, [r7, #15]
 8013b12:	4618      	mov	r0, r3
 8013b14:	f000 f874 	bl	8013c00 <USBD_Get_USB_Status>
 8013b18:	4603      	mov	r3, r0
 8013b1a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8013b1c:	7bbb      	ldrb	r3, [r7, #14]
}
 8013b1e:	4618      	mov	r0, r3
 8013b20:	3710      	adds	r7, #16
 8013b22:	46bd      	mov	sp, r7
 8013b24:	bd80      	pop	{r7, pc}

08013b26 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013b26:	b580      	push	{r7, lr}
 8013b28:	b086      	sub	sp, #24
 8013b2a:	af00      	add	r7, sp, #0
 8013b2c:	60f8      	str	r0, [r7, #12]
 8013b2e:	607a      	str	r2, [r7, #4]
 8013b30:	603b      	str	r3, [r7, #0]
 8013b32:	460b      	mov	r3, r1
 8013b34:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013b36:	2300      	movs	r3, #0
 8013b38:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013b3a:	2300      	movs	r3, #0
 8013b3c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8013b3e:	68fb      	ldr	r3, [r7, #12]
 8013b40:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8013b44:	7af9      	ldrb	r1, [r7, #11]
 8013b46:	683b      	ldr	r3, [r7, #0]
 8013b48:	687a      	ldr	r2, [r7, #4]
 8013b4a:	f7f7 ff52 	bl	800b9f2 <HAL_PCD_EP_Transmit>
 8013b4e:	4603      	mov	r3, r0
 8013b50:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013b52:	7dfb      	ldrb	r3, [r7, #23]
 8013b54:	4618      	mov	r0, r3
 8013b56:	f000 f853 	bl	8013c00 <USBD_Get_USB_Status>
 8013b5a:	4603      	mov	r3, r0
 8013b5c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013b5e:	7dbb      	ldrb	r3, [r7, #22]
}
 8013b60:	4618      	mov	r0, r3
 8013b62:	3718      	adds	r7, #24
 8013b64:	46bd      	mov	sp, r7
 8013b66:	bd80      	pop	{r7, pc}

08013b68 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8013b68:	b580      	push	{r7, lr}
 8013b6a:	b086      	sub	sp, #24
 8013b6c:	af00      	add	r7, sp, #0
 8013b6e:	60f8      	str	r0, [r7, #12]
 8013b70:	607a      	str	r2, [r7, #4]
 8013b72:	603b      	str	r3, [r7, #0]
 8013b74:	460b      	mov	r3, r1
 8013b76:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8013b78:	2300      	movs	r3, #0
 8013b7a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013b7c:	2300      	movs	r3, #0
 8013b7e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8013b86:	7af9      	ldrb	r1, [r7, #11]
 8013b88:	683b      	ldr	r3, [r7, #0]
 8013b8a:	687a      	ldr	r2, [r7, #4]
 8013b8c:	f7f7 fedd 	bl	800b94a <HAL_PCD_EP_Receive>
 8013b90:	4603      	mov	r3, r0
 8013b92:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8013b94:	7dfb      	ldrb	r3, [r7, #23]
 8013b96:	4618      	mov	r0, r3
 8013b98:	f000 f832 	bl	8013c00 <USBD_Get_USB_Status>
 8013b9c:	4603      	mov	r3, r0
 8013b9e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8013ba0:	7dbb      	ldrb	r3, [r7, #22]
}
 8013ba2:	4618      	mov	r0, r3
 8013ba4:	3718      	adds	r7, #24
 8013ba6:	46bd      	mov	sp, r7
 8013ba8:	bd80      	pop	{r7, pc}

08013baa <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8013baa:	b580      	push	{r7, lr}
 8013bac:	b082      	sub	sp, #8
 8013bae:	af00      	add	r7, sp, #0
 8013bb0:	6078      	str	r0, [r7, #4]
 8013bb2:	460b      	mov	r3, r1
 8013bb4:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8013bbc:	78fa      	ldrb	r2, [r7, #3]
 8013bbe:	4611      	mov	r1, r2
 8013bc0:	4618      	mov	r0, r3
 8013bc2:	f7f7 fefe 	bl	800b9c2 <HAL_PCD_EP_GetRxCount>
 8013bc6:	4603      	mov	r3, r0
}
 8013bc8:	4618      	mov	r0, r3
 8013bca:	3708      	adds	r7, #8
 8013bcc:	46bd      	mov	sp, r7
 8013bce:	bd80      	pop	{r7, pc}

08013bd0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8013bd0:	b480      	push	{r7}
 8013bd2:	b083      	sub	sp, #12
 8013bd4:	af00      	add	r7, sp, #0
 8013bd6:	6078      	str	r0, [r7, #4]
  UNUSED(size);
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8013bd8:	4b03      	ldr	r3, [pc, #12]	; (8013be8 <USBD_static_malloc+0x18>)
}
 8013bda:	4618      	mov	r0, r3
 8013bdc:	370c      	adds	r7, #12
 8013bde:	46bd      	mov	sp, r7
 8013be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013be4:	4770      	bx	lr
 8013be6:	bf00      	nop
 8013be8:	24002124 	.word	0x24002124

08013bec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8013bec:	b480      	push	{r7}
 8013bee:	b083      	sub	sp, #12
 8013bf0:	af00      	add	r7, sp, #0
 8013bf2:	6078      	str	r0, [r7, #4]
  UNUSED(p);
}
 8013bf4:	bf00      	nop
 8013bf6:	370c      	adds	r7, #12
 8013bf8:	46bd      	mov	sp, r7
 8013bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013bfe:	4770      	bx	lr

08013c00 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8013c00:	b480      	push	{r7}
 8013c02:	b085      	sub	sp, #20
 8013c04:	af00      	add	r7, sp, #0
 8013c06:	4603      	mov	r3, r0
 8013c08:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8013c0a:	2300      	movs	r3, #0
 8013c0c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8013c0e:	79fb      	ldrb	r3, [r7, #7]
 8013c10:	2b03      	cmp	r3, #3
 8013c12:	d817      	bhi.n	8013c44 <USBD_Get_USB_Status+0x44>
 8013c14:	a201      	add	r2, pc, #4	; (adr r2, 8013c1c <USBD_Get_USB_Status+0x1c>)
 8013c16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013c1a:	bf00      	nop
 8013c1c:	08013c2d 	.word	0x08013c2d
 8013c20:	08013c33 	.word	0x08013c33
 8013c24:	08013c39 	.word	0x08013c39
 8013c28:	08013c3f 	.word	0x08013c3f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8013c2c:	2300      	movs	r3, #0
 8013c2e:	73fb      	strb	r3, [r7, #15]
    break;
 8013c30:	e00b      	b.n	8013c4a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8013c32:	2303      	movs	r3, #3
 8013c34:	73fb      	strb	r3, [r7, #15]
    break;
 8013c36:	e008      	b.n	8013c4a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8013c38:	2301      	movs	r3, #1
 8013c3a:	73fb      	strb	r3, [r7, #15]
    break;
 8013c3c:	e005      	b.n	8013c4a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8013c3e:	2303      	movs	r3, #3
 8013c40:	73fb      	strb	r3, [r7, #15]
    break;
 8013c42:	e002      	b.n	8013c4a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8013c44:	2303      	movs	r3, #3
 8013c46:	73fb      	strb	r3, [r7, #15]
    break;
 8013c48:	bf00      	nop
  }
  return usb_status;
 8013c4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8013c4c:	4618      	mov	r0, r3
 8013c4e:	3714      	adds	r7, #20
 8013c50:	46bd      	mov	sp, r7
 8013c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c56:	4770      	bx	lr

08013c58 <atoi>:
 8013c58:	220a      	movs	r2, #10
 8013c5a:	2100      	movs	r1, #0
 8013c5c:	f000 bcf6 	b.w	801464c <strtol>

08013c60 <calloc>:
 8013c60:	4b02      	ldr	r3, [pc, #8]	; (8013c6c <calloc+0xc>)
 8013c62:	460a      	mov	r2, r1
 8013c64:	4601      	mov	r1, r0
 8013c66:	6818      	ldr	r0, [r3, #0]
 8013c68:	f000 ba3a 	b.w	80140e0 <_calloc_r>
 8013c6c:	240004d0 	.word	0x240004d0

08013c70 <__errno>:
 8013c70:	4b01      	ldr	r3, [pc, #4]	; (8013c78 <__errno+0x8>)
 8013c72:	6818      	ldr	r0, [r3, #0]
 8013c74:	4770      	bx	lr
 8013c76:	bf00      	nop
 8013c78:	240004d0 	.word	0x240004d0

08013c7c <__sflush_r>:
 8013c7c:	898a      	ldrh	r2, [r1, #12]
 8013c7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013c82:	4605      	mov	r5, r0
 8013c84:	0710      	lsls	r0, r2, #28
 8013c86:	460c      	mov	r4, r1
 8013c88:	d458      	bmi.n	8013d3c <__sflush_r+0xc0>
 8013c8a:	684b      	ldr	r3, [r1, #4]
 8013c8c:	2b00      	cmp	r3, #0
 8013c8e:	dc05      	bgt.n	8013c9c <__sflush_r+0x20>
 8013c90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	dc02      	bgt.n	8013c9c <__sflush_r+0x20>
 8013c96:	2000      	movs	r0, #0
 8013c98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013c9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013c9e:	2e00      	cmp	r6, #0
 8013ca0:	d0f9      	beq.n	8013c96 <__sflush_r+0x1a>
 8013ca2:	2300      	movs	r3, #0
 8013ca4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8013ca8:	682f      	ldr	r7, [r5, #0]
 8013caa:	602b      	str	r3, [r5, #0]
 8013cac:	d032      	beq.n	8013d14 <__sflush_r+0x98>
 8013cae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8013cb0:	89a3      	ldrh	r3, [r4, #12]
 8013cb2:	075a      	lsls	r2, r3, #29
 8013cb4:	d505      	bpl.n	8013cc2 <__sflush_r+0x46>
 8013cb6:	6863      	ldr	r3, [r4, #4]
 8013cb8:	1ac0      	subs	r0, r0, r3
 8013cba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8013cbc:	b10b      	cbz	r3, 8013cc2 <__sflush_r+0x46>
 8013cbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8013cc0:	1ac0      	subs	r0, r0, r3
 8013cc2:	2300      	movs	r3, #0
 8013cc4:	4602      	mov	r2, r0
 8013cc6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8013cc8:	6a21      	ldr	r1, [r4, #32]
 8013cca:	4628      	mov	r0, r5
 8013ccc:	47b0      	blx	r6
 8013cce:	1c43      	adds	r3, r0, #1
 8013cd0:	89a3      	ldrh	r3, [r4, #12]
 8013cd2:	d106      	bne.n	8013ce2 <__sflush_r+0x66>
 8013cd4:	6829      	ldr	r1, [r5, #0]
 8013cd6:	291d      	cmp	r1, #29
 8013cd8:	d82c      	bhi.n	8013d34 <__sflush_r+0xb8>
 8013cda:	4a2a      	ldr	r2, [pc, #168]	; (8013d84 <__sflush_r+0x108>)
 8013cdc:	40ca      	lsrs	r2, r1
 8013cde:	07d6      	lsls	r6, r2, #31
 8013ce0:	d528      	bpl.n	8013d34 <__sflush_r+0xb8>
 8013ce2:	2200      	movs	r2, #0
 8013ce4:	6062      	str	r2, [r4, #4]
 8013ce6:	04d9      	lsls	r1, r3, #19
 8013ce8:	6922      	ldr	r2, [r4, #16]
 8013cea:	6022      	str	r2, [r4, #0]
 8013cec:	d504      	bpl.n	8013cf8 <__sflush_r+0x7c>
 8013cee:	1c42      	adds	r2, r0, #1
 8013cf0:	d101      	bne.n	8013cf6 <__sflush_r+0x7a>
 8013cf2:	682b      	ldr	r3, [r5, #0]
 8013cf4:	b903      	cbnz	r3, 8013cf8 <__sflush_r+0x7c>
 8013cf6:	6560      	str	r0, [r4, #84]	; 0x54
 8013cf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8013cfa:	602f      	str	r7, [r5, #0]
 8013cfc:	2900      	cmp	r1, #0
 8013cfe:	d0ca      	beq.n	8013c96 <__sflush_r+0x1a>
 8013d00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8013d04:	4299      	cmp	r1, r3
 8013d06:	d002      	beq.n	8013d0e <__sflush_r+0x92>
 8013d08:	4628      	mov	r0, r5
 8013d0a:	f000 f9ff 	bl	801410c <_free_r>
 8013d0e:	2000      	movs	r0, #0
 8013d10:	6360      	str	r0, [r4, #52]	; 0x34
 8013d12:	e7c1      	b.n	8013c98 <__sflush_r+0x1c>
 8013d14:	6a21      	ldr	r1, [r4, #32]
 8013d16:	2301      	movs	r3, #1
 8013d18:	4628      	mov	r0, r5
 8013d1a:	47b0      	blx	r6
 8013d1c:	1c41      	adds	r1, r0, #1
 8013d1e:	d1c7      	bne.n	8013cb0 <__sflush_r+0x34>
 8013d20:	682b      	ldr	r3, [r5, #0]
 8013d22:	2b00      	cmp	r3, #0
 8013d24:	d0c4      	beq.n	8013cb0 <__sflush_r+0x34>
 8013d26:	2b1d      	cmp	r3, #29
 8013d28:	d001      	beq.n	8013d2e <__sflush_r+0xb2>
 8013d2a:	2b16      	cmp	r3, #22
 8013d2c:	d101      	bne.n	8013d32 <__sflush_r+0xb6>
 8013d2e:	602f      	str	r7, [r5, #0]
 8013d30:	e7b1      	b.n	8013c96 <__sflush_r+0x1a>
 8013d32:	89a3      	ldrh	r3, [r4, #12]
 8013d34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013d38:	81a3      	strh	r3, [r4, #12]
 8013d3a:	e7ad      	b.n	8013c98 <__sflush_r+0x1c>
 8013d3c:	690f      	ldr	r7, [r1, #16]
 8013d3e:	2f00      	cmp	r7, #0
 8013d40:	d0a9      	beq.n	8013c96 <__sflush_r+0x1a>
 8013d42:	0793      	lsls	r3, r2, #30
 8013d44:	680e      	ldr	r6, [r1, #0]
 8013d46:	bf08      	it	eq
 8013d48:	694b      	ldreq	r3, [r1, #20]
 8013d4a:	600f      	str	r7, [r1, #0]
 8013d4c:	bf18      	it	ne
 8013d4e:	2300      	movne	r3, #0
 8013d50:	eba6 0807 	sub.w	r8, r6, r7
 8013d54:	608b      	str	r3, [r1, #8]
 8013d56:	f1b8 0f00 	cmp.w	r8, #0
 8013d5a:	dd9c      	ble.n	8013c96 <__sflush_r+0x1a>
 8013d5c:	6a21      	ldr	r1, [r4, #32]
 8013d5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8013d60:	4643      	mov	r3, r8
 8013d62:	463a      	mov	r2, r7
 8013d64:	4628      	mov	r0, r5
 8013d66:	47b0      	blx	r6
 8013d68:	2800      	cmp	r0, #0
 8013d6a:	dc06      	bgt.n	8013d7a <__sflush_r+0xfe>
 8013d6c:	89a3      	ldrh	r3, [r4, #12]
 8013d6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8013d72:	81a3      	strh	r3, [r4, #12]
 8013d74:	f04f 30ff 	mov.w	r0, #4294967295
 8013d78:	e78e      	b.n	8013c98 <__sflush_r+0x1c>
 8013d7a:	4407      	add	r7, r0
 8013d7c:	eba8 0800 	sub.w	r8, r8, r0
 8013d80:	e7e9      	b.n	8013d56 <__sflush_r+0xda>
 8013d82:	bf00      	nop
 8013d84:	20400001 	.word	0x20400001

08013d88 <_fflush_r>:
 8013d88:	b538      	push	{r3, r4, r5, lr}
 8013d8a:	690b      	ldr	r3, [r1, #16]
 8013d8c:	4605      	mov	r5, r0
 8013d8e:	460c      	mov	r4, r1
 8013d90:	b913      	cbnz	r3, 8013d98 <_fflush_r+0x10>
 8013d92:	2500      	movs	r5, #0
 8013d94:	4628      	mov	r0, r5
 8013d96:	bd38      	pop	{r3, r4, r5, pc}
 8013d98:	b118      	cbz	r0, 8013da2 <_fflush_r+0x1a>
 8013d9a:	6983      	ldr	r3, [r0, #24]
 8013d9c:	b90b      	cbnz	r3, 8013da2 <_fflush_r+0x1a>
 8013d9e:	f000 f899 	bl	8013ed4 <__sinit>
 8013da2:	4b14      	ldr	r3, [pc, #80]	; (8013df4 <_fflush_r+0x6c>)
 8013da4:	429c      	cmp	r4, r3
 8013da6:	d11b      	bne.n	8013de0 <_fflush_r+0x58>
 8013da8:	686c      	ldr	r4, [r5, #4]
 8013daa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d0ef      	beq.n	8013d92 <_fflush_r+0xa>
 8013db2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8013db4:	07d0      	lsls	r0, r2, #31
 8013db6:	d404      	bmi.n	8013dc2 <_fflush_r+0x3a>
 8013db8:	0599      	lsls	r1, r3, #22
 8013dba:	d402      	bmi.n	8013dc2 <_fflush_r+0x3a>
 8013dbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013dbe:	f000 f94c 	bl	801405a <__retarget_lock_acquire_recursive>
 8013dc2:	4628      	mov	r0, r5
 8013dc4:	4621      	mov	r1, r4
 8013dc6:	f7ff ff59 	bl	8013c7c <__sflush_r>
 8013dca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8013dcc:	07da      	lsls	r2, r3, #31
 8013dce:	4605      	mov	r5, r0
 8013dd0:	d4e0      	bmi.n	8013d94 <_fflush_r+0xc>
 8013dd2:	89a3      	ldrh	r3, [r4, #12]
 8013dd4:	059b      	lsls	r3, r3, #22
 8013dd6:	d4dd      	bmi.n	8013d94 <_fflush_r+0xc>
 8013dd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8013dda:	f000 f93f 	bl	801405c <__retarget_lock_release_recursive>
 8013dde:	e7d9      	b.n	8013d94 <_fflush_r+0xc>
 8013de0:	4b05      	ldr	r3, [pc, #20]	; (8013df8 <_fflush_r+0x70>)
 8013de2:	429c      	cmp	r4, r3
 8013de4:	d101      	bne.n	8013dea <_fflush_r+0x62>
 8013de6:	68ac      	ldr	r4, [r5, #8]
 8013de8:	e7df      	b.n	8013daa <_fflush_r+0x22>
 8013dea:	4b04      	ldr	r3, [pc, #16]	; (8013dfc <_fflush_r+0x74>)
 8013dec:	429c      	cmp	r4, r3
 8013dee:	bf08      	it	eq
 8013df0:	68ec      	ldreq	r4, [r5, #12]
 8013df2:	e7da      	b.n	8013daa <_fflush_r+0x22>
 8013df4:	08015e44 	.word	0x08015e44
 8013df8:	08015e64 	.word	0x08015e64
 8013dfc:	08015e24 	.word	0x08015e24

08013e00 <fflush>:
 8013e00:	4601      	mov	r1, r0
 8013e02:	b920      	cbnz	r0, 8013e0e <fflush+0xe>
 8013e04:	4b04      	ldr	r3, [pc, #16]	; (8013e18 <fflush+0x18>)
 8013e06:	4905      	ldr	r1, [pc, #20]	; (8013e1c <fflush+0x1c>)
 8013e08:	6818      	ldr	r0, [r3, #0]
 8013e0a:	f000 b8e1 	b.w	8013fd0 <_fwalk_reent>
 8013e0e:	4b04      	ldr	r3, [pc, #16]	; (8013e20 <fflush+0x20>)
 8013e10:	6818      	ldr	r0, [r3, #0]
 8013e12:	f7ff bfb9 	b.w	8013d88 <_fflush_r>
 8013e16:	bf00      	nop
 8013e18:	08015e84 	.word	0x08015e84
 8013e1c:	08013d89 	.word	0x08013d89
 8013e20:	240004d0 	.word	0x240004d0

08013e24 <std>:
 8013e24:	2300      	movs	r3, #0
 8013e26:	b510      	push	{r4, lr}
 8013e28:	4604      	mov	r4, r0
 8013e2a:	e9c0 3300 	strd	r3, r3, [r0]
 8013e2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8013e32:	6083      	str	r3, [r0, #8]
 8013e34:	8181      	strh	r1, [r0, #12]
 8013e36:	6643      	str	r3, [r0, #100]	; 0x64
 8013e38:	81c2      	strh	r2, [r0, #14]
 8013e3a:	6183      	str	r3, [r0, #24]
 8013e3c:	4619      	mov	r1, r3
 8013e3e:	2208      	movs	r2, #8
 8013e40:	305c      	adds	r0, #92	; 0x5c
 8013e42:	f000 f945 	bl	80140d0 <memset>
 8013e46:	4b05      	ldr	r3, [pc, #20]	; (8013e5c <std+0x38>)
 8013e48:	6263      	str	r3, [r4, #36]	; 0x24
 8013e4a:	4b05      	ldr	r3, [pc, #20]	; (8013e60 <std+0x3c>)
 8013e4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8013e4e:	4b05      	ldr	r3, [pc, #20]	; (8013e64 <std+0x40>)
 8013e50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8013e52:	4b05      	ldr	r3, [pc, #20]	; (8013e68 <std+0x44>)
 8013e54:	6224      	str	r4, [r4, #32]
 8013e56:	6323      	str	r3, [r4, #48]	; 0x30
 8013e58:	bd10      	pop	{r4, pc}
 8013e5a:	bf00      	nop
 8013e5c:	08014409 	.word	0x08014409
 8013e60:	0801442b 	.word	0x0801442b
 8013e64:	08014463 	.word	0x08014463
 8013e68:	08014487 	.word	0x08014487

08013e6c <_cleanup_r>:
 8013e6c:	4901      	ldr	r1, [pc, #4]	; (8013e74 <_cleanup_r+0x8>)
 8013e6e:	f000 b8af 	b.w	8013fd0 <_fwalk_reent>
 8013e72:	bf00      	nop
 8013e74:	08013d89 	.word	0x08013d89

08013e78 <__sfmoreglue>:
 8013e78:	b570      	push	{r4, r5, r6, lr}
 8013e7a:	2268      	movs	r2, #104	; 0x68
 8013e7c:	1e4d      	subs	r5, r1, #1
 8013e7e:	4355      	muls	r5, r2
 8013e80:	460e      	mov	r6, r1
 8013e82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8013e86:	f000 f9ad 	bl	80141e4 <_malloc_r>
 8013e8a:	4604      	mov	r4, r0
 8013e8c:	b140      	cbz	r0, 8013ea0 <__sfmoreglue+0x28>
 8013e8e:	2100      	movs	r1, #0
 8013e90:	e9c0 1600 	strd	r1, r6, [r0]
 8013e94:	300c      	adds	r0, #12
 8013e96:	60a0      	str	r0, [r4, #8]
 8013e98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8013e9c:	f000 f918 	bl	80140d0 <memset>
 8013ea0:	4620      	mov	r0, r4
 8013ea2:	bd70      	pop	{r4, r5, r6, pc}

08013ea4 <__sfp_lock_acquire>:
 8013ea4:	4801      	ldr	r0, [pc, #4]	; (8013eac <__sfp_lock_acquire+0x8>)
 8013ea6:	f000 b8d8 	b.w	801405a <__retarget_lock_acquire_recursive>
 8013eaa:	bf00      	nop
 8013eac:	24002345 	.word	0x24002345

08013eb0 <__sfp_lock_release>:
 8013eb0:	4801      	ldr	r0, [pc, #4]	; (8013eb8 <__sfp_lock_release+0x8>)
 8013eb2:	f000 b8d3 	b.w	801405c <__retarget_lock_release_recursive>
 8013eb6:	bf00      	nop
 8013eb8:	24002345 	.word	0x24002345

08013ebc <__sinit_lock_acquire>:
 8013ebc:	4801      	ldr	r0, [pc, #4]	; (8013ec4 <__sinit_lock_acquire+0x8>)
 8013ebe:	f000 b8cc 	b.w	801405a <__retarget_lock_acquire_recursive>
 8013ec2:	bf00      	nop
 8013ec4:	24002346 	.word	0x24002346

08013ec8 <__sinit_lock_release>:
 8013ec8:	4801      	ldr	r0, [pc, #4]	; (8013ed0 <__sinit_lock_release+0x8>)
 8013eca:	f000 b8c7 	b.w	801405c <__retarget_lock_release_recursive>
 8013ece:	bf00      	nop
 8013ed0:	24002346 	.word	0x24002346

08013ed4 <__sinit>:
 8013ed4:	b510      	push	{r4, lr}
 8013ed6:	4604      	mov	r4, r0
 8013ed8:	f7ff fff0 	bl	8013ebc <__sinit_lock_acquire>
 8013edc:	69a3      	ldr	r3, [r4, #24]
 8013ede:	b11b      	cbz	r3, 8013ee8 <__sinit+0x14>
 8013ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013ee4:	f7ff bff0 	b.w	8013ec8 <__sinit_lock_release>
 8013ee8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8013eec:	6523      	str	r3, [r4, #80]	; 0x50
 8013eee:	4b13      	ldr	r3, [pc, #76]	; (8013f3c <__sinit+0x68>)
 8013ef0:	4a13      	ldr	r2, [pc, #76]	; (8013f40 <__sinit+0x6c>)
 8013ef2:	681b      	ldr	r3, [r3, #0]
 8013ef4:	62a2      	str	r2, [r4, #40]	; 0x28
 8013ef6:	42a3      	cmp	r3, r4
 8013ef8:	bf04      	itt	eq
 8013efa:	2301      	moveq	r3, #1
 8013efc:	61a3      	streq	r3, [r4, #24]
 8013efe:	4620      	mov	r0, r4
 8013f00:	f000 f820 	bl	8013f44 <__sfp>
 8013f04:	6060      	str	r0, [r4, #4]
 8013f06:	4620      	mov	r0, r4
 8013f08:	f000 f81c 	bl	8013f44 <__sfp>
 8013f0c:	60a0      	str	r0, [r4, #8]
 8013f0e:	4620      	mov	r0, r4
 8013f10:	f000 f818 	bl	8013f44 <__sfp>
 8013f14:	2200      	movs	r2, #0
 8013f16:	60e0      	str	r0, [r4, #12]
 8013f18:	2104      	movs	r1, #4
 8013f1a:	6860      	ldr	r0, [r4, #4]
 8013f1c:	f7ff ff82 	bl	8013e24 <std>
 8013f20:	68a0      	ldr	r0, [r4, #8]
 8013f22:	2201      	movs	r2, #1
 8013f24:	2109      	movs	r1, #9
 8013f26:	f7ff ff7d 	bl	8013e24 <std>
 8013f2a:	68e0      	ldr	r0, [r4, #12]
 8013f2c:	2202      	movs	r2, #2
 8013f2e:	2112      	movs	r1, #18
 8013f30:	f7ff ff78 	bl	8013e24 <std>
 8013f34:	2301      	movs	r3, #1
 8013f36:	61a3      	str	r3, [r4, #24]
 8013f38:	e7d2      	b.n	8013ee0 <__sinit+0xc>
 8013f3a:	bf00      	nop
 8013f3c:	08015e84 	.word	0x08015e84
 8013f40:	08013e6d 	.word	0x08013e6d

08013f44 <__sfp>:
 8013f44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013f46:	4607      	mov	r7, r0
 8013f48:	f7ff ffac 	bl	8013ea4 <__sfp_lock_acquire>
 8013f4c:	4b1e      	ldr	r3, [pc, #120]	; (8013fc8 <__sfp+0x84>)
 8013f4e:	681e      	ldr	r6, [r3, #0]
 8013f50:	69b3      	ldr	r3, [r6, #24]
 8013f52:	b913      	cbnz	r3, 8013f5a <__sfp+0x16>
 8013f54:	4630      	mov	r0, r6
 8013f56:	f7ff ffbd 	bl	8013ed4 <__sinit>
 8013f5a:	3648      	adds	r6, #72	; 0x48
 8013f5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8013f60:	3b01      	subs	r3, #1
 8013f62:	d503      	bpl.n	8013f6c <__sfp+0x28>
 8013f64:	6833      	ldr	r3, [r6, #0]
 8013f66:	b30b      	cbz	r3, 8013fac <__sfp+0x68>
 8013f68:	6836      	ldr	r6, [r6, #0]
 8013f6a:	e7f7      	b.n	8013f5c <__sfp+0x18>
 8013f6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8013f70:	b9d5      	cbnz	r5, 8013fa8 <__sfp+0x64>
 8013f72:	4b16      	ldr	r3, [pc, #88]	; (8013fcc <__sfp+0x88>)
 8013f74:	60e3      	str	r3, [r4, #12]
 8013f76:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8013f7a:	6665      	str	r5, [r4, #100]	; 0x64
 8013f7c:	f000 f86c 	bl	8014058 <__retarget_lock_init_recursive>
 8013f80:	f7ff ff96 	bl	8013eb0 <__sfp_lock_release>
 8013f84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8013f88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8013f8c:	6025      	str	r5, [r4, #0]
 8013f8e:	61a5      	str	r5, [r4, #24]
 8013f90:	2208      	movs	r2, #8
 8013f92:	4629      	mov	r1, r5
 8013f94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8013f98:	f000 f89a 	bl	80140d0 <memset>
 8013f9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8013fa0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8013fa4:	4620      	mov	r0, r4
 8013fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013fa8:	3468      	adds	r4, #104	; 0x68
 8013faa:	e7d9      	b.n	8013f60 <__sfp+0x1c>
 8013fac:	2104      	movs	r1, #4
 8013fae:	4638      	mov	r0, r7
 8013fb0:	f7ff ff62 	bl	8013e78 <__sfmoreglue>
 8013fb4:	4604      	mov	r4, r0
 8013fb6:	6030      	str	r0, [r6, #0]
 8013fb8:	2800      	cmp	r0, #0
 8013fba:	d1d5      	bne.n	8013f68 <__sfp+0x24>
 8013fbc:	f7ff ff78 	bl	8013eb0 <__sfp_lock_release>
 8013fc0:	230c      	movs	r3, #12
 8013fc2:	603b      	str	r3, [r7, #0]
 8013fc4:	e7ee      	b.n	8013fa4 <__sfp+0x60>
 8013fc6:	bf00      	nop
 8013fc8:	08015e84 	.word	0x08015e84
 8013fcc:	ffff0001 	.word	0xffff0001

08013fd0 <_fwalk_reent>:
 8013fd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013fd4:	4606      	mov	r6, r0
 8013fd6:	4688      	mov	r8, r1
 8013fd8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8013fdc:	2700      	movs	r7, #0
 8013fde:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013fe2:	f1b9 0901 	subs.w	r9, r9, #1
 8013fe6:	d505      	bpl.n	8013ff4 <_fwalk_reent+0x24>
 8013fe8:	6824      	ldr	r4, [r4, #0]
 8013fea:	2c00      	cmp	r4, #0
 8013fec:	d1f7      	bne.n	8013fde <_fwalk_reent+0xe>
 8013fee:	4638      	mov	r0, r7
 8013ff0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013ff4:	89ab      	ldrh	r3, [r5, #12]
 8013ff6:	2b01      	cmp	r3, #1
 8013ff8:	d907      	bls.n	801400a <_fwalk_reent+0x3a>
 8013ffa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013ffe:	3301      	adds	r3, #1
 8014000:	d003      	beq.n	801400a <_fwalk_reent+0x3a>
 8014002:	4629      	mov	r1, r5
 8014004:	4630      	mov	r0, r6
 8014006:	47c0      	blx	r8
 8014008:	4307      	orrs	r7, r0
 801400a:	3568      	adds	r5, #104	; 0x68
 801400c:	e7e9      	b.n	8013fe2 <_fwalk_reent+0x12>
	...

08014010 <__libc_init_array>:
 8014010:	b570      	push	{r4, r5, r6, lr}
 8014012:	4d0d      	ldr	r5, [pc, #52]	; (8014048 <__libc_init_array+0x38>)
 8014014:	4c0d      	ldr	r4, [pc, #52]	; (801404c <__libc_init_array+0x3c>)
 8014016:	1b64      	subs	r4, r4, r5
 8014018:	10a4      	asrs	r4, r4, #2
 801401a:	2600      	movs	r6, #0
 801401c:	42a6      	cmp	r6, r4
 801401e:	d109      	bne.n	8014034 <__libc_init_array+0x24>
 8014020:	4d0b      	ldr	r5, [pc, #44]	; (8014050 <__libc_init_array+0x40>)
 8014022:	4c0c      	ldr	r4, [pc, #48]	; (8014054 <__libc_init_array+0x44>)
 8014024:	f001 f9d4 	bl	80153d0 <_init>
 8014028:	1b64      	subs	r4, r4, r5
 801402a:	10a4      	asrs	r4, r4, #2
 801402c:	2600      	movs	r6, #0
 801402e:	42a6      	cmp	r6, r4
 8014030:	d105      	bne.n	801403e <__libc_init_array+0x2e>
 8014032:	bd70      	pop	{r4, r5, r6, pc}
 8014034:	f855 3b04 	ldr.w	r3, [r5], #4
 8014038:	4798      	blx	r3
 801403a:	3601      	adds	r6, #1
 801403c:	e7ee      	b.n	801401c <__libc_init_array+0xc>
 801403e:	f855 3b04 	ldr.w	r3, [r5], #4
 8014042:	4798      	blx	r3
 8014044:	3601      	adds	r6, #1
 8014046:	e7f2      	b.n	801402e <__libc_init_array+0x1e>
 8014048:	0801606c 	.word	0x0801606c
 801404c:	0801606c 	.word	0x0801606c
 8014050:	0801606c 	.word	0x0801606c
 8014054:	08016070 	.word	0x08016070

08014058 <__retarget_lock_init_recursive>:
 8014058:	4770      	bx	lr

0801405a <__retarget_lock_acquire_recursive>:
 801405a:	4770      	bx	lr

0801405c <__retarget_lock_release_recursive>:
 801405c:	4770      	bx	lr
	...

08014060 <malloc>:
 8014060:	4b02      	ldr	r3, [pc, #8]	; (801406c <malloc+0xc>)
 8014062:	4601      	mov	r1, r0
 8014064:	6818      	ldr	r0, [r3, #0]
 8014066:	f000 b8bd 	b.w	80141e4 <_malloc_r>
 801406a:	bf00      	nop
 801406c:	240004d0 	.word	0x240004d0

08014070 <free>:
 8014070:	4b02      	ldr	r3, [pc, #8]	; (801407c <free+0xc>)
 8014072:	4601      	mov	r1, r0
 8014074:	6818      	ldr	r0, [r3, #0]
 8014076:	f000 b849 	b.w	801410c <_free_r>
 801407a:	bf00      	nop
 801407c:	240004d0 	.word	0x240004d0

08014080 <memcpy>:
 8014080:	440a      	add	r2, r1
 8014082:	4291      	cmp	r1, r2
 8014084:	f100 33ff 	add.w	r3, r0, #4294967295
 8014088:	d100      	bne.n	801408c <memcpy+0xc>
 801408a:	4770      	bx	lr
 801408c:	b510      	push	{r4, lr}
 801408e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014092:	f803 4f01 	strb.w	r4, [r3, #1]!
 8014096:	4291      	cmp	r1, r2
 8014098:	d1f9      	bne.n	801408e <memcpy+0xe>
 801409a:	bd10      	pop	{r4, pc}

0801409c <memmove>:
 801409c:	4288      	cmp	r0, r1
 801409e:	b510      	push	{r4, lr}
 80140a0:	eb01 0402 	add.w	r4, r1, r2
 80140a4:	d902      	bls.n	80140ac <memmove+0x10>
 80140a6:	4284      	cmp	r4, r0
 80140a8:	4623      	mov	r3, r4
 80140aa:	d807      	bhi.n	80140bc <memmove+0x20>
 80140ac:	1e43      	subs	r3, r0, #1
 80140ae:	42a1      	cmp	r1, r4
 80140b0:	d008      	beq.n	80140c4 <memmove+0x28>
 80140b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80140b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80140ba:	e7f8      	b.n	80140ae <memmove+0x12>
 80140bc:	4402      	add	r2, r0
 80140be:	4601      	mov	r1, r0
 80140c0:	428a      	cmp	r2, r1
 80140c2:	d100      	bne.n	80140c6 <memmove+0x2a>
 80140c4:	bd10      	pop	{r4, pc}
 80140c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80140ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80140ce:	e7f7      	b.n	80140c0 <memmove+0x24>

080140d0 <memset>:
 80140d0:	4402      	add	r2, r0
 80140d2:	4603      	mov	r3, r0
 80140d4:	4293      	cmp	r3, r2
 80140d6:	d100      	bne.n	80140da <memset+0xa>
 80140d8:	4770      	bx	lr
 80140da:	f803 1b01 	strb.w	r1, [r3], #1
 80140de:	e7f9      	b.n	80140d4 <memset+0x4>

080140e0 <_calloc_r>:
 80140e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80140e2:	fba1 2402 	umull	r2, r4, r1, r2
 80140e6:	b94c      	cbnz	r4, 80140fc <_calloc_r+0x1c>
 80140e8:	4611      	mov	r1, r2
 80140ea:	9201      	str	r2, [sp, #4]
 80140ec:	f000 f87a 	bl	80141e4 <_malloc_r>
 80140f0:	9a01      	ldr	r2, [sp, #4]
 80140f2:	4605      	mov	r5, r0
 80140f4:	b930      	cbnz	r0, 8014104 <_calloc_r+0x24>
 80140f6:	4628      	mov	r0, r5
 80140f8:	b003      	add	sp, #12
 80140fa:	bd30      	pop	{r4, r5, pc}
 80140fc:	220c      	movs	r2, #12
 80140fe:	6002      	str	r2, [r0, #0]
 8014100:	2500      	movs	r5, #0
 8014102:	e7f8      	b.n	80140f6 <_calloc_r+0x16>
 8014104:	4621      	mov	r1, r4
 8014106:	f7ff ffe3 	bl	80140d0 <memset>
 801410a:	e7f4      	b.n	80140f6 <_calloc_r+0x16>

0801410c <_free_r>:
 801410c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801410e:	2900      	cmp	r1, #0
 8014110:	d044      	beq.n	801419c <_free_r+0x90>
 8014112:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8014116:	9001      	str	r0, [sp, #4]
 8014118:	2b00      	cmp	r3, #0
 801411a:	f1a1 0404 	sub.w	r4, r1, #4
 801411e:	bfb8      	it	lt
 8014120:	18e4      	addlt	r4, r4, r3
 8014122:	f000 fc47 	bl	80149b4 <__malloc_lock>
 8014126:	4a1e      	ldr	r2, [pc, #120]	; (80141a0 <_free_r+0x94>)
 8014128:	9801      	ldr	r0, [sp, #4]
 801412a:	6813      	ldr	r3, [r2, #0]
 801412c:	b933      	cbnz	r3, 801413c <_free_r+0x30>
 801412e:	6063      	str	r3, [r4, #4]
 8014130:	6014      	str	r4, [r2, #0]
 8014132:	b003      	add	sp, #12
 8014134:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8014138:	f000 bc42 	b.w	80149c0 <__malloc_unlock>
 801413c:	42a3      	cmp	r3, r4
 801413e:	d908      	bls.n	8014152 <_free_r+0x46>
 8014140:	6825      	ldr	r5, [r4, #0]
 8014142:	1961      	adds	r1, r4, r5
 8014144:	428b      	cmp	r3, r1
 8014146:	bf01      	itttt	eq
 8014148:	6819      	ldreq	r1, [r3, #0]
 801414a:	685b      	ldreq	r3, [r3, #4]
 801414c:	1949      	addeq	r1, r1, r5
 801414e:	6021      	streq	r1, [r4, #0]
 8014150:	e7ed      	b.n	801412e <_free_r+0x22>
 8014152:	461a      	mov	r2, r3
 8014154:	685b      	ldr	r3, [r3, #4]
 8014156:	b10b      	cbz	r3, 801415c <_free_r+0x50>
 8014158:	42a3      	cmp	r3, r4
 801415a:	d9fa      	bls.n	8014152 <_free_r+0x46>
 801415c:	6811      	ldr	r1, [r2, #0]
 801415e:	1855      	adds	r5, r2, r1
 8014160:	42a5      	cmp	r5, r4
 8014162:	d10b      	bne.n	801417c <_free_r+0x70>
 8014164:	6824      	ldr	r4, [r4, #0]
 8014166:	4421      	add	r1, r4
 8014168:	1854      	adds	r4, r2, r1
 801416a:	42a3      	cmp	r3, r4
 801416c:	6011      	str	r1, [r2, #0]
 801416e:	d1e0      	bne.n	8014132 <_free_r+0x26>
 8014170:	681c      	ldr	r4, [r3, #0]
 8014172:	685b      	ldr	r3, [r3, #4]
 8014174:	6053      	str	r3, [r2, #4]
 8014176:	4421      	add	r1, r4
 8014178:	6011      	str	r1, [r2, #0]
 801417a:	e7da      	b.n	8014132 <_free_r+0x26>
 801417c:	d902      	bls.n	8014184 <_free_r+0x78>
 801417e:	230c      	movs	r3, #12
 8014180:	6003      	str	r3, [r0, #0]
 8014182:	e7d6      	b.n	8014132 <_free_r+0x26>
 8014184:	6825      	ldr	r5, [r4, #0]
 8014186:	1961      	adds	r1, r4, r5
 8014188:	428b      	cmp	r3, r1
 801418a:	bf04      	itt	eq
 801418c:	6819      	ldreq	r1, [r3, #0]
 801418e:	685b      	ldreq	r3, [r3, #4]
 8014190:	6063      	str	r3, [r4, #4]
 8014192:	bf04      	itt	eq
 8014194:	1949      	addeq	r1, r1, r5
 8014196:	6021      	streq	r1, [r4, #0]
 8014198:	6054      	str	r4, [r2, #4]
 801419a:	e7ca      	b.n	8014132 <_free_r+0x26>
 801419c:	b003      	add	sp, #12
 801419e:	bd30      	pop	{r4, r5, pc}
 80141a0:	24002348 	.word	0x24002348

080141a4 <sbrk_aligned>:
 80141a4:	b570      	push	{r4, r5, r6, lr}
 80141a6:	4e0e      	ldr	r6, [pc, #56]	; (80141e0 <sbrk_aligned+0x3c>)
 80141a8:	460c      	mov	r4, r1
 80141aa:	6831      	ldr	r1, [r6, #0]
 80141ac:	4605      	mov	r5, r0
 80141ae:	b911      	cbnz	r1, 80141b6 <sbrk_aligned+0x12>
 80141b0:	f000 f91a 	bl	80143e8 <_sbrk_r>
 80141b4:	6030      	str	r0, [r6, #0]
 80141b6:	4621      	mov	r1, r4
 80141b8:	4628      	mov	r0, r5
 80141ba:	f000 f915 	bl	80143e8 <_sbrk_r>
 80141be:	1c43      	adds	r3, r0, #1
 80141c0:	d00a      	beq.n	80141d8 <sbrk_aligned+0x34>
 80141c2:	1cc4      	adds	r4, r0, #3
 80141c4:	f024 0403 	bic.w	r4, r4, #3
 80141c8:	42a0      	cmp	r0, r4
 80141ca:	d007      	beq.n	80141dc <sbrk_aligned+0x38>
 80141cc:	1a21      	subs	r1, r4, r0
 80141ce:	4628      	mov	r0, r5
 80141d0:	f000 f90a 	bl	80143e8 <_sbrk_r>
 80141d4:	3001      	adds	r0, #1
 80141d6:	d101      	bne.n	80141dc <sbrk_aligned+0x38>
 80141d8:	f04f 34ff 	mov.w	r4, #4294967295
 80141dc:	4620      	mov	r0, r4
 80141de:	bd70      	pop	{r4, r5, r6, pc}
 80141e0:	2400234c 	.word	0x2400234c

080141e4 <_malloc_r>:
 80141e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80141e8:	1ccd      	adds	r5, r1, #3
 80141ea:	f025 0503 	bic.w	r5, r5, #3
 80141ee:	3508      	adds	r5, #8
 80141f0:	2d0c      	cmp	r5, #12
 80141f2:	bf38      	it	cc
 80141f4:	250c      	movcc	r5, #12
 80141f6:	2d00      	cmp	r5, #0
 80141f8:	4607      	mov	r7, r0
 80141fa:	db01      	blt.n	8014200 <_malloc_r+0x1c>
 80141fc:	42a9      	cmp	r1, r5
 80141fe:	d905      	bls.n	801420c <_malloc_r+0x28>
 8014200:	230c      	movs	r3, #12
 8014202:	603b      	str	r3, [r7, #0]
 8014204:	2600      	movs	r6, #0
 8014206:	4630      	mov	r0, r6
 8014208:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801420c:	4e2e      	ldr	r6, [pc, #184]	; (80142c8 <_malloc_r+0xe4>)
 801420e:	f000 fbd1 	bl	80149b4 <__malloc_lock>
 8014212:	6833      	ldr	r3, [r6, #0]
 8014214:	461c      	mov	r4, r3
 8014216:	bb34      	cbnz	r4, 8014266 <_malloc_r+0x82>
 8014218:	4629      	mov	r1, r5
 801421a:	4638      	mov	r0, r7
 801421c:	f7ff ffc2 	bl	80141a4 <sbrk_aligned>
 8014220:	1c43      	adds	r3, r0, #1
 8014222:	4604      	mov	r4, r0
 8014224:	d14d      	bne.n	80142c2 <_malloc_r+0xde>
 8014226:	6834      	ldr	r4, [r6, #0]
 8014228:	4626      	mov	r6, r4
 801422a:	2e00      	cmp	r6, #0
 801422c:	d140      	bne.n	80142b0 <_malloc_r+0xcc>
 801422e:	6823      	ldr	r3, [r4, #0]
 8014230:	4631      	mov	r1, r6
 8014232:	4638      	mov	r0, r7
 8014234:	eb04 0803 	add.w	r8, r4, r3
 8014238:	f000 f8d6 	bl	80143e8 <_sbrk_r>
 801423c:	4580      	cmp	r8, r0
 801423e:	d13a      	bne.n	80142b6 <_malloc_r+0xd2>
 8014240:	6821      	ldr	r1, [r4, #0]
 8014242:	3503      	adds	r5, #3
 8014244:	1a6d      	subs	r5, r5, r1
 8014246:	f025 0503 	bic.w	r5, r5, #3
 801424a:	3508      	adds	r5, #8
 801424c:	2d0c      	cmp	r5, #12
 801424e:	bf38      	it	cc
 8014250:	250c      	movcc	r5, #12
 8014252:	4629      	mov	r1, r5
 8014254:	4638      	mov	r0, r7
 8014256:	f7ff ffa5 	bl	80141a4 <sbrk_aligned>
 801425a:	3001      	adds	r0, #1
 801425c:	d02b      	beq.n	80142b6 <_malloc_r+0xd2>
 801425e:	6823      	ldr	r3, [r4, #0]
 8014260:	442b      	add	r3, r5
 8014262:	6023      	str	r3, [r4, #0]
 8014264:	e00e      	b.n	8014284 <_malloc_r+0xa0>
 8014266:	6822      	ldr	r2, [r4, #0]
 8014268:	1b52      	subs	r2, r2, r5
 801426a:	d41e      	bmi.n	80142aa <_malloc_r+0xc6>
 801426c:	2a0b      	cmp	r2, #11
 801426e:	d916      	bls.n	801429e <_malloc_r+0xba>
 8014270:	1961      	adds	r1, r4, r5
 8014272:	42a3      	cmp	r3, r4
 8014274:	6025      	str	r5, [r4, #0]
 8014276:	bf18      	it	ne
 8014278:	6059      	strne	r1, [r3, #4]
 801427a:	6863      	ldr	r3, [r4, #4]
 801427c:	bf08      	it	eq
 801427e:	6031      	streq	r1, [r6, #0]
 8014280:	5162      	str	r2, [r4, r5]
 8014282:	604b      	str	r3, [r1, #4]
 8014284:	4638      	mov	r0, r7
 8014286:	f104 060b 	add.w	r6, r4, #11
 801428a:	f000 fb99 	bl	80149c0 <__malloc_unlock>
 801428e:	f026 0607 	bic.w	r6, r6, #7
 8014292:	1d23      	adds	r3, r4, #4
 8014294:	1af2      	subs	r2, r6, r3
 8014296:	d0b6      	beq.n	8014206 <_malloc_r+0x22>
 8014298:	1b9b      	subs	r3, r3, r6
 801429a:	50a3      	str	r3, [r4, r2]
 801429c:	e7b3      	b.n	8014206 <_malloc_r+0x22>
 801429e:	6862      	ldr	r2, [r4, #4]
 80142a0:	42a3      	cmp	r3, r4
 80142a2:	bf0c      	ite	eq
 80142a4:	6032      	streq	r2, [r6, #0]
 80142a6:	605a      	strne	r2, [r3, #4]
 80142a8:	e7ec      	b.n	8014284 <_malloc_r+0xa0>
 80142aa:	4623      	mov	r3, r4
 80142ac:	6864      	ldr	r4, [r4, #4]
 80142ae:	e7b2      	b.n	8014216 <_malloc_r+0x32>
 80142b0:	4634      	mov	r4, r6
 80142b2:	6876      	ldr	r6, [r6, #4]
 80142b4:	e7b9      	b.n	801422a <_malloc_r+0x46>
 80142b6:	230c      	movs	r3, #12
 80142b8:	603b      	str	r3, [r7, #0]
 80142ba:	4638      	mov	r0, r7
 80142bc:	f000 fb80 	bl	80149c0 <__malloc_unlock>
 80142c0:	e7a1      	b.n	8014206 <_malloc_r+0x22>
 80142c2:	6025      	str	r5, [r4, #0]
 80142c4:	e7de      	b.n	8014284 <_malloc_r+0xa0>
 80142c6:	bf00      	nop
 80142c8:	24002348 	.word	0x24002348

080142cc <iprintf>:
 80142cc:	b40f      	push	{r0, r1, r2, r3}
 80142ce:	4b0a      	ldr	r3, [pc, #40]	; (80142f8 <iprintf+0x2c>)
 80142d0:	b513      	push	{r0, r1, r4, lr}
 80142d2:	681c      	ldr	r4, [r3, #0]
 80142d4:	b124      	cbz	r4, 80142e0 <iprintf+0x14>
 80142d6:	69a3      	ldr	r3, [r4, #24]
 80142d8:	b913      	cbnz	r3, 80142e0 <iprintf+0x14>
 80142da:	4620      	mov	r0, r4
 80142dc:	f7ff fdfa 	bl	8013ed4 <__sinit>
 80142e0:	ab05      	add	r3, sp, #20
 80142e2:	9a04      	ldr	r2, [sp, #16]
 80142e4:	68a1      	ldr	r1, [r4, #8]
 80142e6:	9301      	str	r3, [sp, #4]
 80142e8:	4620      	mov	r0, r4
 80142ea:	f000 fcf5 	bl	8014cd8 <_vfiprintf_r>
 80142ee:	b002      	add	sp, #8
 80142f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80142f4:	b004      	add	sp, #16
 80142f6:	4770      	bx	lr
 80142f8:	240004d0 	.word	0x240004d0

080142fc <_puts_r>:
 80142fc:	b570      	push	{r4, r5, r6, lr}
 80142fe:	460e      	mov	r6, r1
 8014300:	4605      	mov	r5, r0
 8014302:	b118      	cbz	r0, 801430c <_puts_r+0x10>
 8014304:	6983      	ldr	r3, [r0, #24]
 8014306:	b90b      	cbnz	r3, 801430c <_puts_r+0x10>
 8014308:	f7ff fde4 	bl	8013ed4 <__sinit>
 801430c:	69ab      	ldr	r3, [r5, #24]
 801430e:	68ac      	ldr	r4, [r5, #8]
 8014310:	b913      	cbnz	r3, 8014318 <_puts_r+0x1c>
 8014312:	4628      	mov	r0, r5
 8014314:	f7ff fdde 	bl	8013ed4 <__sinit>
 8014318:	4b2c      	ldr	r3, [pc, #176]	; (80143cc <_puts_r+0xd0>)
 801431a:	429c      	cmp	r4, r3
 801431c:	d120      	bne.n	8014360 <_puts_r+0x64>
 801431e:	686c      	ldr	r4, [r5, #4]
 8014320:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014322:	07db      	lsls	r3, r3, #31
 8014324:	d405      	bmi.n	8014332 <_puts_r+0x36>
 8014326:	89a3      	ldrh	r3, [r4, #12]
 8014328:	0598      	lsls	r0, r3, #22
 801432a:	d402      	bmi.n	8014332 <_puts_r+0x36>
 801432c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801432e:	f7ff fe94 	bl	801405a <__retarget_lock_acquire_recursive>
 8014332:	89a3      	ldrh	r3, [r4, #12]
 8014334:	0719      	lsls	r1, r3, #28
 8014336:	d51d      	bpl.n	8014374 <_puts_r+0x78>
 8014338:	6923      	ldr	r3, [r4, #16]
 801433a:	b1db      	cbz	r3, 8014374 <_puts_r+0x78>
 801433c:	3e01      	subs	r6, #1
 801433e:	68a3      	ldr	r3, [r4, #8]
 8014340:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8014344:	3b01      	subs	r3, #1
 8014346:	60a3      	str	r3, [r4, #8]
 8014348:	bb39      	cbnz	r1, 801439a <_puts_r+0x9e>
 801434a:	2b00      	cmp	r3, #0
 801434c:	da38      	bge.n	80143c0 <_puts_r+0xc4>
 801434e:	4622      	mov	r2, r4
 8014350:	210a      	movs	r1, #10
 8014352:	4628      	mov	r0, r5
 8014354:	f000 f9a4 	bl	80146a0 <__swbuf_r>
 8014358:	3001      	adds	r0, #1
 801435a:	d011      	beq.n	8014380 <_puts_r+0x84>
 801435c:	250a      	movs	r5, #10
 801435e:	e011      	b.n	8014384 <_puts_r+0x88>
 8014360:	4b1b      	ldr	r3, [pc, #108]	; (80143d0 <_puts_r+0xd4>)
 8014362:	429c      	cmp	r4, r3
 8014364:	d101      	bne.n	801436a <_puts_r+0x6e>
 8014366:	68ac      	ldr	r4, [r5, #8]
 8014368:	e7da      	b.n	8014320 <_puts_r+0x24>
 801436a:	4b1a      	ldr	r3, [pc, #104]	; (80143d4 <_puts_r+0xd8>)
 801436c:	429c      	cmp	r4, r3
 801436e:	bf08      	it	eq
 8014370:	68ec      	ldreq	r4, [r5, #12]
 8014372:	e7d5      	b.n	8014320 <_puts_r+0x24>
 8014374:	4621      	mov	r1, r4
 8014376:	4628      	mov	r0, r5
 8014378:	f000 f9f6 	bl	8014768 <__swsetup_r>
 801437c:	2800      	cmp	r0, #0
 801437e:	d0dd      	beq.n	801433c <_puts_r+0x40>
 8014380:	f04f 35ff 	mov.w	r5, #4294967295
 8014384:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8014386:	07da      	lsls	r2, r3, #31
 8014388:	d405      	bmi.n	8014396 <_puts_r+0x9a>
 801438a:	89a3      	ldrh	r3, [r4, #12]
 801438c:	059b      	lsls	r3, r3, #22
 801438e:	d402      	bmi.n	8014396 <_puts_r+0x9a>
 8014390:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014392:	f7ff fe63 	bl	801405c <__retarget_lock_release_recursive>
 8014396:	4628      	mov	r0, r5
 8014398:	bd70      	pop	{r4, r5, r6, pc}
 801439a:	2b00      	cmp	r3, #0
 801439c:	da04      	bge.n	80143a8 <_puts_r+0xac>
 801439e:	69a2      	ldr	r2, [r4, #24]
 80143a0:	429a      	cmp	r2, r3
 80143a2:	dc06      	bgt.n	80143b2 <_puts_r+0xb6>
 80143a4:	290a      	cmp	r1, #10
 80143a6:	d004      	beq.n	80143b2 <_puts_r+0xb6>
 80143a8:	6823      	ldr	r3, [r4, #0]
 80143aa:	1c5a      	adds	r2, r3, #1
 80143ac:	6022      	str	r2, [r4, #0]
 80143ae:	7019      	strb	r1, [r3, #0]
 80143b0:	e7c5      	b.n	801433e <_puts_r+0x42>
 80143b2:	4622      	mov	r2, r4
 80143b4:	4628      	mov	r0, r5
 80143b6:	f000 f973 	bl	80146a0 <__swbuf_r>
 80143ba:	3001      	adds	r0, #1
 80143bc:	d1bf      	bne.n	801433e <_puts_r+0x42>
 80143be:	e7df      	b.n	8014380 <_puts_r+0x84>
 80143c0:	6823      	ldr	r3, [r4, #0]
 80143c2:	250a      	movs	r5, #10
 80143c4:	1c5a      	adds	r2, r3, #1
 80143c6:	6022      	str	r2, [r4, #0]
 80143c8:	701d      	strb	r5, [r3, #0]
 80143ca:	e7db      	b.n	8014384 <_puts_r+0x88>
 80143cc:	08015e44 	.word	0x08015e44
 80143d0:	08015e64 	.word	0x08015e64
 80143d4:	08015e24 	.word	0x08015e24

080143d8 <puts>:
 80143d8:	4b02      	ldr	r3, [pc, #8]	; (80143e4 <puts+0xc>)
 80143da:	4601      	mov	r1, r0
 80143dc:	6818      	ldr	r0, [r3, #0]
 80143de:	f7ff bf8d 	b.w	80142fc <_puts_r>
 80143e2:	bf00      	nop
 80143e4:	240004d0 	.word	0x240004d0

080143e8 <_sbrk_r>:
 80143e8:	b538      	push	{r3, r4, r5, lr}
 80143ea:	4d06      	ldr	r5, [pc, #24]	; (8014404 <_sbrk_r+0x1c>)
 80143ec:	2300      	movs	r3, #0
 80143ee:	4604      	mov	r4, r0
 80143f0:	4608      	mov	r0, r1
 80143f2:	602b      	str	r3, [r5, #0]
 80143f4:	f7f4 fc96 	bl	8008d24 <_sbrk>
 80143f8:	1c43      	adds	r3, r0, #1
 80143fa:	d102      	bne.n	8014402 <_sbrk_r+0x1a>
 80143fc:	682b      	ldr	r3, [r5, #0]
 80143fe:	b103      	cbz	r3, 8014402 <_sbrk_r+0x1a>
 8014400:	6023      	str	r3, [r4, #0]
 8014402:	bd38      	pop	{r3, r4, r5, pc}
 8014404:	24002350 	.word	0x24002350

08014408 <__sread>:
 8014408:	b510      	push	{r4, lr}
 801440a:	460c      	mov	r4, r1
 801440c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014410:	f000 ff26 	bl	8015260 <_read_r>
 8014414:	2800      	cmp	r0, #0
 8014416:	bfab      	itete	ge
 8014418:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801441a:	89a3      	ldrhlt	r3, [r4, #12]
 801441c:	181b      	addge	r3, r3, r0
 801441e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8014422:	bfac      	ite	ge
 8014424:	6563      	strge	r3, [r4, #84]	; 0x54
 8014426:	81a3      	strhlt	r3, [r4, #12]
 8014428:	bd10      	pop	{r4, pc}

0801442a <__swrite>:
 801442a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801442e:	461f      	mov	r7, r3
 8014430:	898b      	ldrh	r3, [r1, #12]
 8014432:	05db      	lsls	r3, r3, #23
 8014434:	4605      	mov	r5, r0
 8014436:	460c      	mov	r4, r1
 8014438:	4616      	mov	r6, r2
 801443a:	d505      	bpl.n	8014448 <__swrite+0x1e>
 801443c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014440:	2302      	movs	r3, #2
 8014442:	2200      	movs	r2, #0
 8014444:	f000 fa3e 	bl	80148c4 <_lseek_r>
 8014448:	89a3      	ldrh	r3, [r4, #12]
 801444a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801444e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8014452:	81a3      	strh	r3, [r4, #12]
 8014454:	4632      	mov	r2, r6
 8014456:	463b      	mov	r3, r7
 8014458:	4628      	mov	r0, r5
 801445a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801445e:	f000 b971 	b.w	8014744 <_write_r>

08014462 <__sseek>:
 8014462:	b510      	push	{r4, lr}
 8014464:	460c      	mov	r4, r1
 8014466:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801446a:	f000 fa2b 	bl	80148c4 <_lseek_r>
 801446e:	1c43      	adds	r3, r0, #1
 8014470:	89a3      	ldrh	r3, [r4, #12]
 8014472:	bf15      	itete	ne
 8014474:	6560      	strne	r0, [r4, #84]	; 0x54
 8014476:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801447a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801447e:	81a3      	strheq	r3, [r4, #12]
 8014480:	bf18      	it	ne
 8014482:	81a3      	strhne	r3, [r4, #12]
 8014484:	bd10      	pop	{r4, pc}

08014486 <__sclose>:
 8014486:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801448a:	f000 b9f9 	b.w	8014880 <_close_r>
	...

08014490 <strtok>:
 8014490:	4b16      	ldr	r3, [pc, #88]	; (80144ec <strtok+0x5c>)
 8014492:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014494:	681e      	ldr	r6, [r3, #0]
 8014496:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8014498:	4605      	mov	r5, r0
 801449a:	b9fc      	cbnz	r4, 80144dc <strtok+0x4c>
 801449c:	2050      	movs	r0, #80	; 0x50
 801449e:	9101      	str	r1, [sp, #4]
 80144a0:	f7ff fdde 	bl	8014060 <malloc>
 80144a4:	9901      	ldr	r1, [sp, #4]
 80144a6:	65b0      	str	r0, [r6, #88]	; 0x58
 80144a8:	4602      	mov	r2, r0
 80144aa:	b920      	cbnz	r0, 80144b6 <strtok+0x26>
 80144ac:	4b10      	ldr	r3, [pc, #64]	; (80144f0 <strtok+0x60>)
 80144ae:	4811      	ldr	r0, [pc, #68]	; (80144f4 <strtok+0x64>)
 80144b0:	2157      	movs	r1, #87	; 0x57
 80144b2:	f000 f9c7 	bl	8014844 <__assert_func>
 80144b6:	e9c0 4400 	strd	r4, r4, [r0]
 80144ba:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80144be:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80144c2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80144c6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80144ca:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80144ce:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80144d2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80144d6:	6184      	str	r4, [r0, #24]
 80144d8:	7704      	strb	r4, [r0, #28]
 80144da:	6244      	str	r4, [r0, #36]	; 0x24
 80144dc:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80144de:	2301      	movs	r3, #1
 80144e0:	4628      	mov	r0, r5
 80144e2:	b002      	add	sp, #8
 80144e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80144e8:	f000 b806 	b.w	80144f8 <__strtok_r>
 80144ec:	240004d0 	.word	0x240004d0
 80144f0:	08015e88 	.word	0x08015e88
 80144f4:	08015e9f 	.word	0x08015e9f

080144f8 <__strtok_r>:
 80144f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80144fa:	b908      	cbnz	r0, 8014500 <__strtok_r+0x8>
 80144fc:	6810      	ldr	r0, [r2, #0]
 80144fe:	b188      	cbz	r0, 8014524 <__strtok_r+0x2c>
 8014500:	4604      	mov	r4, r0
 8014502:	4620      	mov	r0, r4
 8014504:	f814 5b01 	ldrb.w	r5, [r4], #1
 8014508:	460f      	mov	r7, r1
 801450a:	f817 6b01 	ldrb.w	r6, [r7], #1
 801450e:	b91e      	cbnz	r6, 8014518 <__strtok_r+0x20>
 8014510:	b965      	cbnz	r5, 801452c <__strtok_r+0x34>
 8014512:	6015      	str	r5, [r2, #0]
 8014514:	4628      	mov	r0, r5
 8014516:	e005      	b.n	8014524 <__strtok_r+0x2c>
 8014518:	42b5      	cmp	r5, r6
 801451a:	d1f6      	bne.n	801450a <__strtok_r+0x12>
 801451c:	2b00      	cmp	r3, #0
 801451e:	d1f0      	bne.n	8014502 <__strtok_r+0xa>
 8014520:	6014      	str	r4, [r2, #0]
 8014522:	7003      	strb	r3, [r0, #0]
 8014524:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014526:	461c      	mov	r4, r3
 8014528:	e00c      	b.n	8014544 <__strtok_r+0x4c>
 801452a:	b915      	cbnz	r5, 8014532 <__strtok_r+0x3a>
 801452c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8014530:	460e      	mov	r6, r1
 8014532:	f816 5b01 	ldrb.w	r5, [r6], #1
 8014536:	42ab      	cmp	r3, r5
 8014538:	d1f7      	bne.n	801452a <__strtok_r+0x32>
 801453a:	2b00      	cmp	r3, #0
 801453c:	d0f3      	beq.n	8014526 <__strtok_r+0x2e>
 801453e:	2300      	movs	r3, #0
 8014540:	f804 3c01 	strb.w	r3, [r4, #-1]
 8014544:	6014      	str	r4, [r2, #0]
 8014546:	e7ed      	b.n	8014524 <__strtok_r+0x2c>

08014548 <_strtol_l.constprop.0>:
 8014548:	2b01      	cmp	r3, #1
 801454a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801454e:	d001      	beq.n	8014554 <_strtol_l.constprop.0+0xc>
 8014550:	2b24      	cmp	r3, #36	; 0x24
 8014552:	d906      	bls.n	8014562 <_strtol_l.constprop.0+0x1a>
 8014554:	f7ff fb8c 	bl	8013c70 <__errno>
 8014558:	2316      	movs	r3, #22
 801455a:	6003      	str	r3, [r0, #0]
 801455c:	2000      	movs	r0, #0
 801455e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014562:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8014648 <_strtol_l.constprop.0+0x100>
 8014566:	460d      	mov	r5, r1
 8014568:	462e      	mov	r6, r5
 801456a:	f815 4b01 	ldrb.w	r4, [r5], #1
 801456e:	f814 700c 	ldrb.w	r7, [r4, ip]
 8014572:	f017 0708 	ands.w	r7, r7, #8
 8014576:	d1f7      	bne.n	8014568 <_strtol_l.constprop.0+0x20>
 8014578:	2c2d      	cmp	r4, #45	; 0x2d
 801457a:	d132      	bne.n	80145e2 <_strtol_l.constprop.0+0x9a>
 801457c:	782c      	ldrb	r4, [r5, #0]
 801457e:	2701      	movs	r7, #1
 8014580:	1cb5      	adds	r5, r6, #2
 8014582:	2b00      	cmp	r3, #0
 8014584:	d05b      	beq.n	801463e <_strtol_l.constprop.0+0xf6>
 8014586:	2b10      	cmp	r3, #16
 8014588:	d109      	bne.n	801459e <_strtol_l.constprop.0+0x56>
 801458a:	2c30      	cmp	r4, #48	; 0x30
 801458c:	d107      	bne.n	801459e <_strtol_l.constprop.0+0x56>
 801458e:	782c      	ldrb	r4, [r5, #0]
 8014590:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014594:	2c58      	cmp	r4, #88	; 0x58
 8014596:	d14d      	bne.n	8014634 <_strtol_l.constprop.0+0xec>
 8014598:	786c      	ldrb	r4, [r5, #1]
 801459a:	2310      	movs	r3, #16
 801459c:	3502      	adds	r5, #2
 801459e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80145a2:	f108 38ff 	add.w	r8, r8, #4294967295
 80145a6:	f04f 0c00 	mov.w	ip, #0
 80145aa:	fbb8 f9f3 	udiv	r9, r8, r3
 80145ae:	4666      	mov	r6, ip
 80145b0:	fb03 8a19 	mls	sl, r3, r9, r8
 80145b4:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 80145b8:	f1be 0f09 	cmp.w	lr, #9
 80145bc:	d816      	bhi.n	80145ec <_strtol_l.constprop.0+0xa4>
 80145be:	4674      	mov	r4, lr
 80145c0:	42a3      	cmp	r3, r4
 80145c2:	dd24      	ble.n	801460e <_strtol_l.constprop.0+0xc6>
 80145c4:	f1bc 0f00 	cmp.w	ip, #0
 80145c8:	db1e      	blt.n	8014608 <_strtol_l.constprop.0+0xc0>
 80145ca:	45b1      	cmp	r9, r6
 80145cc:	d31c      	bcc.n	8014608 <_strtol_l.constprop.0+0xc0>
 80145ce:	d101      	bne.n	80145d4 <_strtol_l.constprop.0+0x8c>
 80145d0:	45a2      	cmp	sl, r4
 80145d2:	db19      	blt.n	8014608 <_strtol_l.constprop.0+0xc0>
 80145d4:	fb06 4603 	mla	r6, r6, r3, r4
 80145d8:	f04f 0c01 	mov.w	ip, #1
 80145dc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80145e0:	e7e8      	b.n	80145b4 <_strtol_l.constprop.0+0x6c>
 80145e2:	2c2b      	cmp	r4, #43	; 0x2b
 80145e4:	bf04      	itt	eq
 80145e6:	782c      	ldrbeq	r4, [r5, #0]
 80145e8:	1cb5      	addeq	r5, r6, #2
 80145ea:	e7ca      	b.n	8014582 <_strtol_l.constprop.0+0x3a>
 80145ec:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80145f0:	f1be 0f19 	cmp.w	lr, #25
 80145f4:	d801      	bhi.n	80145fa <_strtol_l.constprop.0+0xb2>
 80145f6:	3c37      	subs	r4, #55	; 0x37
 80145f8:	e7e2      	b.n	80145c0 <_strtol_l.constprop.0+0x78>
 80145fa:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80145fe:	f1be 0f19 	cmp.w	lr, #25
 8014602:	d804      	bhi.n	801460e <_strtol_l.constprop.0+0xc6>
 8014604:	3c57      	subs	r4, #87	; 0x57
 8014606:	e7db      	b.n	80145c0 <_strtol_l.constprop.0+0x78>
 8014608:	f04f 3cff 	mov.w	ip, #4294967295
 801460c:	e7e6      	b.n	80145dc <_strtol_l.constprop.0+0x94>
 801460e:	f1bc 0f00 	cmp.w	ip, #0
 8014612:	da05      	bge.n	8014620 <_strtol_l.constprop.0+0xd8>
 8014614:	2322      	movs	r3, #34	; 0x22
 8014616:	6003      	str	r3, [r0, #0]
 8014618:	4646      	mov	r6, r8
 801461a:	b942      	cbnz	r2, 801462e <_strtol_l.constprop.0+0xe6>
 801461c:	4630      	mov	r0, r6
 801461e:	e79e      	b.n	801455e <_strtol_l.constprop.0+0x16>
 8014620:	b107      	cbz	r7, 8014624 <_strtol_l.constprop.0+0xdc>
 8014622:	4276      	negs	r6, r6
 8014624:	2a00      	cmp	r2, #0
 8014626:	d0f9      	beq.n	801461c <_strtol_l.constprop.0+0xd4>
 8014628:	f1bc 0f00 	cmp.w	ip, #0
 801462c:	d000      	beq.n	8014630 <_strtol_l.constprop.0+0xe8>
 801462e:	1e69      	subs	r1, r5, #1
 8014630:	6011      	str	r1, [r2, #0]
 8014632:	e7f3      	b.n	801461c <_strtol_l.constprop.0+0xd4>
 8014634:	2430      	movs	r4, #48	; 0x30
 8014636:	2b00      	cmp	r3, #0
 8014638:	d1b1      	bne.n	801459e <_strtol_l.constprop.0+0x56>
 801463a:	2308      	movs	r3, #8
 801463c:	e7af      	b.n	801459e <_strtol_l.constprop.0+0x56>
 801463e:	2c30      	cmp	r4, #48	; 0x30
 8014640:	d0a5      	beq.n	801458e <_strtol_l.constprop.0+0x46>
 8014642:	230a      	movs	r3, #10
 8014644:	e7ab      	b.n	801459e <_strtol_l.constprop.0+0x56>
 8014646:	bf00      	nop
 8014648:	08015f39 	.word	0x08015f39

0801464c <strtol>:
 801464c:	4613      	mov	r3, r2
 801464e:	460a      	mov	r2, r1
 8014650:	4601      	mov	r1, r0
 8014652:	4802      	ldr	r0, [pc, #8]	; (801465c <strtol+0x10>)
 8014654:	6800      	ldr	r0, [r0, #0]
 8014656:	f7ff bf77 	b.w	8014548 <_strtol_l.constprop.0>
 801465a:	bf00      	nop
 801465c:	240004d0 	.word	0x240004d0

08014660 <_vsiprintf_r>:
 8014660:	b500      	push	{lr}
 8014662:	b09b      	sub	sp, #108	; 0x6c
 8014664:	9100      	str	r1, [sp, #0]
 8014666:	9104      	str	r1, [sp, #16]
 8014668:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801466c:	9105      	str	r1, [sp, #20]
 801466e:	9102      	str	r1, [sp, #8]
 8014670:	4905      	ldr	r1, [pc, #20]	; (8014688 <_vsiprintf_r+0x28>)
 8014672:	9103      	str	r1, [sp, #12]
 8014674:	4669      	mov	r1, sp
 8014676:	f000 fa05 	bl	8014a84 <_svfiprintf_r>
 801467a:	9b00      	ldr	r3, [sp, #0]
 801467c:	2200      	movs	r2, #0
 801467e:	701a      	strb	r2, [r3, #0]
 8014680:	b01b      	add	sp, #108	; 0x6c
 8014682:	f85d fb04 	ldr.w	pc, [sp], #4
 8014686:	bf00      	nop
 8014688:	ffff0208 	.word	0xffff0208

0801468c <vsiprintf>:
 801468c:	4613      	mov	r3, r2
 801468e:	460a      	mov	r2, r1
 8014690:	4601      	mov	r1, r0
 8014692:	4802      	ldr	r0, [pc, #8]	; (801469c <vsiprintf+0x10>)
 8014694:	6800      	ldr	r0, [r0, #0]
 8014696:	f7ff bfe3 	b.w	8014660 <_vsiprintf_r>
 801469a:	bf00      	nop
 801469c:	240004d0 	.word	0x240004d0

080146a0 <__swbuf_r>:
 80146a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80146a2:	460e      	mov	r6, r1
 80146a4:	4614      	mov	r4, r2
 80146a6:	4605      	mov	r5, r0
 80146a8:	b118      	cbz	r0, 80146b2 <__swbuf_r+0x12>
 80146aa:	6983      	ldr	r3, [r0, #24]
 80146ac:	b90b      	cbnz	r3, 80146b2 <__swbuf_r+0x12>
 80146ae:	f7ff fc11 	bl	8013ed4 <__sinit>
 80146b2:	4b21      	ldr	r3, [pc, #132]	; (8014738 <__swbuf_r+0x98>)
 80146b4:	429c      	cmp	r4, r3
 80146b6:	d12b      	bne.n	8014710 <__swbuf_r+0x70>
 80146b8:	686c      	ldr	r4, [r5, #4]
 80146ba:	69a3      	ldr	r3, [r4, #24]
 80146bc:	60a3      	str	r3, [r4, #8]
 80146be:	89a3      	ldrh	r3, [r4, #12]
 80146c0:	071a      	lsls	r2, r3, #28
 80146c2:	d52f      	bpl.n	8014724 <__swbuf_r+0x84>
 80146c4:	6923      	ldr	r3, [r4, #16]
 80146c6:	b36b      	cbz	r3, 8014724 <__swbuf_r+0x84>
 80146c8:	6923      	ldr	r3, [r4, #16]
 80146ca:	6820      	ldr	r0, [r4, #0]
 80146cc:	1ac0      	subs	r0, r0, r3
 80146ce:	6963      	ldr	r3, [r4, #20]
 80146d0:	b2f6      	uxtb	r6, r6
 80146d2:	4283      	cmp	r3, r0
 80146d4:	4637      	mov	r7, r6
 80146d6:	dc04      	bgt.n	80146e2 <__swbuf_r+0x42>
 80146d8:	4621      	mov	r1, r4
 80146da:	4628      	mov	r0, r5
 80146dc:	f7ff fb54 	bl	8013d88 <_fflush_r>
 80146e0:	bb30      	cbnz	r0, 8014730 <__swbuf_r+0x90>
 80146e2:	68a3      	ldr	r3, [r4, #8]
 80146e4:	3b01      	subs	r3, #1
 80146e6:	60a3      	str	r3, [r4, #8]
 80146e8:	6823      	ldr	r3, [r4, #0]
 80146ea:	1c5a      	adds	r2, r3, #1
 80146ec:	6022      	str	r2, [r4, #0]
 80146ee:	701e      	strb	r6, [r3, #0]
 80146f0:	6963      	ldr	r3, [r4, #20]
 80146f2:	3001      	adds	r0, #1
 80146f4:	4283      	cmp	r3, r0
 80146f6:	d004      	beq.n	8014702 <__swbuf_r+0x62>
 80146f8:	89a3      	ldrh	r3, [r4, #12]
 80146fa:	07db      	lsls	r3, r3, #31
 80146fc:	d506      	bpl.n	801470c <__swbuf_r+0x6c>
 80146fe:	2e0a      	cmp	r6, #10
 8014700:	d104      	bne.n	801470c <__swbuf_r+0x6c>
 8014702:	4621      	mov	r1, r4
 8014704:	4628      	mov	r0, r5
 8014706:	f7ff fb3f 	bl	8013d88 <_fflush_r>
 801470a:	b988      	cbnz	r0, 8014730 <__swbuf_r+0x90>
 801470c:	4638      	mov	r0, r7
 801470e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014710:	4b0a      	ldr	r3, [pc, #40]	; (801473c <__swbuf_r+0x9c>)
 8014712:	429c      	cmp	r4, r3
 8014714:	d101      	bne.n	801471a <__swbuf_r+0x7a>
 8014716:	68ac      	ldr	r4, [r5, #8]
 8014718:	e7cf      	b.n	80146ba <__swbuf_r+0x1a>
 801471a:	4b09      	ldr	r3, [pc, #36]	; (8014740 <__swbuf_r+0xa0>)
 801471c:	429c      	cmp	r4, r3
 801471e:	bf08      	it	eq
 8014720:	68ec      	ldreq	r4, [r5, #12]
 8014722:	e7ca      	b.n	80146ba <__swbuf_r+0x1a>
 8014724:	4621      	mov	r1, r4
 8014726:	4628      	mov	r0, r5
 8014728:	f000 f81e 	bl	8014768 <__swsetup_r>
 801472c:	2800      	cmp	r0, #0
 801472e:	d0cb      	beq.n	80146c8 <__swbuf_r+0x28>
 8014730:	f04f 37ff 	mov.w	r7, #4294967295
 8014734:	e7ea      	b.n	801470c <__swbuf_r+0x6c>
 8014736:	bf00      	nop
 8014738:	08015e44 	.word	0x08015e44
 801473c:	08015e64 	.word	0x08015e64
 8014740:	08015e24 	.word	0x08015e24

08014744 <_write_r>:
 8014744:	b538      	push	{r3, r4, r5, lr}
 8014746:	4d07      	ldr	r5, [pc, #28]	; (8014764 <_write_r+0x20>)
 8014748:	4604      	mov	r4, r0
 801474a:	4608      	mov	r0, r1
 801474c:	4611      	mov	r1, r2
 801474e:	2200      	movs	r2, #0
 8014750:	602a      	str	r2, [r5, #0]
 8014752:	461a      	mov	r2, r3
 8014754:	f7f4 fa95 	bl	8008c82 <_write>
 8014758:	1c43      	adds	r3, r0, #1
 801475a:	d102      	bne.n	8014762 <_write_r+0x1e>
 801475c:	682b      	ldr	r3, [r5, #0]
 801475e:	b103      	cbz	r3, 8014762 <_write_r+0x1e>
 8014760:	6023      	str	r3, [r4, #0]
 8014762:	bd38      	pop	{r3, r4, r5, pc}
 8014764:	24002350 	.word	0x24002350

08014768 <__swsetup_r>:
 8014768:	4b32      	ldr	r3, [pc, #200]	; (8014834 <__swsetup_r+0xcc>)
 801476a:	b570      	push	{r4, r5, r6, lr}
 801476c:	681d      	ldr	r5, [r3, #0]
 801476e:	4606      	mov	r6, r0
 8014770:	460c      	mov	r4, r1
 8014772:	b125      	cbz	r5, 801477e <__swsetup_r+0x16>
 8014774:	69ab      	ldr	r3, [r5, #24]
 8014776:	b913      	cbnz	r3, 801477e <__swsetup_r+0x16>
 8014778:	4628      	mov	r0, r5
 801477a:	f7ff fbab 	bl	8013ed4 <__sinit>
 801477e:	4b2e      	ldr	r3, [pc, #184]	; (8014838 <__swsetup_r+0xd0>)
 8014780:	429c      	cmp	r4, r3
 8014782:	d10f      	bne.n	80147a4 <__swsetup_r+0x3c>
 8014784:	686c      	ldr	r4, [r5, #4]
 8014786:	89a3      	ldrh	r3, [r4, #12]
 8014788:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801478c:	0719      	lsls	r1, r3, #28
 801478e:	d42c      	bmi.n	80147ea <__swsetup_r+0x82>
 8014790:	06dd      	lsls	r5, r3, #27
 8014792:	d411      	bmi.n	80147b8 <__swsetup_r+0x50>
 8014794:	2309      	movs	r3, #9
 8014796:	6033      	str	r3, [r6, #0]
 8014798:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801479c:	81a3      	strh	r3, [r4, #12]
 801479e:	f04f 30ff 	mov.w	r0, #4294967295
 80147a2:	e03e      	b.n	8014822 <__swsetup_r+0xba>
 80147a4:	4b25      	ldr	r3, [pc, #148]	; (801483c <__swsetup_r+0xd4>)
 80147a6:	429c      	cmp	r4, r3
 80147a8:	d101      	bne.n	80147ae <__swsetup_r+0x46>
 80147aa:	68ac      	ldr	r4, [r5, #8]
 80147ac:	e7eb      	b.n	8014786 <__swsetup_r+0x1e>
 80147ae:	4b24      	ldr	r3, [pc, #144]	; (8014840 <__swsetup_r+0xd8>)
 80147b0:	429c      	cmp	r4, r3
 80147b2:	bf08      	it	eq
 80147b4:	68ec      	ldreq	r4, [r5, #12]
 80147b6:	e7e6      	b.n	8014786 <__swsetup_r+0x1e>
 80147b8:	0758      	lsls	r0, r3, #29
 80147ba:	d512      	bpl.n	80147e2 <__swsetup_r+0x7a>
 80147bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80147be:	b141      	cbz	r1, 80147d2 <__swsetup_r+0x6a>
 80147c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80147c4:	4299      	cmp	r1, r3
 80147c6:	d002      	beq.n	80147ce <__swsetup_r+0x66>
 80147c8:	4630      	mov	r0, r6
 80147ca:	f7ff fc9f 	bl	801410c <_free_r>
 80147ce:	2300      	movs	r3, #0
 80147d0:	6363      	str	r3, [r4, #52]	; 0x34
 80147d2:	89a3      	ldrh	r3, [r4, #12]
 80147d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80147d8:	81a3      	strh	r3, [r4, #12]
 80147da:	2300      	movs	r3, #0
 80147dc:	6063      	str	r3, [r4, #4]
 80147de:	6923      	ldr	r3, [r4, #16]
 80147e0:	6023      	str	r3, [r4, #0]
 80147e2:	89a3      	ldrh	r3, [r4, #12]
 80147e4:	f043 0308 	orr.w	r3, r3, #8
 80147e8:	81a3      	strh	r3, [r4, #12]
 80147ea:	6923      	ldr	r3, [r4, #16]
 80147ec:	b94b      	cbnz	r3, 8014802 <__swsetup_r+0x9a>
 80147ee:	89a3      	ldrh	r3, [r4, #12]
 80147f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80147f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80147f8:	d003      	beq.n	8014802 <__swsetup_r+0x9a>
 80147fa:	4621      	mov	r1, r4
 80147fc:	4630      	mov	r0, r6
 80147fe:	f000 f899 	bl	8014934 <__smakebuf_r>
 8014802:	89a0      	ldrh	r0, [r4, #12]
 8014804:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8014808:	f010 0301 	ands.w	r3, r0, #1
 801480c:	d00a      	beq.n	8014824 <__swsetup_r+0xbc>
 801480e:	2300      	movs	r3, #0
 8014810:	60a3      	str	r3, [r4, #8]
 8014812:	6963      	ldr	r3, [r4, #20]
 8014814:	425b      	negs	r3, r3
 8014816:	61a3      	str	r3, [r4, #24]
 8014818:	6923      	ldr	r3, [r4, #16]
 801481a:	b943      	cbnz	r3, 801482e <__swsetup_r+0xc6>
 801481c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8014820:	d1ba      	bne.n	8014798 <__swsetup_r+0x30>
 8014822:	bd70      	pop	{r4, r5, r6, pc}
 8014824:	0781      	lsls	r1, r0, #30
 8014826:	bf58      	it	pl
 8014828:	6963      	ldrpl	r3, [r4, #20]
 801482a:	60a3      	str	r3, [r4, #8]
 801482c:	e7f4      	b.n	8014818 <__swsetup_r+0xb0>
 801482e:	2000      	movs	r0, #0
 8014830:	e7f7      	b.n	8014822 <__swsetup_r+0xba>
 8014832:	bf00      	nop
 8014834:	240004d0 	.word	0x240004d0
 8014838:	08015e44 	.word	0x08015e44
 801483c:	08015e64 	.word	0x08015e64
 8014840:	08015e24 	.word	0x08015e24

08014844 <__assert_func>:
 8014844:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8014846:	4614      	mov	r4, r2
 8014848:	461a      	mov	r2, r3
 801484a:	4b09      	ldr	r3, [pc, #36]	; (8014870 <__assert_func+0x2c>)
 801484c:	681b      	ldr	r3, [r3, #0]
 801484e:	4605      	mov	r5, r0
 8014850:	68d8      	ldr	r0, [r3, #12]
 8014852:	b14c      	cbz	r4, 8014868 <__assert_func+0x24>
 8014854:	4b07      	ldr	r3, [pc, #28]	; (8014874 <__assert_func+0x30>)
 8014856:	9100      	str	r1, [sp, #0]
 8014858:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801485c:	4906      	ldr	r1, [pc, #24]	; (8014878 <__assert_func+0x34>)
 801485e:	462b      	mov	r3, r5
 8014860:	f000 f81e 	bl	80148a0 <fiprintf>
 8014864:	f000 fd0e 	bl	8015284 <abort>
 8014868:	4b04      	ldr	r3, [pc, #16]	; (801487c <__assert_func+0x38>)
 801486a:	461c      	mov	r4, r3
 801486c:	e7f3      	b.n	8014856 <__assert_func+0x12>
 801486e:	bf00      	nop
 8014870:	240004d0 	.word	0x240004d0
 8014874:	08015efc 	.word	0x08015efc
 8014878:	08015f09 	.word	0x08015f09
 801487c:	08015f37 	.word	0x08015f37

08014880 <_close_r>:
 8014880:	b538      	push	{r3, r4, r5, lr}
 8014882:	4d06      	ldr	r5, [pc, #24]	; (801489c <_close_r+0x1c>)
 8014884:	2300      	movs	r3, #0
 8014886:	4604      	mov	r4, r0
 8014888:	4608      	mov	r0, r1
 801488a:	602b      	str	r3, [r5, #0]
 801488c:	f7f4 fa15 	bl	8008cba <_close>
 8014890:	1c43      	adds	r3, r0, #1
 8014892:	d102      	bne.n	801489a <_close_r+0x1a>
 8014894:	682b      	ldr	r3, [r5, #0]
 8014896:	b103      	cbz	r3, 801489a <_close_r+0x1a>
 8014898:	6023      	str	r3, [r4, #0]
 801489a:	bd38      	pop	{r3, r4, r5, pc}
 801489c:	24002350 	.word	0x24002350

080148a0 <fiprintf>:
 80148a0:	b40e      	push	{r1, r2, r3}
 80148a2:	b503      	push	{r0, r1, lr}
 80148a4:	4601      	mov	r1, r0
 80148a6:	ab03      	add	r3, sp, #12
 80148a8:	4805      	ldr	r0, [pc, #20]	; (80148c0 <fiprintf+0x20>)
 80148aa:	f853 2b04 	ldr.w	r2, [r3], #4
 80148ae:	6800      	ldr	r0, [r0, #0]
 80148b0:	9301      	str	r3, [sp, #4]
 80148b2:	f000 fa11 	bl	8014cd8 <_vfiprintf_r>
 80148b6:	b002      	add	sp, #8
 80148b8:	f85d eb04 	ldr.w	lr, [sp], #4
 80148bc:	b003      	add	sp, #12
 80148be:	4770      	bx	lr
 80148c0:	240004d0 	.word	0x240004d0

080148c4 <_lseek_r>:
 80148c4:	b538      	push	{r3, r4, r5, lr}
 80148c6:	4d07      	ldr	r5, [pc, #28]	; (80148e4 <_lseek_r+0x20>)
 80148c8:	4604      	mov	r4, r0
 80148ca:	4608      	mov	r0, r1
 80148cc:	4611      	mov	r1, r2
 80148ce:	2200      	movs	r2, #0
 80148d0:	602a      	str	r2, [r5, #0]
 80148d2:	461a      	mov	r2, r3
 80148d4:	f7f4 fa18 	bl	8008d08 <_lseek>
 80148d8:	1c43      	adds	r3, r0, #1
 80148da:	d102      	bne.n	80148e2 <_lseek_r+0x1e>
 80148dc:	682b      	ldr	r3, [r5, #0]
 80148de:	b103      	cbz	r3, 80148e2 <_lseek_r+0x1e>
 80148e0:	6023      	str	r3, [r4, #0]
 80148e2:	bd38      	pop	{r3, r4, r5, pc}
 80148e4:	24002350 	.word	0x24002350

080148e8 <__swhatbuf_r>:
 80148e8:	b570      	push	{r4, r5, r6, lr}
 80148ea:	460e      	mov	r6, r1
 80148ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80148f0:	2900      	cmp	r1, #0
 80148f2:	b096      	sub	sp, #88	; 0x58
 80148f4:	4614      	mov	r4, r2
 80148f6:	461d      	mov	r5, r3
 80148f8:	da08      	bge.n	801490c <__swhatbuf_r+0x24>
 80148fa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80148fe:	2200      	movs	r2, #0
 8014900:	602a      	str	r2, [r5, #0]
 8014902:	061a      	lsls	r2, r3, #24
 8014904:	d410      	bmi.n	8014928 <__swhatbuf_r+0x40>
 8014906:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801490a:	e00e      	b.n	801492a <__swhatbuf_r+0x42>
 801490c:	466a      	mov	r2, sp
 801490e:	f000 fcc1 	bl	8015294 <_fstat_r>
 8014912:	2800      	cmp	r0, #0
 8014914:	dbf1      	blt.n	80148fa <__swhatbuf_r+0x12>
 8014916:	9a01      	ldr	r2, [sp, #4]
 8014918:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801491c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8014920:	425a      	negs	r2, r3
 8014922:	415a      	adcs	r2, r3
 8014924:	602a      	str	r2, [r5, #0]
 8014926:	e7ee      	b.n	8014906 <__swhatbuf_r+0x1e>
 8014928:	2340      	movs	r3, #64	; 0x40
 801492a:	2000      	movs	r0, #0
 801492c:	6023      	str	r3, [r4, #0]
 801492e:	b016      	add	sp, #88	; 0x58
 8014930:	bd70      	pop	{r4, r5, r6, pc}
	...

08014934 <__smakebuf_r>:
 8014934:	898b      	ldrh	r3, [r1, #12]
 8014936:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8014938:	079d      	lsls	r5, r3, #30
 801493a:	4606      	mov	r6, r0
 801493c:	460c      	mov	r4, r1
 801493e:	d507      	bpl.n	8014950 <__smakebuf_r+0x1c>
 8014940:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8014944:	6023      	str	r3, [r4, #0]
 8014946:	6123      	str	r3, [r4, #16]
 8014948:	2301      	movs	r3, #1
 801494a:	6163      	str	r3, [r4, #20]
 801494c:	b002      	add	sp, #8
 801494e:	bd70      	pop	{r4, r5, r6, pc}
 8014950:	ab01      	add	r3, sp, #4
 8014952:	466a      	mov	r2, sp
 8014954:	f7ff ffc8 	bl	80148e8 <__swhatbuf_r>
 8014958:	9900      	ldr	r1, [sp, #0]
 801495a:	4605      	mov	r5, r0
 801495c:	4630      	mov	r0, r6
 801495e:	f7ff fc41 	bl	80141e4 <_malloc_r>
 8014962:	b948      	cbnz	r0, 8014978 <__smakebuf_r+0x44>
 8014964:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014968:	059a      	lsls	r2, r3, #22
 801496a:	d4ef      	bmi.n	801494c <__smakebuf_r+0x18>
 801496c:	f023 0303 	bic.w	r3, r3, #3
 8014970:	f043 0302 	orr.w	r3, r3, #2
 8014974:	81a3      	strh	r3, [r4, #12]
 8014976:	e7e3      	b.n	8014940 <__smakebuf_r+0xc>
 8014978:	4b0d      	ldr	r3, [pc, #52]	; (80149b0 <__smakebuf_r+0x7c>)
 801497a:	62b3      	str	r3, [r6, #40]	; 0x28
 801497c:	89a3      	ldrh	r3, [r4, #12]
 801497e:	6020      	str	r0, [r4, #0]
 8014980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014984:	81a3      	strh	r3, [r4, #12]
 8014986:	9b00      	ldr	r3, [sp, #0]
 8014988:	6163      	str	r3, [r4, #20]
 801498a:	9b01      	ldr	r3, [sp, #4]
 801498c:	6120      	str	r0, [r4, #16]
 801498e:	b15b      	cbz	r3, 80149a8 <__smakebuf_r+0x74>
 8014990:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014994:	4630      	mov	r0, r6
 8014996:	f000 fc8f 	bl	80152b8 <_isatty_r>
 801499a:	b128      	cbz	r0, 80149a8 <__smakebuf_r+0x74>
 801499c:	89a3      	ldrh	r3, [r4, #12]
 801499e:	f023 0303 	bic.w	r3, r3, #3
 80149a2:	f043 0301 	orr.w	r3, r3, #1
 80149a6:	81a3      	strh	r3, [r4, #12]
 80149a8:	89a0      	ldrh	r0, [r4, #12]
 80149aa:	4305      	orrs	r5, r0
 80149ac:	81a5      	strh	r5, [r4, #12]
 80149ae:	e7cd      	b.n	801494c <__smakebuf_r+0x18>
 80149b0:	08013e6d 	.word	0x08013e6d

080149b4 <__malloc_lock>:
 80149b4:	4801      	ldr	r0, [pc, #4]	; (80149bc <__malloc_lock+0x8>)
 80149b6:	f7ff bb50 	b.w	801405a <__retarget_lock_acquire_recursive>
 80149ba:	bf00      	nop
 80149bc:	24002344 	.word	0x24002344

080149c0 <__malloc_unlock>:
 80149c0:	4801      	ldr	r0, [pc, #4]	; (80149c8 <__malloc_unlock+0x8>)
 80149c2:	f7ff bb4b 	b.w	801405c <__retarget_lock_release_recursive>
 80149c6:	bf00      	nop
 80149c8:	24002344 	.word	0x24002344

080149cc <__ssputs_r>:
 80149cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80149d0:	688e      	ldr	r6, [r1, #8]
 80149d2:	429e      	cmp	r6, r3
 80149d4:	4682      	mov	sl, r0
 80149d6:	460c      	mov	r4, r1
 80149d8:	4690      	mov	r8, r2
 80149da:	461f      	mov	r7, r3
 80149dc:	d838      	bhi.n	8014a50 <__ssputs_r+0x84>
 80149de:	898a      	ldrh	r2, [r1, #12]
 80149e0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80149e4:	d032      	beq.n	8014a4c <__ssputs_r+0x80>
 80149e6:	6825      	ldr	r5, [r4, #0]
 80149e8:	6909      	ldr	r1, [r1, #16]
 80149ea:	eba5 0901 	sub.w	r9, r5, r1
 80149ee:	6965      	ldr	r5, [r4, #20]
 80149f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80149f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80149f8:	3301      	adds	r3, #1
 80149fa:	444b      	add	r3, r9
 80149fc:	106d      	asrs	r5, r5, #1
 80149fe:	429d      	cmp	r5, r3
 8014a00:	bf38      	it	cc
 8014a02:	461d      	movcc	r5, r3
 8014a04:	0553      	lsls	r3, r2, #21
 8014a06:	d531      	bpl.n	8014a6c <__ssputs_r+0xa0>
 8014a08:	4629      	mov	r1, r5
 8014a0a:	f7ff fbeb 	bl	80141e4 <_malloc_r>
 8014a0e:	4606      	mov	r6, r0
 8014a10:	b950      	cbnz	r0, 8014a28 <__ssputs_r+0x5c>
 8014a12:	230c      	movs	r3, #12
 8014a14:	f8ca 3000 	str.w	r3, [sl]
 8014a18:	89a3      	ldrh	r3, [r4, #12]
 8014a1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014a1e:	81a3      	strh	r3, [r4, #12]
 8014a20:	f04f 30ff 	mov.w	r0, #4294967295
 8014a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014a28:	6921      	ldr	r1, [r4, #16]
 8014a2a:	464a      	mov	r2, r9
 8014a2c:	f7ff fb28 	bl	8014080 <memcpy>
 8014a30:	89a3      	ldrh	r3, [r4, #12]
 8014a32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8014a36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8014a3a:	81a3      	strh	r3, [r4, #12]
 8014a3c:	6126      	str	r6, [r4, #16]
 8014a3e:	6165      	str	r5, [r4, #20]
 8014a40:	444e      	add	r6, r9
 8014a42:	eba5 0509 	sub.w	r5, r5, r9
 8014a46:	6026      	str	r6, [r4, #0]
 8014a48:	60a5      	str	r5, [r4, #8]
 8014a4a:	463e      	mov	r6, r7
 8014a4c:	42be      	cmp	r6, r7
 8014a4e:	d900      	bls.n	8014a52 <__ssputs_r+0x86>
 8014a50:	463e      	mov	r6, r7
 8014a52:	6820      	ldr	r0, [r4, #0]
 8014a54:	4632      	mov	r2, r6
 8014a56:	4641      	mov	r1, r8
 8014a58:	f7ff fb20 	bl	801409c <memmove>
 8014a5c:	68a3      	ldr	r3, [r4, #8]
 8014a5e:	1b9b      	subs	r3, r3, r6
 8014a60:	60a3      	str	r3, [r4, #8]
 8014a62:	6823      	ldr	r3, [r4, #0]
 8014a64:	4433      	add	r3, r6
 8014a66:	6023      	str	r3, [r4, #0]
 8014a68:	2000      	movs	r0, #0
 8014a6a:	e7db      	b.n	8014a24 <__ssputs_r+0x58>
 8014a6c:	462a      	mov	r2, r5
 8014a6e:	f000 fc33 	bl	80152d8 <_realloc_r>
 8014a72:	4606      	mov	r6, r0
 8014a74:	2800      	cmp	r0, #0
 8014a76:	d1e1      	bne.n	8014a3c <__ssputs_r+0x70>
 8014a78:	6921      	ldr	r1, [r4, #16]
 8014a7a:	4650      	mov	r0, sl
 8014a7c:	f7ff fb46 	bl	801410c <_free_r>
 8014a80:	e7c7      	b.n	8014a12 <__ssputs_r+0x46>
	...

08014a84 <_svfiprintf_r>:
 8014a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a88:	4698      	mov	r8, r3
 8014a8a:	898b      	ldrh	r3, [r1, #12]
 8014a8c:	061b      	lsls	r3, r3, #24
 8014a8e:	b09d      	sub	sp, #116	; 0x74
 8014a90:	4607      	mov	r7, r0
 8014a92:	460d      	mov	r5, r1
 8014a94:	4614      	mov	r4, r2
 8014a96:	d50e      	bpl.n	8014ab6 <_svfiprintf_r+0x32>
 8014a98:	690b      	ldr	r3, [r1, #16]
 8014a9a:	b963      	cbnz	r3, 8014ab6 <_svfiprintf_r+0x32>
 8014a9c:	2140      	movs	r1, #64	; 0x40
 8014a9e:	f7ff fba1 	bl	80141e4 <_malloc_r>
 8014aa2:	6028      	str	r0, [r5, #0]
 8014aa4:	6128      	str	r0, [r5, #16]
 8014aa6:	b920      	cbnz	r0, 8014ab2 <_svfiprintf_r+0x2e>
 8014aa8:	230c      	movs	r3, #12
 8014aaa:	603b      	str	r3, [r7, #0]
 8014aac:	f04f 30ff 	mov.w	r0, #4294967295
 8014ab0:	e0d1      	b.n	8014c56 <_svfiprintf_r+0x1d2>
 8014ab2:	2340      	movs	r3, #64	; 0x40
 8014ab4:	616b      	str	r3, [r5, #20]
 8014ab6:	2300      	movs	r3, #0
 8014ab8:	9309      	str	r3, [sp, #36]	; 0x24
 8014aba:	2320      	movs	r3, #32
 8014abc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014ac0:	f8cd 800c 	str.w	r8, [sp, #12]
 8014ac4:	2330      	movs	r3, #48	; 0x30
 8014ac6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8014c70 <_svfiprintf_r+0x1ec>
 8014aca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014ace:	f04f 0901 	mov.w	r9, #1
 8014ad2:	4623      	mov	r3, r4
 8014ad4:	469a      	mov	sl, r3
 8014ad6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014ada:	b10a      	cbz	r2, 8014ae0 <_svfiprintf_r+0x5c>
 8014adc:	2a25      	cmp	r2, #37	; 0x25
 8014ade:	d1f9      	bne.n	8014ad4 <_svfiprintf_r+0x50>
 8014ae0:	ebba 0b04 	subs.w	fp, sl, r4
 8014ae4:	d00b      	beq.n	8014afe <_svfiprintf_r+0x7a>
 8014ae6:	465b      	mov	r3, fp
 8014ae8:	4622      	mov	r2, r4
 8014aea:	4629      	mov	r1, r5
 8014aec:	4638      	mov	r0, r7
 8014aee:	f7ff ff6d 	bl	80149cc <__ssputs_r>
 8014af2:	3001      	adds	r0, #1
 8014af4:	f000 80aa 	beq.w	8014c4c <_svfiprintf_r+0x1c8>
 8014af8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014afa:	445a      	add	r2, fp
 8014afc:	9209      	str	r2, [sp, #36]	; 0x24
 8014afe:	f89a 3000 	ldrb.w	r3, [sl]
 8014b02:	2b00      	cmp	r3, #0
 8014b04:	f000 80a2 	beq.w	8014c4c <_svfiprintf_r+0x1c8>
 8014b08:	2300      	movs	r3, #0
 8014b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8014b0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014b12:	f10a 0a01 	add.w	sl, sl, #1
 8014b16:	9304      	str	r3, [sp, #16]
 8014b18:	9307      	str	r3, [sp, #28]
 8014b1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014b1e:	931a      	str	r3, [sp, #104]	; 0x68
 8014b20:	4654      	mov	r4, sl
 8014b22:	2205      	movs	r2, #5
 8014b24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b28:	4851      	ldr	r0, [pc, #324]	; (8014c70 <_svfiprintf_r+0x1ec>)
 8014b2a:	f7eb fbf1 	bl	8000310 <memchr>
 8014b2e:	9a04      	ldr	r2, [sp, #16]
 8014b30:	b9d8      	cbnz	r0, 8014b6a <_svfiprintf_r+0xe6>
 8014b32:	06d0      	lsls	r0, r2, #27
 8014b34:	bf44      	itt	mi
 8014b36:	2320      	movmi	r3, #32
 8014b38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014b3c:	0711      	lsls	r1, r2, #28
 8014b3e:	bf44      	itt	mi
 8014b40:	232b      	movmi	r3, #43	; 0x2b
 8014b42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014b46:	f89a 3000 	ldrb.w	r3, [sl]
 8014b4a:	2b2a      	cmp	r3, #42	; 0x2a
 8014b4c:	d015      	beq.n	8014b7a <_svfiprintf_r+0xf6>
 8014b4e:	9a07      	ldr	r2, [sp, #28]
 8014b50:	4654      	mov	r4, sl
 8014b52:	2000      	movs	r0, #0
 8014b54:	f04f 0c0a 	mov.w	ip, #10
 8014b58:	4621      	mov	r1, r4
 8014b5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014b5e:	3b30      	subs	r3, #48	; 0x30
 8014b60:	2b09      	cmp	r3, #9
 8014b62:	d94e      	bls.n	8014c02 <_svfiprintf_r+0x17e>
 8014b64:	b1b0      	cbz	r0, 8014b94 <_svfiprintf_r+0x110>
 8014b66:	9207      	str	r2, [sp, #28]
 8014b68:	e014      	b.n	8014b94 <_svfiprintf_r+0x110>
 8014b6a:	eba0 0308 	sub.w	r3, r0, r8
 8014b6e:	fa09 f303 	lsl.w	r3, r9, r3
 8014b72:	4313      	orrs	r3, r2
 8014b74:	9304      	str	r3, [sp, #16]
 8014b76:	46a2      	mov	sl, r4
 8014b78:	e7d2      	b.n	8014b20 <_svfiprintf_r+0x9c>
 8014b7a:	9b03      	ldr	r3, [sp, #12]
 8014b7c:	1d19      	adds	r1, r3, #4
 8014b7e:	681b      	ldr	r3, [r3, #0]
 8014b80:	9103      	str	r1, [sp, #12]
 8014b82:	2b00      	cmp	r3, #0
 8014b84:	bfbb      	ittet	lt
 8014b86:	425b      	neglt	r3, r3
 8014b88:	f042 0202 	orrlt.w	r2, r2, #2
 8014b8c:	9307      	strge	r3, [sp, #28]
 8014b8e:	9307      	strlt	r3, [sp, #28]
 8014b90:	bfb8      	it	lt
 8014b92:	9204      	strlt	r2, [sp, #16]
 8014b94:	7823      	ldrb	r3, [r4, #0]
 8014b96:	2b2e      	cmp	r3, #46	; 0x2e
 8014b98:	d10c      	bne.n	8014bb4 <_svfiprintf_r+0x130>
 8014b9a:	7863      	ldrb	r3, [r4, #1]
 8014b9c:	2b2a      	cmp	r3, #42	; 0x2a
 8014b9e:	d135      	bne.n	8014c0c <_svfiprintf_r+0x188>
 8014ba0:	9b03      	ldr	r3, [sp, #12]
 8014ba2:	1d1a      	adds	r2, r3, #4
 8014ba4:	681b      	ldr	r3, [r3, #0]
 8014ba6:	9203      	str	r2, [sp, #12]
 8014ba8:	2b00      	cmp	r3, #0
 8014baa:	bfb8      	it	lt
 8014bac:	f04f 33ff 	movlt.w	r3, #4294967295
 8014bb0:	3402      	adds	r4, #2
 8014bb2:	9305      	str	r3, [sp, #20]
 8014bb4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8014c80 <_svfiprintf_r+0x1fc>
 8014bb8:	7821      	ldrb	r1, [r4, #0]
 8014bba:	2203      	movs	r2, #3
 8014bbc:	4650      	mov	r0, sl
 8014bbe:	f7eb fba7 	bl	8000310 <memchr>
 8014bc2:	b140      	cbz	r0, 8014bd6 <_svfiprintf_r+0x152>
 8014bc4:	2340      	movs	r3, #64	; 0x40
 8014bc6:	eba0 000a 	sub.w	r0, r0, sl
 8014bca:	fa03 f000 	lsl.w	r0, r3, r0
 8014bce:	9b04      	ldr	r3, [sp, #16]
 8014bd0:	4303      	orrs	r3, r0
 8014bd2:	3401      	adds	r4, #1
 8014bd4:	9304      	str	r3, [sp, #16]
 8014bd6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014bda:	4826      	ldr	r0, [pc, #152]	; (8014c74 <_svfiprintf_r+0x1f0>)
 8014bdc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014be0:	2206      	movs	r2, #6
 8014be2:	f7eb fb95 	bl	8000310 <memchr>
 8014be6:	2800      	cmp	r0, #0
 8014be8:	d038      	beq.n	8014c5c <_svfiprintf_r+0x1d8>
 8014bea:	4b23      	ldr	r3, [pc, #140]	; (8014c78 <_svfiprintf_r+0x1f4>)
 8014bec:	bb1b      	cbnz	r3, 8014c36 <_svfiprintf_r+0x1b2>
 8014bee:	9b03      	ldr	r3, [sp, #12]
 8014bf0:	3307      	adds	r3, #7
 8014bf2:	f023 0307 	bic.w	r3, r3, #7
 8014bf6:	3308      	adds	r3, #8
 8014bf8:	9303      	str	r3, [sp, #12]
 8014bfa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014bfc:	4433      	add	r3, r6
 8014bfe:	9309      	str	r3, [sp, #36]	; 0x24
 8014c00:	e767      	b.n	8014ad2 <_svfiprintf_r+0x4e>
 8014c02:	fb0c 3202 	mla	r2, ip, r2, r3
 8014c06:	460c      	mov	r4, r1
 8014c08:	2001      	movs	r0, #1
 8014c0a:	e7a5      	b.n	8014b58 <_svfiprintf_r+0xd4>
 8014c0c:	2300      	movs	r3, #0
 8014c0e:	3401      	adds	r4, #1
 8014c10:	9305      	str	r3, [sp, #20]
 8014c12:	4619      	mov	r1, r3
 8014c14:	f04f 0c0a 	mov.w	ip, #10
 8014c18:	4620      	mov	r0, r4
 8014c1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014c1e:	3a30      	subs	r2, #48	; 0x30
 8014c20:	2a09      	cmp	r2, #9
 8014c22:	d903      	bls.n	8014c2c <_svfiprintf_r+0x1a8>
 8014c24:	2b00      	cmp	r3, #0
 8014c26:	d0c5      	beq.n	8014bb4 <_svfiprintf_r+0x130>
 8014c28:	9105      	str	r1, [sp, #20]
 8014c2a:	e7c3      	b.n	8014bb4 <_svfiprintf_r+0x130>
 8014c2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8014c30:	4604      	mov	r4, r0
 8014c32:	2301      	movs	r3, #1
 8014c34:	e7f0      	b.n	8014c18 <_svfiprintf_r+0x194>
 8014c36:	ab03      	add	r3, sp, #12
 8014c38:	9300      	str	r3, [sp, #0]
 8014c3a:	462a      	mov	r2, r5
 8014c3c:	4b0f      	ldr	r3, [pc, #60]	; (8014c7c <_svfiprintf_r+0x1f8>)
 8014c3e:	a904      	add	r1, sp, #16
 8014c40:	4638      	mov	r0, r7
 8014c42:	f3af 8000 	nop.w
 8014c46:	1c42      	adds	r2, r0, #1
 8014c48:	4606      	mov	r6, r0
 8014c4a:	d1d6      	bne.n	8014bfa <_svfiprintf_r+0x176>
 8014c4c:	89ab      	ldrh	r3, [r5, #12]
 8014c4e:	065b      	lsls	r3, r3, #25
 8014c50:	f53f af2c 	bmi.w	8014aac <_svfiprintf_r+0x28>
 8014c54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014c56:	b01d      	add	sp, #116	; 0x74
 8014c58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014c5c:	ab03      	add	r3, sp, #12
 8014c5e:	9300      	str	r3, [sp, #0]
 8014c60:	462a      	mov	r2, r5
 8014c62:	4b06      	ldr	r3, [pc, #24]	; (8014c7c <_svfiprintf_r+0x1f8>)
 8014c64:	a904      	add	r1, sp, #16
 8014c66:	4638      	mov	r0, r7
 8014c68:	f000 f9d4 	bl	8015014 <_printf_i>
 8014c6c:	e7eb      	b.n	8014c46 <_svfiprintf_r+0x1c2>
 8014c6e:	bf00      	nop
 8014c70:	08016039 	.word	0x08016039
 8014c74:	08016043 	.word	0x08016043
 8014c78:	00000000 	.word	0x00000000
 8014c7c:	080149cd 	.word	0x080149cd
 8014c80:	0801603f 	.word	0x0801603f

08014c84 <__sfputc_r>:
 8014c84:	6893      	ldr	r3, [r2, #8]
 8014c86:	3b01      	subs	r3, #1
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	b410      	push	{r4}
 8014c8c:	6093      	str	r3, [r2, #8]
 8014c8e:	da08      	bge.n	8014ca2 <__sfputc_r+0x1e>
 8014c90:	6994      	ldr	r4, [r2, #24]
 8014c92:	42a3      	cmp	r3, r4
 8014c94:	db01      	blt.n	8014c9a <__sfputc_r+0x16>
 8014c96:	290a      	cmp	r1, #10
 8014c98:	d103      	bne.n	8014ca2 <__sfputc_r+0x1e>
 8014c9a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014c9e:	f7ff bcff 	b.w	80146a0 <__swbuf_r>
 8014ca2:	6813      	ldr	r3, [r2, #0]
 8014ca4:	1c58      	adds	r0, r3, #1
 8014ca6:	6010      	str	r0, [r2, #0]
 8014ca8:	7019      	strb	r1, [r3, #0]
 8014caa:	4608      	mov	r0, r1
 8014cac:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014cb0:	4770      	bx	lr

08014cb2 <__sfputs_r>:
 8014cb2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014cb4:	4606      	mov	r6, r0
 8014cb6:	460f      	mov	r7, r1
 8014cb8:	4614      	mov	r4, r2
 8014cba:	18d5      	adds	r5, r2, r3
 8014cbc:	42ac      	cmp	r4, r5
 8014cbe:	d101      	bne.n	8014cc4 <__sfputs_r+0x12>
 8014cc0:	2000      	movs	r0, #0
 8014cc2:	e007      	b.n	8014cd4 <__sfputs_r+0x22>
 8014cc4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014cc8:	463a      	mov	r2, r7
 8014cca:	4630      	mov	r0, r6
 8014ccc:	f7ff ffda 	bl	8014c84 <__sfputc_r>
 8014cd0:	1c43      	adds	r3, r0, #1
 8014cd2:	d1f3      	bne.n	8014cbc <__sfputs_r+0xa>
 8014cd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014cd8 <_vfiprintf_r>:
 8014cd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014cdc:	460d      	mov	r5, r1
 8014cde:	b09d      	sub	sp, #116	; 0x74
 8014ce0:	4614      	mov	r4, r2
 8014ce2:	4698      	mov	r8, r3
 8014ce4:	4606      	mov	r6, r0
 8014ce6:	b118      	cbz	r0, 8014cf0 <_vfiprintf_r+0x18>
 8014ce8:	6983      	ldr	r3, [r0, #24]
 8014cea:	b90b      	cbnz	r3, 8014cf0 <_vfiprintf_r+0x18>
 8014cec:	f7ff f8f2 	bl	8013ed4 <__sinit>
 8014cf0:	4b89      	ldr	r3, [pc, #548]	; (8014f18 <_vfiprintf_r+0x240>)
 8014cf2:	429d      	cmp	r5, r3
 8014cf4:	d11b      	bne.n	8014d2e <_vfiprintf_r+0x56>
 8014cf6:	6875      	ldr	r5, [r6, #4]
 8014cf8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014cfa:	07d9      	lsls	r1, r3, #31
 8014cfc:	d405      	bmi.n	8014d0a <_vfiprintf_r+0x32>
 8014cfe:	89ab      	ldrh	r3, [r5, #12]
 8014d00:	059a      	lsls	r2, r3, #22
 8014d02:	d402      	bmi.n	8014d0a <_vfiprintf_r+0x32>
 8014d04:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014d06:	f7ff f9a8 	bl	801405a <__retarget_lock_acquire_recursive>
 8014d0a:	89ab      	ldrh	r3, [r5, #12]
 8014d0c:	071b      	lsls	r3, r3, #28
 8014d0e:	d501      	bpl.n	8014d14 <_vfiprintf_r+0x3c>
 8014d10:	692b      	ldr	r3, [r5, #16]
 8014d12:	b9eb      	cbnz	r3, 8014d50 <_vfiprintf_r+0x78>
 8014d14:	4629      	mov	r1, r5
 8014d16:	4630      	mov	r0, r6
 8014d18:	f7ff fd26 	bl	8014768 <__swsetup_r>
 8014d1c:	b1c0      	cbz	r0, 8014d50 <_vfiprintf_r+0x78>
 8014d1e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014d20:	07dc      	lsls	r4, r3, #31
 8014d22:	d50e      	bpl.n	8014d42 <_vfiprintf_r+0x6a>
 8014d24:	f04f 30ff 	mov.w	r0, #4294967295
 8014d28:	b01d      	add	sp, #116	; 0x74
 8014d2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d2e:	4b7b      	ldr	r3, [pc, #492]	; (8014f1c <_vfiprintf_r+0x244>)
 8014d30:	429d      	cmp	r5, r3
 8014d32:	d101      	bne.n	8014d38 <_vfiprintf_r+0x60>
 8014d34:	68b5      	ldr	r5, [r6, #8]
 8014d36:	e7df      	b.n	8014cf8 <_vfiprintf_r+0x20>
 8014d38:	4b79      	ldr	r3, [pc, #484]	; (8014f20 <_vfiprintf_r+0x248>)
 8014d3a:	429d      	cmp	r5, r3
 8014d3c:	bf08      	it	eq
 8014d3e:	68f5      	ldreq	r5, [r6, #12]
 8014d40:	e7da      	b.n	8014cf8 <_vfiprintf_r+0x20>
 8014d42:	89ab      	ldrh	r3, [r5, #12]
 8014d44:	0598      	lsls	r0, r3, #22
 8014d46:	d4ed      	bmi.n	8014d24 <_vfiprintf_r+0x4c>
 8014d48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014d4a:	f7ff f987 	bl	801405c <__retarget_lock_release_recursive>
 8014d4e:	e7e9      	b.n	8014d24 <_vfiprintf_r+0x4c>
 8014d50:	2300      	movs	r3, #0
 8014d52:	9309      	str	r3, [sp, #36]	; 0x24
 8014d54:	2320      	movs	r3, #32
 8014d56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014d5a:	f8cd 800c 	str.w	r8, [sp, #12]
 8014d5e:	2330      	movs	r3, #48	; 0x30
 8014d60:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8014f24 <_vfiprintf_r+0x24c>
 8014d64:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014d68:	f04f 0901 	mov.w	r9, #1
 8014d6c:	4623      	mov	r3, r4
 8014d6e:	469a      	mov	sl, r3
 8014d70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014d74:	b10a      	cbz	r2, 8014d7a <_vfiprintf_r+0xa2>
 8014d76:	2a25      	cmp	r2, #37	; 0x25
 8014d78:	d1f9      	bne.n	8014d6e <_vfiprintf_r+0x96>
 8014d7a:	ebba 0b04 	subs.w	fp, sl, r4
 8014d7e:	d00b      	beq.n	8014d98 <_vfiprintf_r+0xc0>
 8014d80:	465b      	mov	r3, fp
 8014d82:	4622      	mov	r2, r4
 8014d84:	4629      	mov	r1, r5
 8014d86:	4630      	mov	r0, r6
 8014d88:	f7ff ff93 	bl	8014cb2 <__sfputs_r>
 8014d8c:	3001      	adds	r0, #1
 8014d8e:	f000 80aa 	beq.w	8014ee6 <_vfiprintf_r+0x20e>
 8014d92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014d94:	445a      	add	r2, fp
 8014d96:	9209      	str	r2, [sp, #36]	; 0x24
 8014d98:	f89a 3000 	ldrb.w	r3, [sl]
 8014d9c:	2b00      	cmp	r3, #0
 8014d9e:	f000 80a2 	beq.w	8014ee6 <_vfiprintf_r+0x20e>
 8014da2:	2300      	movs	r3, #0
 8014da4:	f04f 32ff 	mov.w	r2, #4294967295
 8014da8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014dac:	f10a 0a01 	add.w	sl, sl, #1
 8014db0:	9304      	str	r3, [sp, #16]
 8014db2:	9307      	str	r3, [sp, #28]
 8014db4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014db8:	931a      	str	r3, [sp, #104]	; 0x68
 8014dba:	4654      	mov	r4, sl
 8014dbc:	2205      	movs	r2, #5
 8014dbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014dc2:	4858      	ldr	r0, [pc, #352]	; (8014f24 <_vfiprintf_r+0x24c>)
 8014dc4:	f7eb faa4 	bl	8000310 <memchr>
 8014dc8:	9a04      	ldr	r2, [sp, #16]
 8014dca:	b9d8      	cbnz	r0, 8014e04 <_vfiprintf_r+0x12c>
 8014dcc:	06d1      	lsls	r1, r2, #27
 8014dce:	bf44      	itt	mi
 8014dd0:	2320      	movmi	r3, #32
 8014dd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014dd6:	0713      	lsls	r3, r2, #28
 8014dd8:	bf44      	itt	mi
 8014dda:	232b      	movmi	r3, #43	; 0x2b
 8014ddc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014de0:	f89a 3000 	ldrb.w	r3, [sl]
 8014de4:	2b2a      	cmp	r3, #42	; 0x2a
 8014de6:	d015      	beq.n	8014e14 <_vfiprintf_r+0x13c>
 8014de8:	9a07      	ldr	r2, [sp, #28]
 8014dea:	4654      	mov	r4, sl
 8014dec:	2000      	movs	r0, #0
 8014dee:	f04f 0c0a 	mov.w	ip, #10
 8014df2:	4621      	mov	r1, r4
 8014df4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014df8:	3b30      	subs	r3, #48	; 0x30
 8014dfa:	2b09      	cmp	r3, #9
 8014dfc:	d94e      	bls.n	8014e9c <_vfiprintf_r+0x1c4>
 8014dfe:	b1b0      	cbz	r0, 8014e2e <_vfiprintf_r+0x156>
 8014e00:	9207      	str	r2, [sp, #28]
 8014e02:	e014      	b.n	8014e2e <_vfiprintf_r+0x156>
 8014e04:	eba0 0308 	sub.w	r3, r0, r8
 8014e08:	fa09 f303 	lsl.w	r3, r9, r3
 8014e0c:	4313      	orrs	r3, r2
 8014e0e:	9304      	str	r3, [sp, #16]
 8014e10:	46a2      	mov	sl, r4
 8014e12:	e7d2      	b.n	8014dba <_vfiprintf_r+0xe2>
 8014e14:	9b03      	ldr	r3, [sp, #12]
 8014e16:	1d19      	adds	r1, r3, #4
 8014e18:	681b      	ldr	r3, [r3, #0]
 8014e1a:	9103      	str	r1, [sp, #12]
 8014e1c:	2b00      	cmp	r3, #0
 8014e1e:	bfbb      	ittet	lt
 8014e20:	425b      	neglt	r3, r3
 8014e22:	f042 0202 	orrlt.w	r2, r2, #2
 8014e26:	9307      	strge	r3, [sp, #28]
 8014e28:	9307      	strlt	r3, [sp, #28]
 8014e2a:	bfb8      	it	lt
 8014e2c:	9204      	strlt	r2, [sp, #16]
 8014e2e:	7823      	ldrb	r3, [r4, #0]
 8014e30:	2b2e      	cmp	r3, #46	; 0x2e
 8014e32:	d10c      	bne.n	8014e4e <_vfiprintf_r+0x176>
 8014e34:	7863      	ldrb	r3, [r4, #1]
 8014e36:	2b2a      	cmp	r3, #42	; 0x2a
 8014e38:	d135      	bne.n	8014ea6 <_vfiprintf_r+0x1ce>
 8014e3a:	9b03      	ldr	r3, [sp, #12]
 8014e3c:	1d1a      	adds	r2, r3, #4
 8014e3e:	681b      	ldr	r3, [r3, #0]
 8014e40:	9203      	str	r2, [sp, #12]
 8014e42:	2b00      	cmp	r3, #0
 8014e44:	bfb8      	it	lt
 8014e46:	f04f 33ff 	movlt.w	r3, #4294967295
 8014e4a:	3402      	adds	r4, #2
 8014e4c:	9305      	str	r3, [sp, #20]
 8014e4e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8014f34 <_vfiprintf_r+0x25c>
 8014e52:	7821      	ldrb	r1, [r4, #0]
 8014e54:	2203      	movs	r2, #3
 8014e56:	4650      	mov	r0, sl
 8014e58:	f7eb fa5a 	bl	8000310 <memchr>
 8014e5c:	b140      	cbz	r0, 8014e70 <_vfiprintf_r+0x198>
 8014e5e:	2340      	movs	r3, #64	; 0x40
 8014e60:	eba0 000a 	sub.w	r0, r0, sl
 8014e64:	fa03 f000 	lsl.w	r0, r3, r0
 8014e68:	9b04      	ldr	r3, [sp, #16]
 8014e6a:	4303      	orrs	r3, r0
 8014e6c:	3401      	adds	r4, #1
 8014e6e:	9304      	str	r3, [sp, #16]
 8014e70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014e74:	482c      	ldr	r0, [pc, #176]	; (8014f28 <_vfiprintf_r+0x250>)
 8014e76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014e7a:	2206      	movs	r2, #6
 8014e7c:	f7eb fa48 	bl	8000310 <memchr>
 8014e80:	2800      	cmp	r0, #0
 8014e82:	d03f      	beq.n	8014f04 <_vfiprintf_r+0x22c>
 8014e84:	4b29      	ldr	r3, [pc, #164]	; (8014f2c <_vfiprintf_r+0x254>)
 8014e86:	bb1b      	cbnz	r3, 8014ed0 <_vfiprintf_r+0x1f8>
 8014e88:	9b03      	ldr	r3, [sp, #12]
 8014e8a:	3307      	adds	r3, #7
 8014e8c:	f023 0307 	bic.w	r3, r3, #7
 8014e90:	3308      	adds	r3, #8
 8014e92:	9303      	str	r3, [sp, #12]
 8014e94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014e96:	443b      	add	r3, r7
 8014e98:	9309      	str	r3, [sp, #36]	; 0x24
 8014e9a:	e767      	b.n	8014d6c <_vfiprintf_r+0x94>
 8014e9c:	fb0c 3202 	mla	r2, ip, r2, r3
 8014ea0:	460c      	mov	r4, r1
 8014ea2:	2001      	movs	r0, #1
 8014ea4:	e7a5      	b.n	8014df2 <_vfiprintf_r+0x11a>
 8014ea6:	2300      	movs	r3, #0
 8014ea8:	3401      	adds	r4, #1
 8014eaa:	9305      	str	r3, [sp, #20]
 8014eac:	4619      	mov	r1, r3
 8014eae:	f04f 0c0a 	mov.w	ip, #10
 8014eb2:	4620      	mov	r0, r4
 8014eb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014eb8:	3a30      	subs	r2, #48	; 0x30
 8014eba:	2a09      	cmp	r2, #9
 8014ebc:	d903      	bls.n	8014ec6 <_vfiprintf_r+0x1ee>
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d0c5      	beq.n	8014e4e <_vfiprintf_r+0x176>
 8014ec2:	9105      	str	r1, [sp, #20]
 8014ec4:	e7c3      	b.n	8014e4e <_vfiprintf_r+0x176>
 8014ec6:	fb0c 2101 	mla	r1, ip, r1, r2
 8014eca:	4604      	mov	r4, r0
 8014ecc:	2301      	movs	r3, #1
 8014ece:	e7f0      	b.n	8014eb2 <_vfiprintf_r+0x1da>
 8014ed0:	ab03      	add	r3, sp, #12
 8014ed2:	9300      	str	r3, [sp, #0]
 8014ed4:	462a      	mov	r2, r5
 8014ed6:	4b16      	ldr	r3, [pc, #88]	; (8014f30 <_vfiprintf_r+0x258>)
 8014ed8:	a904      	add	r1, sp, #16
 8014eda:	4630      	mov	r0, r6
 8014edc:	f3af 8000 	nop.w
 8014ee0:	4607      	mov	r7, r0
 8014ee2:	1c78      	adds	r0, r7, #1
 8014ee4:	d1d6      	bne.n	8014e94 <_vfiprintf_r+0x1bc>
 8014ee6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014ee8:	07d9      	lsls	r1, r3, #31
 8014eea:	d405      	bmi.n	8014ef8 <_vfiprintf_r+0x220>
 8014eec:	89ab      	ldrh	r3, [r5, #12]
 8014eee:	059a      	lsls	r2, r3, #22
 8014ef0:	d402      	bmi.n	8014ef8 <_vfiprintf_r+0x220>
 8014ef2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014ef4:	f7ff f8b2 	bl	801405c <__retarget_lock_release_recursive>
 8014ef8:	89ab      	ldrh	r3, [r5, #12]
 8014efa:	065b      	lsls	r3, r3, #25
 8014efc:	f53f af12 	bmi.w	8014d24 <_vfiprintf_r+0x4c>
 8014f00:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014f02:	e711      	b.n	8014d28 <_vfiprintf_r+0x50>
 8014f04:	ab03      	add	r3, sp, #12
 8014f06:	9300      	str	r3, [sp, #0]
 8014f08:	462a      	mov	r2, r5
 8014f0a:	4b09      	ldr	r3, [pc, #36]	; (8014f30 <_vfiprintf_r+0x258>)
 8014f0c:	a904      	add	r1, sp, #16
 8014f0e:	4630      	mov	r0, r6
 8014f10:	f000 f880 	bl	8015014 <_printf_i>
 8014f14:	e7e4      	b.n	8014ee0 <_vfiprintf_r+0x208>
 8014f16:	bf00      	nop
 8014f18:	08015e44 	.word	0x08015e44
 8014f1c:	08015e64 	.word	0x08015e64
 8014f20:	08015e24 	.word	0x08015e24
 8014f24:	08016039 	.word	0x08016039
 8014f28:	08016043 	.word	0x08016043
 8014f2c:	00000000 	.word	0x00000000
 8014f30:	08014cb3 	.word	0x08014cb3
 8014f34:	0801603f 	.word	0x0801603f

08014f38 <_printf_common>:
 8014f38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014f3c:	4616      	mov	r6, r2
 8014f3e:	4699      	mov	r9, r3
 8014f40:	688a      	ldr	r2, [r1, #8]
 8014f42:	690b      	ldr	r3, [r1, #16]
 8014f44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014f48:	4293      	cmp	r3, r2
 8014f4a:	bfb8      	it	lt
 8014f4c:	4613      	movlt	r3, r2
 8014f4e:	6033      	str	r3, [r6, #0]
 8014f50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014f54:	4607      	mov	r7, r0
 8014f56:	460c      	mov	r4, r1
 8014f58:	b10a      	cbz	r2, 8014f5e <_printf_common+0x26>
 8014f5a:	3301      	adds	r3, #1
 8014f5c:	6033      	str	r3, [r6, #0]
 8014f5e:	6823      	ldr	r3, [r4, #0]
 8014f60:	0699      	lsls	r1, r3, #26
 8014f62:	bf42      	ittt	mi
 8014f64:	6833      	ldrmi	r3, [r6, #0]
 8014f66:	3302      	addmi	r3, #2
 8014f68:	6033      	strmi	r3, [r6, #0]
 8014f6a:	6825      	ldr	r5, [r4, #0]
 8014f6c:	f015 0506 	ands.w	r5, r5, #6
 8014f70:	d106      	bne.n	8014f80 <_printf_common+0x48>
 8014f72:	f104 0a19 	add.w	sl, r4, #25
 8014f76:	68e3      	ldr	r3, [r4, #12]
 8014f78:	6832      	ldr	r2, [r6, #0]
 8014f7a:	1a9b      	subs	r3, r3, r2
 8014f7c:	42ab      	cmp	r3, r5
 8014f7e:	dc26      	bgt.n	8014fce <_printf_common+0x96>
 8014f80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014f84:	1e13      	subs	r3, r2, #0
 8014f86:	6822      	ldr	r2, [r4, #0]
 8014f88:	bf18      	it	ne
 8014f8a:	2301      	movne	r3, #1
 8014f8c:	0692      	lsls	r2, r2, #26
 8014f8e:	d42b      	bmi.n	8014fe8 <_printf_common+0xb0>
 8014f90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014f94:	4649      	mov	r1, r9
 8014f96:	4638      	mov	r0, r7
 8014f98:	47c0      	blx	r8
 8014f9a:	3001      	adds	r0, #1
 8014f9c:	d01e      	beq.n	8014fdc <_printf_common+0xa4>
 8014f9e:	6823      	ldr	r3, [r4, #0]
 8014fa0:	68e5      	ldr	r5, [r4, #12]
 8014fa2:	6832      	ldr	r2, [r6, #0]
 8014fa4:	f003 0306 	and.w	r3, r3, #6
 8014fa8:	2b04      	cmp	r3, #4
 8014faa:	bf08      	it	eq
 8014fac:	1aad      	subeq	r5, r5, r2
 8014fae:	68a3      	ldr	r3, [r4, #8]
 8014fb0:	6922      	ldr	r2, [r4, #16]
 8014fb2:	bf0c      	ite	eq
 8014fb4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014fb8:	2500      	movne	r5, #0
 8014fba:	4293      	cmp	r3, r2
 8014fbc:	bfc4      	itt	gt
 8014fbe:	1a9b      	subgt	r3, r3, r2
 8014fc0:	18ed      	addgt	r5, r5, r3
 8014fc2:	2600      	movs	r6, #0
 8014fc4:	341a      	adds	r4, #26
 8014fc6:	42b5      	cmp	r5, r6
 8014fc8:	d11a      	bne.n	8015000 <_printf_common+0xc8>
 8014fca:	2000      	movs	r0, #0
 8014fcc:	e008      	b.n	8014fe0 <_printf_common+0xa8>
 8014fce:	2301      	movs	r3, #1
 8014fd0:	4652      	mov	r2, sl
 8014fd2:	4649      	mov	r1, r9
 8014fd4:	4638      	mov	r0, r7
 8014fd6:	47c0      	blx	r8
 8014fd8:	3001      	adds	r0, #1
 8014fda:	d103      	bne.n	8014fe4 <_printf_common+0xac>
 8014fdc:	f04f 30ff 	mov.w	r0, #4294967295
 8014fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014fe4:	3501      	adds	r5, #1
 8014fe6:	e7c6      	b.n	8014f76 <_printf_common+0x3e>
 8014fe8:	18e1      	adds	r1, r4, r3
 8014fea:	1c5a      	adds	r2, r3, #1
 8014fec:	2030      	movs	r0, #48	; 0x30
 8014fee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014ff2:	4422      	add	r2, r4
 8014ff4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014ff8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014ffc:	3302      	adds	r3, #2
 8014ffe:	e7c7      	b.n	8014f90 <_printf_common+0x58>
 8015000:	2301      	movs	r3, #1
 8015002:	4622      	mov	r2, r4
 8015004:	4649      	mov	r1, r9
 8015006:	4638      	mov	r0, r7
 8015008:	47c0      	blx	r8
 801500a:	3001      	adds	r0, #1
 801500c:	d0e6      	beq.n	8014fdc <_printf_common+0xa4>
 801500e:	3601      	adds	r6, #1
 8015010:	e7d9      	b.n	8014fc6 <_printf_common+0x8e>
	...

08015014 <_printf_i>:
 8015014:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015018:	7e0f      	ldrb	r7, [r1, #24]
 801501a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801501c:	2f78      	cmp	r7, #120	; 0x78
 801501e:	4691      	mov	r9, r2
 8015020:	4680      	mov	r8, r0
 8015022:	460c      	mov	r4, r1
 8015024:	469a      	mov	sl, r3
 8015026:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801502a:	d807      	bhi.n	801503c <_printf_i+0x28>
 801502c:	2f62      	cmp	r7, #98	; 0x62
 801502e:	d80a      	bhi.n	8015046 <_printf_i+0x32>
 8015030:	2f00      	cmp	r7, #0
 8015032:	f000 80d8 	beq.w	80151e6 <_printf_i+0x1d2>
 8015036:	2f58      	cmp	r7, #88	; 0x58
 8015038:	f000 80a3 	beq.w	8015182 <_printf_i+0x16e>
 801503c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015040:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8015044:	e03a      	b.n	80150bc <_printf_i+0xa8>
 8015046:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801504a:	2b15      	cmp	r3, #21
 801504c:	d8f6      	bhi.n	801503c <_printf_i+0x28>
 801504e:	a101      	add	r1, pc, #4	; (adr r1, 8015054 <_printf_i+0x40>)
 8015050:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8015054:	080150ad 	.word	0x080150ad
 8015058:	080150c1 	.word	0x080150c1
 801505c:	0801503d 	.word	0x0801503d
 8015060:	0801503d 	.word	0x0801503d
 8015064:	0801503d 	.word	0x0801503d
 8015068:	0801503d 	.word	0x0801503d
 801506c:	080150c1 	.word	0x080150c1
 8015070:	0801503d 	.word	0x0801503d
 8015074:	0801503d 	.word	0x0801503d
 8015078:	0801503d 	.word	0x0801503d
 801507c:	0801503d 	.word	0x0801503d
 8015080:	080151cd 	.word	0x080151cd
 8015084:	080150f1 	.word	0x080150f1
 8015088:	080151af 	.word	0x080151af
 801508c:	0801503d 	.word	0x0801503d
 8015090:	0801503d 	.word	0x0801503d
 8015094:	080151ef 	.word	0x080151ef
 8015098:	0801503d 	.word	0x0801503d
 801509c:	080150f1 	.word	0x080150f1
 80150a0:	0801503d 	.word	0x0801503d
 80150a4:	0801503d 	.word	0x0801503d
 80150a8:	080151b7 	.word	0x080151b7
 80150ac:	682b      	ldr	r3, [r5, #0]
 80150ae:	1d1a      	adds	r2, r3, #4
 80150b0:	681b      	ldr	r3, [r3, #0]
 80150b2:	602a      	str	r2, [r5, #0]
 80150b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80150b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80150bc:	2301      	movs	r3, #1
 80150be:	e0a3      	b.n	8015208 <_printf_i+0x1f4>
 80150c0:	6820      	ldr	r0, [r4, #0]
 80150c2:	6829      	ldr	r1, [r5, #0]
 80150c4:	0606      	lsls	r6, r0, #24
 80150c6:	f101 0304 	add.w	r3, r1, #4
 80150ca:	d50a      	bpl.n	80150e2 <_printf_i+0xce>
 80150cc:	680e      	ldr	r6, [r1, #0]
 80150ce:	602b      	str	r3, [r5, #0]
 80150d0:	2e00      	cmp	r6, #0
 80150d2:	da03      	bge.n	80150dc <_printf_i+0xc8>
 80150d4:	232d      	movs	r3, #45	; 0x2d
 80150d6:	4276      	negs	r6, r6
 80150d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80150dc:	485e      	ldr	r0, [pc, #376]	; (8015258 <_printf_i+0x244>)
 80150de:	230a      	movs	r3, #10
 80150e0:	e019      	b.n	8015116 <_printf_i+0x102>
 80150e2:	680e      	ldr	r6, [r1, #0]
 80150e4:	602b      	str	r3, [r5, #0]
 80150e6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80150ea:	bf18      	it	ne
 80150ec:	b236      	sxthne	r6, r6
 80150ee:	e7ef      	b.n	80150d0 <_printf_i+0xbc>
 80150f0:	682b      	ldr	r3, [r5, #0]
 80150f2:	6820      	ldr	r0, [r4, #0]
 80150f4:	1d19      	adds	r1, r3, #4
 80150f6:	6029      	str	r1, [r5, #0]
 80150f8:	0601      	lsls	r1, r0, #24
 80150fa:	d501      	bpl.n	8015100 <_printf_i+0xec>
 80150fc:	681e      	ldr	r6, [r3, #0]
 80150fe:	e002      	b.n	8015106 <_printf_i+0xf2>
 8015100:	0646      	lsls	r6, r0, #25
 8015102:	d5fb      	bpl.n	80150fc <_printf_i+0xe8>
 8015104:	881e      	ldrh	r6, [r3, #0]
 8015106:	4854      	ldr	r0, [pc, #336]	; (8015258 <_printf_i+0x244>)
 8015108:	2f6f      	cmp	r7, #111	; 0x6f
 801510a:	bf0c      	ite	eq
 801510c:	2308      	moveq	r3, #8
 801510e:	230a      	movne	r3, #10
 8015110:	2100      	movs	r1, #0
 8015112:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8015116:	6865      	ldr	r5, [r4, #4]
 8015118:	60a5      	str	r5, [r4, #8]
 801511a:	2d00      	cmp	r5, #0
 801511c:	bfa2      	ittt	ge
 801511e:	6821      	ldrge	r1, [r4, #0]
 8015120:	f021 0104 	bicge.w	r1, r1, #4
 8015124:	6021      	strge	r1, [r4, #0]
 8015126:	b90e      	cbnz	r6, 801512c <_printf_i+0x118>
 8015128:	2d00      	cmp	r5, #0
 801512a:	d04d      	beq.n	80151c8 <_printf_i+0x1b4>
 801512c:	4615      	mov	r5, r2
 801512e:	fbb6 f1f3 	udiv	r1, r6, r3
 8015132:	fb03 6711 	mls	r7, r3, r1, r6
 8015136:	5dc7      	ldrb	r7, [r0, r7]
 8015138:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801513c:	4637      	mov	r7, r6
 801513e:	42bb      	cmp	r3, r7
 8015140:	460e      	mov	r6, r1
 8015142:	d9f4      	bls.n	801512e <_printf_i+0x11a>
 8015144:	2b08      	cmp	r3, #8
 8015146:	d10b      	bne.n	8015160 <_printf_i+0x14c>
 8015148:	6823      	ldr	r3, [r4, #0]
 801514a:	07de      	lsls	r6, r3, #31
 801514c:	d508      	bpl.n	8015160 <_printf_i+0x14c>
 801514e:	6923      	ldr	r3, [r4, #16]
 8015150:	6861      	ldr	r1, [r4, #4]
 8015152:	4299      	cmp	r1, r3
 8015154:	bfde      	ittt	le
 8015156:	2330      	movle	r3, #48	; 0x30
 8015158:	f805 3c01 	strble.w	r3, [r5, #-1]
 801515c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8015160:	1b52      	subs	r2, r2, r5
 8015162:	6122      	str	r2, [r4, #16]
 8015164:	f8cd a000 	str.w	sl, [sp]
 8015168:	464b      	mov	r3, r9
 801516a:	aa03      	add	r2, sp, #12
 801516c:	4621      	mov	r1, r4
 801516e:	4640      	mov	r0, r8
 8015170:	f7ff fee2 	bl	8014f38 <_printf_common>
 8015174:	3001      	adds	r0, #1
 8015176:	d14c      	bne.n	8015212 <_printf_i+0x1fe>
 8015178:	f04f 30ff 	mov.w	r0, #4294967295
 801517c:	b004      	add	sp, #16
 801517e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8015182:	4835      	ldr	r0, [pc, #212]	; (8015258 <_printf_i+0x244>)
 8015184:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8015188:	6829      	ldr	r1, [r5, #0]
 801518a:	6823      	ldr	r3, [r4, #0]
 801518c:	f851 6b04 	ldr.w	r6, [r1], #4
 8015190:	6029      	str	r1, [r5, #0]
 8015192:	061d      	lsls	r5, r3, #24
 8015194:	d514      	bpl.n	80151c0 <_printf_i+0x1ac>
 8015196:	07df      	lsls	r7, r3, #31
 8015198:	bf44      	itt	mi
 801519a:	f043 0320 	orrmi.w	r3, r3, #32
 801519e:	6023      	strmi	r3, [r4, #0]
 80151a0:	b91e      	cbnz	r6, 80151aa <_printf_i+0x196>
 80151a2:	6823      	ldr	r3, [r4, #0]
 80151a4:	f023 0320 	bic.w	r3, r3, #32
 80151a8:	6023      	str	r3, [r4, #0]
 80151aa:	2310      	movs	r3, #16
 80151ac:	e7b0      	b.n	8015110 <_printf_i+0xfc>
 80151ae:	6823      	ldr	r3, [r4, #0]
 80151b0:	f043 0320 	orr.w	r3, r3, #32
 80151b4:	6023      	str	r3, [r4, #0]
 80151b6:	2378      	movs	r3, #120	; 0x78
 80151b8:	4828      	ldr	r0, [pc, #160]	; (801525c <_printf_i+0x248>)
 80151ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80151be:	e7e3      	b.n	8015188 <_printf_i+0x174>
 80151c0:	0659      	lsls	r1, r3, #25
 80151c2:	bf48      	it	mi
 80151c4:	b2b6      	uxthmi	r6, r6
 80151c6:	e7e6      	b.n	8015196 <_printf_i+0x182>
 80151c8:	4615      	mov	r5, r2
 80151ca:	e7bb      	b.n	8015144 <_printf_i+0x130>
 80151cc:	682b      	ldr	r3, [r5, #0]
 80151ce:	6826      	ldr	r6, [r4, #0]
 80151d0:	6961      	ldr	r1, [r4, #20]
 80151d2:	1d18      	adds	r0, r3, #4
 80151d4:	6028      	str	r0, [r5, #0]
 80151d6:	0635      	lsls	r5, r6, #24
 80151d8:	681b      	ldr	r3, [r3, #0]
 80151da:	d501      	bpl.n	80151e0 <_printf_i+0x1cc>
 80151dc:	6019      	str	r1, [r3, #0]
 80151de:	e002      	b.n	80151e6 <_printf_i+0x1d2>
 80151e0:	0670      	lsls	r0, r6, #25
 80151e2:	d5fb      	bpl.n	80151dc <_printf_i+0x1c8>
 80151e4:	8019      	strh	r1, [r3, #0]
 80151e6:	2300      	movs	r3, #0
 80151e8:	6123      	str	r3, [r4, #16]
 80151ea:	4615      	mov	r5, r2
 80151ec:	e7ba      	b.n	8015164 <_printf_i+0x150>
 80151ee:	682b      	ldr	r3, [r5, #0]
 80151f0:	1d1a      	adds	r2, r3, #4
 80151f2:	602a      	str	r2, [r5, #0]
 80151f4:	681d      	ldr	r5, [r3, #0]
 80151f6:	6862      	ldr	r2, [r4, #4]
 80151f8:	2100      	movs	r1, #0
 80151fa:	4628      	mov	r0, r5
 80151fc:	f7eb f888 	bl	8000310 <memchr>
 8015200:	b108      	cbz	r0, 8015206 <_printf_i+0x1f2>
 8015202:	1b40      	subs	r0, r0, r5
 8015204:	6060      	str	r0, [r4, #4]
 8015206:	6863      	ldr	r3, [r4, #4]
 8015208:	6123      	str	r3, [r4, #16]
 801520a:	2300      	movs	r3, #0
 801520c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015210:	e7a8      	b.n	8015164 <_printf_i+0x150>
 8015212:	6923      	ldr	r3, [r4, #16]
 8015214:	462a      	mov	r2, r5
 8015216:	4649      	mov	r1, r9
 8015218:	4640      	mov	r0, r8
 801521a:	47d0      	blx	sl
 801521c:	3001      	adds	r0, #1
 801521e:	d0ab      	beq.n	8015178 <_printf_i+0x164>
 8015220:	6823      	ldr	r3, [r4, #0]
 8015222:	079b      	lsls	r3, r3, #30
 8015224:	d413      	bmi.n	801524e <_printf_i+0x23a>
 8015226:	68e0      	ldr	r0, [r4, #12]
 8015228:	9b03      	ldr	r3, [sp, #12]
 801522a:	4298      	cmp	r0, r3
 801522c:	bfb8      	it	lt
 801522e:	4618      	movlt	r0, r3
 8015230:	e7a4      	b.n	801517c <_printf_i+0x168>
 8015232:	2301      	movs	r3, #1
 8015234:	4632      	mov	r2, r6
 8015236:	4649      	mov	r1, r9
 8015238:	4640      	mov	r0, r8
 801523a:	47d0      	blx	sl
 801523c:	3001      	adds	r0, #1
 801523e:	d09b      	beq.n	8015178 <_printf_i+0x164>
 8015240:	3501      	adds	r5, #1
 8015242:	68e3      	ldr	r3, [r4, #12]
 8015244:	9903      	ldr	r1, [sp, #12]
 8015246:	1a5b      	subs	r3, r3, r1
 8015248:	42ab      	cmp	r3, r5
 801524a:	dcf2      	bgt.n	8015232 <_printf_i+0x21e>
 801524c:	e7eb      	b.n	8015226 <_printf_i+0x212>
 801524e:	2500      	movs	r5, #0
 8015250:	f104 0619 	add.w	r6, r4, #25
 8015254:	e7f5      	b.n	8015242 <_printf_i+0x22e>
 8015256:	bf00      	nop
 8015258:	0801604a 	.word	0x0801604a
 801525c:	0801605b 	.word	0x0801605b

08015260 <_read_r>:
 8015260:	b538      	push	{r3, r4, r5, lr}
 8015262:	4d07      	ldr	r5, [pc, #28]	; (8015280 <_read_r+0x20>)
 8015264:	4604      	mov	r4, r0
 8015266:	4608      	mov	r0, r1
 8015268:	4611      	mov	r1, r2
 801526a:	2200      	movs	r2, #0
 801526c:	602a      	str	r2, [r5, #0]
 801526e:	461a      	mov	r2, r3
 8015270:	f7f3 fcea 	bl	8008c48 <_read>
 8015274:	1c43      	adds	r3, r0, #1
 8015276:	d102      	bne.n	801527e <_read_r+0x1e>
 8015278:	682b      	ldr	r3, [r5, #0]
 801527a:	b103      	cbz	r3, 801527e <_read_r+0x1e>
 801527c:	6023      	str	r3, [r4, #0]
 801527e:	bd38      	pop	{r3, r4, r5, pc}
 8015280:	24002350 	.word	0x24002350

08015284 <abort>:
 8015284:	b508      	push	{r3, lr}
 8015286:	2006      	movs	r0, #6
 8015288:	f000 f87e 	bl	8015388 <raise>
 801528c:	2001      	movs	r0, #1
 801528e:	f7f3 fcd1 	bl	8008c34 <_exit>
	...

08015294 <_fstat_r>:
 8015294:	b538      	push	{r3, r4, r5, lr}
 8015296:	4d07      	ldr	r5, [pc, #28]	; (80152b4 <_fstat_r+0x20>)
 8015298:	2300      	movs	r3, #0
 801529a:	4604      	mov	r4, r0
 801529c:	4608      	mov	r0, r1
 801529e:	4611      	mov	r1, r2
 80152a0:	602b      	str	r3, [r5, #0]
 80152a2:	f7f3 fd16 	bl	8008cd2 <_fstat>
 80152a6:	1c43      	adds	r3, r0, #1
 80152a8:	d102      	bne.n	80152b0 <_fstat_r+0x1c>
 80152aa:	682b      	ldr	r3, [r5, #0]
 80152ac:	b103      	cbz	r3, 80152b0 <_fstat_r+0x1c>
 80152ae:	6023      	str	r3, [r4, #0]
 80152b0:	bd38      	pop	{r3, r4, r5, pc}
 80152b2:	bf00      	nop
 80152b4:	24002350 	.word	0x24002350

080152b8 <_isatty_r>:
 80152b8:	b538      	push	{r3, r4, r5, lr}
 80152ba:	4d06      	ldr	r5, [pc, #24]	; (80152d4 <_isatty_r+0x1c>)
 80152bc:	2300      	movs	r3, #0
 80152be:	4604      	mov	r4, r0
 80152c0:	4608      	mov	r0, r1
 80152c2:	602b      	str	r3, [r5, #0]
 80152c4:	f7f3 fd15 	bl	8008cf2 <_isatty>
 80152c8:	1c43      	adds	r3, r0, #1
 80152ca:	d102      	bne.n	80152d2 <_isatty_r+0x1a>
 80152cc:	682b      	ldr	r3, [r5, #0]
 80152ce:	b103      	cbz	r3, 80152d2 <_isatty_r+0x1a>
 80152d0:	6023      	str	r3, [r4, #0]
 80152d2:	bd38      	pop	{r3, r4, r5, pc}
 80152d4:	24002350 	.word	0x24002350

080152d8 <_realloc_r>:
 80152d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80152dc:	4680      	mov	r8, r0
 80152de:	4614      	mov	r4, r2
 80152e0:	460e      	mov	r6, r1
 80152e2:	b921      	cbnz	r1, 80152ee <_realloc_r+0x16>
 80152e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80152e8:	4611      	mov	r1, r2
 80152ea:	f7fe bf7b 	b.w	80141e4 <_malloc_r>
 80152ee:	b92a      	cbnz	r2, 80152fc <_realloc_r+0x24>
 80152f0:	f7fe ff0c 	bl	801410c <_free_r>
 80152f4:	4625      	mov	r5, r4
 80152f6:	4628      	mov	r0, r5
 80152f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80152fc:	f000 f860 	bl	80153c0 <_malloc_usable_size_r>
 8015300:	4284      	cmp	r4, r0
 8015302:	4607      	mov	r7, r0
 8015304:	d802      	bhi.n	801530c <_realloc_r+0x34>
 8015306:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801530a:	d812      	bhi.n	8015332 <_realloc_r+0x5a>
 801530c:	4621      	mov	r1, r4
 801530e:	4640      	mov	r0, r8
 8015310:	f7fe ff68 	bl	80141e4 <_malloc_r>
 8015314:	4605      	mov	r5, r0
 8015316:	2800      	cmp	r0, #0
 8015318:	d0ed      	beq.n	80152f6 <_realloc_r+0x1e>
 801531a:	42bc      	cmp	r4, r7
 801531c:	4622      	mov	r2, r4
 801531e:	4631      	mov	r1, r6
 8015320:	bf28      	it	cs
 8015322:	463a      	movcs	r2, r7
 8015324:	f7fe feac 	bl	8014080 <memcpy>
 8015328:	4631      	mov	r1, r6
 801532a:	4640      	mov	r0, r8
 801532c:	f7fe feee 	bl	801410c <_free_r>
 8015330:	e7e1      	b.n	80152f6 <_realloc_r+0x1e>
 8015332:	4635      	mov	r5, r6
 8015334:	e7df      	b.n	80152f6 <_realloc_r+0x1e>

08015336 <_raise_r>:
 8015336:	291f      	cmp	r1, #31
 8015338:	b538      	push	{r3, r4, r5, lr}
 801533a:	4604      	mov	r4, r0
 801533c:	460d      	mov	r5, r1
 801533e:	d904      	bls.n	801534a <_raise_r+0x14>
 8015340:	2316      	movs	r3, #22
 8015342:	6003      	str	r3, [r0, #0]
 8015344:	f04f 30ff 	mov.w	r0, #4294967295
 8015348:	bd38      	pop	{r3, r4, r5, pc}
 801534a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801534c:	b112      	cbz	r2, 8015354 <_raise_r+0x1e>
 801534e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015352:	b94b      	cbnz	r3, 8015368 <_raise_r+0x32>
 8015354:	4620      	mov	r0, r4
 8015356:	f000 f831 	bl	80153bc <_getpid_r>
 801535a:	462a      	mov	r2, r5
 801535c:	4601      	mov	r1, r0
 801535e:	4620      	mov	r0, r4
 8015360:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015364:	f000 b818 	b.w	8015398 <_kill_r>
 8015368:	2b01      	cmp	r3, #1
 801536a:	d00a      	beq.n	8015382 <_raise_r+0x4c>
 801536c:	1c59      	adds	r1, r3, #1
 801536e:	d103      	bne.n	8015378 <_raise_r+0x42>
 8015370:	2316      	movs	r3, #22
 8015372:	6003      	str	r3, [r0, #0]
 8015374:	2001      	movs	r0, #1
 8015376:	e7e7      	b.n	8015348 <_raise_r+0x12>
 8015378:	2400      	movs	r4, #0
 801537a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801537e:	4628      	mov	r0, r5
 8015380:	4798      	blx	r3
 8015382:	2000      	movs	r0, #0
 8015384:	e7e0      	b.n	8015348 <_raise_r+0x12>
	...

08015388 <raise>:
 8015388:	4b02      	ldr	r3, [pc, #8]	; (8015394 <raise+0xc>)
 801538a:	4601      	mov	r1, r0
 801538c:	6818      	ldr	r0, [r3, #0]
 801538e:	f7ff bfd2 	b.w	8015336 <_raise_r>
 8015392:	bf00      	nop
 8015394:	240004d0 	.word	0x240004d0

08015398 <_kill_r>:
 8015398:	b538      	push	{r3, r4, r5, lr}
 801539a:	4d07      	ldr	r5, [pc, #28]	; (80153b8 <_kill_r+0x20>)
 801539c:	2300      	movs	r3, #0
 801539e:	4604      	mov	r4, r0
 80153a0:	4608      	mov	r0, r1
 80153a2:	4611      	mov	r1, r2
 80153a4:	602b      	str	r3, [r5, #0]
 80153a6:	f7f3 fc35 	bl	8008c14 <_kill>
 80153aa:	1c43      	adds	r3, r0, #1
 80153ac:	d102      	bne.n	80153b4 <_kill_r+0x1c>
 80153ae:	682b      	ldr	r3, [r5, #0]
 80153b0:	b103      	cbz	r3, 80153b4 <_kill_r+0x1c>
 80153b2:	6023      	str	r3, [r4, #0]
 80153b4:	bd38      	pop	{r3, r4, r5, pc}
 80153b6:	bf00      	nop
 80153b8:	24002350 	.word	0x24002350

080153bc <_getpid_r>:
 80153bc:	f7f3 bc22 	b.w	8008c04 <_getpid>

080153c0 <_malloc_usable_size_r>:
 80153c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80153c4:	1f18      	subs	r0, r3, #4
 80153c6:	2b00      	cmp	r3, #0
 80153c8:	bfbc      	itt	lt
 80153ca:	580b      	ldrlt	r3, [r1, r0]
 80153cc:	18c0      	addlt	r0, r0, r3
 80153ce:	4770      	bx	lr

080153d0 <_init>:
 80153d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153d2:	bf00      	nop
 80153d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80153d6:	bc08      	pop	{r3}
 80153d8:	469e      	mov	lr, r3
 80153da:	4770      	bx	lr

080153dc <_fini>:
 80153dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80153de:	bf00      	nop
 80153e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80153e2:	bc08      	pop	{r3}
 80153e4:	469e      	mov	lr, r3
 80153e6:	4770      	bx	lr
