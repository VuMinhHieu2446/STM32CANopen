
loop_back.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a48  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08004ce0  08004ce0  00014ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004d4c  08004d4c  00014d4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004d50  08004d50  00014d50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08004d54  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000114  24000010  08004d64  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  24000124  08004d64  00020124  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000d823  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 00001914  00000000  00000000  0002d861  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000a60  00000000  00000000  0002f178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000009a8  00000000  00000000  0002fbd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000347d1  00000000  00000000  00030580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000c231  00000000  00000000  00064d51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    001530ab  00000000  00000000  00070f82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001c402d  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002b44  00000000  00000000  001c4080  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004cc8 	.word	0x08004cc8

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08004cc8 	.word	0x08004cc8

080002d8 <HAL_FDCAN_RxFifo0Callback>:
FDCAN_RxHeaderTypeDef   RxHeader;
uint8_t               TxData[8];
uint8_t               RxData[8];

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 80002e2:	683b      	ldr	r3, [r7, #0]
 80002e4:	f003 0301 	and.w	r3, r3, #1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d014      	beq.n	8000316 <HAL_FDCAN_RxFifo0Callback+0x3e>
  {
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80002ec:	4b0c      	ldr	r3, [pc, #48]	; (8000320 <HAL_FDCAN_RxFifo0Callback+0x48>)
 80002ee:	4a0d      	ldr	r2, [pc, #52]	; (8000324 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 80002f0:	2140      	movs	r1, #64	; 0x40
 80002f2:	6878      	ldr	r0, [r7, #4]
 80002f4:	f001 f8be 	bl	8001474 <HAL_FDCAN_GetRxMessage>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <HAL_FDCAN_RxFifo0Callback+0x2a>
    {
    /* Reception Error */
    Error_Handler();
 80002fe:	f000 fa83 	bl	8000808 <Error_Handler>
    }
    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000302:	2200      	movs	r2, #0
 8000304:	2101      	movs	r1, #1
 8000306:	6878      	ldr	r0, [r7, #4]
 8000308:	f001 fa22 	bl	8001750 <HAL_FDCAN_ActivateNotification>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <HAL_FDCAN_RxFifo0Callback+0x3e>
    {
      /* Notification Error */
      Error_Handler();
 8000312:	f000 fa79 	bl	8000808 <Error_Handler>
    }
  }
}
 8000316:	bf00      	nop
 8000318:	3708      	adds	r7, #8
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	24000118 	.word	0x24000118
 8000324:	240000f0 	.word	0x240000f0

08000328 <CANopenSendSDO>:
 * @param: rw: 0 to read (x40), 1 to write (x20)
 * @reval: HAL_Status
 */

HAL_StatusTypeDef CANopenSendSDO(uint8_t id, uint8_t command_byte, uint32_t index, uint32_t data, uint8_t len, uint8_t rw)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	b086      	sub	sp, #24
 800032c:	af00      	add	r7, sp, #0
 800032e:	60ba      	str	r2, [r7, #8]
 8000330:	607b      	str	r3, [r7, #4]
 8000332:	4603      	mov	r3, r0
 8000334:	73fb      	strb	r3, [r7, #15]
 8000336:	460b      	mov	r3, r1
 8000338:	73bb      	strb	r3, [r7, #14]
	uint8_t txbuf[8];
	TxHeader.DataLength = FDCAN_DLC_BYTES_8;	// so byte data truyen di la 8
 800033a:	4b23      	ldr	r3, [pc, #140]	; (80003c8 <CANopenSendSDO+0xa0>)
 800033c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000340:	60da      	str	r2, [r3, #12]
	TxHeader.IdType = FDCAN_STANDARD_ID;		// standard ID
 8000342:	4b21      	ldr	r3, [pc, #132]	; (80003c8 <CANopenSendSDO+0xa0>)
 8000344:	2200      	movs	r2, #0
 8000346:	605a      	str	r2, [r3, #4]
	TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 8000348:	4b1f      	ldr	r3, [pc, #124]	; (80003c8 <CANopenSendSDO+0xa0>)
 800034a:	2200      	movs	r2, #0
 800034c:	615a      	str	r2, [r3, #20]
	TxHeader.FDFormat = FDCAN_CLASSIC_CAN;		//choose transmit frame
 800034e:	4b1e      	ldr	r3, [pc, #120]	; (80003c8 <CANopenSendSDO+0xa0>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]
	TxHeader.MessageMarker = 0;
 8000354:	4b1c      	ldr	r3, [pc, #112]	; (80003c8 <CANopenSendSDO+0xa0>)
 8000356:	2200      	movs	r2, #0
 8000358:	621a      	str	r2, [r3, #32]
	TxHeader.Identifier = 0x600+id;				//Specific ID
 800035a:	7bfb      	ldrb	r3, [r7, #15]
 800035c:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8000360:	461a      	mov	r2, r3
 8000362:	4b19      	ldr	r3, [pc, #100]	; (80003c8 <CANopenSendSDO+0xa0>)
 8000364:	601a      	str	r2, [r3, #0]
	TxHeader.TxFrameType = FDCAN_DATA_FRAME;				//Data_frame
 8000366:	4b18      	ldr	r3, [pc, #96]	; (80003c8 <CANopenSendSDO+0xa0>)
 8000368:	2200      	movs	r2, #0
 800036a:	609a      	str	r2, [r3, #8]
	TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800036c:	4b16      	ldr	r3, [pc, #88]	; (80003c8 <CANopenSendSDO+0xa0>)
 800036e:	2200      	movs	r2, #0
 8000370:	61da      	str	r2, [r3, #28]
	TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000372:	4b15      	ldr	r3, [pc, #84]	; (80003c8 <CANopenSendSDO+0xa0>)
 8000374:	2200      	movs	r2, #0
 8000376:	611a      	str	r2, [r3, #16]

	txbuf[0] = command_byte;
 8000378:	7bbb      	ldrb	r3, [r7, #14]
 800037a:	743b      	strb	r3, [r7, #16]
	txbuf[1] = (index>>8)&0xff;		//index
 800037c:	68bb      	ldr	r3, [r7, #8]
 800037e:	0a1b      	lsrs	r3, r3, #8
 8000380:	b2db      	uxtb	r3, r3
 8000382:	747b      	strb	r3, [r7, #17]
	txbuf[2] = (index>>16)&0xff;	//index
 8000384:	68bb      	ldr	r3, [r7, #8]
 8000386:	0c1b      	lsrs	r3, r3, #16
 8000388:	b2db      	uxtb	r3, r3
 800038a:	74bb      	strb	r3, [r7, #18]
	txbuf[3] = index&0xff;			//sub_index
 800038c:	68bb      	ldr	r3, [r7, #8]
 800038e:	b2db      	uxtb	r3, r3
 8000390:	74fb      	strb	r3, [r7, #19]

	txbuf[4] = data & 0xff;
 8000392:	687b      	ldr	r3, [r7, #4]
 8000394:	b2db      	uxtb	r3, r3
 8000396:	753b      	strb	r3, [r7, #20]
	txbuf[5] = (data>>8)&0xff;
 8000398:	687b      	ldr	r3, [r7, #4]
 800039a:	0a1b      	lsrs	r3, r3, #8
 800039c:	b2db      	uxtb	r3, r3
 800039e:	757b      	strb	r3, [r7, #21]
	txbuf[6] = (data>>16)&0xff;
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	0c1b      	lsrs	r3, r3, #16
 80003a4:	b2db      	uxtb	r3, r3
 80003a6:	75bb      	strb	r3, [r7, #22]
	txbuf[7] = (data>>24)&0xff;
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	0e1b      	lsrs	r3, r3, #24
 80003ac:	b2db      	uxtb	r3, r3
 80003ae:	75fb      	strb	r3, [r7, #23]
	return HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, txbuf);
 80003b0:	f107 0310 	add.w	r3, r7, #16
 80003b4:	461a      	mov	r2, r3
 80003b6:	4904      	ldr	r1, [pc, #16]	; (80003c8 <CANopenSendSDO+0xa0>)
 80003b8:	4804      	ldr	r0, [pc, #16]	; (80003cc <CANopenSendSDO+0xa4>)
 80003ba:	f001 f800 	bl	80013be <HAL_FDCAN_AddMessageToTxFifoQ>
 80003be:	4603      	mov	r3, r0
}
 80003c0:	4618      	mov	r0, r3
 80003c2:	3718      	adds	r7, #24
 80003c4:	46bd      	mov	sp, r7
 80003c6:	bd80      	pop	{r7, pc}
 80003c8:	240000cc 	.word	0x240000cc
 80003cc:	2400002c 	.word	0x2400002c

080003d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003d0:	b580      	push	{r7, lr}
 80003d2:	b082      	sub	sp, #8
 80003d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003d6:	f000 fba1 	bl	8000b1c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003da:	f000 f8bf 	bl	800055c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003de:	f000 f9bd 	bl	800075c <MX_GPIO_Init>
  MX_FDCAN1_Init();
 80003e2:	f000 f939 	bl	8000658 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)
 80003e6:	4858      	ldr	r0, [pc, #352]	; (8000548 <main+0x178>)
 80003e8:	f000 ffbe 	bl	8001368 <HAL_FDCAN_Start>
 80003ec:	4603      	mov	r3, r0
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d001      	beq.n	80003f6 <main+0x26>
 {
	  Error_Handler();
 80003f2:	f000 fa09 	bl	8000808 <Error_Handler>
 }
 if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 80003f6:	2200      	movs	r2, #0
 80003f8:	2101      	movs	r1, #1
 80003fa:	4853      	ldr	r0, [pc, #332]	; (8000548 <main+0x178>)
 80003fc:	f001 f9a8 	bl	8001750 <HAL_FDCAN_ActivateNotification>
 8000400:	4603      	mov	r3, r0
 8000402:	2b00      	cmp	r3, #0
 8000404:	d001      	beq.n	800040a <main+0x3a>
 {
   /* Notification Error */
   Error_Handler();
 8000406:	f000 f9ff 	bl	8000808 <Error_Handler>
 }
 //Switch On Disabled (basic state)
 CANopenSendSDO(1,0x2B, 0x604000, 0x00, 4, 1);
 800040a:	2301      	movs	r3, #1
 800040c:	9301      	str	r3, [sp, #4]
 800040e:	2304      	movs	r3, #4
 8000410:	9300      	str	r3, [sp, #0]
 8000412:	2300      	movs	r3, #0
 8000414:	4a4d      	ldr	r2, [pc, #308]	; (800054c <main+0x17c>)
 8000416:	212b      	movs	r1, #43	; 0x2b
 8000418:	2001      	movs	r0, #1
 800041a:	f7ff ff85 	bl	8000328 <CANopenSendSDO>
 HAL_Delay(100);
 800041e:	2064      	movs	r0, #100	; 0x64
 8000420:	f000 fc0e 	bl	8000c40 <HAL_Delay>
// //Request of the status word
//  CANopenSendSDO(1,0x40, 0x604100, 0x00, 4, 1);
//   HAL_Delay(5000);

// Ready to Switch On
 CANopenSendSDO(1,0x2B, 0x604000, 0x06, 4, 1);
 8000424:	2301      	movs	r3, #1
 8000426:	9301      	str	r3, [sp, #4]
 8000428:	2304      	movs	r3, #4
 800042a:	9300      	str	r3, [sp, #0]
 800042c:	2306      	movs	r3, #6
 800042e:	4a47      	ldr	r2, [pc, #284]	; (800054c <main+0x17c>)
 8000430:	212b      	movs	r1, #43	; 0x2b
 8000432:	2001      	movs	r0, #1
 8000434:	f7ff ff78 	bl	8000328 <CANopenSendSDO>
 HAL_Delay(100);
 8000438:	2064      	movs	r0, #100	; 0x64
 800043a:	f000 fc01 	bl	8000c40 <HAL_Delay>
// //Request of the status word
//  CANopenSendSDO(1,0x40, 0x604100, 0x00, 4, 1);
//   HAL_Delay(5000);

 //Switch On (power drive on)
 CANopenSendSDO(1,0x2B, 0x604000, 0x07, 4, 1);
 800043e:	2301      	movs	r3, #1
 8000440:	9301      	str	r3, [sp, #4]
 8000442:	2304      	movs	r3, #4
 8000444:	9300      	str	r3, [sp, #0]
 8000446:	2307      	movs	r3, #7
 8000448:	4a40      	ldr	r2, [pc, #256]	; (800054c <main+0x17c>)
 800044a:	212b      	movs	r1, #43	; 0x2b
 800044c:	2001      	movs	r0, #1
 800044e:	f7ff ff6b 	bl	8000328 <CANopenSendSDO>
 HAL_Delay(100);
 8000452:	2064      	movs	r0, #100	; 0x64
 8000454:	f000 fbf4 	bl	8000c40 <HAL_Delay>

 //Operation Enabled
 CANopenSendSDO(1,0x2B, 0x604000, 0x0F, 4, 1);			// dong co da chuyen sang mode run duoc roi anh a
 8000458:	2301      	movs	r3, #1
 800045a:	9301      	str	r3, [sp, #4]
 800045c:	2304      	movs	r3, #4
 800045e:	9300      	str	r3, [sp, #0]
 8000460:	230f      	movs	r3, #15
 8000462:	4a3a      	ldr	r2, [pc, #232]	; (800054c <main+0x17c>)
 8000464:	212b      	movs	r1, #43	; 0x2b
 8000466:	2001      	movs	r0, #1
 8000468:	f7ff ff5e 	bl	8000328 <CANopenSendSDO>
 HAL_Delay(100);
 800046c:	2064      	movs	r0, #100	; 0x64
 800046e:	f000 fbe7 	bl	8000c40 <HAL_Delay>
//// Reset of the start bit
// CANopenSendSDO(1,0x2F, 0x604000, 0x0F, 4, 1);
// HAL_Delay(100);

//  Mode: Torque
  CANopenSendSDO(1,0x2F, 0x606000, 0x04, 4, 1);
 8000472:	2301      	movs	r3, #1
 8000474:	9301      	str	r3, [sp, #4]
 8000476:	2304      	movs	r3, #4
 8000478:	9300      	str	r3, [sp, #0]
 800047a:	2304      	movs	r3, #4
 800047c:	4a34      	ldr	r2, [pc, #208]	; (8000550 <main+0x180>)
 800047e:	212f      	movs	r1, #47	; 0x2f
 8000480:	2001      	movs	r0, #1
 8000482:	f7ff ff51 	bl	8000328 <CANopenSendSDO>
  HAL_Delay(100);
 8000486:	2064      	movs	r0, #100	; 0x64
 8000488:	f000 fbda 	bl	8000c40 <HAL_Delay>

//  Target torque
  CANopenSendSDO(1,0x2B, 0x607100, 0x150, 4, 1);
 800048c:	2301      	movs	r3, #1
 800048e:	9301      	str	r3, [sp, #4]
 8000490:	2304      	movs	r3, #4
 8000492:	9300      	str	r3, [sp, #0]
 8000494:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000498:	4a2e      	ldr	r2, [pc, #184]	; (8000554 <main+0x184>)
 800049a:	212b      	movs	r1, #43	; 0x2b
 800049c:	2001      	movs	r0, #1
 800049e:	f7ff ff43 	bl	8000328 <CANopenSendSDO>
  HAL_Delay(100);
 80004a2:	2064      	movs	r0, #100	; 0x64
 80004a4:	f000 fbcc 	bl	8000c40 <HAL_Delay>

// Start of a movement
  CANopenSendSDO(1,0x2F, 0x604000, 0x1F, 4, 1);
 80004a8:	2301      	movs	r3, #1
 80004aa:	9301      	str	r3, [sp, #4]
 80004ac:	2304      	movs	r3, #4
 80004ae:	9300      	str	r3, [sp, #0]
 80004b0:	231f      	movs	r3, #31
 80004b2:	4a26      	ldr	r2, [pc, #152]	; (800054c <main+0x17c>)
 80004b4:	212f      	movs	r1, #47	; 0x2f
 80004b6:	2001      	movs	r0, #1
 80004b8:	f7ff ff36 	bl	8000328 <CANopenSendSDO>
  HAL_Delay(100);
 80004bc:	2064      	movs	r0, #100	; 0x64
 80004be:	f000 fbbf 	bl	8000c40 <HAL_Delay>

// Reset of the start bit
  CANopenSendSDO(1,0x2F, 0x604000, 0x0F, 4, 1);
 80004c2:	2301      	movs	r3, #1
 80004c4:	9301      	str	r3, [sp, #4]
 80004c6:	2304      	movs	r3, #4
 80004c8:	9300      	str	r3, [sp, #0]
 80004ca:	230f      	movs	r3, #15
 80004cc:	4a1f      	ldr	r2, [pc, #124]	; (800054c <main+0x17c>)
 80004ce:	212f      	movs	r1, #47	; 0x2f
 80004d0:	2001      	movs	r0, #1
 80004d2:	f7ff ff29 	bl	8000328 <CANopenSendSDO>
  HAL_Delay(100);
 80004d6:	2064      	movs	r0, #100	; 0x64
 80004d8:	f000 fbb2 	bl	8000c40 <HAL_Delay>

  HAL_Delay(5000);
 80004dc:	f241 3088 	movw	r0, #5000	; 0x1388
 80004e0:	f000 fbae 	bl	8000c40 <HAL_Delay>

//  Target torque
  CANopenSendSDO(1,0x2B, 0x607100, 0x0, 4, 1);
 80004e4:	2301      	movs	r3, #1
 80004e6:	9301      	str	r3, [sp, #4]
 80004e8:	2304      	movs	r3, #4
 80004ea:	9300      	str	r3, [sp, #0]
 80004ec:	2300      	movs	r3, #0
 80004ee:	4a19      	ldr	r2, [pc, #100]	; (8000554 <main+0x184>)
 80004f0:	212b      	movs	r1, #43	; 0x2b
 80004f2:	2001      	movs	r0, #1
 80004f4:	f7ff ff18 	bl	8000328 <CANopenSendSDO>
  HAL_Delay(100);
 80004f8:	2064      	movs	r0, #100	; 0x64
 80004fa:	f000 fba1 	bl	8000c40 <HAL_Delay>

// Start of a movement
	CANopenSendSDO(1,0x2F, 0x604000, 0x1F, 4, 1);
 80004fe:	2301      	movs	r3, #1
 8000500:	9301      	str	r3, [sp, #4]
 8000502:	2304      	movs	r3, #4
 8000504:	9300      	str	r3, [sp, #0]
 8000506:	231f      	movs	r3, #31
 8000508:	4a10      	ldr	r2, [pc, #64]	; (800054c <main+0x17c>)
 800050a:	212f      	movs	r1, #47	; 0x2f
 800050c:	2001      	movs	r0, #1
 800050e:	f7ff ff0b 	bl	8000328 <CANopenSendSDO>
	HAL_Delay(100);
 8000512:	2064      	movs	r0, #100	; 0x64
 8000514:	f000 fb94 	bl	8000c40 <HAL_Delay>

// Reset of the start bit
	CANopenSendSDO(1,0x2F, 0x604000, 0x0F, 4, 1);
 8000518:	2301      	movs	r3, #1
 800051a:	9301      	str	r3, [sp, #4]
 800051c:	2304      	movs	r3, #4
 800051e:	9300      	str	r3, [sp, #0]
 8000520:	230f      	movs	r3, #15
 8000522:	4a0a      	ldr	r2, [pc, #40]	; (800054c <main+0x17c>)
 8000524:	212f      	movs	r1, #47	; 0x2f
 8000526:	2001      	movs	r0, #1
 8000528:	f7ff fefe 	bl	8000328 <CANopenSendSDO>
	HAL_Delay(100);
 800052c:	2064      	movs	r0, #100	; 0x64
 800052e:	f000 fb87 	bl	8000c40 <HAL_Delay>
//	  TxData[5] = 0x6F;
//	  TxData[6] = 0x61;
//	  TxData[7] = 0x64;
//	  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData);
//	  CANopenSendSDO(1,0x22, 0x60FF00, 0xFFFF, 0, 1);
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_8);
 8000532:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000536:	4808      	ldr	r0, [pc, #32]	; (8000558 <main+0x188>)
 8000538:	f002 f85b 	bl	80025f2 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 800053c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000540:	f000 fb7e 	bl	8000c40 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_8);
 8000544:	e7f5      	b.n	8000532 <main+0x162>
 8000546:	bf00      	nop
 8000548:	2400002c 	.word	0x2400002c
 800054c:	00604000 	.word	0x00604000
 8000550:	00606000 	.word	0x00606000
 8000554:	00607100 	.word	0x00607100
 8000558:	58020c00 	.word	0x58020c00

0800055c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b09c      	sub	sp, #112	; 0x70
 8000560:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000562:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000566:	224c      	movs	r2, #76	; 0x4c
 8000568:	2100      	movs	r1, #0
 800056a:	4618      	mov	r0, r3
 800056c:	f004 fba4 	bl	8004cb8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	2220      	movs	r2, #32
 8000574:	2100      	movs	r1, #0
 8000576:	4618      	mov	r0, r3
 8000578:	f004 fb9e 	bl	8004cb8 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800057c:	2002      	movs	r0, #2
 800057e:	f002 f853 	bl	8002628 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000582:	2300      	movs	r3, #0
 8000584:	603b      	str	r3, [r7, #0]
 8000586:	4b32      	ldr	r3, [pc, #200]	; (8000650 <SystemClock_Config+0xf4>)
 8000588:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800058a:	4a31      	ldr	r2, [pc, #196]	; (8000650 <SystemClock_Config+0xf4>)
 800058c:	f023 0301 	bic.w	r3, r3, #1
 8000590:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000592:	4b2f      	ldr	r3, [pc, #188]	; (8000650 <SystemClock_Config+0xf4>)
 8000594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000596:	f003 0301 	and.w	r3, r3, #1
 800059a:	603b      	str	r3, [r7, #0]
 800059c:	4b2d      	ldr	r3, [pc, #180]	; (8000654 <SystemClock_Config+0xf8>)
 800059e:	699b      	ldr	r3, [r3, #24]
 80005a0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005a4:	4a2b      	ldr	r2, [pc, #172]	; (8000654 <SystemClock_Config+0xf8>)
 80005a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005aa:	6193      	str	r3, [r2, #24]
 80005ac:	4b29      	ldr	r3, [pc, #164]	; (8000654 <SystemClock_Config+0xf8>)
 80005ae:	699b      	ldr	r3, [r3, #24]
 80005b0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005b4:	603b      	str	r3, [r7, #0]
 80005b6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80005b8:	bf00      	nop
 80005ba:	4b26      	ldr	r3, [pc, #152]	; (8000654 <SystemClock_Config+0xf8>)
 80005bc:	699b      	ldr	r3, [r3, #24]
 80005be:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80005c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80005c6:	d1f8      	bne.n	80005ba <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c8:	2302      	movs	r3, #2
 80005ca:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80005cc:	2301      	movs	r3, #1
 80005ce:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d0:	2340      	movs	r3, #64	; 0x40
 80005d2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d4:	2302      	movs	r3, #2
 80005d6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d8:	2300      	movs	r3, #0
 80005da:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005dc:	2304      	movs	r3, #4
 80005de:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 80005e0:	2309      	movs	r3, #9
 80005e2:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005e8:	2303      	movs	r3, #3
 80005ea:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 80005ec:	2302      	movs	r3, #2
 80005ee:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 80005f0:	230c      	movs	r3, #12
 80005f2:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 80005f4:	2302      	movs	r3, #2
 80005f6:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 80005f8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80005fc:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000602:	4618      	mov	r0, r3
 8000604:	f002 f84a 	bl	800269c <HAL_RCC_OscConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800060e:	f000 f8fb 	bl	8000808 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000612:	233f      	movs	r3, #63	; 0x3f
 8000614:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000616:	2300      	movs	r3, #0
 8000618:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800061e:	2300      	movs	r3, #0
 8000620:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000622:	2300      	movs	r3, #0
 8000624:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 800062a:	2300      	movs	r3, #0
 800062c:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 800062e:	2300      	movs	r3, #0
 8000630:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000632:	1d3b      	adds	r3, r7, #4
 8000634:	2101      	movs	r1, #1
 8000636:	4618      	mov	r0, r3
 8000638:	f002 fc8a 	bl	8002f50 <HAL_RCC_ClockConfig>
 800063c:	4603      	mov	r3, r0
 800063e:	2b00      	cmp	r3, #0
 8000640:	d001      	beq.n	8000646 <SystemClock_Config+0xea>
  {
    Error_Handler();
 8000642:	f000 f8e1 	bl	8000808 <Error_Handler>
  }
}
 8000646:	bf00      	nop
 8000648:	3770      	adds	r7, #112	; 0x70
 800064a:	46bd      	mov	sp, r7
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	58000400 	.word	0x58000400
 8000654:	58024800 	.word	0x58024800

08000658 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	b088      	sub	sp, #32
 800065c:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 800065e:	4b3d      	ldr	r3, [pc, #244]	; (8000754 <MX_FDCAN1_Init+0xfc>)
 8000660:	4a3d      	ldr	r2, [pc, #244]	; (8000758 <MX_FDCAN1_Init+0x100>)
 8000662:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8000664:	4b3b      	ldr	r3, [pc, #236]	; (8000754 <MX_FDCAN1_Init+0xfc>)
 8000666:	f44f 7280 	mov.w	r2, #256	; 0x100
 800066a:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800066c:	4b39      	ldr	r3, [pc, #228]	; (8000754 <MX_FDCAN1_Init+0xfc>)
 800066e:	2200      	movs	r2, #0
 8000670:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 8000672:	4b38      	ldr	r3, [pc, #224]	; (8000754 <MX_FDCAN1_Init+0xfc>)
 8000674:	2201      	movs	r2, #1
 8000676:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000678:	4b36      	ldr	r3, [pc, #216]	; (8000754 <MX_FDCAN1_Init+0xfc>)
 800067a:	2200      	movs	r2, #0
 800067c:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800067e:	4b35      	ldr	r3, [pc, #212]	; (8000754 <MX_FDCAN1_Init+0xfc>)
 8000680:	2200      	movs	r2, #0
 8000682:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000684:	4b33      	ldr	r3, [pc, #204]	; (8000754 <MX_FDCAN1_Init+0xfc>)
 8000686:	2201      	movs	r2, #1
 8000688:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 7;
 800068a:	4b32      	ldr	r3, [pc, #200]	; (8000754 <MX_FDCAN1_Init+0xfc>)
 800068c:	2207      	movs	r2, #7
 800068e:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 42;
 8000690:	4b30      	ldr	r3, [pc, #192]	; (8000754 <MX_FDCAN1_Init+0xfc>)
 8000692:	222a      	movs	r2, #42	; 0x2a
 8000694:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 7;
 8000696:	4b2f      	ldr	r3, [pc, #188]	; (8000754 <MX_FDCAN1_Init+0xfc>)
 8000698:	2207      	movs	r2, #7
 800069a:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 10;
 800069c:	4b2d      	ldr	r3, [pc, #180]	; (8000754 <MX_FDCAN1_Init+0xfc>)
 800069e:	220a      	movs	r2, #10
 80006a0:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 80006a2:	4b2c      	ldr	r3, [pc, #176]	; (8000754 <MX_FDCAN1_Init+0xfc>)
 80006a4:	2201      	movs	r2, #1
 80006a6:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 3;
 80006a8:	4b2a      	ldr	r3, [pc, #168]	; (8000754 <MX_FDCAN1_Init+0xfc>)
 80006aa:	2203      	movs	r2, #3
 80006ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 80006ae:	4b29      	ldr	r3, [pc, #164]	; (8000754 <MX_FDCAN1_Init+0xfc>)
 80006b0:	2201      	movs	r2, #1
 80006b2:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 80006b4:	4b27      	ldr	r3, [pc, #156]	; (8000754 <MX_FDCAN1_Init+0xfc>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 80006ba:	4b26      	ldr	r3, [pc, #152]	; (8000754 <MX_FDCAN1_Init+0xfc>)
 80006bc:	2201      	movs	r2, #1
 80006be:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 80006c0:	4b24      	ldr	r3, [pc, #144]	; (8000754 <MX_FDCAN1_Init+0xfc>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 64;
 80006c6:	4b23      	ldr	r3, [pc, #140]	; (8000754 <MX_FDCAN1_Init+0xfc>)
 80006c8:	2240      	movs	r2, #64	; 0x40
 80006ca:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 80006cc:	4b21      	ldr	r3, [pc, #132]	; (8000754 <MX_FDCAN1_Init+0xfc>)
 80006ce:	2204      	movs	r2, #4
 80006d0:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 80006d2:	4b20      	ldr	r3, [pc, #128]	; (8000754 <MX_FDCAN1_Init+0xfc>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 80006d8:	4b1e      	ldr	r3, [pc, #120]	; (8000754 <MX_FDCAN1_Init+0xfc>)
 80006da:	2204      	movs	r2, #4
 80006dc:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 80006de:	4b1d      	ldr	r3, [pc, #116]	; (8000754 <MX_FDCAN1_Init+0xfc>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 80006e4:	4b1b      	ldr	r3, [pc, #108]	; (8000754 <MX_FDCAN1_Init+0xfc>)
 80006e6:	2204      	movs	r2, #4
 80006e8:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 80006ea:	4b1a      	ldr	r3, [pc, #104]	; (8000754 <MX_FDCAN1_Init+0xfc>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 80006f0:	4b18      	ldr	r3, [pc, #96]	; (8000754 <MX_FDCAN1_Init+0xfc>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 80006f6:	4b17      	ldr	r3, [pc, #92]	; (8000754 <MX_FDCAN1_Init+0xfc>)
 80006f8:	2201      	movs	r2, #1
 80006fa:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 80006fc:	4b15      	ldr	r3, [pc, #84]	; (8000754 <MX_FDCAN1_Init+0xfc>)
 80006fe:	2200      	movs	r2, #0
 8000700:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 8000702:	4b14      	ldr	r3, [pc, #80]	; (8000754 <MX_FDCAN1_Init+0xfc>)
 8000704:	2204      	movs	r2, #4
 8000706:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000708:	4812      	ldr	r0, [pc, #72]	; (8000754 <MX_FDCAN1_Init+0xfc>)
 800070a:	f000 fbd9 	bl	8000ec0 <HAL_FDCAN_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_FDCAN1_Init+0xc0>
  {
    Error_Handler();
 8000714:	f000 f878 	bl	8000808 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
FDCAN_FilterTypeDef sFilterConfig;

  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 8000718:	2300      	movs	r3, #0
 800071a:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 800071c:	2300      	movs	r3, #0
 800071e:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 8000720:	2302      	movs	r3, #2
 8000722:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 8000724:	2301      	movs	r3, #1
 8000726:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x581;
 8000728:	f240 5381 	movw	r3, #1409	; 0x581
 800072c:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x7FF;
 800072e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000732:	617b      	str	r3, [r7, #20]
  sFilterConfig.RxBufferIndex = 0;
 8000734:	2300      	movs	r3, #0
 8000736:	61bb      	str	r3, [r7, #24]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 8000738:	463b      	mov	r3, r7
 800073a:	4619      	mov	r1, r3
 800073c:	4805      	ldr	r0, [pc, #20]	; (8000754 <MX_FDCAN1_Init+0xfc>)
 800073e:	f000 fd9d 	bl	800127c <HAL_FDCAN_ConfigFilter>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <MX_FDCAN1_Init+0xf4>
  {
    /* Filter configuration Error */
    Error_Handler();
 8000748:	f000 f85e 	bl	8000808 <Error_Handler>
  	}
  }
  **/
  /* USER CODE END FDCAN1_Init 2 */

}
 800074c:	bf00      	nop
 800074e:	3720      	adds	r7, #32
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	2400002c 	.word	0x2400002c
 8000758:	4000a000 	.word	0x4000a000

0800075c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	b088      	sub	sp, #32
 8000760:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000762:	f107 030c 	add.w	r3, r7, #12
 8000766:	2200      	movs	r2, #0
 8000768:	601a      	str	r2, [r3, #0]
 800076a:	605a      	str	r2, [r3, #4]
 800076c:	609a      	str	r2, [r3, #8]
 800076e:	60da      	str	r2, [r3, #12]
 8000770:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000772:	4b23      	ldr	r3, [pc, #140]	; (8000800 <MX_GPIO_Init+0xa4>)
 8000774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000778:	4a21      	ldr	r2, [pc, #132]	; (8000800 <MX_GPIO_Init+0xa4>)
 800077a:	f043 0304 	orr.w	r3, r3, #4
 800077e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000782:	4b1f      	ldr	r3, [pc, #124]	; (8000800 <MX_GPIO_Init+0xa4>)
 8000784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000788:	f003 0304 	and.w	r3, r3, #4
 800078c:	60bb      	str	r3, [r7, #8]
 800078e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000790:	4b1b      	ldr	r3, [pc, #108]	; (8000800 <MX_GPIO_Init+0xa4>)
 8000792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000796:	4a1a      	ldr	r2, [pc, #104]	; (8000800 <MX_GPIO_Init+0xa4>)
 8000798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800079c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007a0:	4b17      	ldr	r3, [pc, #92]	; (8000800 <MX_GPIO_Init+0xa4>)
 80007a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007ae:	4b14      	ldr	r3, [pc, #80]	; (8000800 <MX_GPIO_Init+0xa4>)
 80007b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007b4:	4a12      	ldr	r2, [pc, #72]	; (8000800 <MX_GPIO_Init+0xa4>)
 80007b6:	f043 0308 	orr.w	r3, r3, #8
 80007ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80007be:	4b10      	ldr	r3, [pc, #64]	; (8000800 <MX_GPIO_Init+0xa4>)
 80007c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80007c4:	f003 0308 	and.w	r3, r3, #8
 80007c8:	603b      	str	r3, [r7, #0]
 80007ca:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 80007cc:	2200      	movs	r2, #0
 80007ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80007d2:	480c      	ldr	r0, [pc, #48]	; (8000804 <MX_GPIO_Init+0xa8>)
 80007d4:	f001 fef4 	bl	80025c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80007d8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80007dc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007de:	2301      	movs	r3, #1
 80007e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007e6:	2300      	movs	r3, #0
 80007e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007ea:	f107 030c 	add.w	r3, r7, #12
 80007ee:	4619      	mov	r1, r3
 80007f0:	4804      	ldr	r0, [pc, #16]	; (8000804 <MX_GPIO_Init+0xa8>)
 80007f2:	f001 fd35 	bl	8002260 <HAL_GPIO_Init>

}
 80007f6:	bf00      	nop
 80007f8:	3720      	adds	r7, #32
 80007fa:	46bd      	mov	sp, r7
 80007fc:	bd80      	pop	{r7, pc}
 80007fe:	bf00      	nop
 8000800:	58024400 	.word	0x58024400
 8000804:	58020c00 	.word	0x58020c00

08000808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800080c:	b672      	cpsid	i
}
 800080e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000810:	e7fe      	b.n	8000810 <Error_Handler+0x8>
	...

08000814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000814:	b480      	push	{r7}
 8000816:	b083      	sub	sp, #12
 8000818:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081a:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <HAL_MspInit+0x30>)
 800081c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000820:	4a08      	ldr	r2, [pc, #32]	; (8000844 <HAL_MspInit+0x30>)
 8000822:	f043 0302 	orr.w	r3, r3, #2
 8000826:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800082a:	4b06      	ldr	r3, [pc, #24]	; (8000844 <HAL_MspInit+0x30>)
 800082c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000830:	f003 0302 	and.w	r3, r3, #2
 8000834:	607b      	str	r3, [r7, #4]
 8000836:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	58024400 	.word	0x58024400

08000848 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	b0ba      	sub	sp, #232	; 0xe8
 800084c:	af00      	add	r7, sp, #0
 800084e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000850:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000854:	2200      	movs	r2, #0
 8000856:	601a      	str	r2, [r3, #0]
 8000858:	605a      	str	r2, [r3, #4]
 800085a:	609a      	str	r2, [r3, #8]
 800085c:	60da      	str	r2, [r3, #12]
 800085e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000860:	f107 0310 	add.w	r3, r7, #16
 8000864:	22c0      	movs	r2, #192	; 0xc0
 8000866:	2100      	movs	r1, #0
 8000868:	4618      	mov	r0, r3
 800086a:	f004 fa25 	bl	8004cb8 <memset>
  if(hfdcan->Instance==FDCAN1)
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	4a2f      	ldr	r2, [pc, #188]	; (8000930 <HAL_FDCAN_MspInit+0xe8>)
 8000874:	4293      	cmp	r3, r2
 8000876:	d156      	bne.n	8000926 <HAL_FDCAN_MspInit+0xde>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000878:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800087c:	f04f 0300 	mov.w	r3, #0
 8000880:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000884:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000888:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800088c:	f107 0310 	add.w	r3, r7, #16
 8000890:	4618      	mov	r0, r3
 8000892:	f002 fe8d 	bl	80035b0 <HAL_RCCEx_PeriphCLKConfig>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 800089c:	f7ff ffb4 	bl	8000808 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80008a0:	4b24      	ldr	r3, [pc, #144]	; (8000934 <HAL_FDCAN_MspInit+0xec>)
 80008a2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80008a6:	4a23      	ldr	r2, [pc, #140]	; (8000934 <HAL_FDCAN_MspInit+0xec>)
 80008a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008ac:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 80008b0:	4b20      	ldr	r3, [pc, #128]	; (8000934 <HAL_FDCAN_MspInit+0xec>)
 80008b2:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 80008b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008ba:	60fb      	str	r3, [r7, #12]
 80008bc:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80008be:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <HAL_FDCAN_MspInit+0xec>)
 80008c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c4:	4a1b      	ldr	r2, [pc, #108]	; (8000934 <HAL_FDCAN_MspInit+0xec>)
 80008c6:	f043 0308 	orr.w	r3, r3, #8
 80008ca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008ce:	4b19      	ldr	r3, [pc, #100]	; (8000934 <HAL_FDCAN_MspInit+0xec>)
 80008d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008d4:	f003 0308 	and.w	r3, r3, #8
 80008d8:	60bb      	str	r3, [r7, #8]
 80008da:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008dc:	2303      	movs	r3, #3
 80008de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008e2:	2302      	movs	r3, #2
 80008e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	2300      	movs	r3, #0
 80008ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008ee:	2300      	movs	r3, #0
 80008f0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 80008f4:	2309      	movs	r3, #9
 80008f6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008fa:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80008fe:	4619      	mov	r1, r3
 8000900:	480d      	ldr	r0, [pc, #52]	; (8000938 <HAL_FDCAN_MspInit+0xf0>)
 8000902:	f001 fcad 	bl	8002260 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	2100      	movs	r1, #0
 800090a:	2013      	movs	r0, #19
 800090c:	f000 faa3 	bl	8000e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000910:	2013      	movs	r0, #19
 8000912:	f000 faba 	bl	8000e8a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	2100      	movs	r1, #0
 800091a:	2015      	movs	r0, #21
 800091c:	f000 fa9b 	bl	8000e56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000920:	2015      	movs	r0, #21
 8000922:	f000 fab2 	bl	8000e8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000926:	bf00      	nop
 8000928:	37e8      	adds	r7, #232	; 0xe8
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	4000a000 	.word	0x4000a000
 8000934:	58024400 	.word	0x58024400
 8000938:	58020c00 	.word	0x58020c00

0800093c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000940:	e7fe      	b.n	8000940 <NMI_Handler+0x4>

08000942 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000942:	b480      	push	{r7}
 8000944:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000946:	e7fe      	b.n	8000946 <HardFault_Handler+0x4>

08000948 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800094c:	e7fe      	b.n	800094c <MemManage_Handler+0x4>

0800094e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800094e:	b480      	push	{r7}
 8000950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000952:	e7fe      	b.n	8000952 <BusFault_Handler+0x4>

08000954 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000958:	e7fe      	b.n	8000958 <UsageFault_Handler+0x4>

0800095a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800095a:	b480      	push	{r7}
 800095c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800095e:	bf00      	nop
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr

08000976 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800097a:	bf00      	nop
 800097c:	46bd      	mov	sp, r7
 800097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000982:	4770      	bx	lr

08000984 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000988:	f000 f93a 	bl	8000c00 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800098c:	bf00      	nop
 800098e:	bd80      	pop	{r7, pc}

08000990 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000994:	4802      	ldr	r0, [pc, #8]	; (80009a0 <FDCAN1_IT0_IRQHandler+0x10>)
 8000996:	f000 ff55 	bl	8001844 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 800099a:	bf00      	nop
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	2400002c 	.word	0x2400002c

080009a4 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80009a8:	4802      	ldr	r0, [pc, #8]	; (80009b4 <FDCAN1_IT1_IRQHandler+0x10>)
 80009aa:	f000 ff4b 	bl	8001844 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	2400002c 	.word	0x2400002c

080009b8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80009bc:	4b37      	ldr	r3, [pc, #220]	; (8000a9c <SystemInit+0xe4>)
 80009be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009c2:	4a36      	ldr	r2, [pc, #216]	; (8000a9c <SystemInit+0xe4>)
 80009c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80009cc:	4b34      	ldr	r3, [pc, #208]	; (8000aa0 <SystemInit+0xe8>)
 80009ce:	681b      	ldr	r3, [r3, #0]
 80009d0:	f003 030f 	and.w	r3, r3, #15
 80009d4:	2b06      	cmp	r3, #6
 80009d6:	d807      	bhi.n	80009e8 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80009d8:	4b31      	ldr	r3, [pc, #196]	; (8000aa0 <SystemInit+0xe8>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f023 030f 	bic.w	r3, r3, #15
 80009e0:	4a2f      	ldr	r2, [pc, #188]	; (8000aa0 <SystemInit+0xe8>)
 80009e2:	f043 0307 	orr.w	r3, r3, #7
 80009e6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80009e8:	4b2e      	ldr	r3, [pc, #184]	; (8000aa4 <SystemInit+0xec>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a2d      	ldr	r2, [pc, #180]	; (8000aa4 <SystemInit+0xec>)
 80009ee:	f043 0301 	orr.w	r3, r3, #1
 80009f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80009f4:	4b2b      	ldr	r3, [pc, #172]	; (8000aa4 <SystemInit+0xec>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80009fa:	4b2a      	ldr	r3, [pc, #168]	; (8000aa4 <SystemInit+0xec>)
 80009fc:	681a      	ldr	r2, [r3, #0]
 80009fe:	4929      	ldr	r1, [pc, #164]	; (8000aa4 <SystemInit+0xec>)
 8000a00:	4b29      	ldr	r3, [pc, #164]	; (8000aa8 <SystemInit+0xf0>)
 8000a02:	4013      	ands	r3, r2
 8000a04:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000a06:	4b26      	ldr	r3, [pc, #152]	; (8000aa0 <SystemInit+0xe8>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	f003 0308 	and.w	r3, r3, #8
 8000a0e:	2b00      	cmp	r3, #0
 8000a10:	d007      	beq.n	8000a22 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000a12:	4b23      	ldr	r3, [pc, #140]	; (8000aa0 <SystemInit+0xe8>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	f023 030f 	bic.w	r3, r3, #15
 8000a1a:	4a21      	ldr	r2, [pc, #132]	; (8000aa0 <SystemInit+0xe8>)
 8000a1c:	f043 0307 	orr.w	r3, r3, #7
 8000a20:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000a22:	4b20      	ldr	r3, [pc, #128]	; (8000aa4 <SystemInit+0xec>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000a28:	4b1e      	ldr	r3, [pc, #120]	; (8000aa4 <SystemInit+0xec>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000a2e:	4b1d      	ldr	r3, [pc, #116]	; (8000aa4 <SystemInit+0xec>)
 8000a30:	2200      	movs	r2, #0
 8000a32:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000a34:	4b1b      	ldr	r3, [pc, #108]	; (8000aa4 <SystemInit+0xec>)
 8000a36:	4a1d      	ldr	r2, [pc, #116]	; (8000aac <SystemInit+0xf4>)
 8000a38:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000a3a:	4b1a      	ldr	r3, [pc, #104]	; (8000aa4 <SystemInit+0xec>)
 8000a3c:	4a1c      	ldr	r2, [pc, #112]	; (8000ab0 <SystemInit+0xf8>)
 8000a3e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000a40:	4b18      	ldr	r3, [pc, #96]	; (8000aa4 <SystemInit+0xec>)
 8000a42:	4a1c      	ldr	r2, [pc, #112]	; (8000ab4 <SystemInit+0xfc>)
 8000a44:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000a46:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <SystemInit+0xec>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000a4c:	4b15      	ldr	r3, [pc, #84]	; (8000aa4 <SystemInit+0xec>)
 8000a4e:	4a19      	ldr	r2, [pc, #100]	; (8000ab4 <SystemInit+0xfc>)
 8000a50:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000a52:	4b14      	ldr	r3, [pc, #80]	; (8000aa4 <SystemInit+0xec>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000a58:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <SystemInit+0xec>)
 8000a5a:	4a16      	ldr	r2, [pc, #88]	; (8000ab4 <SystemInit+0xfc>)
 8000a5c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000a5e:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <SystemInit+0xec>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a64:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <SystemInit+0xec>)
 8000a66:	681b      	ldr	r3, [r3, #0]
 8000a68:	4a0e      	ldr	r2, [pc, #56]	; (8000aa4 <SystemInit+0xec>)
 8000a6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a6e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000a70:	4b0c      	ldr	r3, [pc, #48]	; (8000aa4 <SystemInit+0xec>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000a76:	4b10      	ldr	r3, [pc, #64]	; (8000ab8 <SystemInit+0x100>)
 8000a78:	681a      	ldr	r2, [r3, #0]
 8000a7a:	4b10      	ldr	r3, [pc, #64]	; (8000abc <SystemInit+0x104>)
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a82:	d202      	bcs.n	8000a8a <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000a84:	4b0e      	ldr	r3, [pc, #56]	; (8000ac0 <SystemInit+0x108>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <SystemInit+0x10c>)
 8000a8c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000a90:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000a92:	bf00      	nop
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	e000ed00 	.word	0xe000ed00
 8000aa0:	52002000 	.word	0x52002000
 8000aa4:	58024400 	.word	0x58024400
 8000aa8:	eaf6ed7f 	.word	0xeaf6ed7f
 8000aac:	02020200 	.word	0x02020200
 8000ab0:	01ff0000 	.word	0x01ff0000
 8000ab4:	01010280 	.word	0x01010280
 8000ab8:	5c001000 	.word	0x5c001000
 8000abc:	ffff0000 	.word	0xffff0000
 8000ac0:	51008108 	.word	0x51008108
 8000ac4:	52004000 	.word	0x52004000

08000ac8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000ac8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b00 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000acc:	f7ff ff74 	bl	80009b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ad0:	480c      	ldr	r0, [pc, #48]	; (8000b04 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ad2:	490d      	ldr	r1, [pc, #52]	; (8000b08 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ad4:	4a0d      	ldr	r2, [pc, #52]	; (8000b0c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ad6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ad8:	e002      	b.n	8000ae0 <LoopCopyDataInit>

08000ada <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ada:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000adc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ade:	3304      	adds	r3, #4

08000ae0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ae0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ae2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ae4:	d3f9      	bcc.n	8000ada <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ae6:	4a0a      	ldr	r2, [pc, #40]	; (8000b10 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ae8:	4c0a      	ldr	r4, [pc, #40]	; (8000b14 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000aea:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000aec:	e001      	b.n	8000af2 <LoopFillZerobss>

08000aee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000af0:	3204      	adds	r2, #4

08000af2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000af2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000af4:	d3fb      	bcc.n	8000aee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000af6:	f004 f8ad 	bl	8004c54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000afa:	f7ff fc69 	bl	80003d0 <main>
  bx  lr
 8000afe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b00:	24060000 	.word	0x24060000
  ldr r0, =_sdata
 8000b04:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000b08:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000b0c:	08004d54 	.word	0x08004d54
  ldr r2, =_sbss
 8000b10:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 8000b14:	24000124 	.word	0x24000124

08000b18 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b18:	e7fe      	b.n	8000b18 <ADC3_IRQHandler>
	...

08000b1c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b082      	sub	sp, #8
 8000b20:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b22:	2003      	movs	r0, #3
 8000b24:	f000 f98c 	bl	8000e40 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000b28:	f002 fbc8 	bl	80032bc <HAL_RCC_GetSysClockFreq>
 8000b2c:	4602      	mov	r2, r0
 8000b2e:	4b15      	ldr	r3, [pc, #84]	; (8000b84 <HAL_Init+0x68>)
 8000b30:	699b      	ldr	r3, [r3, #24]
 8000b32:	0a1b      	lsrs	r3, r3, #8
 8000b34:	f003 030f 	and.w	r3, r3, #15
 8000b38:	4913      	ldr	r1, [pc, #76]	; (8000b88 <HAL_Init+0x6c>)
 8000b3a:	5ccb      	ldrb	r3, [r1, r3]
 8000b3c:	f003 031f 	and.w	r3, r3, #31
 8000b40:	fa22 f303 	lsr.w	r3, r2, r3
 8000b44:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000b46:	4b0f      	ldr	r3, [pc, #60]	; (8000b84 <HAL_Init+0x68>)
 8000b48:	699b      	ldr	r3, [r3, #24]
 8000b4a:	f003 030f 	and.w	r3, r3, #15
 8000b4e:	4a0e      	ldr	r2, [pc, #56]	; (8000b88 <HAL_Init+0x6c>)
 8000b50:	5cd3      	ldrb	r3, [r2, r3]
 8000b52:	f003 031f 	and.w	r3, r3, #31
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	fa22 f303 	lsr.w	r3, r2, r3
 8000b5c:	4a0b      	ldr	r2, [pc, #44]	; (8000b8c <HAL_Init+0x70>)
 8000b5e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000b60:	4a0b      	ldr	r2, [pc, #44]	; (8000b90 <HAL_Init+0x74>)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b66:	200f      	movs	r0, #15
 8000b68:	f000 f814 	bl	8000b94 <HAL_InitTick>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000b72:	2301      	movs	r3, #1
 8000b74:	e002      	b.n	8000b7c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000b76:	f7ff fe4d 	bl	8000814 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b7a:	2300      	movs	r3, #0
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	58024400 	.word	0x58024400
 8000b88:	08004d2c 	.word	0x08004d2c
 8000b8c:	24000004 	.word	0x24000004
 8000b90:	24000000 	.word	0x24000000

08000b94 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000b9c:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <HAL_InitTick+0x60>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d101      	bne.n	8000ba8 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	e021      	b.n	8000bec <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000ba8:	4b13      	ldr	r3, [pc, #76]	; (8000bf8 <HAL_InitTick+0x64>)
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <HAL_InitTick+0x60>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f000 f971 	bl	8000ea6 <HAL_SYSTICK_Config>
 8000bc4:	4603      	mov	r3, r0
 8000bc6:	2b00      	cmp	r3, #0
 8000bc8:	d001      	beq.n	8000bce <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000bca:	2301      	movs	r3, #1
 8000bcc:	e00e      	b.n	8000bec <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	2b0f      	cmp	r3, #15
 8000bd2:	d80a      	bhi.n	8000bea <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	6879      	ldr	r1, [r7, #4]
 8000bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bdc:	f000 f93b 	bl	8000e56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000be0:	4a06      	ldr	r2, [pc, #24]	; (8000bfc <HAL_InitTick+0x68>)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000be6:	2300      	movs	r3, #0
 8000be8:	e000      	b.n	8000bec <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000bea:	2301      	movs	r3, #1
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3708      	adds	r7, #8
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	2400000c 	.word	0x2400000c
 8000bf8:	24000000 	.word	0x24000000
 8000bfc:	24000008 	.word	0x24000008

08000c00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c04:	4b06      	ldr	r3, [pc, #24]	; (8000c20 <HAL_IncTick+0x20>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	461a      	mov	r2, r3
 8000c0a:	4b06      	ldr	r3, [pc, #24]	; (8000c24 <HAL_IncTick+0x24>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	4413      	add	r3, r2
 8000c10:	4a04      	ldr	r2, [pc, #16]	; (8000c24 <HAL_IncTick+0x24>)
 8000c12:	6013      	str	r3, [r2, #0]
}
 8000c14:	bf00      	nop
 8000c16:	46bd      	mov	sp, r7
 8000c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1c:	4770      	bx	lr
 8000c1e:	bf00      	nop
 8000c20:	2400000c 	.word	0x2400000c
 8000c24:	24000120 	.word	0x24000120

08000c28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c2c:	4b03      	ldr	r3, [pc, #12]	; (8000c3c <HAL_GetTick+0x14>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
 8000c3a:	bf00      	nop
 8000c3c:	24000120 	.word	0x24000120

08000c40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af00      	add	r7, sp, #0
 8000c46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c48:	f7ff ffee 	bl	8000c28 <HAL_GetTick>
 8000c4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c52:	68fb      	ldr	r3, [r7, #12]
 8000c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c58:	d005      	beq.n	8000c66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	; (8000c84 <HAL_Delay+0x44>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	461a      	mov	r2, r3
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	4413      	add	r3, r2
 8000c64:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c66:	bf00      	nop
 8000c68:	f7ff ffde 	bl	8000c28 <HAL_GetTick>
 8000c6c:	4602      	mov	r2, r0
 8000c6e:	68bb      	ldr	r3, [r7, #8]
 8000c70:	1ad3      	subs	r3, r2, r3
 8000c72:	68fa      	ldr	r2, [r7, #12]
 8000c74:	429a      	cmp	r2, r3
 8000c76:	d8f7      	bhi.n	8000c68 <HAL_Delay+0x28>
  {
  }
}
 8000c78:	bf00      	nop
 8000c7a:	bf00      	nop
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	2400000c 	.word	0x2400000c

08000c88 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000c88:	b480      	push	{r7}
 8000c8a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000c8c:	4b03      	ldr	r3, [pc, #12]	; (8000c9c <HAL_GetREVID+0x14>)
 8000c8e:	681b      	ldr	r3, [r3, #0]
 8000c90:	0c1b      	lsrs	r3, r3, #16
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	46bd      	mov	sp, r7
 8000c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9a:	4770      	bx	lr
 8000c9c:	5c001000 	.word	0x5c001000

08000ca0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	f003 0307 	and.w	r3, r3, #7
 8000cae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cb0:	4b0b      	ldr	r3, [pc, #44]	; (8000ce0 <__NVIC_SetPriorityGrouping+0x40>)
 8000cb2:	68db      	ldr	r3, [r3, #12]
 8000cb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cb6:	68ba      	ldr	r2, [r7, #8]
 8000cb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cbc:	4013      	ands	r3, r2
 8000cbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cc4:	68bb      	ldr	r3, [r7, #8]
 8000cc6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <__NVIC_SetPriorityGrouping+0x44>)
 8000cca:	4313      	orrs	r3, r2
 8000ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cce:	4a04      	ldr	r2, [pc, #16]	; (8000ce0 <__NVIC_SetPriorityGrouping+0x40>)
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	60d3      	str	r3, [r2, #12]
}
 8000cd4:	bf00      	nop
 8000cd6:	3714      	adds	r7, #20
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr
 8000ce0:	e000ed00 	.word	0xe000ed00
 8000ce4:	05fa0000 	.word	0x05fa0000

08000ce8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cec:	4b04      	ldr	r3, [pc, #16]	; (8000d00 <__NVIC_GetPriorityGrouping+0x18>)
 8000cee:	68db      	ldr	r3, [r3, #12]
 8000cf0:	0a1b      	lsrs	r3, r3, #8
 8000cf2:	f003 0307 	and.w	r3, r3, #7
}
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfe:	4770      	bx	lr
 8000d00:	e000ed00 	.word	0xe000ed00

08000d04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b083      	sub	sp, #12
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d0e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	db0b      	blt.n	8000d2e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d16:	88fb      	ldrh	r3, [r7, #6]
 8000d18:	f003 021f 	and.w	r2, r3, #31
 8000d1c:	4907      	ldr	r1, [pc, #28]	; (8000d3c <__NVIC_EnableIRQ+0x38>)
 8000d1e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d22:	095b      	lsrs	r3, r3, #5
 8000d24:	2001      	movs	r0, #1
 8000d26:	fa00 f202 	lsl.w	r2, r0, r2
 8000d2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d2e:	bf00      	nop
 8000d30:	370c      	adds	r7, #12
 8000d32:	46bd      	mov	sp, r7
 8000d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d38:	4770      	bx	lr
 8000d3a:	bf00      	nop
 8000d3c:	e000e100 	.word	0xe000e100

08000d40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	4603      	mov	r3, r0
 8000d48:	6039      	str	r1, [r7, #0]
 8000d4a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000d4c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	db0a      	blt.n	8000d6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	b2da      	uxtb	r2, r3
 8000d58:	490c      	ldr	r1, [pc, #48]	; (8000d8c <__NVIC_SetPriority+0x4c>)
 8000d5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d5e:	0112      	lsls	r2, r2, #4
 8000d60:	b2d2      	uxtb	r2, r2
 8000d62:	440b      	add	r3, r1
 8000d64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d68:	e00a      	b.n	8000d80 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	b2da      	uxtb	r2, r3
 8000d6e:	4908      	ldr	r1, [pc, #32]	; (8000d90 <__NVIC_SetPriority+0x50>)
 8000d70:	88fb      	ldrh	r3, [r7, #6]
 8000d72:	f003 030f 	and.w	r3, r3, #15
 8000d76:	3b04      	subs	r3, #4
 8000d78:	0112      	lsls	r2, r2, #4
 8000d7a:	b2d2      	uxtb	r2, r2
 8000d7c:	440b      	add	r3, r1
 8000d7e:	761a      	strb	r2, [r3, #24]
}
 8000d80:	bf00      	nop
 8000d82:	370c      	adds	r7, #12
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	e000e100 	.word	0xe000e100
 8000d90:	e000ed00 	.word	0xe000ed00

08000d94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b089      	sub	sp, #36	; 0x24
 8000d98:	af00      	add	r7, sp, #0
 8000d9a:	60f8      	str	r0, [r7, #12]
 8000d9c:	60b9      	str	r1, [r7, #8]
 8000d9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f003 0307 	and.w	r3, r3, #7
 8000da6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000da8:	69fb      	ldr	r3, [r7, #28]
 8000daa:	f1c3 0307 	rsb	r3, r3, #7
 8000dae:	2b04      	cmp	r3, #4
 8000db0:	bf28      	it	cs
 8000db2:	2304      	movcs	r3, #4
 8000db4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000db6:	69fb      	ldr	r3, [r7, #28]
 8000db8:	3304      	adds	r3, #4
 8000dba:	2b06      	cmp	r3, #6
 8000dbc:	d902      	bls.n	8000dc4 <NVIC_EncodePriority+0x30>
 8000dbe:	69fb      	ldr	r3, [r7, #28]
 8000dc0:	3b03      	subs	r3, #3
 8000dc2:	e000      	b.n	8000dc6 <NVIC_EncodePriority+0x32>
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc8:	f04f 32ff 	mov.w	r2, #4294967295
 8000dcc:	69bb      	ldr	r3, [r7, #24]
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43da      	mvns	r2, r3
 8000dd4:	68bb      	ldr	r3, [r7, #8]
 8000dd6:	401a      	ands	r2, r3
 8000dd8:	697b      	ldr	r3, [r7, #20]
 8000dda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ddc:	f04f 31ff 	mov.w	r1, #4294967295
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	fa01 f303 	lsl.w	r3, r1, r3
 8000de6:	43d9      	mvns	r1, r3
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dec:	4313      	orrs	r3, r2
         );
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3724      	adds	r7, #36	; 0x24
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
	...

08000dfc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3b01      	subs	r3, #1
 8000e08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e0c:	d301      	bcc.n	8000e12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e00f      	b.n	8000e32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e12:	4a0a      	ldr	r2, [pc, #40]	; (8000e3c <SysTick_Config+0x40>)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	3b01      	subs	r3, #1
 8000e18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e1a:	210f      	movs	r1, #15
 8000e1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000e20:	f7ff ff8e 	bl	8000d40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e24:	4b05      	ldr	r3, [pc, #20]	; (8000e3c <SysTick_Config+0x40>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e2a:	4b04      	ldr	r3, [pc, #16]	; (8000e3c <SysTick_Config+0x40>)
 8000e2c:	2207      	movs	r2, #7
 8000e2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e30:	2300      	movs	r3, #0
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3708      	adds	r7, #8
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	e000e010 	.word	0xe000e010

08000e40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e48:	6878      	ldr	r0, [r7, #4]
 8000e4a:	f7ff ff29 	bl	8000ca0 <__NVIC_SetPriorityGrouping>
}
 8000e4e:	bf00      	nop
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b086      	sub	sp, #24
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	60b9      	str	r1, [r7, #8]
 8000e60:	607a      	str	r2, [r7, #4]
 8000e62:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e64:	f7ff ff40 	bl	8000ce8 <__NVIC_GetPriorityGrouping>
 8000e68:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e6a:	687a      	ldr	r2, [r7, #4]
 8000e6c:	68b9      	ldr	r1, [r7, #8]
 8000e6e:	6978      	ldr	r0, [r7, #20]
 8000e70:	f7ff ff90 	bl	8000d94 <NVIC_EncodePriority>
 8000e74:	4602      	mov	r2, r0
 8000e76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e7a:	4611      	mov	r1, r2
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f7ff ff5f 	bl	8000d40 <__NVIC_SetPriority>
}
 8000e82:	bf00      	nop
 8000e84:	3718      	adds	r7, #24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b082      	sub	sp, #8
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	4603      	mov	r3, r0
 8000e92:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e94:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000e98:	4618      	mov	r0, r3
 8000e9a:	f7ff ff33 	bl	8000d04 <__NVIC_EnableIRQ>
}
 8000e9e:	bf00      	nop
 8000ea0:	3708      	adds	r7, #8
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b082      	sub	sp, #8
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eae:	6878      	ldr	r0, [r7, #4]
 8000eb0:	f7ff ffa4 	bl	8000dfc <SysTick_Config>
 8000eb4:	4603      	mov	r3, r0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
	...

08000ec0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b098      	sub	sp, #96	; 0x60
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8000ec8:	4a84      	ldr	r2, [pc, #528]	; (80010dc <HAL_FDCAN_Init+0x21c>)
 8000eca:	f107 030c 	add.w	r3, r7, #12
 8000ece:	4611      	mov	r1, r2
 8000ed0:	224c      	movs	r2, #76	; 0x4c
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	f003 fee2 	bl	8004c9c <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	2b00      	cmp	r3, #0
 8000edc:	d101      	bne.n	8000ee2 <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8000ede:	2301      	movs	r3, #1
 8000ee0:	e1c6      	b.n	8001270 <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4a7e      	ldr	r2, [pc, #504]	; (80010e0 <HAL_FDCAN_Init+0x220>)
 8000ee8:	4293      	cmp	r3, r2
 8000eea:	d106      	bne.n	8000efa <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d106      	bne.n	8000f14 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000f0e:	6878      	ldr	r0, [r7, #4]
 8000f10:	f7ff fc9a 	bl	8000848 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	699a      	ldr	r2, [r3, #24]
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	f022 0210 	bic.w	r2, r2, #16
 8000f22:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f24:	f7ff fe80 	bl	8000c28 <HAL_GetTick>
 8000f28:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000f2a:	e014      	b.n	8000f56 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000f2c:	f7ff fe7c 	bl	8000c28 <HAL_GetTick>
 8000f30:	4602      	mov	r2, r0
 8000f32:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f34:	1ad3      	subs	r3, r2, r3
 8000f36:	2b0a      	cmp	r3, #10
 8000f38:	d90d      	bls.n	8000f56 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000f40:	f043 0201 	orr.w	r2, r3, #1
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	2203      	movs	r2, #3
 8000f4e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8000f52:	2301      	movs	r3, #1
 8000f54:	e18c      	b.n	8001270 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	699b      	ldr	r3, [r3, #24]
 8000f5c:	f003 0308 	and.w	r3, r3, #8
 8000f60:	2b08      	cmp	r3, #8
 8000f62:	d0e3      	beq.n	8000f2c <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	699a      	ldr	r2, [r3, #24]
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f042 0201 	orr.w	r2, r2, #1
 8000f72:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000f74:	f7ff fe58 	bl	8000c28 <HAL_GetTick>
 8000f78:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000f7a:	e014      	b.n	8000fa6 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000f7c:	f7ff fe54 	bl	8000c28 <HAL_GetTick>
 8000f80:	4602      	mov	r2, r0
 8000f82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000f84:	1ad3      	subs	r3, r2, r3
 8000f86:	2b0a      	cmp	r3, #10
 8000f88:	d90d      	bls.n	8000fa6 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000f90:	f043 0201 	orr.w	r2, r3, #1
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2203      	movs	r2, #3
 8000f9e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
 8000fa4:	e164      	b.n	8001270 <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	699b      	ldr	r3, [r3, #24]
 8000fac:	f003 0301 	and.w	r3, r3, #1
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d0e3      	beq.n	8000f7c <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
 8000fb8:	699a      	ldr	r2, [r3, #24]
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f042 0202 	orr.w	r2, r2, #2
 8000fc2:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	7c1b      	ldrb	r3, [r3, #16]
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d108      	bne.n	8000fde <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	699a      	ldr	r2, [r3, #24]
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000fda:	619a      	str	r2, [r3, #24]
 8000fdc:	e007      	b.n	8000fee <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	699a      	ldr	r2, [r3, #24]
 8000fe4:	687b      	ldr	r3, [r7, #4]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000fec:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	7c5b      	ldrb	r3, [r3, #17]
 8000ff2:	2b01      	cmp	r3, #1
 8000ff4:	d108      	bne.n	8001008 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	699a      	ldr	r2, [r3, #24]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001004:	619a      	str	r2, [r3, #24]
 8001006:	e007      	b.n	8001018 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	699a      	ldr	r2, [r3, #24]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8001016:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	7c9b      	ldrb	r3, [r3, #18]
 800101c:	2b01      	cmp	r3, #1
 800101e:	d108      	bne.n	8001032 <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	699a      	ldr	r2, [r3, #24]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800102e:	619a      	str	r2, [r3, #24]
 8001030:	e007      	b.n	8001042 <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	699a      	ldr	r2, [r3, #24]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001040:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	699b      	ldr	r3, [r3, #24]
 8001048:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	689a      	ldr	r2, [r3, #8]
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	430a      	orrs	r2, r1
 8001056:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	699a      	ldr	r2, [r3, #24]
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8001066:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	691a      	ldr	r2, [r3, #16]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f022 0210 	bic.w	r2, r2, #16
 8001076:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	68db      	ldr	r3, [r3, #12]
 800107c:	2b01      	cmp	r3, #1
 800107e:	d108      	bne.n	8001092 <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	699a      	ldr	r2, [r3, #24]
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f042 0204 	orr.w	r2, r2, #4
 800108e:	619a      	str	r2, [r3, #24]
 8001090:	e030      	b.n	80010f4 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	68db      	ldr	r3, [r3, #12]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d02c      	beq.n	80010f4 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	68db      	ldr	r3, [r3, #12]
 800109e:	2b02      	cmp	r3, #2
 80010a0:	d020      	beq.n	80010e4 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	699a      	ldr	r2, [r3, #24]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80010b0:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	691a      	ldr	r2, [r3, #16]
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f042 0210 	orr.w	r2, r2, #16
 80010c0:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	2b03      	cmp	r3, #3
 80010c8:	d114      	bne.n	80010f4 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	699a      	ldr	r2, [r3, #24]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	f042 0220 	orr.w	r2, r2, #32
 80010d8:	619a      	str	r2, [r3, #24]
 80010da:	e00b      	b.n	80010f4 <HAL_FDCAN_Init+0x234>
 80010dc:	08004ce0 	.word	0x08004ce0
 80010e0:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	699a      	ldr	r2, [r3, #24]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f042 0220 	orr.w	r2, r2, #32
 80010f2:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	699b      	ldr	r3, [r3, #24]
 80010f8:	3b01      	subs	r3, #1
 80010fa:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	69db      	ldr	r3, [r3, #28]
 8001100:	3b01      	subs	r3, #1
 8001102:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001104:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6a1b      	ldr	r3, [r3, #32]
 800110a:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 800110c:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	695b      	ldr	r3, [r3, #20]
 8001114:	3b01      	subs	r3, #1
 8001116:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800111c:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800111e:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001128:	d115      	bne.n	8001156 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800112e:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001134:	3b01      	subs	r3, #1
 8001136:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001138:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	3b01      	subs	r3, #1
 8001140:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8001142:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800114a:	3b01      	subs	r3, #1
 800114c:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8001152:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8001154:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800115a:	2b00      	cmp	r3, #0
 800115c:	d00a      	beq.n	8001174 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	430a      	orrs	r2, r1
 8001170:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800117c:	4413      	add	r3, r2
 800117e:	2b00      	cmp	r3, #0
 8001180:	d011      	beq.n	80011a6 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 800118a:	f023 0107 	bic.w	r1, r3, #7
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	3360      	adds	r3, #96	; 0x60
 8001196:	443b      	add	r3, r7
 8001198:	f853 2c54 	ldr.w	r2, [r3, #-84]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	430a      	orrs	r2, r1
 80011a2:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d011      	beq.n	80011d2 <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80011b6:	f023 0107 	bic.w	r1, r3, #7
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	3360      	adds	r3, #96	; 0x60
 80011c2:	443b      	add	r3, r7
 80011c4:	f853 2c54 	ldr.w	r2, [r3, #-84]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	430a      	orrs	r2, r1
 80011ce:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d012      	beq.n	8001200 <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80011e2:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	3360      	adds	r3, #96	; 0x60
 80011ee:	443b      	add	r3, r7
 80011f0:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80011f4:	011a      	lsls	r2, r3, #4
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	430a      	orrs	r2, r1
 80011fc:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001204:	2b00      	cmp	r3, #0
 8001206:	d012      	beq.n	800122e <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001210:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001218:	009b      	lsls	r3, r3, #2
 800121a:	3360      	adds	r3, #96	; 0x60
 800121c:	443b      	add	r3, r7
 800121e:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001222:	021a      	lsls	r2, r3, #8
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	430a      	orrs	r2, r1
 800122a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	4a11      	ldr	r2, [pc, #68]	; (8001278 <HAL_FDCAN_Init+0x3b8>)
 8001234:	4293      	cmp	r3, r2
 8001236:	d107      	bne.n	8001248 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	689a      	ldr	r2, [r3, #8]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	685b      	ldr	r3, [r3, #4]
 8001242:	f022 0203 	bic.w	r2, r2, #3
 8001246:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	2200      	movs	r2, #0
 800124c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2200      	movs	r2, #0
 8001254:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2201      	movs	r2, #1
 800125c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001260:	6878      	ldr	r0, [r7, #4]
 8001262:	f000 fdf9 	bl	8001e58 <FDCAN_CalcultateRamBlockAddresses>
 8001266:	4603      	mov	r3, r0
 8001268:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 800126c:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 8001270:	4618      	mov	r0, r3
 8001272:	3760      	adds	r7, #96	; 0x60
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	4000a000 	.word	0x4000a000

0800127c <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 800127c:	b480      	push	{r7}
 800127e:	b087      	sub	sp, #28
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800128c:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800128e:	7bfb      	ldrb	r3, [r7, #15]
 8001290:	2b01      	cmp	r3, #1
 8001292:	d002      	beq.n	800129a <HAL_FDCAN_ConfigFilter+0x1e>
 8001294:	7bfb      	ldrb	r3, [r7, #15]
 8001296:	2b02      	cmp	r3, #2
 8001298:	d157      	bne.n	800134a <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d12b      	bne.n	80012fa <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	68db      	ldr	r3, [r3, #12]
 80012a6:	2b07      	cmp	r3, #7
 80012a8:	d10d      	bne.n	80012c6 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	691b      	ldr	r3, [r3, #16]
 80012ae:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	69db      	ldr	r3, [r3, #28]
 80012b4:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 80012b6:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 80012bc:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 80012be:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 80012c2:	617b      	str	r3, [r7, #20]
 80012c4:	e00e      	b.n	80012e4 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	689b      	ldr	r3, [r3, #8]
 80012ca:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80012d2:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	691b      	ldr	r3, [r3, #16]
 80012d8:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 80012da:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 80012dc:	683b      	ldr	r3, [r7, #0]
 80012de:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 80012e0:	4313      	orrs	r3, r2
 80012e2:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	009b      	lsls	r3, r3, #2
 80012ee:	4413      	add	r3, r2
 80012f0:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	697a      	ldr	r2, [r7, #20]
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	e025      	b.n	8001346 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	075a      	lsls	r2, r3, #29
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	691b      	ldr	r3, [r3, #16]
 8001304:	4313      	orrs	r3, r2
 8001306:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	68db      	ldr	r3, [r3, #12]
 800130c:	2b07      	cmp	r3, #7
 800130e:	d103      	bne.n	8001318 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 8001310:	683b      	ldr	r3, [r7, #0]
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	613b      	str	r3, [r7, #16]
 8001316:	e006      	b.n	8001326 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	689b      	ldr	r3, [r3, #8]
 800131c:	079a      	lsls	r2, r3, #30
 800131e:	683b      	ldr	r3, [r7, #0]
 8001320:	695b      	ldr	r3, [r3, #20]
 8001322:	4313      	orrs	r3, r2
 8001324:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	685b      	ldr	r3, [r3, #4]
 800132e:	00db      	lsls	r3, r3, #3
 8001330:	4413      	add	r3, r2
 8001332:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	697a      	ldr	r2, [r7, #20]
 8001338:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	3304      	adds	r3, #4
 800133e:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	693a      	ldr	r2, [r7, #16]
 8001344:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 8001346:	2300      	movs	r3, #0
 8001348:	e008      	b.n	800135c <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001350:	f043 0202 	orr.w	r2, r3, #2
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
  }
}
 800135c:	4618      	mov	r0, r3
 800135e:	371c      	adds	r7, #28
 8001360:	46bd      	mov	sp, r7
 8001362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001366:	4770      	bx	lr

08001368 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001376:	b2db      	uxtb	r3, r3
 8001378:	2b01      	cmp	r3, #1
 800137a:	d111      	bne.n	80013a0 <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	2202      	movs	r2, #2
 8001380:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	699a      	ldr	r2, [r3, #24]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f022 0201 	bic.w	r2, r2, #1
 8001392:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2200      	movs	r2, #0
 8001398:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 800139c:	2300      	movs	r3, #0
 800139e:	e008      	b.n	80013b2 <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80013a6:	f043 0204 	orr.w	r2, r3, #4
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
  }
}
 80013b2:	4618      	mov	r0, r3
 80013b4:	370c      	adds	r7, #12
 80013b6:	46bd      	mov	sp, r7
 80013b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013bc:	4770      	bx	lr

080013be <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 80013be:	b580      	push	{r7, lr}
 80013c0:	b086      	sub	sp, #24
 80013c2:	af00      	add	r7, sp, #0
 80013c4:	60f8      	str	r0, [r7, #12]
 80013c6:	60b9      	str	r1, [r7, #8]
 80013c8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80013d0:	b2db      	uxtb	r3, r3
 80013d2:	2b02      	cmp	r3, #2
 80013d4:	d141      	bne.n	800145a <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80013de:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d109      	bne.n	80013fa <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80013ec:	f043 0220 	orr.w	r2, r3, #32
 80013f0:	68fb      	ldr	r3, [r7, #12]
 80013f2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80013f6:	2301      	movs	r3, #1
 80013f8:	e038      	b.n	800146c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001402:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001406:	2b00      	cmp	r3, #0
 8001408:	d009      	beq.n	800141e <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 800140a:	68fb      	ldr	r3, [r7, #12]
 800140c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001410:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 800141a:	2301      	movs	r3, #1
 800141c:	e026      	b.n	800146c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 8001426:	0c1b      	lsrs	r3, r3, #16
 8001428:	f003 031f 	and.w	r3, r3, #31
 800142c:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	687a      	ldr	r2, [r7, #4]
 8001432:	68b9      	ldr	r1, [r7, #8]
 8001434:	68f8      	ldr	r0, [r7, #12]
 8001436:	f000 fe95 	bl	8002164 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	2101      	movs	r1, #1
 8001440:	697a      	ldr	r2, [r7, #20]
 8001442:	fa01 f202 	lsl.w	r2, r1, r2
 8001446:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 800144a:	2201      	movs	r2, #1
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	409a      	lsls	r2, r3
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 8001456:	2300      	movs	r3, #0
 8001458:	e008      	b.n	800146c <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001460:	f043 0208 	orr.w	r2, r3, #8
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
  }
}
 800146c:	4618      	mov	r0, r3
 800146e:	3718      	adds	r7, #24
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}

08001474 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001474:	b480      	push	{r7}
 8001476:	b08b      	sub	sp, #44	; 0x2c
 8001478:	af00      	add	r7, sp, #0
 800147a:	60f8      	str	r0, [r7, #12]
 800147c:	60b9      	str	r1, [r7, #8]
 800147e:	607a      	str	r2, [r7, #4]
 8001480:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 8001482:	2300      	movs	r3, #0
 8001484:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800148c:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800148e:	7efb      	ldrb	r3, [r7, #27]
 8001490:	2b02      	cmp	r3, #2
 8001492:	f040 814b 	bne.w	800172c <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	2b40      	cmp	r3, #64	; 0x40
 800149a:	d14d      	bne.n	8001538 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80014a4:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d109      	bne.n	80014c0 <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80014b2:	f043 0220 	orr.w	r2, r3, #32
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80014bc:	2301      	movs	r3, #1
 80014be:	e13e      	b.n	800173e <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80014c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d109      	bne.n	80014e4 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80014d6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80014e0:	2301      	movs	r3, #1
 80014e2:	e12c      	b.n	800173e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80014ec:	0e1b      	lsrs	r3, r3, #24
 80014ee:	f003 0301 	and.w	r3, r3, #1
 80014f2:	2b01      	cmp	r3, #1
 80014f4:	d10b      	bne.n	800150e <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80014fe:	0fdb      	lsrs	r3, r3, #31
 8001500:	f003 0301 	and.w	r3, r3, #1
 8001504:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001508:	d101      	bne.n	800150e <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 800150a:	2301      	movs	r3, #1
 800150c:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001516:	0a1b      	lsrs	r3, r3, #8
 8001518:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800151c:	69fa      	ldr	r2, [r7, #28]
 800151e:	4413      	add	r3, r2
 8001520:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 8001522:	68fb      	ldr	r3, [r7, #12]
 8001524:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800152a:	69f9      	ldr	r1, [r7, #28]
 800152c:	fb01 f303 	mul.w	r3, r1, r3
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
 8001536:	e069      	b.n	800160c <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	2b41      	cmp	r3, #65	; 0x41
 800153c:	d14d      	bne.n	80015da <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001546:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800154a:	2b00      	cmp	r3, #0
 800154c:	d109      	bne.n	8001562 <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001554:	f043 0220 	orr.w	r2, r3, #32
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800155e:	2301      	movs	r3, #1
 8001560:	e0ed      	b.n	800173e <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800156a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800156e:	2b00      	cmp	r3, #0
 8001570:	d109      	bne.n	8001586 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001578:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e0db      	b.n	800173e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800158e:	0e1b      	lsrs	r3, r3, #24
 8001590:	f003 0301 	and.w	r3, r3, #1
 8001594:	2b01      	cmp	r3, #1
 8001596:	d10b      	bne.n	80015b0 <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80015a0:	0fdb      	lsrs	r3, r3, #31
 80015a2:	f003 0301 	and.w	r3, r3, #1
 80015a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80015aa:	d101      	bne.n	80015b0 <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80015ac:	2301      	movs	r3, #1
 80015ae:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80015b8:	0a1b      	lsrs	r3, r3, #8
 80015ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80015be:	69fa      	ldr	r2, [r7, #28]
 80015c0:	4413      	add	r3, r2
 80015c2:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015cc:	69f9      	ldr	r1, [r7, #28]
 80015ce:	fb01 f303 	mul.w	r3, r1, r3
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4413      	add	r3, r2
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
 80015d8:	e018      	b.n	800160c <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80015de:	68ba      	ldr	r2, [r7, #8]
 80015e0:	429a      	cmp	r2, r3
 80015e2:	d309      	bcc.n	80015f8 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80015ea:	f043 0220 	orr.w	r2, r3, #32
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e0a2      	b.n	800173e <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001600:	68b9      	ldr	r1, [r7, #8]
 8001602:	fb01 f303 	mul.w	r3, r1, r3
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800160c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	2b00      	cmp	r3, #0
 800161e:	d107      	bne.n	8001630 <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 8001620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	0c9b      	lsrs	r3, r3, #18
 8001626:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	e005      	b.n	800163c <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 8001630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 8001648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 8001654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001656:	3304      	adds	r3, #4
 8001658:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 800165a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	b29a      	uxth	r2, r3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 800167c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8001688:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	0e1b      	lsrs	r3, r3, #24
 800168e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8001696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	0fda      	lsrs	r2, r3, #31
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 80016a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a2:	3304      	adds	r3, #4
 80016a4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 80016a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016a8:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80016aa:	2300      	movs	r3, #0
 80016ac:	623b      	str	r3, [r7, #32]
 80016ae:	e00a      	b.n	80016c6 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 80016b0:	697a      	ldr	r2, [r7, #20]
 80016b2:	6a3b      	ldr	r3, [r7, #32]
 80016b4:	441a      	add	r2, r3
 80016b6:	6839      	ldr	r1, [r7, #0]
 80016b8:	6a3b      	ldr	r3, [r7, #32]
 80016ba:	440b      	add	r3, r1
 80016bc:	7812      	ldrb	r2, [r2, #0]
 80016be:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 80016c0:	6a3b      	ldr	r3, [r7, #32]
 80016c2:	3301      	adds	r3, #1
 80016c4:	623b      	str	r3, [r7, #32]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	68db      	ldr	r3, [r3, #12]
 80016ca:	0c1b      	lsrs	r3, r3, #16
 80016cc:	4a1f      	ldr	r2, [pc, #124]	; (800174c <HAL_FDCAN_GetRxMessage+0x2d8>)
 80016ce:	5cd3      	ldrb	r3, [r2, r3]
 80016d0:	461a      	mov	r2, r3
 80016d2:	6a3b      	ldr	r3, [r7, #32]
 80016d4:	4293      	cmp	r3, r2
 80016d6:	d3eb      	bcc.n	80016b0 <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	2b40      	cmp	r3, #64	; 0x40
 80016dc:	d105      	bne.n	80016ea <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	69fa      	ldr	r2, [r7, #28]
 80016e4:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 80016e8:	e01e      	b.n	8001728 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80016ea:	68bb      	ldr	r3, [r7, #8]
 80016ec:	2b41      	cmp	r3, #65	; 0x41
 80016ee:	d105      	bne.n	80016fc <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	69fa      	ldr	r2, [r7, #28]
 80016f6:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 80016fa:	e015      	b.n	8001728 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	2b1f      	cmp	r3, #31
 8001700:	d808      	bhi.n	8001714 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	2101      	movs	r1, #1
 8001708:	68ba      	ldr	r2, [r7, #8]
 800170a:	fa01 f202 	lsl.w	r2, r1, r2
 800170e:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8001712:	e009      	b.n	8001728 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	f003 021f 	and.w	r2, r3, #31
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	2101      	movs	r1, #1
 8001720:	fa01 f202 	lsl.w	r2, r1, r2
 8001724:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 8001728:	2300      	movs	r3, #0
 800172a:	e008      	b.n	800173e <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001732:	f043 0208 	orr.w	r2, r3, #8
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800173c:	2301      	movs	r3, #1
  }
}
 800173e:	4618      	mov	r0, r3
 8001740:	372c      	adds	r7, #44	; 0x2c
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	08004d3c 	.word	0x08004d3c

08001750 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 8001750:	b480      	push	{r7}
 8001752:	b087      	sub	sp, #28
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001762:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001764:	7dfb      	ldrb	r3, [r7, #23]
 8001766:	2b01      	cmp	r3, #1
 8001768:	d002      	beq.n	8001770 <HAL_FDCAN_ActivateNotification+0x20>
 800176a:	7dfb      	ldrb	r3, [r7, #23]
 800176c:	2b02      	cmp	r3, #2
 800176e:	d155      	bne.n	800181c <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	4013      	ands	r3, r2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d108      	bne.n	8001790 <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	f042 0201 	orr.w	r2, r2, #1
 800178c:	65da      	str	r2, [r3, #92]	; 0x5c
 800178e:	e014      	b.n	80017ba <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	4013      	ands	r3, r2
 800179a:	68ba      	ldr	r2, [r7, #8]
 800179c:	429a      	cmp	r2, r3
 800179e:	d108      	bne.n	80017b2 <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f042 0202 	orr.w	r2, r2, #2
 80017ae:	65da      	str	r2, [r3, #92]	; 0x5c
 80017b0:	e003      	b.n	80017ba <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2203      	movs	r2, #3
 80017b8:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 80017ba:	68bb      	ldr	r3, [r7, #8]
 80017bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d009      	beq.n	80017d8 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	430a      	orrs	r2, r1
 80017d4:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d009      	beq.n	80017f6 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	430a      	orrs	r2, r1
 80017f2:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80017fc:	68ba      	ldr	r2, [r7, #8]
 80017fe:	4b0f      	ldr	r3, [pc, #60]	; (800183c <HAL_FDCAN_ActivateNotification+0xec>)
 8001800:	4013      	ands	r3, r2
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	6812      	ldr	r2, [r2, #0]
 8001806:	430b      	orrs	r3, r1
 8001808:	6553      	str	r3, [r2, #84]	; 0x54
 800180a:	4b0d      	ldr	r3, [pc, #52]	; (8001840 <HAL_FDCAN_ActivateNotification+0xf0>)
 800180c:	695a      	ldr	r2, [r3, #20]
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	0f9b      	lsrs	r3, r3, #30
 8001812:	490b      	ldr	r1, [pc, #44]	; (8001840 <HAL_FDCAN_ActivateNotification+0xf0>)
 8001814:	4313      	orrs	r3, r2
 8001816:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 8001818:	2300      	movs	r3, #0
 800181a:	e008      	b.n	800182e <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001822:	f043 0202 	orr.w	r2, r3, #2
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800182c:	2301      	movs	r3, #1
  }
}
 800182e:	4618      	mov	r0, r3
 8001830:	371c      	adds	r7, #28
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	3fcfffff 	.word	0x3fcfffff
 8001840:	4000a800 	.word	0x4000a800

08001844 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b096      	sub	sp, #88	; 0x58
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 800184c:	4b9a      	ldr	r3, [pc, #616]	; (8001ab8 <HAL_FDCAN_IRQHandler+0x274>)
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	079b      	lsls	r3, r3, #30
 8001852:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 8001854:	4b98      	ldr	r3, [pc, #608]	; (8001ab8 <HAL_FDCAN_IRQHandler+0x274>)
 8001856:	695b      	ldr	r3, [r3, #20]
 8001858:	079b      	lsls	r3, r3, #30
 800185a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800185c:	4013      	ands	r3, r2
 800185e:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001866:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800186a:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001872:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001874:	4013      	ands	r3, r2
 8001876:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800188a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800188c:	4013      	ands	r3, r2
 800188e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001896:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800189a:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80018a4:	4013      	ands	r3, r2
 80018a6:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018ae:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 80018b2:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80018bc:	4013      	ands	r3, r2
 80018be:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018c6:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 80018ca:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018d2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80018d4:	4013      	ands	r3, r2
 80018d6:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018de:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80018e6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 80018e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018ea:	0a1b      	lsrs	r3, r3, #8
 80018ec:	f003 0301 	and.w	r3, r3, #1
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d010      	beq.n	8001916 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 80018f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018f6:	0a1b      	lsrs	r3, r3, #8
 80018f8:	f003 0301 	and.w	r3, r3, #1
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d00a      	beq.n	8001916 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001908:	651a      	str	r2, [r3, #80]	; 0x50
 800190a:	4b6b      	ldr	r3, [pc, #428]	; (8001ab8 <HAL_FDCAN_IRQHandler+0x274>)
 800190c:	2200      	movs	r2, #0
 800190e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001910:	6878      	ldr	r0, [r7, #4]
 8001912:	f000 fa54 	bl	8001dbe <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001916:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001918:	0a9b      	lsrs	r3, r3, #10
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	2b00      	cmp	r3, #0
 8001920:	d01d      	beq.n	800195e <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001924:	0a9b      	lsrs	r3, r3, #10
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b00      	cmp	r3, #0
 800192c:	d017      	beq.n	800195e <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8001936:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 8001940:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001942:	4013      	ands	r3, r2
 8001944:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800194e:	651a      	str	r2, [r3, #80]	; 0x50
 8001950:	4b59      	ldr	r3, [pc, #356]	; (8001ab8 <HAL_FDCAN_IRQHandler+0x274>)
 8001952:	2200      	movs	r2, #0
 8001954:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8001956:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8001958:	6878      	ldr	r0, [r7, #4]
 800195a:	f000 fa07 	bl	8001d6c <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 800195e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001960:	2b00      	cmp	r3, #0
 8001962:	d00d      	beq.n	8001980 <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800196a:	4b54      	ldr	r3, [pc, #336]	; (8001abc <HAL_FDCAN_IRQHandler+0x278>)
 800196c:	400b      	ands	r3, r1
 800196e:	6513      	str	r3, [r2, #80]	; 0x50
 8001970:	4a51      	ldr	r2, [pc, #324]	; (8001ab8 <HAL_FDCAN_IRQHandler+0x274>)
 8001972:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001974:	0f9b      	lsrs	r3, r3, #30
 8001976:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8001978:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800197a:	6878      	ldr	r0, [r7, #4]
 800197c:	f000 f9c0 	bl	8001d00 <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001980:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001982:	2b00      	cmp	r3, #0
 8001984:	d00d      	beq.n	80019a2 <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800198c:	4b4b      	ldr	r3, [pc, #300]	; (8001abc <HAL_FDCAN_IRQHandler+0x278>)
 800198e:	400b      	ands	r3, r1
 8001990:	6513      	str	r3, [r2, #80]	; 0x50
 8001992:	4a49      	ldr	r2, [pc, #292]	; (8001ab8 <HAL_FDCAN_IRQHandler+0x274>)
 8001994:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001996:	0f9b      	lsrs	r3, r3, #30
 8001998:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 800199a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800199c:	6878      	ldr	r0, [r7, #4]
 800199e:	f000 f9ba 	bl	8001d16 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80019a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d00d      	beq.n	80019c4 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681a      	ldr	r2, [r3, #0]
 80019ac:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80019ae:	4b43      	ldr	r3, [pc, #268]	; (8001abc <HAL_FDCAN_IRQHandler+0x278>)
 80019b0:	400b      	ands	r3, r1
 80019b2:	6513      	str	r3, [r2, #80]	; 0x50
 80019b4:	4a40      	ldr	r2, [pc, #256]	; (8001ab8 <HAL_FDCAN_IRQHandler+0x274>)
 80019b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019b8:	0f9b      	lsrs	r3, r3, #30
 80019ba:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80019bc:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7fe fc8a 	bl	80002d8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80019c4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d00d      	beq.n	80019e6 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681a      	ldr	r2, [r3, #0]
 80019ce:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80019d0:	4b3a      	ldr	r3, [pc, #232]	; (8001abc <HAL_FDCAN_IRQHandler+0x278>)
 80019d2:	400b      	ands	r3, r1
 80019d4:	6513      	str	r3, [r2, #80]	; 0x50
 80019d6:	4a38      	ldr	r2, [pc, #224]	; (8001ab8 <HAL_FDCAN_IRQHandler+0x274>)
 80019d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019da:	0f9b      	lsrs	r3, r3, #30
 80019dc:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80019de:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80019e0:	6878      	ldr	r0, [r7, #4]
 80019e2:	f000 f9a3 	bl	8001d2c <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80019e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80019e8:	0adb      	lsrs	r3, r3, #11
 80019ea:	f003 0301 	and.w	r3, r3, #1
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d010      	beq.n	8001a14 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80019f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80019f4:	0adb      	lsrs	r3, r3, #11
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d00a      	beq.n	8001a14 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001a06:	651a      	str	r2, [r3, #80]	; 0x50
 8001a08:	4b2b      	ldr	r3, [pc, #172]	; (8001ab8 <HAL_FDCAN_IRQHandler+0x274>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f000 f997 	bl	8001d42 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 8001a14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a16:	0a5b      	lsrs	r3, r3, #9
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d01d      	beq.n	8001a5c <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 8001a20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a22:	0a5b      	lsrs	r3, r3, #9
 8001a24:	f003 0301 	and.w	r3, r3, #1
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d017      	beq.n	8001a5c <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001a34:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001a3e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a40:	4013      	ands	r3, r2
 8001a42:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a4c:	651a      	str	r2, [r3, #80]	; 0x50
 8001a4e:	4b1a      	ldr	r3, [pc, #104]	; (8001ab8 <HAL_FDCAN_IRQHandler+0x274>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8001a54:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f000 f97d 	bl	8001d56 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 8001a5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a5e:	0cdb      	lsrs	r3, r3, #19
 8001a60:	f003 0301 	and.w	r3, r3, #1
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d010      	beq.n	8001a8a <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8001a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a6a:	0cdb      	lsrs	r3, r3, #19
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d00a      	beq.n	8001a8a <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001a7c:	651a      	str	r2, [r3, #80]	; 0x50
 8001a7e:	4b0e      	ldr	r3, [pc, #56]	; (8001ab8 <HAL_FDCAN_IRQHandler+0x274>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8001a84:	6878      	ldr	r0, [r7, #4]
 8001a86:	f000 f97c 	bl	8001d82 <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001a8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001a8c:	0c1b      	lsrs	r3, r3, #16
 8001a8e:	f003 0301 	and.w	r3, r3, #1
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d016      	beq.n	8001ac4 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001a98:	0c1b      	lsrs	r3, r3, #16
 8001a9a:	f003 0301 	and.w	r3, r3, #1
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d010      	beq.n	8001ac4 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001aaa:	651a      	str	r2, [r3, #80]	; 0x50
 8001aac:	4b02      	ldr	r3, [pc, #8]	; (8001ab8 <HAL_FDCAN_IRQHandler+0x274>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001ab2:	6878      	ldr	r0, [r7, #4]
 8001ab4:	e004      	b.n	8001ac0 <HAL_FDCAN_IRQHandler+0x27c>
 8001ab6:	bf00      	nop
 8001ab8:	4000a800 	.word	0x4000a800
 8001abc:	3fcfffff 	.word	0x3fcfffff
 8001ac0:	f000 f969 	bl	8001d96 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001ac4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ac6:	0c9b      	lsrs	r3, r3, #18
 8001ac8:	f003 0301 	and.w	r3, r3, #1
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d010      	beq.n	8001af2 <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ad2:	0c9b      	lsrs	r3, r3, #18
 8001ad4:	f003 0301 	and.w	r3, r3, #1
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d00a      	beq.n	8001af2 <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001ae4:	651a      	str	r2, [r3, #80]	; 0x50
 8001ae6:	4b83      	ldr	r3, [pc, #524]	; (8001cf4 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001ae8:	2200      	movs	r2, #0
 8001aea:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001aec:	6878      	ldr	r0, [r7, #4]
 8001aee:	f000 f95c 	bl	8001daa <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001af4:	0c5b      	lsrs	r3, r3, #17
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d015      	beq.n	8001b2a <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001afe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001b00:	0c5b      	lsrs	r3, r3, #17
 8001b02:	f003 0301 	and.w	r3, r3, #1
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d00f      	beq.n	8001b2a <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b12:	651a      	str	r2, [r3, #80]	; 0x50
 8001b14:	4b77      	ldr	r3, [pc, #476]	; (8001cf4 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001b20:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001b2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d00d      	beq.n	8001b4c <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001b36:	4b70      	ldr	r3, [pc, #448]	; (8001cf8 <HAL_FDCAN_IRQHandler+0x4b4>)
 8001b38:	400b      	ands	r3, r1
 8001b3a:	6513      	str	r3, [r2, #80]	; 0x50
 8001b3c:	4a6d      	ldr	r2, [pc, #436]	; (8001cf4 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001b3e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001b40:	0f9b      	lsrs	r3, r3, #30
 8001b42:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001b44:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f000 f94d 	bl	8001de6 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001b4c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d011      	beq.n	8001b76 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8001b58:	4b67      	ldr	r3, [pc, #412]	; (8001cf8 <HAL_FDCAN_IRQHandler+0x4b4>)
 8001b5a:	400b      	ands	r3, r1
 8001b5c:	6513      	str	r3, [r2, #80]	; 0x50
 8001b5e:	4a65      	ldr	r2, [pc, #404]	; (8001cf4 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001b60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b62:	0f9b      	lsrs	r3, r3, #30
 8001b64:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001b6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	4a60      	ldr	r2, [pc, #384]	; (8001cfc <HAL_FDCAN_IRQHandler+0x4b8>)
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	f040 80ac 	bne.w	8001cda <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f003 0303 	and.w	r3, r3, #3
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	f000 80a4 	beq.w	8001cda <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	f003 030f 	and.w	r3, r3, #15
 8001b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	685b      	ldr	r3, [r3, #4]
 8001ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	685b      	ldr	r3, [r3, #4]
 8001bae:	6a1b      	ldr	r3, [r3, #32]
 8001bb0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001bb4:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bbc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	6a1b      	ldr	r3, [r3, #32]
 8001bc8:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	6a1b      	ldr	r3, [r3, #32]
 8001be0:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8001be4:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bec:	6a3a      	ldr	r2, [r7, #32]
 8001bee:	4013      	ands	r3, r2
 8001bf0:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	6a1b      	ldr	r3, [r3, #32]
 8001bf8:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8001bfc:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	685b      	ldr	r3, [r3, #4]
 8001c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c04:	69fa      	ldr	r2, [r7, #28]
 8001c06:	4013      	ands	r3, r2
 8001c08:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	685b      	ldr	r3, [r3, #4]
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c10:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	6a1b      	ldr	r3, [r3, #32]
 8001c18:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8001c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d007      	beq.n	8001c30 <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001c26:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8001c28:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f000 f8e6 	bl	8001dfc <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8001c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d007      	beq.n	8001c46 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c3c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8001c3e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f000 f8e6 	bl	8001e12 <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	099b      	lsrs	r3, r3, #6
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d01a      	beq.n	8001c88 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	099b      	lsrs	r3, r3, #6
 8001c56:	f003 0301 	and.w	r3, r3, #1
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d014      	beq.n	8001c88 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c64:	0c1b      	lsrs	r3, r3, #16
 8001c66:	b29b      	uxth	r3, r3
 8001c68:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c74:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	2240      	movs	r2, #64	; 0x40
 8001c7c:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	6939      	ldr	r1, [r7, #16]
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f000 f8d0 	bl	8001e28 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8001c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d007      	beq.n	8001c9e <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c94:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8001c96:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c98:	6878      	ldr	r0, [r7, #4]
 8001c9a:	f000 f8d1 	bl	8001e40 <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8001c9e:	6a3b      	ldr	r3, [r7, #32]
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d00b      	beq.n	8001cbc <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	6a3a      	ldr	r2, [r7, #32]
 8001caa:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001cb2:	6a3b      	ldr	r3, [r7, #32]
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d00b      	beq.n	8001cda <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	69fa      	ldr	r2, [r7, #28]
 8001cc8:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	431a      	orrs	r2, r3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d002      	beq.n	8001cea <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001ce4:	6878      	ldr	r0, [r7, #4]
 8001ce6:	f000 f874 	bl	8001dd2 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001cea:	bf00      	nop
 8001cec:	3758      	adds	r7, #88	; 0x58
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bd80      	pop	{r7, pc}
 8001cf2:	bf00      	nop
 8001cf4:	4000a800 	.word	0x4000a800
 8001cf8:	3fcfffff 	.word	0x3fcfffff
 8001cfc:	4000a000 	.word	0x4000a000

08001d00 <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
 8001d08:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8001d0a:	bf00      	nop
 8001d0c:	370c      	adds	r7, #12
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001d16:	b480      	push	{r7}
 8001d18:	b083      	sub	sp, #12
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	6078      	str	r0, [r7, #4]
 8001d1e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001d20:	bf00      	nop
 8001d22:	370c      	adds	r7, #12
 8001d24:	46bd      	mov	sp, r7
 8001d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2a:	4770      	bx	lr

08001d2c <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr

08001d42 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001d42:	b480      	push	{r7}
 8001d44:	b083      	sub	sp, #12
 8001d46:	af00      	add	r7, sp, #0
 8001d48:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d54:	4770      	bx	lr

08001d56 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001d56:	b480      	push	{r7}
 8001d58:	b083      	sub	sp, #12
 8001d5a:	af00      	add	r7, sp, #0
 8001d5c:	6078      	str	r0, [r7, #4]
 8001d5e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001d60:	bf00      	nop
 8001d62:	370c      	adds	r7, #12
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr

08001d6c <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d80:	4770      	bx	lr

08001d82 <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001d82:	b480      	push	{r7}
 8001d84:	b083      	sub	sp, #12
 8001d86:	af00      	add	r7, sp, #0
 8001d88:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da8:	4770      	bx	lr

08001daa <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001daa:	b480      	push	{r7}
 8001dac:	b083      	sub	sp, #12
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbc:	4770      	bx	lr

08001dbe <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001dbe:	b480      	push	{r7}
 8001dc0:	b083      	sub	sp, #12
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr

08001dd2 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001dd2:	b480      	push	{r7}
 8001dd4:	b083      	sub	sp, #12
 8001dd6:	af00      	add	r7, sp, #0
 8001dd8:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr

08001de6 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001de6:	b480      	push	{r7}
 8001de8:	b083      	sub	sp, #12
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
 8001dee:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001df0:	bf00      	nop
 8001df2:	370c      	adds	r7, #12
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8001e06:	bf00      	nop
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
 8001e1a:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr

08001e28 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b085      	sub	sp, #20
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	60f8      	str	r0, [r7, #12]
 8001e30:	60b9      	str	r1, [r7, #8]
 8001e32:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8001e34:	bf00      	nop
 8001e36:	3714      	adds	r7, #20
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e3e:	4770      	bx	lr

08001e40 <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8001e40:	b480      	push	{r7}
 8001e42:	b083      	sub	sp, #12
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
 8001e48:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr
	...

08001e58 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b085      	sub	sp, #20
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e64:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001e6e:	4ba7      	ldr	r3, [pc, #668]	; (800210c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e70:	4013      	ands	r3, r2
 8001e72:	68ba      	ldr	r2, [r7, #8]
 8001e74:	0091      	lsls	r1, r2, #2
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6812      	ldr	r2, [r2, #0]
 8001e7a:	430b      	orrs	r3, r1
 8001e7c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001e88:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e90:	041a      	lsls	r2, r3, #16
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	430a      	orrs	r2, r1
 8001e98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ea0:	68ba      	ldr	r2, [r7, #8]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001eae:	4b97      	ldr	r3, [pc, #604]	; (800210c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	68ba      	ldr	r2, [r7, #8]
 8001eb4:	0091      	lsls	r1, r2, #2
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	6812      	ldr	r2, [r2, #0]
 8001eba:	430b      	orrs	r3, r1
 8001ebc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ec8:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ed0:	041a      	lsls	r2, r3, #16
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ee0:	005b      	lsls	r3, r3, #1
 8001ee2:	68ba      	ldr	r2, [r7, #8]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001ef0:	4b86      	ldr	r3, [pc, #536]	; (800210c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001ef2:	4013      	ands	r3, r2
 8001ef4:	68ba      	ldr	r2, [r7, #8]
 8001ef6:	0091      	lsls	r1, r2, #2
 8001ef8:	687a      	ldr	r2, [r7, #4]
 8001efa:	6812      	ldr	r2, [r2, #0]
 8001efc:	430b      	orrs	r3, r1
 8001efe:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001f0a:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f12:	041a      	lsls	r2, r3, #16
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f22:	687a      	ldr	r2, [r7, #4]
 8001f24:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001f26:	fb02 f303 	mul.w	r3, r2, r3
 8001f2a:	68ba      	ldr	r2, [r7, #8]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001f38:	4b74      	ldr	r3, [pc, #464]	; (800210c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001f3a:	4013      	ands	r3, r2
 8001f3c:	68ba      	ldr	r2, [r7, #8]
 8001f3e:	0091      	lsls	r1, r2, #2
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	6812      	ldr	r2, [r2, #0]
 8001f44:	430b      	orrs	r3, r1
 8001f46:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001f52:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f5a:	041a      	lsls	r2, r3, #16
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	430a      	orrs	r2, r1
 8001f62:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f6a:	687a      	ldr	r2, [r7, #4]
 8001f6c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001f6e:	fb02 f303 	mul.w	r3, r2, r3
 8001f72:	68ba      	ldr	r2, [r7, #8]
 8001f74:	4413      	add	r3, r2
 8001f76:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001f80:	4b62      	ldr	r3, [pc, #392]	; (800210c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001f82:	4013      	ands	r3, r2
 8001f84:	68ba      	ldr	r2, [r7, #8]
 8001f86:	0091      	lsls	r1, r2, #2
 8001f88:	687a      	ldr	r2, [r7, #4]
 8001f8a:	6812      	ldr	r2, [r2, #0]
 8001f8c:	430b      	orrs	r3, r1
 8001f8e:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f96:	687a      	ldr	r2, [r7, #4]
 8001f98:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001f9a:	fb02 f303 	mul.w	r3, r2, r3
 8001f9e:	68ba      	ldr	r2, [r7, #8]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001fac:	4b57      	ldr	r3, [pc, #348]	; (800210c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001fae:	4013      	ands	r3, r2
 8001fb0:	68ba      	ldr	r2, [r7, #8]
 8001fb2:	0091      	lsls	r1, r2, #2
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	6812      	ldr	r2, [r2, #0]
 8001fb8:	430b      	orrs	r3, r1
 8001fba:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001fc6:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fce:	041a      	lsls	r2, r3, #16
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	68ba      	ldr	r2, [r7, #8]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001fee:	4b47      	ldr	r3, [pc, #284]	; (800210c <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001ff0:	4013      	ands	r3, r2
 8001ff2:	68ba      	ldr	r2, [r7, #8]
 8001ff4:	0091      	lsls	r1, r2, #2
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	6812      	ldr	r2, [r2, #0]
 8001ffa:	430b      	orrs	r3, r1
 8001ffc:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002008:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002010:	041a      	lsls	r2, r3, #16
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	430a      	orrs	r2, r1
 8002018:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002024:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800202c:	061a      	lsls	r2, r3, #24
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	430a      	orrs	r2, r1
 8002034:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800203c:	4b34      	ldr	r3, [pc, #208]	; (8002110 <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 800203e:	4413      	add	r3, r2
 8002040:	009a      	lsls	r2, r3, #2
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800204e:	009b      	lsls	r3, r3, #2
 8002050:	441a      	add	r2, r3
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	441a      	add	r2, r3
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206e:	6879      	ldr	r1, [r7, #4]
 8002070:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8002072:	fb01 f303 	mul.w	r3, r1, r3
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	441a      	add	r2, r3
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 800208a:	fb01 f303 	mul.w	r3, r1, r3
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	441a      	add	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	6d49      	ldr	r1, [r1, #84]	; 0x54
 80020a2:	fb01 f303 	mul.w	r3, r1, r3
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	441a      	add	r2, r3
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	441a      	add	r2, r3
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80020d2:	fb01 f303 	mul.w	r3, r1, r3
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	441a      	add	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	6e89      	ldr	r1, [r1, #104]	; 0x68
 80020ee:	fb01 f303 	mul.w	r3, r1, r3
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	441a      	add	r2, r3
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002102:	4a04      	ldr	r2, [pc, #16]	; (8002114 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8002104:	4293      	cmp	r3, r2
 8002106:	d915      	bls.n	8002134 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8002108:	e006      	b.n	8002118 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 800210a:	bf00      	nop
 800210c:	ffff0003 	.word	0xffff0003
 8002110:	10002b00 	.word	0x10002b00
 8002114:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800211e:	f043 0220 	orr.w	r2, r3, #32
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2203      	movs	r2, #3
 800212c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8002130:	2301      	movs	r3, #1
 8002132:	e010      	b.n	8002156 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002138:	60fb      	str	r3, [r7, #12]
 800213a:	e005      	b.n	8002148 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	2200      	movs	r2, #0
 8002140:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	3304      	adds	r3, #4
 8002146:	60fb      	str	r3, [r7, #12]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	429a      	cmp	r2, r3
 8002152:	d3f3      	bcc.n	800213c <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8002154:	2300      	movs	r3, #0
}
 8002156:	4618      	mov	r0, r3
 8002158:	3714      	adds	r7, #20
 800215a:	46bd      	mov	sp, r7
 800215c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002160:	4770      	bx	lr
 8002162:	bf00      	nop

08002164 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8002164:	b480      	push	{r7}
 8002166:	b089      	sub	sp, #36	; 0x24
 8002168:	af00      	add	r7, sp, #0
 800216a:	60f8      	str	r0, [r7, #12]
 800216c:	60b9      	str	r1, [r7, #8]
 800216e:	607a      	str	r2, [r7, #4]
 8002170:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	2b00      	cmp	r3, #0
 8002178:	d10a      	bne.n	8002190 <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800217a:	68bb      	ldr	r3, [r7, #8]
 800217c:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 8002182:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8002184:	68bb      	ldr	r3, [r7, #8]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800218a:	4313      	orrs	r3, r2
 800218c:	61fb      	str	r3, [r7, #28]
 800218e:	e00a      	b.n	80021a6 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002190:	68bb      	ldr	r3, [r7, #8]
 8002192:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002198:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800219e:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 80021a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80021a4:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	6a1b      	ldr	r3, [r3, #32]
 80021aa:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80021b0:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 80021b6:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 80021bc:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 80021c2:	4313      	orrs	r3, r2
 80021c4:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021d0:	6839      	ldr	r1, [r7, #0]
 80021d2:	fb01 f303 	mul.w	r3, r1, r3
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	4413      	add	r3, r2
 80021da:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 80021dc:	69bb      	ldr	r3, [r7, #24]
 80021de:	69fa      	ldr	r2, [r7, #28]
 80021e0:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	3304      	adds	r3, #4
 80021e6:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 80021e8:	69bb      	ldr	r3, [r7, #24]
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	601a      	str	r2, [r3, #0]
  TxAddress++;
 80021ee:	69bb      	ldr	r3, [r7, #24]
 80021f0:	3304      	adds	r3, #4
 80021f2:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80021f4:	2300      	movs	r3, #0
 80021f6:	617b      	str	r3, [r7, #20]
 80021f8:	e020      	b.n	800223c <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80021fa:	697b      	ldr	r3, [r7, #20]
 80021fc:	3303      	adds	r3, #3
 80021fe:	687a      	ldr	r2, [r7, #4]
 8002200:	4413      	add	r3, r2
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	3302      	adds	r3, #2
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	440b      	add	r3, r1
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002212:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	3301      	adds	r3, #1
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	440b      	add	r3, r1
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 8002220:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	697a      	ldr	r2, [r7, #20]
 8002226:	440a      	add	r2, r1
 8002228:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 800222a:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	601a      	str	r2, [r3, #0]
    TxAddress++;
 8002230:	69bb      	ldr	r3, [r7, #24]
 8002232:	3304      	adds	r3, #4
 8002234:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	3304      	adds	r3, #4
 800223a:	617b      	str	r3, [r7, #20]
 800223c:	68bb      	ldr	r3, [r7, #8]
 800223e:	68db      	ldr	r3, [r3, #12]
 8002240:	0c1b      	lsrs	r3, r3, #16
 8002242:	4a06      	ldr	r2, [pc, #24]	; (800225c <FDCAN_CopyMessageToRAM+0xf8>)
 8002244:	5cd3      	ldrb	r3, [r2, r3]
 8002246:	461a      	mov	r2, r3
 8002248:	697b      	ldr	r3, [r7, #20]
 800224a:	4293      	cmp	r3, r2
 800224c:	d3d5      	bcc.n	80021fa <FDCAN_CopyMessageToRAM+0x96>
  }
}
 800224e:	bf00      	nop
 8002250:	bf00      	nop
 8002252:	3724      	adds	r7, #36	; 0x24
 8002254:	46bd      	mov	sp, r7
 8002256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225a:	4770      	bx	lr
 800225c:	08004d3c 	.word	0x08004d3c

08002260 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002260:	b480      	push	{r7}
 8002262:	b089      	sub	sp, #36	; 0x24
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800226a:	2300      	movs	r3, #0
 800226c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800226e:	4b89      	ldr	r3, [pc, #548]	; (8002494 <HAL_GPIO_Init+0x234>)
 8002270:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002272:	e194      	b.n	800259e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	681a      	ldr	r2, [r3, #0]
 8002278:	2101      	movs	r1, #1
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	fa01 f303 	lsl.w	r3, r1, r3
 8002280:	4013      	ands	r3, r2
 8002282:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	2b00      	cmp	r3, #0
 8002288:	f000 8186 	beq.w	8002598 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800228c:	683b      	ldr	r3, [r7, #0]
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	f003 0303 	and.w	r3, r3, #3
 8002294:	2b01      	cmp	r3, #1
 8002296:	d005      	beq.n	80022a4 <HAL_GPIO_Init+0x44>
 8002298:	683b      	ldr	r3, [r7, #0]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 0303 	and.w	r3, r3, #3
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d130      	bne.n	8002306 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	005b      	lsls	r3, r3, #1
 80022ae:	2203      	movs	r2, #3
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	43db      	mvns	r3, r3
 80022b6:	69ba      	ldr	r2, [r7, #24]
 80022b8:	4013      	ands	r3, r2
 80022ba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	68da      	ldr	r2, [r3, #12]
 80022c0:	69fb      	ldr	r3, [r7, #28]
 80022c2:	005b      	lsls	r3, r3, #1
 80022c4:	fa02 f303 	lsl.w	r3, r2, r3
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	4313      	orrs	r3, r2
 80022cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	69ba      	ldr	r2, [r7, #24]
 80022d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	685b      	ldr	r3, [r3, #4]
 80022d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80022da:	2201      	movs	r2, #1
 80022dc:	69fb      	ldr	r3, [r7, #28]
 80022de:	fa02 f303 	lsl.w	r3, r2, r3
 80022e2:	43db      	mvns	r3, r3
 80022e4:	69ba      	ldr	r2, [r7, #24]
 80022e6:	4013      	ands	r3, r2
 80022e8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	091b      	lsrs	r3, r3, #4
 80022f0:	f003 0201 	and.w	r2, r3, #1
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	fa02 f303 	lsl.w	r3, r2, r3
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	69ba      	ldr	r2, [r7, #24]
 8002304:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	f003 0303 	and.w	r3, r3, #3
 800230e:	2b03      	cmp	r3, #3
 8002310:	d017      	beq.n	8002342 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002318:	69fb      	ldr	r3, [r7, #28]
 800231a:	005b      	lsls	r3, r3, #1
 800231c:	2203      	movs	r2, #3
 800231e:	fa02 f303 	lsl.w	r3, r2, r3
 8002322:	43db      	mvns	r3, r3
 8002324:	69ba      	ldr	r2, [r7, #24]
 8002326:	4013      	ands	r3, r2
 8002328:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	689a      	ldr	r2, [r3, #8]
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	005b      	lsls	r3, r3, #1
 8002332:	fa02 f303 	lsl.w	r3, r2, r3
 8002336:	69ba      	ldr	r2, [r7, #24]
 8002338:	4313      	orrs	r3, r2
 800233a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	69ba      	ldr	r2, [r7, #24]
 8002340:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f003 0303 	and.w	r3, r3, #3
 800234a:	2b02      	cmp	r3, #2
 800234c:	d123      	bne.n	8002396 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	08da      	lsrs	r2, r3, #3
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	3208      	adds	r2, #8
 8002356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800235a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	f003 0307 	and.w	r3, r3, #7
 8002362:	009b      	lsls	r3, r3, #2
 8002364:	220f      	movs	r2, #15
 8002366:	fa02 f303 	lsl.w	r3, r2, r3
 800236a:	43db      	mvns	r3, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4013      	ands	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	691a      	ldr	r2, [r3, #16]
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	f003 0307 	and.w	r3, r3, #7
 800237c:	009b      	lsls	r3, r3, #2
 800237e:	fa02 f303 	lsl.w	r3, r2, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4313      	orrs	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002388:	69fb      	ldr	r3, [r7, #28]
 800238a:	08da      	lsrs	r2, r3, #3
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	3208      	adds	r2, #8
 8002390:	69b9      	ldr	r1, [r7, #24]
 8002392:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	005b      	lsls	r3, r3, #1
 80023a0:	2203      	movs	r2, #3
 80023a2:	fa02 f303 	lsl.w	r3, r2, r3
 80023a6:	43db      	mvns	r3, r3
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	4013      	ands	r3, r2
 80023ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	f003 0203 	and.w	r2, r3, #3
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	005b      	lsls	r3, r3, #1
 80023ba:	fa02 f303 	lsl.w	r3, r2, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4313      	orrs	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	69ba      	ldr	r2, [r7, #24]
 80023c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	f000 80e0 	beq.w	8002598 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023d8:	4b2f      	ldr	r3, [pc, #188]	; (8002498 <HAL_GPIO_Init+0x238>)
 80023da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023de:	4a2e      	ldr	r2, [pc, #184]	; (8002498 <HAL_GPIO_Init+0x238>)
 80023e0:	f043 0302 	orr.w	r3, r3, #2
 80023e4:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80023e8:	4b2b      	ldr	r3, [pc, #172]	; (8002498 <HAL_GPIO_Init+0x238>)
 80023ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80023ee:	f003 0302 	and.w	r3, r3, #2
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80023f6:	4a29      	ldr	r2, [pc, #164]	; (800249c <HAL_GPIO_Init+0x23c>)
 80023f8:	69fb      	ldr	r3, [r7, #28]
 80023fa:	089b      	lsrs	r3, r3, #2
 80023fc:	3302      	adds	r3, #2
 80023fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	f003 0303 	and.w	r3, r3, #3
 800240a:	009b      	lsls	r3, r3, #2
 800240c:	220f      	movs	r2, #15
 800240e:	fa02 f303 	lsl.w	r3, r2, r3
 8002412:	43db      	mvns	r3, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4013      	ands	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	4a20      	ldr	r2, [pc, #128]	; (80024a0 <HAL_GPIO_Init+0x240>)
 800241e:	4293      	cmp	r3, r2
 8002420:	d052      	beq.n	80024c8 <HAL_GPIO_Init+0x268>
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	4a1f      	ldr	r2, [pc, #124]	; (80024a4 <HAL_GPIO_Init+0x244>)
 8002426:	4293      	cmp	r3, r2
 8002428:	d031      	beq.n	800248e <HAL_GPIO_Init+0x22e>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	4a1e      	ldr	r2, [pc, #120]	; (80024a8 <HAL_GPIO_Init+0x248>)
 800242e:	4293      	cmp	r3, r2
 8002430:	d02b      	beq.n	800248a <HAL_GPIO_Init+0x22a>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	4a1d      	ldr	r2, [pc, #116]	; (80024ac <HAL_GPIO_Init+0x24c>)
 8002436:	4293      	cmp	r3, r2
 8002438:	d025      	beq.n	8002486 <HAL_GPIO_Init+0x226>
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a1c      	ldr	r2, [pc, #112]	; (80024b0 <HAL_GPIO_Init+0x250>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d01f      	beq.n	8002482 <HAL_GPIO_Init+0x222>
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	4a1b      	ldr	r2, [pc, #108]	; (80024b4 <HAL_GPIO_Init+0x254>)
 8002446:	4293      	cmp	r3, r2
 8002448:	d019      	beq.n	800247e <HAL_GPIO_Init+0x21e>
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	4a1a      	ldr	r2, [pc, #104]	; (80024b8 <HAL_GPIO_Init+0x258>)
 800244e:	4293      	cmp	r3, r2
 8002450:	d013      	beq.n	800247a <HAL_GPIO_Init+0x21a>
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	4a19      	ldr	r2, [pc, #100]	; (80024bc <HAL_GPIO_Init+0x25c>)
 8002456:	4293      	cmp	r3, r2
 8002458:	d00d      	beq.n	8002476 <HAL_GPIO_Init+0x216>
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	4a18      	ldr	r2, [pc, #96]	; (80024c0 <HAL_GPIO_Init+0x260>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d007      	beq.n	8002472 <HAL_GPIO_Init+0x212>
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	4a17      	ldr	r2, [pc, #92]	; (80024c4 <HAL_GPIO_Init+0x264>)
 8002466:	4293      	cmp	r3, r2
 8002468:	d101      	bne.n	800246e <HAL_GPIO_Init+0x20e>
 800246a:	2309      	movs	r3, #9
 800246c:	e02d      	b.n	80024ca <HAL_GPIO_Init+0x26a>
 800246e:	230a      	movs	r3, #10
 8002470:	e02b      	b.n	80024ca <HAL_GPIO_Init+0x26a>
 8002472:	2308      	movs	r3, #8
 8002474:	e029      	b.n	80024ca <HAL_GPIO_Init+0x26a>
 8002476:	2307      	movs	r3, #7
 8002478:	e027      	b.n	80024ca <HAL_GPIO_Init+0x26a>
 800247a:	2306      	movs	r3, #6
 800247c:	e025      	b.n	80024ca <HAL_GPIO_Init+0x26a>
 800247e:	2305      	movs	r3, #5
 8002480:	e023      	b.n	80024ca <HAL_GPIO_Init+0x26a>
 8002482:	2304      	movs	r3, #4
 8002484:	e021      	b.n	80024ca <HAL_GPIO_Init+0x26a>
 8002486:	2303      	movs	r3, #3
 8002488:	e01f      	b.n	80024ca <HAL_GPIO_Init+0x26a>
 800248a:	2302      	movs	r3, #2
 800248c:	e01d      	b.n	80024ca <HAL_GPIO_Init+0x26a>
 800248e:	2301      	movs	r3, #1
 8002490:	e01b      	b.n	80024ca <HAL_GPIO_Init+0x26a>
 8002492:	bf00      	nop
 8002494:	58000080 	.word	0x58000080
 8002498:	58024400 	.word	0x58024400
 800249c:	58000400 	.word	0x58000400
 80024a0:	58020000 	.word	0x58020000
 80024a4:	58020400 	.word	0x58020400
 80024a8:	58020800 	.word	0x58020800
 80024ac:	58020c00 	.word	0x58020c00
 80024b0:	58021000 	.word	0x58021000
 80024b4:	58021400 	.word	0x58021400
 80024b8:	58021800 	.word	0x58021800
 80024bc:	58021c00 	.word	0x58021c00
 80024c0:	58022000 	.word	0x58022000
 80024c4:	58022400 	.word	0x58022400
 80024c8:	2300      	movs	r3, #0
 80024ca:	69fa      	ldr	r2, [r7, #28]
 80024cc:	f002 0203 	and.w	r2, r2, #3
 80024d0:	0092      	lsls	r2, r2, #2
 80024d2:	4093      	lsls	r3, r2
 80024d4:	69ba      	ldr	r2, [r7, #24]
 80024d6:	4313      	orrs	r3, r2
 80024d8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024da:	4938      	ldr	r1, [pc, #224]	; (80025bc <HAL_GPIO_Init+0x35c>)
 80024dc:	69fb      	ldr	r3, [r7, #28]
 80024de:	089b      	lsrs	r3, r3, #2
 80024e0:	3302      	adds	r3, #2
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80024e8:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	43db      	mvns	r3, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4013      	ands	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002502:	2b00      	cmp	r3, #0
 8002504:	d003      	beq.n	800250e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	4313      	orrs	r3, r2
 800250c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800250e:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002512:	69bb      	ldr	r3, [r7, #24]
 8002514:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002516:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800251e:	693b      	ldr	r3, [r7, #16]
 8002520:	43db      	mvns	r3, r3
 8002522:	69ba      	ldr	r2, [r7, #24]
 8002524:	4013      	ands	r3, r2
 8002526:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002530:	2b00      	cmp	r3, #0
 8002532:	d003      	beq.n	800253c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002534:	69ba      	ldr	r2, [r7, #24]
 8002536:	693b      	ldr	r3, [r7, #16]
 8002538:	4313      	orrs	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800253c:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002540:	69bb      	ldr	r3, [r7, #24]
 8002542:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002544:	697b      	ldr	r3, [r7, #20]
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	43db      	mvns	r3, r3
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	4013      	ands	r3, r2
 8002552:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800255c:	2b00      	cmp	r3, #0
 800255e:	d003      	beq.n	8002568 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002560:	69ba      	ldr	r2, [r7, #24]
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	4313      	orrs	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	69ba      	ldr	r2, [r7, #24]
 800256c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800256e:	697b      	ldr	r3, [r7, #20]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	43db      	mvns	r3, r3
 8002578:	69ba      	ldr	r2, [r7, #24]
 800257a:	4013      	ands	r3, r2
 800257c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d003      	beq.n	8002592 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800258a:	69ba      	ldr	r2, [r7, #24]
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	4313      	orrs	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002598:	69fb      	ldr	r3, [r7, #28]
 800259a:	3301      	adds	r3, #1
 800259c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	fa22 f303 	lsr.w	r3, r2, r3
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	f47f ae63 	bne.w	8002274 <HAL_GPIO_Init+0x14>
  }
}
 80025ae:	bf00      	nop
 80025b0:	bf00      	nop
 80025b2:	3724      	adds	r7, #36	; 0x24
 80025b4:	46bd      	mov	sp, r7
 80025b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ba:	4770      	bx	lr
 80025bc:	58000400 	.word	0x58000400

080025c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	807b      	strh	r3, [r7, #2]
 80025cc:	4613      	mov	r3, r2
 80025ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80025d0:	787b      	ldrb	r3, [r7, #1]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025d6:	887a      	ldrh	r2, [r7, #2]
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 80025dc:	e003      	b.n	80025e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80025de:	887b      	ldrh	r3, [r7, #2]
 80025e0:	041a      	lsls	r2, r3, #16
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	619a      	str	r2, [r3, #24]
}
 80025e6:	bf00      	nop
 80025e8:	370c      	adds	r7, #12
 80025ea:	46bd      	mov	sp, r7
 80025ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f0:	4770      	bx	lr

080025f2 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b085      	sub	sp, #20
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
 80025fa:	460b      	mov	r3, r1
 80025fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002604:	887a      	ldrh	r2, [r7, #2]
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	4013      	ands	r3, r2
 800260a:	041a      	lsls	r2, r3, #16
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	43d9      	mvns	r1, r3
 8002610:	887b      	ldrh	r3, [r7, #2]
 8002612:	400b      	ands	r3, r1
 8002614:	431a      	orrs	r2, r3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	619a      	str	r2, [r3, #24]
}
 800261a:	bf00      	nop
 800261c:	3714      	adds	r7, #20
 800261e:	46bd      	mov	sp, r7
 8002620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002624:	4770      	bx	lr
	...

08002628 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b084      	sub	sp, #16
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002630:	4b19      	ldr	r3, [pc, #100]	; (8002698 <HAL_PWREx_ConfigSupply+0x70>)
 8002632:	68db      	ldr	r3, [r3, #12]
 8002634:	f003 0304 	and.w	r3, r3, #4
 8002638:	2b04      	cmp	r3, #4
 800263a:	d00a      	beq.n	8002652 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800263c:	4b16      	ldr	r3, [pc, #88]	; (8002698 <HAL_PWREx_ConfigSupply+0x70>)
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	429a      	cmp	r2, r3
 8002648:	d001      	beq.n	800264e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e01f      	b.n	800268e <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800264e:	2300      	movs	r3, #0
 8002650:	e01d      	b.n	800268e <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002652:	4b11      	ldr	r3, [pc, #68]	; (8002698 <HAL_PWREx_ConfigSupply+0x70>)
 8002654:	68db      	ldr	r3, [r3, #12]
 8002656:	f023 0207 	bic.w	r2, r3, #7
 800265a:	490f      	ldr	r1, [pc, #60]	; (8002698 <HAL_PWREx_ConfigSupply+0x70>)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4313      	orrs	r3, r2
 8002660:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002662:	f7fe fae1 	bl	8000c28 <HAL_GetTick>
 8002666:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002668:	e009      	b.n	800267e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800266a:	f7fe fadd 	bl	8000c28 <HAL_GetTick>
 800266e:	4602      	mov	r2, r0
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	1ad3      	subs	r3, r2, r3
 8002674:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002678:	d901      	bls.n	800267e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e007      	b.n	800268e <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800267e:	4b06      	ldr	r3, [pc, #24]	; (8002698 <HAL_PWREx_ConfigSupply+0x70>)
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800268a:	d1ee      	bne.n	800266a <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	58024800 	.word	0x58024800

0800269c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b08c      	sub	sp, #48	; 0x30
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d102      	bne.n	80026b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80026aa:	2301      	movs	r3, #1
 80026ac:	f000 bc48 	b.w	8002f40 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0301 	and.w	r3, r3, #1
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 8088 	beq.w	80027ce <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026be:	4b99      	ldr	r3, [pc, #612]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 80026c0:	691b      	ldr	r3, [r3, #16]
 80026c2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80026c8:	4b96      	ldr	r3, [pc, #600]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 80026ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026cc:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80026ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d0:	2b10      	cmp	r3, #16
 80026d2:	d007      	beq.n	80026e4 <HAL_RCC_OscConfig+0x48>
 80026d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026d6:	2b18      	cmp	r3, #24
 80026d8:	d111      	bne.n	80026fe <HAL_RCC_OscConfig+0x62>
 80026da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026dc:	f003 0303 	and.w	r3, r3, #3
 80026e0:	2b02      	cmp	r3, #2
 80026e2:	d10c      	bne.n	80026fe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026e4:	4b8f      	ldr	r3, [pc, #572]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d06d      	beq.n	80027cc <HAL_RCC_OscConfig+0x130>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d169      	bne.n	80027cc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	f000 bc21 	b.w	8002f40 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002706:	d106      	bne.n	8002716 <HAL_RCC_OscConfig+0x7a>
 8002708:	4b86      	ldr	r3, [pc, #536]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a85      	ldr	r2, [pc, #532]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 800270e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002712:	6013      	str	r3, [r2, #0]
 8002714:	e02e      	b.n	8002774 <HAL_RCC_OscConfig+0xd8>
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d10c      	bne.n	8002738 <HAL_RCC_OscConfig+0x9c>
 800271e:	4b81      	ldr	r3, [pc, #516]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4a80      	ldr	r2, [pc, #512]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 8002724:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002728:	6013      	str	r3, [r2, #0]
 800272a:	4b7e      	ldr	r3, [pc, #504]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a7d      	ldr	r2, [pc, #500]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 8002730:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002734:	6013      	str	r3, [r2, #0]
 8002736:	e01d      	b.n	8002774 <HAL_RCC_OscConfig+0xd8>
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002740:	d10c      	bne.n	800275c <HAL_RCC_OscConfig+0xc0>
 8002742:	4b78      	ldr	r3, [pc, #480]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a77      	ldr	r2, [pc, #476]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 8002748:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800274c:	6013      	str	r3, [r2, #0]
 800274e:	4b75      	ldr	r3, [pc, #468]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a74      	ldr	r2, [pc, #464]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 8002754:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002758:	6013      	str	r3, [r2, #0]
 800275a:	e00b      	b.n	8002774 <HAL_RCC_OscConfig+0xd8>
 800275c:	4b71      	ldr	r3, [pc, #452]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	4a70      	ldr	r2, [pc, #448]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 8002762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002766:	6013      	str	r3, [r2, #0]
 8002768:	4b6e      	ldr	r3, [pc, #440]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a6d      	ldr	r2, [pc, #436]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 800276e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002772:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	2b00      	cmp	r3, #0
 800277a:	d013      	beq.n	80027a4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800277c:	f7fe fa54 	bl	8000c28 <HAL_GetTick>
 8002780:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002782:	e008      	b.n	8002796 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002784:	f7fe fa50 	bl	8000c28 <HAL_GetTick>
 8002788:	4602      	mov	r2, r0
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	2b64      	cmp	r3, #100	; 0x64
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e3d4      	b.n	8002f40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002796:	4b63      	ldr	r3, [pc, #396]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d0f0      	beq.n	8002784 <HAL_RCC_OscConfig+0xe8>
 80027a2:	e014      	b.n	80027ce <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027a4:	f7fe fa40 	bl	8000c28 <HAL_GetTick>
 80027a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027aa:	e008      	b.n	80027be <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027ac:	f7fe fa3c 	bl	8000c28 <HAL_GetTick>
 80027b0:	4602      	mov	r2, r0
 80027b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027b4:	1ad3      	subs	r3, r2, r3
 80027b6:	2b64      	cmp	r3, #100	; 0x64
 80027b8:	d901      	bls.n	80027be <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80027ba:	2303      	movs	r3, #3
 80027bc:	e3c0      	b.n	8002f40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027be:	4b59      	ldr	r3, [pc, #356]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d1f0      	bne.n	80027ac <HAL_RCC_OscConfig+0x110>
 80027ca:	e000      	b.n	80027ce <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 0302 	and.w	r3, r3, #2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f000 80ca 	beq.w	8002970 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027dc:	4b51      	ldr	r3, [pc, #324]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80027e4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80027e6:	4b4f      	ldr	r3, [pc, #316]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 80027e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027ea:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d007      	beq.n	8002802 <HAL_RCC_OscConfig+0x166>
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	2b18      	cmp	r3, #24
 80027f6:	d156      	bne.n	80028a6 <HAL_RCC_OscConfig+0x20a>
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	f003 0303 	and.w	r3, r3, #3
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d151      	bne.n	80028a6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002802:	4b48      	ldr	r3, [pc, #288]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0304 	and.w	r3, r3, #4
 800280a:	2b00      	cmp	r3, #0
 800280c:	d005      	beq.n	800281a <HAL_RCC_OscConfig+0x17e>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d101      	bne.n	800281a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002816:	2301      	movs	r3, #1
 8002818:	e392      	b.n	8002f40 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800281a:	4b42      	ldr	r3, [pc, #264]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f023 0219 	bic.w	r2, r3, #25
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	68db      	ldr	r3, [r3, #12]
 8002826:	493f      	ldr	r1, [pc, #252]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 8002828:	4313      	orrs	r3, r2
 800282a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800282c:	f7fe f9fc 	bl	8000c28 <HAL_GetTick>
 8002830:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002832:	e008      	b.n	8002846 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002834:	f7fe f9f8 	bl	8000c28 <HAL_GetTick>
 8002838:	4602      	mov	r2, r0
 800283a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	2b02      	cmp	r3, #2
 8002840:	d901      	bls.n	8002846 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002842:	2303      	movs	r3, #3
 8002844:	e37c      	b.n	8002f40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002846:	4b37      	ldr	r3, [pc, #220]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 0304 	and.w	r3, r3, #4
 800284e:	2b00      	cmp	r3, #0
 8002850:	d0f0      	beq.n	8002834 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002852:	f7fe fa19 	bl	8000c88 <HAL_GetREVID>
 8002856:	4603      	mov	r3, r0
 8002858:	f241 0203 	movw	r2, #4099	; 0x1003
 800285c:	4293      	cmp	r3, r2
 800285e:	d817      	bhi.n	8002890 <HAL_RCC_OscConfig+0x1f4>
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	691b      	ldr	r3, [r3, #16]
 8002864:	2b40      	cmp	r3, #64	; 0x40
 8002866:	d108      	bne.n	800287a <HAL_RCC_OscConfig+0x1de>
 8002868:	4b2e      	ldr	r3, [pc, #184]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002870:	4a2c      	ldr	r2, [pc, #176]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 8002872:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002876:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002878:	e07a      	b.n	8002970 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800287a:	4b2a      	ldr	r3, [pc, #168]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	691b      	ldr	r3, [r3, #16]
 8002886:	031b      	lsls	r3, r3, #12
 8002888:	4926      	ldr	r1, [pc, #152]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 800288a:	4313      	orrs	r3, r2
 800288c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800288e:	e06f      	b.n	8002970 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002890:	4b24      	ldr	r3, [pc, #144]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691b      	ldr	r3, [r3, #16]
 800289c:	061b      	lsls	r3, r3, #24
 800289e:	4921      	ldr	r1, [pc, #132]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 80028a0:	4313      	orrs	r3, r2
 80028a2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80028a4:	e064      	b.n	8002970 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	68db      	ldr	r3, [r3, #12]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d047      	beq.n	800293e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80028ae:	4b1d      	ldr	r3, [pc, #116]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f023 0219 	bic.w	r2, r3, #25
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	68db      	ldr	r3, [r3, #12]
 80028ba:	491a      	ldr	r1, [pc, #104]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c0:	f7fe f9b2 	bl	8000c28 <HAL_GetTick>
 80028c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028c8:	f7fe f9ae 	bl	8000c28 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e332      	b.n	8002f40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80028da:	4b12      	ldr	r3, [pc, #72]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0304 	and.w	r3, r3, #4
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0f0      	beq.n	80028c8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028e6:	f7fe f9cf 	bl	8000c88 <HAL_GetREVID>
 80028ea:	4603      	mov	r3, r0
 80028ec:	f241 0203 	movw	r2, #4099	; 0x1003
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d819      	bhi.n	8002928 <HAL_RCC_OscConfig+0x28c>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	2b40      	cmp	r3, #64	; 0x40
 80028fa:	d108      	bne.n	800290e <HAL_RCC_OscConfig+0x272>
 80028fc:	4b09      	ldr	r3, [pc, #36]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002904:	4a07      	ldr	r2, [pc, #28]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 8002906:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800290a:	6053      	str	r3, [r2, #4]
 800290c:	e030      	b.n	8002970 <HAL_RCC_OscConfig+0x2d4>
 800290e:	4b05      	ldr	r3, [pc, #20]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	031b      	lsls	r3, r3, #12
 800291c:	4901      	ldr	r1, [pc, #4]	; (8002924 <HAL_RCC_OscConfig+0x288>)
 800291e:	4313      	orrs	r3, r2
 8002920:	604b      	str	r3, [r1, #4]
 8002922:	e025      	b.n	8002970 <HAL_RCC_OscConfig+0x2d4>
 8002924:	58024400 	.word	0x58024400
 8002928:	4b9a      	ldr	r3, [pc, #616]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	691b      	ldr	r3, [r3, #16]
 8002934:	061b      	lsls	r3, r3, #24
 8002936:	4997      	ldr	r1, [pc, #604]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002938:	4313      	orrs	r3, r2
 800293a:	604b      	str	r3, [r1, #4]
 800293c:	e018      	b.n	8002970 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800293e:	4b95      	ldr	r3, [pc, #596]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a94      	ldr	r2, [pc, #592]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002944:	f023 0301 	bic.w	r3, r3, #1
 8002948:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294a:	f7fe f96d 	bl	8000c28 <HAL_GetTick>
 800294e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002950:	e008      	b.n	8002964 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002952:	f7fe f969 	bl	8000c28 <HAL_GetTick>
 8002956:	4602      	mov	r2, r0
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	2b02      	cmp	r3, #2
 800295e:	d901      	bls.n	8002964 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e2ed      	b.n	8002f40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002964:	4b8b      	ldr	r3, [pc, #556]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f003 0304 	and.w	r3, r3, #4
 800296c:	2b00      	cmp	r3, #0
 800296e:	d1f0      	bne.n	8002952 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0310 	and.w	r3, r3, #16
 8002978:	2b00      	cmp	r3, #0
 800297a:	f000 80a9 	beq.w	8002ad0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800297e:	4b85      	ldr	r3, [pc, #532]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002980:	691b      	ldr	r3, [r3, #16]
 8002982:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002986:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002988:	4b82      	ldr	r3, [pc, #520]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 800298a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	2b08      	cmp	r3, #8
 8002992:	d007      	beq.n	80029a4 <HAL_RCC_OscConfig+0x308>
 8002994:	69bb      	ldr	r3, [r7, #24]
 8002996:	2b18      	cmp	r3, #24
 8002998:	d13a      	bne.n	8002a10 <HAL_RCC_OscConfig+0x374>
 800299a:	697b      	ldr	r3, [r7, #20]
 800299c:	f003 0303 	and.w	r3, r3, #3
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d135      	bne.n	8002a10 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029a4:	4b7b      	ldr	r3, [pc, #492]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d005      	beq.n	80029bc <HAL_RCC_OscConfig+0x320>
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	69db      	ldr	r3, [r3, #28]
 80029b4:	2b80      	cmp	r3, #128	; 0x80
 80029b6:	d001      	beq.n	80029bc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e2c1      	b.n	8002f40 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029bc:	f7fe f964 	bl	8000c88 <HAL_GetREVID>
 80029c0:	4603      	mov	r3, r0
 80029c2:	f241 0203 	movw	r2, #4099	; 0x1003
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d817      	bhi.n	80029fa <HAL_RCC_OscConfig+0x35e>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	2b20      	cmp	r3, #32
 80029d0:	d108      	bne.n	80029e4 <HAL_RCC_OscConfig+0x348>
 80029d2:	4b70      	ldr	r3, [pc, #448]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80029da:	4a6e      	ldr	r2, [pc, #440]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 80029dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80029e0:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029e2:	e075      	b.n	8002ad0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029e4:	4b6b      	ldr	r3, [pc, #428]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	6a1b      	ldr	r3, [r3, #32]
 80029f0:	069b      	lsls	r3, r3, #26
 80029f2:	4968      	ldr	r1, [pc, #416]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80029f8:	e06a      	b.n	8002ad0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80029fa:	4b66      	ldr	r3, [pc, #408]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 80029fc:	68db      	ldr	r3, [r3, #12]
 80029fe:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6a1b      	ldr	r3, [r3, #32]
 8002a06:	061b      	lsls	r3, r3, #24
 8002a08:	4962      	ldr	r1, [pc, #392]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002a0e:	e05f      	b.n	8002ad0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	69db      	ldr	r3, [r3, #28]
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	d042      	beq.n	8002a9e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002a18:	4b5e      	ldr	r3, [pc, #376]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4a5d      	ldr	r2, [pc, #372]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002a1e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a24:	f7fe f900 	bl	8000c28 <HAL_GetTick>
 8002a28:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002a2c:	f7fe f8fc 	bl	8000c28 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e280      	b.n	8002f40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002a3e:	4b55      	ldr	r3, [pc, #340]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d0f0      	beq.n	8002a2c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002a4a:	f7fe f91d 	bl	8000c88 <HAL_GetREVID>
 8002a4e:	4603      	mov	r3, r0
 8002a50:	f241 0203 	movw	r2, #4099	; 0x1003
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d817      	bhi.n	8002a88 <HAL_RCC_OscConfig+0x3ec>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6a1b      	ldr	r3, [r3, #32]
 8002a5c:	2b20      	cmp	r3, #32
 8002a5e:	d108      	bne.n	8002a72 <HAL_RCC_OscConfig+0x3d6>
 8002a60:	4b4c      	ldr	r3, [pc, #304]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002a62:	685b      	ldr	r3, [r3, #4]
 8002a64:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002a68:	4a4a      	ldr	r2, [pc, #296]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002a6a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002a6e:	6053      	str	r3, [r2, #4]
 8002a70:	e02e      	b.n	8002ad0 <HAL_RCC_OscConfig+0x434>
 8002a72:	4b48      	ldr	r3, [pc, #288]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	069b      	lsls	r3, r3, #26
 8002a80:	4944      	ldr	r1, [pc, #272]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002a82:	4313      	orrs	r3, r2
 8002a84:	604b      	str	r3, [r1, #4]
 8002a86:	e023      	b.n	8002ad0 <HAL_RCC_OscConfig+0x434>
 8002a88:	4b42      	ldr	r3, [pc, #264]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	061b      	lsls	r3, r3, #24
 8002a96:	493f      	ldr	r1, [pc, #252]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002a98:	4313      	orrs	r3, r2
 8002a9a:	60cb      	str	r3, [r1, #12]
 8002a9c:	e018      	b.n	8002ad0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8002a9e:	4b3d      	ldr	r3, [pc, #244]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	4a3c      	ldr	r2, [pc, #240]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002aa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002aa8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aaa:	f7fe f8bd 	bl	8000c28 <HAL_GetTick>
 8002aae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ab0:	e008      	b.n	8002ac4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002ab2:	f7fe f8b9 	bl	8000c28 <HAL_GetTick>
 8002ab6:	4602      	mov	r2, r0
 8002ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	2b02      	cmp	r3, #2
 8002abe:	d901      	bls.n	8002ac4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	e23d      	b.n	8002f40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002ac4:	4b33      	ldr	r3, [pc, #204]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d1f0      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0308 	and.w	r3, r3, #8
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d036      	beq.n	8002b4a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	695b      	ldr	r3, [r3, #20]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d019      	beq.n	8002b18 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ae4:	4b2b      	ldr	r3, [pc, #172]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002ae6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ae8:	4a2a      	ldr	r2, [pc, #168]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002aea:	f043 0301 	orr.w	r3, r3, #1
 8002aee:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002af0:	f7fe f89a 	bl	8000c28 <HAL_GetTick>
 8002af4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002af8:	f7fe f896 	bl	8000c28 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e21a      	b.n	8002f40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002b0a:	4b22      	ldr	r3, [pc, #136]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002b0c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b0e:	f003 0302 	and.w	r3, r3, #2
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0f0      	beq.n	8002af8 <HAL_RCC_OscConfig+0x45c>
 8002b16:	e018      	b.n	8002b4a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b18:	4b1e      	ldr	r3, [pc, #120]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002b1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b1c:	4a1d      	ldr	r2, [pc, #116]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002b1e:	f023 0301 	bic.w	r3, r3, #1
 8002b22:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b24:	f7fe f880 	bl	8000c28 <HAL_GetTick>
 8002b28:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b2c:	f7fe f87c 	bl	8000c28 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e200      	b.n	8002f40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002b3e:	4b15      	ldr	r3, [pc, #84]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002b40:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f0      	bne.n	8002b2c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0320 	and.w	r3, r3, #32
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d039      	beq.n	8002bca <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d01c      	beq.n	8002b98 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002b5e:	4b0d      	ldr	r3, [pc, #52]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a0c      	ldr	r2, [pc, #48]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002b64:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b68:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002b6a:	f7fe f85d 	bl	8000c28 <HAL_GetTick>
 8002b6e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b70:	e008      	b.n	8002b84 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b72:	f7fe f859 	bl	8000c28 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d901      	bls.n	8002b84 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e1dd      	b.n	8002f40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002b84:	4b03      	ldr	r3, [pc, #12]	; (8002b94 <HAL_RCC_OscConfig+0x4f8>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d0f0      	beq.n	8002b72 <HAL_RCC_OscConfig+0x4d6>
 8002b90:	e01b      	b.n	8002bca <HAL_RCC_OscConfig+0x52e>
 8002b92:	bf00      	nop
 8002b94:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b98:	4b9b      	ldr	r3, [pc, #620]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a9a      	ldr	r2, [pc, #616]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002b9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002ba2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002ba4:	f7fe f840 	bl	8000c28 <HAL_GetTick>
 8002ba8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002bac:	f7fe f83c 	bl	8000c28 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e1c0      	b.n	8002f40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002bbe:	4b92      	ldr	r3, [pc, #584]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1f0      	bne.n	8002bac <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 0304 	and.w	r3, r3, #4
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	f000 8081 	beq.w	8002cda <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002bd8:	4b8c      	ldr	r3, [pc, #560]	; (8002e0c <HAL_RCC_OscConfig+0x770>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4a8b      	ldr	r2, [pc, #556]	; (8002e0c <HAL_RCC_OscConfig+0x770>)
 8002bde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002be2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002be4:	f7fe f820 	bl	8000c28 <HAL_GetTick>
 8002be8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bec:	f7fe f81c 	bl	8000c28 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b64      	cmp	r3, #100	; 0x64
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e1a0      	b.n	8002f40 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002bfe:	4b83      	ldr	r3, [pc, #524]	; (8002e0c <HAL_RCC_OscConfig+0x770>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0f0      	beq.n	8002bec <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d106      	bne.n	8002c20 <HAL_RCC_OscConfig+0x584>
 8002c12:	4b7d      	ldr	r3, [pc, #500]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c16:	4a7c      	ldr	r2, [pc, #496]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002c18:	f043 0301 	orr.w	r3, r3, #1
 8002c1c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c1e:	e02d      	b.n	8002c7c <HAL_RCC_OscConfig+0x5e0>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d10c      	bne.n	8002c42 <HAL_RCC_OscConfig+0x5a6>
 8002c28:	4b77      	ldr	r3, [pc, #476]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002c2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c2c:	4a76      	ldr	r2, [pc, #472]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002c2e:	f023 0301 	bic.w	r3, r3, #1
 8002c32:	6713      	str	r3, [r2, #112]	; 0x70
 8002c34:	4b74      	ldr	r3, [pc, #464]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002c36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c38:	4a73      	ldr	r2, [pc, #460]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002c3a:	f023 0304 	bic.w	r3, r3, #4
 8002c3e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c40:	e01c      	b.n	8002c7c <HAL_RCC_OscConfig+0x5e0>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	2b05      	cmp	r3, #5
 8002c48:	d10c      	bne.n	8002c64 <HAL_RCC_OscConfig+0x5c8>
 8002c4a:	4b6f      	ldr	r3, [pc, #444]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002c4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4e:	4a6e      	ldr	r2, [pc, #440]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002c50:	f043 0304 	orr.w	r3, r3, #4
 8002c54:	6713      	str	r3, [r2, #112]	; 0x70
 8002c56:	4b6c      	ldr	r3, [pc, #432]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002c58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c5a:	4a6b      	ldr	r2, [pc, #428]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002c5c:	f043 0301 	orr.w	r3, r3, #1
 8002c60:	6713      	str	r3, [r2, #112]	; 0x70
 8002c62:	e00b      	b.n	8002c7c <HAL_RCC_OscConfig+0x5e0>
 8002c64:	4b68      	ldr	r3, [pc, #416]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002c66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c68:	4a67      	ldr	r2, [pc, #412]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002c6a:	f023 0301 	bic.w	r3, r3, #1
 8002c6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002c70:	4b65      	ldr	r3, [pc, #404]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c74:	4a64      	ldr	r2, [pc, #400]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002c76:	f023 0304 	bic.w	r3, r3, #4
 8002c7a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d015      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c84:	f7fd ffd0 	bl	8000c28 <HAL_GetTick>
 8002c88:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c8a:	e00a      	b.n	8002ca2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c8c:	f7fd ffcc 	bl	8000c28 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c9a:	4293      	cmp	r3, r2
 8002c9c:	d901      	bls.n	8002ca2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e14e      	b.n	8002f40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ca2:	4b59      	ldr	r3, [pc, #356]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ca6:	f003 0302 	and.w	r3, r3, #2
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d0ee      	beq.n	8002c8c <HAL_RCC_OscConfig+0x5f0>
 8002cae:	e014      	b.n	8002cda <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002cb0:	f7fd ffba 	bl	8000c28 <HAL_GetTick>
 8002cb4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cb6:	e00a      	b.n	8002cce <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002cb8:	f7fd ffb6 	bl	8000c28 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e138      	b.n	8002f40 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002cce:	4b4e      	ldr	r3, [pc, #312]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cd2:	f003 0302 	and.w	r3, r3, #2
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1ee      	bne.n	8002cb8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	f000 812d 	beq.w	8002f3e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002ce4:	4b48      	ldr	r3, [pc, #288]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002ce6:	691b      	ldr	r3, [r3, #16]
 8002ce8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002cec:	2b18      	cmp	r3, #24
 8002cee:	f000 80bd 	beq.w	8002e6c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	f040 809e 	bne.w	8002e38 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cfc:	4b42      	ldr	r3, [pc, #264]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a41      	ldr	r2, [pc, #260]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002d02:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d06:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d08:	f7fd ff8e 	bl	8000c28 <HAL_GetTick>
 8002d0c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d0e:	e008      	b.n	8002d22 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d10:	f7fd ff8a 	bl	8000c28 <HAL_GetTick>
 8002d14:	4602      	mov	r2, r0
 8002d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d18:	1ad3      	subs	r3, r2, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d901      	bls.n	8002d22 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002d1e:	2303      	movs	r3, #3
 8002d20:	e10e      	b.n	8002f40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d22:	4b39      	ldr	r3, [pc, #228]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d1f0      	bne.n	8002d10 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d2e:	4b36      	ldr	r3, [pc, #216]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002d30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d32:	4b37      	ldr	r3, [pc, #220]	; (8002e10 <HAL_RCC_OscConfig+0x774>)
 8002d34:	4013      	ands	r3, r2
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002d3a:	687a      	ldr	r2, [r7, #4]
 8002d3c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002d3e:	0112      	lsls	r2, r2, #4
 8002d40:	430a      	orrs	r2, r1
 8002d42:	4931      	ldr	r1, [pc, #196]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	628b      	str	r3, [r1, #40]	; 0x28
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d56:	3b01      	subs	r3, #1
 8002d58:	025b      	lsls	r3, r3, #9
 8002d5a:	b29b      	uxth	r3, r3
 8002d5c:	431a      	orrs	r2, r3
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d62:	3b01      	subs	r3, #1
 8002d64:	041b      	lsls	r3, r3, #16
 8002d66:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002d6a:	431a      	orrs	r2, r3
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d70:	3b01      	subs	r3, #1
 8002d72:	061b      	lsls	r3, r3, #24
 8002d74:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002d78:	4923      	ldr	r1, [pc, #140]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002d7a:	4313      	orrs	r3, r2
 8002d7c:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002d7e:	4b22      	ldr	r3, [pc, #136]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002d80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d82:	4a21      	ldr	r2, [pc, #132]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002d84:	f023 0301 	bic.w	r3, r3, #1
 8002d88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002d8a:	4b1f      	ldr	r3, [pc, #124]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002d8c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d8e:	4b21      	ldr	r3, [pc, #132]	; (8002e14 <HAL_RCC_OscConfig+0x778>)
 8002d90:	4013      	ands	r3, r2
 8002d92:	687a      	ldr	r2, [r7, #4]
 8002d94:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002d96:	00d2      	lsls	r2, r2, #3
 8002d98:	491b      	ldr	r1, [pc, #108]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002d9e:	4b1a      	ldr	r3, [pc, #104]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002da0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002da2:	f023 020c 	bic.w	r2, r3, #12
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	4917      	ldr	r1, [pc, #92]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002db0:	4b15      	ldr	r3, [pc, #84]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002db4:	f023 0202 	bic.w	r2, r3, #2
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dbc:	4912      	ldr	r1, [pc, #72]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002dc2:	4b11      	ldr	r3, [pc, #68]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002dc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dc6:	4a10      	ldr	r2, [pc, #64]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dcc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dce:	4b0e      	ldr	r3, [pc, #56]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd2:	4a0d      	ldr	r2, [pc, #52]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002dd8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002dda:	4b0b      	ldr	r3, [pc, #44]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dde:	4a0a      	ldr	r2, [pc, #40]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002de4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002de6:	4b08      	ldr	r3, [pc, #32]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002de8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dea:	4a07      	ldr	r2, [pc, #28]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002dec:	f043 0301 	orr.w	r3, r3, #1
 8002df0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002df2:	4b05      	ldr	r3, [pc, #20]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a04      	ldr	r2, [pc, #16]	; (8002e08 <HAL_RCC_OscConfig+0x76c>)
 8002df8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002dfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfe:	f7fd ff13 	bl	8000c28 <HAL_GetTick>
 8002e02:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e04:	e011      	b.n	8002e2a <HAL_RCC_OscConfig+0x78e>
 8002e06:	bf00      	nop
 8002e08:	58024400 	.word	0x58024400
 8002e0c:	58024800 	.word	0x58024800
 8002e10:	fffffc0c 	.word	0xfffffc0c
 8002e14:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e18:	f7fd ff06 	bl	8000c28 <HAL_GetTick>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e20:	1ad3      	subs	r3, r2, r3
 8002e22:	2b02      	cmp	r3, #2
 8002e24:	d901      	bls.n	8002e2a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002e26:	2303      	movs	r3, #3
 8002e28:	e08a      	b.n	8002f40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002e2a:	4b47      	ldr	r3, [pc, #284]	; (8002f48 <HAL_RCC_OscConfig+0x8ac>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d0f0      	beq.n	8002e18 <HAL_RCC_OscConfig+0x77c>
 8002e36:	e082      	b.n	8002f3e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e38:	4b43      	ldr	r3, [pc, #268]	; (8002f48 <HAL_RCC_OscConfig+0x8ac>)
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a42      	ldr	r2, [pc, #264]	; (8002f48 <HAL_RCC_OscConfig+0x8ac>)
 8002e3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002e42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e44:	f7fd fef0 	bl	8000c28 <HAL_GetTick>
 8002e48:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e4a:	e008      	b.n	8002e5e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e4c:	f7fd feec 	bl	8000c28 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e54:	1ad3      	subs	r3, r2, r3
 8002e56:	2b02      	cmp	r3, #2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e070      	b.n	8002f40 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002e5e:	4b3a      	ldr	r3, [pc, #232]	; (8002f48 <HAL_RCC_OscConfig+0x8ac>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1f0      	bne.n	8002e4c <HAL_RCC_OscConfig+0x7b0>
 8002e6a:	e068      	b.n	8002f3e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002e6c:	4b36      	ldr	r3, [pc, #216]	; (8002f48 <HAL_RCC_OscConfig+0x8ac>)
 8002e6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e70:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002e72:	4b35      	ldr	r3, [pc, #212]	; (8002f48 <HAL_RCC_OscConfig+0x8ac>)
 8002e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e76:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d031      	beq.n	8002ee4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	f003 0203 	and.w	r2, r3, #3
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d12a      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	091b      	lsrs	r3, r3, #4
 8002e92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	d122      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d11a      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	0a5b      	lsrs	r3, r3, #9
 8002eb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eba:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d111      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	0c1b      	lsrs	r3, r3, #16
 8002ec4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ecc:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d108      	bne.n	8002ee4 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	0e1b      	lsrs	r3, r3, #24
 8002ed6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ede:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002ee0:	429a      	cmp	r2, r3
 8002ee2:	d001      	beq.n	8002ee8 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e02b      	b.n	8002f40 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002ee8:	4b17      	ldr	r3, [pc, #92]	; (8002f48 <HAL_RCC_OscConfig+0x8ac>)
 8002eea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002eec:	08db      	lsrs	r3, r3, #3
 8002eee:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002ef2:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ef8:	693a      	ldr	r2, [r7, #16]
 8002efa:	429a      	cmp	r2, r3
 8002efc:	d01f      	beq.n	8002f3e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002efe:	4b12      	ldr	r3, [pc, #72]	; (8002f48 <HAL_RCC_OscConfig+0x8ac>)
 8002f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f02:	4a11      	ldr	r2, [pc, #68]	; (8002f48 <HAL_RCC_OscConfig+0x8ac>)
 8002f04:	f023 0301 	bic.w	r3, r3, #1
 8002f08:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002f0a:	f7fd fe8d 	bl	8000c28 <HAL_GetTick>
 8002f0e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002f10:	bf00      	nop
 8002f12:	f7fd fe89 	bl	8000c28 <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d0f9      	beq.n	8002f12 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002f1e:	4b0a      	ldr	r3, [pc, #40]	; (8002f48 <HAL_RCC_OscConfig+0x8ac>)
 8002f20:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f22:	4b0a      	ldr	r3, [pc, #40]	; (8002f4c <HAL_RCC_OscConfig+0x8b0>)
 8002f24:	4013      	ands	r3, r2
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002f2a:	00d2      	lsls	r2, r2, #3
 8002f2c:	4906      	ldr	r1, [pc, #24]	; (8002f48 <HAL_RCC_OscConfig+0x8ac>)
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002f32:	4b05      	ldr	r3, [pc, #20]	; (8002f48 <HAL_RCC_OscConfig+0x8ac>)
 8002f34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f36:	4a04      	ldr	r2, [pc, #16]	; (8002f48 <HAL_RCC_OscConfig+0x8ac>)
 8002f38:	f043 0301 	orr.w	r3, r3, #1
 8002f3c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002f3e:	2300      	movs	r3, #0
}
 8002f40:	4618      	mov	r0, r3
 8002f42:	3730      	adds	r7, #48	; 0x30
 8002f44:	46bd      	mov	sp, r7
 8002f46:	bd80      	pop	{r7, pc}
 8002f48:	58024400 	.word	0x58024400
 8002f4c:	ffff0007 	.word	0xffff0007

08002f50 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002f50:	b580      	push	{r7, lr}
 8002f52:	b086      	sub	sp, #24
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
 8002f58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d101      	bne.n	8002f64 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e19c      	b.n	800329e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002f64:	4b8a      	ldr	r3, [pc, #552]	; (8003190 <HAL_RCC_ClockConfig+0x240>)
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 030f 	and.w	r3, r3, #15
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d910      	bls.n	8002f94 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f72:	4b87      	ldr	r3, [pc, #540]	; (8003190 <HAL_RCC_ClockConfig+0x240>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f023 020f 	bic.w	r2, r3, #15
 8002f7a:	4985      	ldr	r1, [pc, #532]	; (8003190 <HAL_RCC_ClockConfig+0x240>)
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f82:	4b83      	ldr	r3, [pc, #524]	; (8003190 <HAL_RCC_ClockConfig+0x240>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f003 030f 	and.w	r3, r3, #15
 8002f8a:	683a      	ldr	r2, [r7, #0]
 8002f8c:	429a      	cmp	r2, r3
 8002f8e:	d001      	beq.n	8002f94 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002f90:	2301      	movs	r3, #1
 8002f92:	e184      	b.n	800329e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f003 0304 	and.w	r3, r3, #4
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d010      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	691a      	ldr	r2, [r3, #16]
 8002fa4:	4b7b      	ldr	r3, [pc, #492]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 8002fa6:	699b      	ldr	r3, [r3, #24]
 8002fa8:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d908      	bls.n	8002fc2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002fb0:	4b78      	ldr	r3, [pc, #480]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	691b      	ldr	r3, [r3, #16]
 8002fbc:	4975      	ldr	r1, [pc, #468]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d010      	beq.n	8002ff0 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	695a      	ldr	r2, [r3, #20]
 8002fd2:	4b70      	ldr	r3, [pc, #448]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 8002fd4:	69db      	ldr	r3, [r3, #28]
 8002fd6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d908      	bls.n	8002ff0 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002fde:	4b6d      	ldr	r3, [pc, #436]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	496a      	ldr	r1, [pc, #424]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 8002fec:	4313      	orrs	r3, r2
 8002fee:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0310 	and.w	r3, r3, #16
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d010      	beq.n	800301e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	699a      	ldr	r2, [r3, #24]
 8003000:	4b64      	ldr	r3, [pc, #400]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 8003002:	69db      	ldr	r3, [r3, #28]
 8003004:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003008:	429a      	cmp	r2, r3
 800300a:	d908      	bls.n	800301e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800300c:	4b61      	ldr	r3, [pc, #388]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 800300e:	69db      	ldr	r3, [r3, #28]
 8003010:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	699b      	ldr	r3, [r3, #24]
 8003018:	495e      	ldr	r1, [pc, #376]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 800301a:	4313      	orrs	r3, r2
 800301c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 0320 	and.w	r3, r3, #32
 8003026:	2b00      	cmp	r3, #0
 8003028:	d010      	beq.n	800304c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	69da      	ldr	r2, [r3, #28]
 800302e:	4b59      	ldr	r3, [pc, #356]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 8003030:	6a1b      	ldr	r3, [r3, #32]
 8003032:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003036:	429a      	cmp	r2, r3
 8003038:	d908      	bls.n	800304c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800303a:	4b56      	ldr	r3, [pc, #344]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	69db      	ldr	r3, [r3, #28]
 8003046:	4953      	ldr	r1, [pc, #332]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 8003048:	4313      	orrs	r3, r2
 800304a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f003 0302 	and.w	r3, r3, #2
 8003054:	2b00      	cmp	r3, #0
 8003056:	d010      	beq.n	800307a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	68da      	ldr	r2, [r3, #12]
 800305c:	4b4d      	ldr	r3, [pc, #308]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 800305e:	699b      	ldr	r3, [r3, #24]
 8003060:	f003 030f 	and.w	r3, r3, #15
 8003064:	429a      	cmp	r2, r3
 8003066:	d908      	bls.n	800307a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003068:	4b4a      	ldr	r3, [pc, #296]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 800306a:	699b      	ldr	r3, [r3, #24]
 800306c:	f023 020f 	bic.w	r2, r3, #15
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	68db      	ldr	r3, [r3, #12]
 8003074:	4947      	ldr	r1, [pc, #284]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 8003076:	4313      	orrs	r3, r2
 8003078:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f003 0301 	and.w	r3, r3, #1
 8003082:	2b00      	cmp	r3, #0
 8003084:	d055      	beq.n	8003132 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003086:	4b43      	ldr	r3, [pc, #268]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 8003088:	699b      	ldr	r3, [r3, #24]
 800308a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	4940      	ldr	r1, [pc, #256]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 8003094:	4313      	orrs	r3, r2
 8003096:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	2b02      	cmp	r3, #2
 800309e:	d107      	bne.n	80030b0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80030a0:	4b3c      	ldr	r3, [pc, #240]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d121      	bne.n	80030f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030ac:	2301      	movs	r3, #1
 80030ae:	e0f6      	b.n	800329e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	2b03      	cmp	r3, #3
 80030b6:	d107      	bne.n	80030c8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80030b8:	4b36      	ldr	r3, [pc, #216]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d115      	bne.n	80030f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	e0ea      	b.n	800329e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	685b      	ldr	r3, [r3, #4]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d107      	bne.n	80030e0 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80030d0:	4b30      	ldr	r3, [pc, #192]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d109      	bne.n	80030f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030dc:	2301      	movs	r3, #1
 80030de:	e0de      	b.n	800329e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80030e0:	4b2c      	ldr	r3, [pc, #176]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f003 0304 	and.w	r3, r3, #4
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d101      	bne.n	80030f0 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e0d6      	b.n	800329e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80030f0:	4b28      	ldr	r3, [pc, #160]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 80030f2:	691b      	ldr	r3, [r3, #16]
 80030f4:	f023 0207 	bic.w	r2, r3, #7
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	4925      	ldr	r1, [pc, #148]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003102:	f7fd fd91 	bl	8000c28 <HAL_GetTick>
 8003106:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003108:	e00a      	b.n	8003120 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800310a:	f7fd fd8d 	bl	8000c28 <HAL_GetTick>
 800310e:	4602      	mov	r2, r0
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	1ad3      	subs	r3, r2, r3
 8003114:	f241 3288 	movw	r2, #5000	; 0x1388
 8003118:	4293      	cmp	r3, r2
 800311a:	d901      	bls.n	8003120 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800311c:	2303      	movs	r3, #3
 800311e:	e0be      	b.n	800329e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003120:	4b1c      	ldr	r3, [pc, #112]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 8003122:	691b      	ldr	r3, [r3, #16]
 8003124:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	429a      	cmp	r2, r3
 8003130:	d1eb      	bne.n	800310a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f003 0302 	and.w	r3, r3, #2
 800313a:	2b00      	cmp	r3, #0
 800313c:	d010      	beq.n	8003160 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	68da      	ldr	r2, [r3, #12]
 8003142:	4b14      	ldr	r3, [pc, #80]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 8003144:	699b      	ldr	r3, [r3, #24]
 8003146:	f003 030f 	and.w	r3, r3, #15
 800314a:	429a      	cmp	r2, r3
 800314c:	d208      	bcs.n	8003160 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800314e:	4b11      	ldr	r3, [pc, #68]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	f023 020f 	bic.w	r2, r3, #15
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	68db      	ldr	r3, [r3, #12]
 800315a:	490e      	ldr	r1, [pc, #56]	; (8003194 <HAL_RCC_ClockConfig+0x244>)
 800315c:	4313      	orrs	r3, r2
 800315e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003160:	4b0b      	ldr	r3, [pc, #44]	; (8003190 <HAL_RCC_ClockConfig+0x240>)
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 030f 	and.w	r3, r3, #15
 8003168:	683a      	ldr	r2, [r7, #0]
 800316a:	429a      	cmp	r2, r3
 800316c:	d214      	bcs.n	8003198 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800316e:	4b08      	ldr	r3, [pc, #32]	; (8003190 <HAL_RCC_ClockConfig+0x240>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f023 020f 	bic.w	r2, r3, #15
 8003176:	4906      	ldr	r1, [pc, #24]	; (8003190 <HAL_RCC_ClockConfig+0x240>)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	4313      	orrs	r3, r2
 800317c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800317e:	4b04      	ldr	r3, [pc, #16]	; (8003190 <HAL_RCC_ClockConfig+0x240>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f003 030f 	and.w	r3, r3, #15
 8003186:	683a      	ldr	r2, [r7, #0]
 8003188:	429a      	cmp	r2, r3
 800318a:	d005      	beq.n	8003198 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	e086      	b.n	800329e <HAL_RCC_ClockConfig+0x34e>
 8003190:	52002000 	.word	0x52002000
 8003194:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	f003 0304 	and.w	r3, r3, #4
 80031a0:	2b00      	cmp	r3, #0
 80031a2:	d010      	beq.n	80031c6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	691a      	ldr	r2, [r3, #16]
 80031a8:	4b3f      	ldr	r3, [pc, #252]	; (80032a8 <HAL_RCC_ClockConfig+0x358>)
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031b0:	429a      	cmp	r2, r3
 80031b2:	d208      	bcs.n	80031c6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80031b4:	4b3c      	ldr	r3, [pc, #240]	; (80032a8 <HAL_RCC_ClockConfig+0x358>)
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	691b      	ldr	r3, [r3, #16]
 80031c0:	4939      	ldr	r1, [pc, #228]	; (80032a8 <HAL_RCC_ClockConfig+0x358>)
 80031c2:	4313      	orrs	r3, r2
 80031c4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0308 	and.w	r3, r3, #8
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d010      	beq.n	80031f4 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	695a      	ldr	r2, [r3, #20]
 80031d6:	4b34      	ldr	r3, [pc, #208]	; (80032a8 <HAL_RCC_ClockConfig+0x358>)
 80031d8:	69db      	ldr	r3, [r3, #28]
 80031da:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80031de:	429a      	cmp	r2, r3
 80031e0:	d208      	bcs.n	80031f4 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80031e2:	4b31      	ldr	r3, [pc, #196]	; (80032a8 <HAL_RCC_ClockConfig+0x358>)
 80031e4:	69db      	ldr	r3, [r3, #28]
 80031e6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	695b      	ldr	r3, [r3, #20]
 80031ee:	492e      	ldr	r1, [pc, #184]	; (80032a8 <HAL_RCC_ClockConfig+0x358>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0310 	and.w	r3, r3, #16
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d010      	beq.n	8003222 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	699a      	ldr	r2, [r3, #24]
 8003204:	4b28      	ldr	r3, [pc, #160]	; (80032a8 <HAL_RCC_ClockConfig+0x358>)
 8003206:	69db      	ldr	r3, [r3, #28]
 8003208:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800320c:	429a      	cmp	r2, r3
 800320e:	d208      	bcs.n	8003222 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003210:	4b25      	ldr	r3, [pc, #148]	; (80032a8 <HAL_RCC_ClockConfig+0x358>)
 8003212:	69db      	ldr	r3, [r3, #28]
 8003214:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	699b      	ldr	r3, [r3, #24]
 800321c:	4922      	ldr	r1, [pc, #136]	; (80032a8 <HAL_RCC_ClockConfig+0x358>)
 800321e:	4313      	orrs	r3, r2
 8003220:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0320 	and.w	r3, r3, #32
 800322a:	2b00      	cmp	r3, #0
 800322c:	d010      	beq.n	8003250 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	69da      	ldr	r2, [r3, #28]
 8003232:	4b1d      	ldr	r3, [pc, #116]	; (80032a8 <HAL_RCC_ClockConfig+0x358>)
 8003234:	6a1b      	ldr	r3, [r3, #32]
 8003236:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800323a:	429a      	cmp	r2, r3
 800323c:	d208      	bcs.n	8003250 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800323e:	4b1a      	ldr	r3, [pc, #104]	; (80032a8 <HAL_RCC_ClockConfig+0x358>)
 8003240:	6a1b      	ldr	r3, [r3, #32]
 8003242:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	69db      	ldr	r3, [r3, #28]
 800324a:	4917      	ldr	r1, [pc, #92]	; (80032a8 <HAL_RCC_ClockConfig+0x358>)
 800324c:	4313      	orrs	r3, r2
 800324e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003250:	f000 f834 	bl	80032bc <HAL_RCC_GetSysClockFreq>
 8003254:	4602      	mov	r2, r0
 8003256:	4b14      	ldr	r3, [pc, #80]	; (80032a8 <HAL_RCC_ClockConfig+0x358>)
 8003258:	699b      	ldr	r3, [r3, #24]
 800325a:	0a1b      	lsrs	r3, r3, #8
 800325c:	f003 030f 	and.w	r3, r3, #15
 8003260:	4912      	ldr	r1, [pc, #72]	; (80032ac <HAL_RCC_ClockConfig+0x35c>)
 8003262:	5ccb      	ldrb	r3, [r1, r3]
 8003264:	f003 031f 	and.w	r3, r3, #31
 8003268:	fa22 f303 	lsr.w	r3, r2, r3
 800326c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800326e:	4b0e      	ldr	r3, [pc, #56]	; (80032a8 <HAL_RCC_ClockConfig+0x358>)
 8003270:	699b      	ldr	r3, [r3, #24]
 8003272:	f003 030f 	and.w	r3, r3, #15
 8003276:	4a0d      	ldr	r2, [pc, #52]	; (80032ac <HAL_RCC_ClockConfig+0x35c>)
 8003278:	5cd3      	ldrb	r3, [r2, r3]
 800327a:	f003 031f 	and.w	r3, r3, #31
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	fa22 f303 	lsr.w	r3, r2, r3
 8003284:	4a0a      	ldr	r2, [pc, #40]	; (80032b0 <HAL_RCC_ClockConfig+0x360>)
 8003286:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003288:	4a0a      	ldr	r2, [pc, #40]	; (80032b4 <HAL_RCC_ClockConfig+0x364>)
 800328a:	693b      	ldr	r3, [r7, #16]
 800328c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800328e:	4b0a      	ldr	r3, [pc, #40]	; (80032b8 <HAL_RCC_ClockConfig+0x368>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f7fd fc7e 	bl	8000b94 <HAL_InitTick>
 8003298:	4603      	mov	r3, r0
 800329a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800329c:	7bfb      	ldrb	r3, [r7, #15]
}
 800329e:	4618      	mov	r0, r3
 80032a0:	3718      	adds	r7, #24
 80032a2:	46bd      	mov	sp, r7
 80032a4:	bd80      	pop	{r7, pc}
 80032a6:	bf00      	nop
 80032a8:	58024400 	.word	0x58024400
 80032ac:	08004d2c 	.word	0x08004d2c
 80032b0:	24000004 	.word	0x24000004
 80032b4:	24000000 	.word	0x24000000
 80032b8:	24000008 	.word	0x24000008

080032bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032bc:	b480      	push	{r7}
 80032be:	b089      	sub	sp, #36	; 0x24
 80032c0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80032c2:	4bb3      	ldr	r3, [pc, #716]	; (8003590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032c4:	691b      	ldr	r3, [r3, #16]
 80032c6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032ca:	2b18      	cmp	r3, #24
 80032cc:	f200 8155 	bhi.w	800357a <HAL_RCC_GetSysClockFreq+0x2be>
 80032d0:	a201      	add	r2, pc, #4	; (adr r2, 80032d8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80032d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d6:	bf00      	nop
 80032d8:	0800333d 	.word	0x0800333d
 80032dc:	0800357b 	.word	0x0800357b
 80032e0:	0800357b 	.word	0x0800357b
 80032e4:	0800357b 	.word	0x0800357b
 80032e8:	0800357b 	.word	0x0800357b
 80032ec:	0800357b 	.word	0x0800357b
 80032f0:	0800357b 	.word	0x0800357b
 80032f4:	0800357b 	.word	0x0800357b
 80032f8:	08003363 	.word	0x08003363
 80032fc:	0800357b 	.word	0x0800357b
 8003300:	0800357b 	.word	0x0800357b
 8003304:	0800357b 	.word	0x0800357b
 8003308:	0800357b 	.word	0x0800357b
 800330c:	0800357b 	.word	0x0800357b
 8003310:	0800357b 	.word	0x0800357b
 8003314:	0800357b 	.word	0x0800357b
 8003318:	08003369 	.word	0x08003369
 800331c:	0800357b 	.word	0x0800357b
 8003320:	0800357b 	.word	0x0800357b
 8003324:	0800357b 	.word	0x0800357b
 8003328:	0800357b 	.word	0x0800357b
 800332c:	0800357b 	.word	0x0800357b
 8003330:	0800357b 	.word	0x0800357b
 8003334:	0800357b 	.word	0x0800357b
 8003338:	0800336f 	.word	0x0800336f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800333c:	4b94      	ldr	r3, [pc, #592]	; (8003590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0320 	and.w	r3, r3, #32
 8003344:	2b00      	cmp	r3, #0
 8003346:	d009      	beq.n	800335c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003348:	4b91      	ldr	r3, [pc, #580]	; (8003590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	08db      	lsrs	r3, r3, #3
 800334e:	f003 0303 	and.w	r3, r3, #3
 8003352:	4a90      	ldr	r2, [pc, #576]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003354:	fa22 f303 	lsr.w	r3, r2, r3
 8003358:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800335a:	e111      	b.n	8003580 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800335c:	4b8d      	ldr	r3, [pc, #564]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800335e:	61bb      	str	r3, [r7, #24]
      break;
 8003360:	e10e      	b.n	8003580 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003362:	4b8d      	ldr	r3, [pc, #564]	; (8003598 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003364:	61bb      	str	r3, [r7, #24]
      break;
 8003366:	e10b      	b.n	8003580 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003368:	4b8c      	ldr	r3, [pc, #560]	; (800359c <HAL_RCC_GetSysClockFreq+0x2e0>)
 800336a:	61bb      	str	r3, [r7, #24]
      break;
 800336c:	e108      	b.n	8003580 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800336e:	4b88      	ldr	r3, [pc, #544]	; (8003590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003370:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003372:	f003 0303 	and.w	r3, r3, #3
 8003376:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003378:	4b85      	ldr	r3, [pc, #532]	; (8003590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800337a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800337c:	091b      	lsrs	r3, r3, #4
 800337e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003382:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003384:	4b82      	ldr	r3, [pc, #520]	; (8003590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003388:	f003 0301 	and.w	r3, r3, #1
 800338c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800338e:	4b80      	ldr	r3, [pc, #512]	; (8003590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003390:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003392:	08db      	lsrs	r3, r3, #3
 8003394:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003398:	68fa      	ldr	r2, [r7, #12]
 800339a:	fb02 f303 	mul.w	r3, r2, r3
 800339e:	ee07 3a90 	vmov	s15, r3
 80033a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033a6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80033aa:	693b      	ldr	r3, [r7, #16]
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	f000 80e1 	beq.w	8003574 <HAL_RCC_GetSysClockFreq+0x2b8>
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	2b02      	cmp	r3, #2
 80033b6:	f000 8083 	beq.w	80034c0 <HAL_RCC_GetSysClockFreq+0x204>
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	2b02      	cmp	r3, #2
 80033be:	f200 80a1 	bhi.w	8003504 <HAL_RCC_GetSysClockFreq+0x248>
 80033c2:	697b      	ldr	r3, [r7, #20]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d003      	beq.n	80033d0 <HAL_RCC_GetSysClockFreq+0x114>
 80033c8:	697b      	ldr	r3, [r7, #20]
 80033ca:	2b01      	cmp	r3, #1
 80033cc:	d056      	beq.n	800347c <HAL_RCC_GetSysClockFreq+0x1c0>
 80033ce:	e099      	b.n	8003504 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80033d0:	4b6f      	ldr	r3, [pc, #444]	; (8003590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f003 0320 	and.w	r3, r3, #32
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d02d      	beq.n	8003438 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80033dc:	4b6c      	ldr	r3, [pc, #432]	; (8003590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	08db      	lsrs	r3, r3, #3
 80033e2:	f003 0303 	and.w	r3, r3, #3
 80033e6:	4a6b      	ldr	r2, [pc, #428]	; (8003594 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80033e8:	fa22 f303 	lsr.w	r3, r2, r3
 80033ec:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	ee07 3a90 	vmov	s15, r3
 80033f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	ee07 3a90 	vmov	s15, r3
 80033fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003402:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003406:	4b62      	ldr	r3, [pc, #392]	; (8003590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800340e:	ee07 3a90 	vmov	s15, r3
 8003412:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003416:	ed97 6a02 	vldr	s12, [r7, #8]
 800341a:	eddf 5a61 	vldr	s11, [pc, #388]	; 80035a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800341e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003422:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003426:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800342a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800342e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003432:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003436:	e087      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	ee07 3a90 	vmov	s15, r3
 800343e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003442:	eddf 6a58 	vldr	s13, [pc, #352]	; 80035a4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003446:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800344a:	4b51      	ldr	r3, [pc, #324]	; (8003590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800344c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003452:	ee07 3a90 	vmov	s15, r3
 8003456:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800345a:	ed97 6a02 	vldr	s12, [r7, #8]
 800345e:	eddf 5a50 	vldr	s11, [pc, #320]	; 80035a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003462:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003466:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800346a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800346e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003472:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003476:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800347a:	e065      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	ee07 3a90 	vmov	s15, r3
 8003482:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003486:	eddf 6a48 	vldr	s13, [pc, #288]	; 80035a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 800348a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800348e:	4b40      	ldr	r3, [pc, #256]	; (8003590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003496:	ee07 3a90 	vmov	s15, r3
 800349a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800349e:	ed97 6a02 	vldr	s12, [r7, #8]
 80034a2:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80035a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80034be:	e043      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	ee07 3a90 	vmov	s15, r3
 80034c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034ca:	eddf 6a38 	vldr	s13, [pc, #224]	; 80035ac <HAL_RCC_GetSysClockFreq+0x2f0>
 80034ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80034d2:	4b2f      	ldr	r3, [pc, #188]	; (8003590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80034d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80034da:	ee07 3a90 	vmov	s15, r3
 80034de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80034e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80034e6:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80035a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80034ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80034ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80034f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80034f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80034fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80034fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003502:	e021      	b.n	8003548 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003504:	693b      	ldr	r3, [r7, #16]
 8003506:	ee07 3a90 	vmov	s15, r3
 800350a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800350e:	eddf 6a26 	vldr	s13, [pc, #152]	; 80035a8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003512:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003516:	4b1e      	ldr	r3, [pc, #120]	; (8003590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800351a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800351e:	ee07 3a90 	vmov	s15, r3
 8003522:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003526:	ed97 6a02 	vldr	s12, [r7, #8]
 800352a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80035a0 <HAL_RCC_GetSysClockFreq+0x2e4>
 800352e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003532:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003536:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800353a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800353e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003542:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003546:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003548:	4b11      	ldr	r3, [pc, #68]	; (8003590 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800354a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800354c:	0a5b      	lsrs	r3, r3, #9
 800354e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003552:	3301      	adds	r3, #1
 8003554:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003556:	683b      	ldr	r3, [r7, #0]
 8003558:	ee07 3a90 	vmov	s15, r3
 800355c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003560:	edd7 6a07 	vldr	s13, [r7, #28]
 8003564:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003568:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800356c:	ee17 3a90 	vmov	r3, s15
 8003570:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003572:	e005      	b.n	8003580 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003574:	2300      	movs	r3, #0
 8003576:	61bb      	str	r3, [r7, #24]
      break;
 8003578:	e002      	b.n	8003580 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800357a:	4b07      	ldr	r3, [pc, #28]	; (8003598 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800357c:	61bb      	str	r3, [r7, #24]
      break;
 800357e:	bf00      	nop
  }

  return sysclockfreq;
 8003580:	69bb      	ldr	r3, [r7, #24]
}
 8003582:	4618      	mov	r0, r3
 8003584:	3724      	adds	r7, #36	; 0x24
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr
 800358e:	bf00      	nop
 8003590:	58024400 	.word	0x58024400
 8003594:	03d09000 	.word	0x03d09000
 8003598:	003d0900 	.word	0x003d0900
 800359c:	017d7840 	.word	0x017d7840
 80035a0:	46000000 	.word	0x46000000
 80035a4:	4c742400 	.word	0x4c742400
 80035a8:	4a742400 	.word	0x4a742400
 80035ac:	4bbebc20 	.word	0x4bbebc20

080035b0 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035b4:	b0c8      	sub	sp, #288	; 0x120
 80035b6:	af00      	add	r7, sp, #0
 80035b8:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80035bc:	2300      	movs	r3, #0
 80035be:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80035c2:	2300      	movs	r3, #0
 80035c4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80035c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035d0:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 80035d4:	2500      	movs	r5, #0
 80035d6:	ea54 0305 	orrs.w	r3, r4, r5
 80035da:	d049      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 80035dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035e0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80035e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035e6:	d02f      	beq.n	8003648 <HAL_RCCEx_PeriphCLKConfig+0x98>
 80035e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80035ec:	d828      	bhi.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80035ee:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035f2:	d01a      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80035f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80035f8:	d822      	bhi.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d003      	beq.n	8003606 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80035fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003602:	d007      	beq.n	8003614 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003604:	e01c      	b.n	8003640 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003606:	4bb8      	ldr	r3, [pc, #736]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800360a:	4ab7      	ldr	r2, [pc, #732]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800360c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003610:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003612:	e01a      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003614:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003618:	3308      	adds	r3, #8
 800361a:	2102      	movs	r1, #2
 800361c:	4618      	mov	r0, r3
 800361e:	f001 f9b5 	bl	800498c <RCCEx_PLL2_Config>
 8003622:	4603      	mov	r3, r0
 8003624:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003628:	e00f      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800362a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800362e:	3328      	adds	r3, #40	; 0x28
 8003630:	2102      	movs	r1, #2
 8003632:	4618      	mov	r0, r3
 8003634:	f001 fa5c 	bl	8004af0 <RCCEx_PLL3_Config>
 8003638:	4603      	mov	r3, r0
 800363a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800363e:	e004      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003646:	e000      	b.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003648:	bf00      	nop
    }

    if (ret == HAL_OK)
 800364a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800364e:	2b00      	cmp	r3, #0
 8003650:	d10a      	bne.n	8003668 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003652:	4ba5      	ldr	r3, [pc, #660]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003654:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003656:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800365a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800365e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003660:	4aa1      	ldr	r2, [pc, #644]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003662:	430b      	orrs	r3, r1
 8003664:	6513      	str	r3, [r2, #80]	; 0x50
 8003666:	e003      	b.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003668:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800366c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003670:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003678:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800367c:	f04f 0900 	mov.w	r9, #0
 8003680:	ea58 0309 	orrs.w	r3, r8, r9
 8003684:	d047      	beq.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003686:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800368a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800368c:	2b04      	cmp	r3, #4
 800368e:	d82a      	bhi.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003690:	a201      	add	r2, pc, #4	; (adr r2, 8003698 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003696:	bf00      	nop
 8003698:	080036ad 	.word	0x080036ad
 800369c:	080036bb 	.word	0x080036bb
 80036a0:	080036d1 	.word	0x080036d1
 80036a4:	080036ef 	.word	0x080036ef
 80036a8:	080036ef 	.word	0x080036ef
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036ac:	4b8e      	ldr	r3, [pc, #568]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036b0:	4a8d      	ldr	r2, [pc, #564]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036b8:	e01a      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036be:	3308      	adds	r3, #8
 80036c0:	2100      	movs	r1, #0
 80036c2:	4618      	mov	r0, r3
 80036c4:	f001 f962 	bl	800498c <RCCEx_PLL2_Config>
 80036c8:	4603      	mov	r3, r0
 80036ca:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036ce:	e00f      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036d0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036d4:	3328      	adds	r3, #40	; 0x28
 80036d6:	2100      	movs	r1, #0
 80036d8:	4618      	mov	r0, r3
 80036da:	f001 fa09 	bl	8004af0 <RCCEx_PLL3_Config>
 80036de:	4603      	mov	r3, r0
 80036e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036e4:	e004      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80036ec:	e000      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 80036ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d10a      	bne.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80036f8:	4b7b      	ldr	r3, [pc, #492]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036fc:	f023 0107 	bic.w	r1, r3, #7
 8003700:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003706:	4a78      	ldr	r2, [pc, #480]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003708:	430b      	orrs	r3, r1
 800370a:	6513      	str	r3, [r2, #80]	; 0x50
 800370c:	e003      	b.n	8003716 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800370e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003712:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003716:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800371a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800371e:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003722:	f04f 0b00 	mov.w	fp, #0
 8003726:	ea5a 030b 	orrs.w	r3, sl, fp
 800372a:	d04c      	beq.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800372c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003730:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003732:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003736:	d030      	beq.n	800379a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003738:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800373c:	d829      	bhi.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800373e:	2bc0      	cmp	r3, #192	; 0xc0
 8003740:	d02d      	beq.n	800379e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003742:	2bc0      	cmp	r3, #192	; 0xc0
 8003744:	d825      	bhi.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003746:	2b80      	cmp	r3, #128	; 0x80
 8003748:	d018      	beq.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800374a:	2b80      	cmp	r3, #128	; 0x80
 800374c:	d821      	bhi.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800374e:	2b00      	cmp	r3, #0
 8003750:	d002      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003752:	2b40      	cmp	r3, #64	; 0x40
 8003754:	d007      	beq.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003756:	e01c      	b.n	8003792 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003758:	4b63      	ldr	r3, [pc, #396]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800375a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375c:	4a62      	ldr	r2, [pc, #392]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800375e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003762:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003764:	e01c      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003766:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800376a:	3308      	adds	r3, #8
 800376c:	2100      	movs	r1, #0
 800376e:	4618      	mov	r0, r3
 8003770:	f001 f90c 	bl	800498c <RCCEx_PLL2_Config>
 8003774:	4603      	mov	r3, r0
 8003776:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800377a:	e011      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800377c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003780:	3328      	adds	r3, #40	; 0x28
 8003782:	2100      	movs	r1, #0
 8003784:	4618      	mov	r0, r3
 8003786:	f001 f9b3 	bl	8004af0 <RCCEx_PLL3_Config>
 800378a:	4603      	mov	r3, r0
 800378c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003790:	e006      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003798:	e002      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800379a:	bf00      	nop
 800379c:	e000      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800379e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d10a      	bne.n	80037be <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80037a8:	4b4f      	ldr	r3, [pc, #316]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80037ac:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80037b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b6:	4a4c      	ldr	r2, [pc, #304]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80037b8:	430b      	orrs	r3, r1
 80037ba:	6513      	str	r3, [r2, #80]	; 0x50
 80037bc:	e003      	b.n	80037c6 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037be:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037c2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80037c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ce:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 80037d2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80037d6:	2300      	movs	r3, #0
 80037d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80037dc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80037e0:	460b      	mov	r3, r1
 80037e2:	4313      	orrs	r3, r2
 80037e4:	d053      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 80037e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037ea:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80037ee:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037f2:	d035      	beq.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80037f4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80037f8:	d82e      	bhi.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80037fa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80037fe:	d031      	beq.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003800:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003804:	d828      	bhi.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003806:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800380a:	d01a      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800380c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003810:	d822      	bhi.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003812:	2b00      	cmp	r3, #0
 8003814:	d003      	beq.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8003816:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800381a:	d007      	beq.n	800382c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800381c:	e01c      	b.n	8003858 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800381e:	4b32      	ldr	r3, [pc, #200]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003820:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003822:	4a31      	ldr	r2, [pc, #196]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003824:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003828:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800382a:	e01c      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800382c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003830:	3308      	adds	r3, #8
 8003832:	2100      	movs	r1, #0
 8003834:	4618      	mov	r0, r3
 8003836:	f001 f8a9 	bl	800498c <RCCEx_PLL2_Config>
 800383a:	4603      	mov	r3, r0
 800383c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003840:	e011      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003842:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003846:	3328      	adds	r3, #40	; 0x28
 8003848:	2100      	movs	r1, #0
 800384a:	4618      	mov	r0, r3
 800384c:	f001 f950 	bl	8004af0 <RCCEx_PLL3_Config>
 8003850:	4603      	mov	r3, r0
 8003852:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003856:	e006      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800385e:	e002      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003860:	bf00      	nop
 8003862:	e000      	b.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003864:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003866:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800386a:	2b00      	cmp	r3, #0
 800386c:	d10b      	bne.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800386e:	4b1e      	ldr	r3, [pc, #120]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003872:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003876:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800387a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800387e:	4a1a      	ldr	r2, [pc, #104]	; (80038e8 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003880:	430b      	orrs	r3, r1
 8003882:	6593      	str	r3, [r2, #88]	; 0x58
 8003884:	e003      	b.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003886:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800388a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800388e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003896:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800389a:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800389e:	2300      	movs	r3, #0
 80038a0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80038a4:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80038a8:	460b      	mov	r3, r1
 80038aa:	4313      	orrs	r3, r2
 80038ac:	d056      	beq.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80038ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038b2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80038b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038ba:	d038      	beq.n	800392e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80038bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80038c0:	d831      	bhi.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80038c2:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80038c6:	d034      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x382>
 80038c8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80038cc:	d82b      	bhi.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80038ce:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038d2:	d01d      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80038d4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80038d8:	d825      	bhi.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d006      	beq.n	80038ec <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80038de:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038e2:	d00a      	beq.n	80038fa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80038e4:	e01f      	b.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x376>
 80038e6:	bf00      	nop
 80038e8:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038ec:	4ba2      	ldr	r3, [pc, #648]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f0:	4aa1      	ldr	r2, [pc, #644]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80038f8:	e01c      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038fa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038fe:	3308      	adds	r3, #8
 8003900:	2100      	movs	r1, #0
 8003902:	4618      	mov	r0, r3
 8003904:	f001 f842 	bl	800498c <RCCEx_PLL2_Config>
 8003908:	4603      	mov	r3, r0
 800390a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800390e:	e011      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003910:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003914:	3328      	adds	r3, #40	; 0x28
 8003916:	2100      	movs	r1, #0
 8003918:	4618      	mov	r0, r3
 800391a:	f001 f8e9 	bl	8004af0 <RCCEx_PLL3_Config>
 800391e:	4603      	mov	r3, r0
 8003920:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003924:	e006      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800392c:	e002      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800392e:	bf00      	nop
 8003930:	e000      	b.n	8003934 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003932:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003934:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003938:	2b00      	cmp	r3, #0
 800393a:	d10b      	bne.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800393c:	4b8e      	ldr	r3, [pc, #568]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800393e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003940:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8003944:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003948:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800394c:	4a8a      	ldr	r2, [pc, #552]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800394e:	430b      	orrs	r3, r1
 8003950:	6593      	str	r3, [r2, #88]	; 0x58
 8003952:	e003      	b.n	800395c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003954:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003958:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800395c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003960:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003964:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003968:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800396c:	2300      	movs	r3, #0
 800396e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003972:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003976:	460b      	mov	r3, r1
 8003978:	4313      	orrs	r3, r2
 800397a:	d03a      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800397c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003982:	2b30      	cmp	r3, #48	; 0x30
 8003984:	d01f      	beq.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003986:	2b30      	cmp	r3, #48	; 0x30
 8003988:	d819      	bhi.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800398a:	2b20      	cmp	r3, #32
 800398c:	d00c      	beq.n	80039a8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800398e:	2b20      	cmp	r3, #32
 8003990:	d815      	bhi.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003992:	2b00      	cmp	r3, #0
 8003994:	d019      	beq.n	80039ca <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003996:	2b10      	cmp	r3, #16
 8003998:	d111      	bne.n	80039be <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800399a:	4b77      	ldr	r3, [pc, #476]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800399c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800399e:	4a76      	ldr	r2, [pc, #472]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80039a4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80039a6:	e011      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80039a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039ac:	3308      	adds	r3, #8
 80039ae:	2102      	movs	r1, #2
 80039b0:	4618      	mov	r0, r3
 80039b2:	f000 ffeb 	bl	800498c <RCCEx_PLL2_Config>
 80039b6:	4603      	mov	r3, r0
 80039b8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80039bc:	e006      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80039c4:	e002      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80039c6:	bf00      	nop
 80039c8:	e000      	b.n	80039cc <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80039ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039cc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10a      	bne.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80039d4:	4b68      	ldr	r3, [pc, #416]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039d8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80039dc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039e2:	4a65      	ldr	r2, [pc, #404]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039e4:	430b      	orrs	r3, r1
 80039e6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039e8:	e003      	b.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039ea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80039ee:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80039f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fa:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80039fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003a02:	2300      	movs	r3, #0
 8003a04:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003a08:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	d051      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8003a12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a1c:	d035      	beq.n	8003a8a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003a1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003a22:	d82e      	bhi.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a24:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a28:	d031      	beq.n	8003a8e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003a2a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003a2e:	d828      	bhi.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a34:	d01a      	beq.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8003a36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a3a:	d822      	bhi.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d003      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003a40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a44:	d007      	beq.n	8003a56 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8003a46:	e01c      	b.n	8003a82 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003a48:	4b4b      	ldr	r3, [pc, #300]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a4c:	4a4a      	ldr	r2, [pc, #296]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a54:	e01c      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003a56:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a5a:	3308      	adds	r3, #8
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 ff94 	bl	800498c <RCCEx_PLL2_Config>
 8003a64:	4603      	mov	r3, r0
 8003a66:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a6a:	e011      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a70:	3328      	adds	r3, #40	; 0x28
 8003a72:	2100      	movs	r1, #0
 8003a74:	4618      	mov	r0, r3
 8003a76:	f001 f83b 	bl	8004af0 <RCCEx_PLL3_Config>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003a80:	e006      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003a82:	2301      	movs	r3, #1
 8003a84:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003a88:	e002      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003a8a:	bf00      	nop
 8003a8c:	e000      	b.n	8003a90 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003a8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003a90:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d10a      	bne.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003a98:	4b37      	ldr	r3, [pc, #220]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a9c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8003aa0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aa4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa6:	4a34      	ldr	r2, [pc, #208]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003aa8:	430b      	orrs	r3, r1
 8003aaa:	6513      	str	r3, [r2, #80]	; 0x50
 8003aac:	e003      	b.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003aae:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ab2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003ab6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003abe:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8003ac2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003acc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	4313      	orrs	r3, r2
 8003ad4:	d056      	beq.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003ad6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ada:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003adc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ae0:	d033      	beq.n	8003b4a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8003ae2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ae6:	d82c      	bhi.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003ae8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003aec:	d02f      	beq.n	8003b4e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003aee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003af2:	d826      	bhi.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003af4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003af8:	d02b      	beq.n	8003b52 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003afa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003afe:	d820      	bhi.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b04:	d012      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8003b06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003b0a:	d81a      	bhi.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d022      	beq.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003b10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b14:	d115      	bne.n	8003b42 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b1a:	3308      	adds	r3, #8
 8003b1c:	2101      	movs	r1, #1
 8003b1e:	4618      	mov	r0, r3
 8003b20:	f000 ff34 	bl	800498c <RCCEx_PLL2_Config>
 8003b24:	4603      	mov	r3, r0
 8003b26:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003b2a:	e015      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003b2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b30:	3328      	adds	r3, #40	; 0x28
 8003b32:	2101      	movs	r1, #1
 8003b34:	4618      	mov	r0, r3
 8003b36:	f000 ffdb 	bl	8004af0 <RCCEx_PLL3_Config>
 8003b3a:	4603      	mov	r3, r0
 8003b3c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003b40:	e00a      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b42:	2301      	movs	r3, #1
 8003b44:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003b48:	e006      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b4a:	bf00      	nop
 8003b4c:	e004      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b4e:	bf00      	nop
 8003b50:	e002      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b52:	bf00      	nop
 8003b54:	e000      	b.n	8003b58 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003b56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b58:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d10d      	bne.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003b60:	4b05      	ldr	r3, [pc, #20]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b64:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003b68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b6c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b6e:	4a02      	ldr	r2, [pc, #8]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003b70:	430b      	orrs	r3, r1
 8003b72:	6513      	str	r3, [r2, #80]	; 0x50
 8003b74:	e006      	b.n	8003b84 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003b76:	bf00      	nop
 8003b78:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b7c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b80:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003b84:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003b90:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003b94:	2300      	movs	r3, #0
 8003b96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003b9a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003b9e:	460b      	mov	r3, r1
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	d055      	beq.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003ba4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ba8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003bac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bb0:	d033      	beq.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003bb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003bb6:	d82c      	bhi.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003bb8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bbc:	d02f      	beq.n	8003c1e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003bbe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc2:	d826      	bhi.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003bc4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003bc8:	d02b      	beq.n	8003c22 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003bca:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003bce:	d820      	bhi.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003bd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bd4:	d012      	beq.n	8003bfc <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003bd6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003bda:	d81a      	bhi.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d022      	beq.n	8003c26 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003be0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003be4:	d115      	bne.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003be6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bea:	3308      	adds	r3, #8
 8003bec:	2101      	movs	r1, #1
 8003bee:	4618      	mov	r0, r3
 8003bf0:	f000 fecc 	bl	800498c <RCCEx_PLL2_Config>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003bfa:	e015      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003bfc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c00:	3328      	adds	r3, #40	; 0x28
 8003c02:	2101      	movs	r1, #1
 8003c04:	4618      	mov	r0, r3
 8003c06:	f000 ff73 	bl	8004af0 <RCCEx_PLL3_Config>
 8003c0a:	4603      	mov	r3, r0
 8003c0c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003c10:	e00a      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003c18:	e006      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c1a:	bf00      	nop
 8003c1c:	e004      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c1e:	bf00      	nop
 8003c20:	e002      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c22:	bf00      	nop
 8003c24:	e000      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003c26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c28:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d10b      	bne.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003c30:	4ba3      	ldr	r3, [pc, #652]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c34:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003c38:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c3c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003c40:	4a9f      	ldr	r2, [pc, #636]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c42:	430b      	orrs	r3, r1
 8003c44:	6593      	str	r3, [r2, #88]	; 0x58
 8003c46:	e003      	b.n	8003c50 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c48:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c4c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003c50:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c58:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003c5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003c60:	2300      	movs	r3, #0
 8003c62:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003c66:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	d037      	beq.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003c70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c76:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c7a:	d00e      	beq.n	8003c9a <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003c7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c80:	d816      	bhi.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d018      	beq.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003c86:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003c8a:	d111      	bne.n	8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003c8c:	4b8c      	ldr	r3, [pc, #560]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c90:	4a8b      	ldr	r2, [pc, #556]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c92:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c96:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003c98:	e00f      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c9a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c9e:	3308      	adds	r3, #8
 8003ca0:	2101      	movs	r1, #1
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 fe72 	bl	800498c <RCCEx_PLL2_Config>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003cae:	e004      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cb0:	2301      	movs	r3, #1
 8003cb2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003cb6:	e000      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003cb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cba:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d10a      	bne.n	8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003cc2:	4b7f      	ldr	r3, [pc, #508]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003cca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd0:	4a7b      	ldr	r2, [pc, #492]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cd2:	430b      	orrs	r3, r1
 8003cd4:	6513      	str	r3, [r2, #80]	; 0x50
 8003cd6:	e003      	b.n	8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cd8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003cdc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003ce0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003cec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003cf6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003cfa:	460b      	mov	r3, r1
 8003cfc:	4313      	orrs	r3, r2
 8003cfe:	d039      	beq.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003d00:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d06:	2b03      	cmp	r3, #3
 8003d08:	d81c      	bhi.n	8003d44 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003d0a:	a201      	add	r2, pc, #4	; (adr r2, 8003d10 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003d0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d10:	08003d4d 	.word	0x08003d4d
 8003d14:	08003d21 	.word	0x08003d21
 8003d18:	08003d2f 	.word	0x08003d2f
 8003d1c:	08003d4d 	.word	0x08003d4d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003d20:	4b67      	ldr	r3, [pc, #412]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d24:	4a66      	ldr	r2, [pc, #408]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d26:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d2a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003d2c:	e00f      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003d2e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d32:	3308      	adds	r3, #8
 8003d34:	2102      	movs	r1, #2
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 fe28 	bl	800498c <RCCEx_PLL2_Config>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003d42:	e004      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003d44:	2301      	movs	r3, #1
 8003d46:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003d4a:	e000      	b.n	8003d4e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003d4c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d4e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d10a      	bne.n	8003d6c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003d56:	4b5a      	ldr	r3, [pc, #360]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d5a:	f023 0103 	bic.w	r1, r3, #3
 8003d5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d64:	4a56      	ldr	r2, [pc, #344]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d66:	430b      	orrs	r3, r1
 8003d68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d6a:	e003      	b.n	8003d74 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d6c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d70:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003d74:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003d80:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003d84:	2300      	movs	r3, #0
 8003d86:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d8a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003d8e:	460b      	mov	r3, r1
 8003d90:	4313      	orrs	r3, r2
 8003d92:	f000 809f 	beq.w	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003d96:	4b4b      	ldr	r3, [pc, #300]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	4a4a      	ldr	r2, [pc, #296]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003d9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003da0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003da2:	f7fc ff41 	bl	8000c28 <HAL_GetTick>
 8003da6:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003daa:	e00b      	b.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dac:	f7fc ff3c 	bl	8000c28 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	2b64      	cmp	r3, #100	; 0x64
 8003dba:	d903      	bls.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003dbc:	2303      	movs	r3, #3
 8003dbe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003dc2:	e005      	b.n	8003dd0 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003dc4:	4b3f      	ldr	r3, [pc, #252]	; (8003ec4 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d0ed      	beq.n	8003dac <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003dd0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d179      	bne.n	8003ecc <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003dd8:	4b39      	ldr	r3, [pc, #228]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dda:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ddc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003de0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003de4:	4053      	eors	r3, r2
 8003de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d015      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dee:	4b34      	ldr	r3, [pc, #208]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003df0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003df2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003df6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003dfa:	4b31      	ldr	r3, [pc, #196]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003dfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003dfe:	4a30      	ldr	r2, [pc, #192]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e04:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003e06:	4b2e      	ldr	r3, [pc, #184]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0a:	4a2d      	ldr	r2, [pc, #180]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e10:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003e12:	4a2b      	ldr	r2, [pc, #172]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e18:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003e1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e1e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e26:	d118      	bne.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e28:	f7fc fefe 	bl	8000c28 <HAL_GetTick>
 8003e2c:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e30:	e00d      	b.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e32:	f7fc fef9 	bl	8000c28 <HAL_GetTick>
 8003e36:	4602      	mov	r2, r0
 8003e38:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003e3c:	1ad2      	subs	r2, r2, r3
 8003e3e:	f241 3388 	movw	r3, #5000	; 0x1388
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d903      	bls.n	8003e4e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003e46:	2303      	movs	r3, #3
 8003e48:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8003e4c:	e005      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003e4e:	4b1c      	ldr	r3, [pc, #112]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e52:	f003 0302 	and.w	r3, r3, #2
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d0eb      	beq.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003e5a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d129      	bne.n	8003eb6 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e62:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e66:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e72:	d10e      	bne.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003e74:	4b12      	ldr	r3, [pc, #72]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003e7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003e84:	091a      	lsrs	r2, r3, #4
 8003e86:	4b10      	ldr	r3, [pc, #64]	; (8003ec8 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003e88:	4013      	ands	r3, r2
 8003e8a:	4a0d      	ldr	r2, [pc, #52]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e8c:	430b      	orrs	r3, r1
 8003e8e:	6113      	str	r3, [r2, #16]
 8003e90:	e005      	b.n	8003e9e <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003e92:	4b0b      	ldr	r3, [pc, #44]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	4a0a      	ldr	r2, [pc, #40]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003e98:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003e9c:	6113      	str	r3, [r2, #16]
 8003e9e:	4b08      	ldr	r3, [pc, #32]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ea0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003ea2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ea6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003eaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003eae:	4a04      	ldr	r2, [pc, #16]	; (8003ec0 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003eb0:	430b      	orrs	r3, r1
 8003eb2:	6713      	str	r3, [r2, #112]	; 0x70
 8003eb4:	e00e      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003eb6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003eba:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8003ebe:	e009      	b.n	8003ed4 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003ec0:	58024400 	.word	0x58024400
 8003ec4:	58024800 	.word	0x58024800
 8003ec8:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ecc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ed0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003ed4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003edc:	f002 0301 	and.w	r3, r2, #1
 8003ee0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003eea:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003eee:	460b      	mov	r3, r1
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	f000 8089 	beq.w	8004008 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003ef6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003efa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003efc:	2b28      	cmp	r3, #40	; 0x28
 8003efe:	d86b      	bhi.n	8003fd8 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003f00:	a201      	add	r2, pc, #4	; (adr r2, 8003f08 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003f02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f06:	bf00      	nop
 8003f08:	08003fe1 	.word	0x08003fe1
 8003f0c:	08003fd9 	.word	0x08003fd9
 8003f10:	08003fd9 	.word	0x08003fd9
 8003f14:	08003fd9 	.word	0x08003fd9
 8003f18:	08003fd9 	.word	0x08003fd9
 8003f1c:	08003fd9 	.word	0x08003fd9
 8003f20:	08003fd9 	.word	0x08003fd9
 8003f24:	08003fd9 	.word	0x08003fd9
 8003f28:	08003fad 	.word	0x08003fad
 8003f2c:	08003fd9 	.word	0x08003fd9
 8003f30:	08003fd9 	.word	0x08003fd9
 8003f34:	08003fd9 	.word	0x08003fd9
 8003f38:	08003fd9 	.word	0x08003fd9
 8003f3c:	08003fd9 	.word	0x08003fd9
 8003f40:	08003fd9 	.word	0x08003fd9
 8003f44:	08003fd9 	.word	0x08003fd9
 8003f48:	08003fc3 	.word	0x08003fc3
 8003f4c:	08003fd9 	.word	0x08003fd9
 8003f50:	08003fd9 	.word	0x08003fd9
 8003f54:	08003fd9 	.word	0x08003fd9
 8003f58:	08003fd9 	.word	0x08003fd9
 8003f5c:	08003fd9 	.word	0x08003fd9
 8003f60:	08003fd9 	.word	0x08003fd9
 8003f64:	08003fd9 	.word	0x08003fd9
 8003f68:	08003fe1 	.word	0x08003fe1
 8003f6c:	08003fd9 	.word	0x08003fd9
 8003f70:	08003fd9 	.word	0x08003fd9
 8003f74:	08003fd9 	.word	0x08003fd9
 8003f78:	08003fd9 	.word	0x08003fd9
 8003f7c:	08003fd9 	.word	0x08003fd9
 8003f80:	08003fd9 	.word	0x08003fd9
 8003f84:	08003fd9 	.word	0x08003fd9
 8003f88:	08003fe1 	.word	0x08003fe1
 8003f8c:	08003fd9 	.word	0x08003fd9
 8003f90:	08003fd9 	.word	0x08003fd9
 8003f94:	08003fd9 	.word	0x08003fd9
 8003f98:	08003fd9 	.word	0x08003fd9
 8003f9c:	08003fd9 	.word	0x08003fd9
 8003fa0:	08003fd9 	.word	0x08003fd9
 8003fa4:	08003fd9 	.word	0x08003fd9
 8003fa8:	08003fe1 	.word	0x08003fe1
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003fac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fb0:	3308      	adds	r3, #8
 8003fb2:	2101      	movs	r1, #1
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f000 fce9 	bl	800498c <RCCEx_PLL2_Config>
 8003fba:	4603      	mov	r3, r0
 8003fbc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003fc0:	e00f      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003fc2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fc6:	3328      	adds	r3, #40	; 0x28
 8003fc8:	2101      	movs	r1, #1
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f000 fd90 	bl	8004af0 <RCCEx_PLL3_Config>
 8003fd0:	4603      	mov	r3, r0
 8003fd2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003fd6:	e004      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003fde:	e000      	b.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003fe0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fe2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d10a      	bne.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003fea:	4bbf      	ldr	r3, [pc, #764]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fee:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003ff2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ff6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ff8:	4abb      	ldr	r2, [pc, #748]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003ffa:	430b      	orrs	r3, r1
 8003ffc:	6553      	str	r3, [r2, #84]	; 0x54
 8003ffe:	e003      	b.n	8004008 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004000:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004004:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004008:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800400c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004010:	f002 0302 	and.w	r3, r2, #2
 8004014:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004018:	2300      	movs	r3, #0
 800401a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800401e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004022:	460b      	mov	r3, r1
 8004024:	4313      	orrs	r3, r2
 8004026:	d041      	beq.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004028:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800402c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800402e:	2b05      	cmp	r3, #5
 8004030:	d824      	bhi.n	800407c <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8004032:	a201      	add	r2, pc, #4	; (adr r2, 8004038 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8004034:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004038:	08004085 	.word	0x08004085
 800403c:	08004051 	.word	0x08004051
 8004040:	08004067 	.word	0x08004067
 8004044:	08004085 	.word	0x08004085
 8004048:	08004085 	.word	0x08004085
 800404c:	08004085 	.word	0x08004085
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004050:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004054:	3308      	adds	r3, #8
 8004056:	2101      	movs	r1, #1
 8004058:	4618      	mov	r0, r3
 800405a:	f000 fc97 	bl	800498c <RCCEx_PLL2_Config>
 800405e:	4603      	mov	r3, r0
 8004060:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004064:	e00f      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004066:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800406a:	3328      	adds	r3, #40	; 0x28
 800406c:	2101      	movs	r1, #1
 800406e:	4618      	mov	r0, r3
 8004070:	f000 fd3e 	bl	8004af0 <RCCEx_PLL3_Config>
 8004074:	4603      	mov	r3, r0
 8004076:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800407a:	e004      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800407c:	2301      	movs	r3, #1
 800407e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004082:	e000      	b.n	8004086 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8004084:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004086:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10a      	bne.n	80040a4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800408e:	4b96      	ldr	r3, [pc, #600]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004092:	f023 0107 	bic.w	r1, r3, #7
 8004096:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800409a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800409c:	4a92      	ldr	r2, [pc, #584]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800409e:	430b      	orrs	r3, r1
 80040a0:	6553      	str	r3, [r2, #84]	; 0x54
 80040a2:	e003      	b.n	80040ac <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040a4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040a8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80040ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040b4:	f002 0304 	and.w	r3, r2, #4
 80040b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80040bc:	2300      	movs	r3, #0
 80040be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80040c2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80040c6:	460b      	mov	r3, r1
 80040c8:	4313      	orrs	r3, r2
 80040ca:	d044      	beq.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80040cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80040d4:	2b05      	cmp	r3, #5
 80040d6:	d825      	bhi.n	8004124 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80040d8:	a201      	add	r2, pc, #4	; (adr r2, 80040e0 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80040da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040de:	bf00      	nop
 80040e0:	0800412d 	.word	0x0800412d
 80040e4:	080040f9 	.word	0x080040f9
 80040e8:	0800410f 	.word	0x0800410f
 80040ec:	0800412d 	.word	0x0800412d
 80040f0:	0800412d 	.word	0x0800412d
 80040f4:	0800412d 	.word	0x0800412d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80040f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040fc:	3308      	adds	r3, #8
 80040fe:	2101      	movs	r1, #1
 8004100:	4618      	mov	r0, r3
 8004102:	f000 fc43 	bl	800498c <RCCEx_PLL2_Config>
 8004106:	4603      	mov	r3, r0
 8004108:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800410c:	e00f      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800410e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004112:	3328      	adds	r3, #40	; 0x28
 8004114:	2101      	movs	r1, #1
 8004116:	4618      	mov	r0, r3
 8004118:	f000 fcea 	bl	8004af0 <RCCEx_PLL3_Config>
 800411c:	4603      	mov	r3, r0
 800411e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004122:	e004      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800412a:	e000      	b.n	800412e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 800412c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800412e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004132:	2b00      	cmp	r3, #0
 8004134:	d10b      	bne.n	800414e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004136:	4b6c      	ldr	r3, [pc, #432]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004138:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800413a:	f023 0107 	bic.w	r1, r3, #7
 800413e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004142:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004146:	4a68      	ldr	r2, [pc, #416]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004148:	430b      	orrs	r3, r1
 800414a:	6593      	str	r3, [r2, #88]	; 0x58
 800414c:	e003      	b.n	8004156 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800414e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004152:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004156:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800415a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415e:	f002 0320 	and.w	r3, r2, #32
 8004162:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004166:	2300      	movs	r3, #0
 8004168:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800416c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004170:	460b      	mov	r3, r1
 8004172:	4313      	orrs	r3, r2
 8004174:	d055      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004176:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800417a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800417e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004182:	d033      	beq.n	80041ec <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004184:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004188:	d82c      	bhi.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800418a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800418e:	d02f      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8004190:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004194:	d826      	bhi.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004196:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800419a:	d02b      	beq.n	80041f4 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 800419c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80041a0:	d820      	bhi.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80041a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041a6:	d012      	beq.n	80041ce <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80041a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041ac:	d81a      	bhi.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d022      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80041b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80041b6:	d115      	bne.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041bc:	3308      	adds	r3, #8
 80041be:	2100      	movs	r1, #0
 80041c0:	4618      	mov	r0, r3
 80041c2:	f000 fbe3 	bl	800498c <RCCEx_PLL2_Config>
 80041c6:	4603      	mov	r3, r0
 80041c8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80041cc:	e015      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041d2:	3328      	adds	r3, #40	; 0x28
 80041d4:	2102      	movs	r1, #2
 80041d6:	4618      	mov	r0, r3
 80041d8:	f000 fc8a 	bl	8004af0 <RCCEx_PLL3_Config>
 80041dc:	4603      	mov	r3, r0
 80041de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80041e2:	e00a      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041e4:	2301      	movs	r3, #1
 80041e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80041ea:	e006      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80041ec:	bf00      	nop
 80041ee:	e004      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80041f0:	bf00      	nop
 80041f2:	e002      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80041f4:	bf00      	nop
 80041f6:	e000      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 80041f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041fa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10b      	bne.n	800421a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004202:	4b39      	ldr	r3, [pc, #228]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004206:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800420a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800420e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004212:	4a35      	ldr	r2, [pc, #212]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004214:	430b      	orrs	r3, r1
 8004216:	6553      	str	r3, [r2, #84]	; 0x54
 8004218:	e003      	b.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800421a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800421e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004222:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800422a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 800422e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004232:	2300      	movs	r3, #0
 8004234:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004238:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 800423c:	460b      	mov	r3, r1
 800423e:	4313      	orrs	r3, r2
 8004240:	d058      	beq.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004242:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004246:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800424a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 800424e:	d033      	beq.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004250:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004254:	d82c      	bhi.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004256:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800425a:	d02f      	beq.n	80042bc <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 800425c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004260:	d826      	bhi.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004262:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004266:	d02b      	beq.n	80042c0 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004268:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800426c:	d820      	bhi.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800426e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004272:	d012      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004274:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004278:	d81a      	bhi.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800427a:	2b00      	cmp	r3, #0
 800427c:	d022      	beq.n	80042c4 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800427e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004282:	d115      	bne.n	80042b0 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004284:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004288:	3308      	adds	r3, #8
 800428a:	2100      	movs	r1, #0
 800428c:	4618      	mov	r0, r3
 800428e:	f000 fb7d 	bl	800498c <RCCEx_PLL2_Config>
 8004292:	4603      	mov	r3, r0
 8004294:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004298:	e015      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800429a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800429e:	3328      	adds	r3, #40	; 0x28
 80042a0:	2102      	movs	r1, #2
 80042a2:	4618      	mov	r0, r3
 80042a4:	f000 fc24 	bl	8004af0 <RCCEx_PLL3_Config>
 80042a8:	4603      	mov	r3, r0
 80042aa:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80042ae:	e00a      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80042b6:	e006      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80042b8:	bf00      	nop
 80042ba:	e004      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80042bc:	bf00      	nop
 80042be:	e002      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80042c0:	bf00      	nop
 80042c2:	e000      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 80042c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042c6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d10e      	bne.n	80042ec <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80042ce:	4b06      	ldr	r3, [pc, #24]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042d2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80042d6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042de:	4a02      	ldr	r2, [pc, #8]	; (80042e8 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80042e0:	430b      	orrs	r3, r1
 80042e2:	6593      	str	r3, [r2, #88]	; 0x58
 80042e4:	e006      	b.n	80042f4 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 80042e6:	bf00      	nop
 80042e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042ec:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80042f0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80042f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042fc:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004300:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004304:	2300      	movs	r3, #0
 8004306:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800430a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800430e:	460b      	mov	r3, r1
 8004310:	4313      	orrs	r3, r2
 8004312:	d055      	beq.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004314:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004318:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800431c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004320:	d033      	beq.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004322:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004326:	d82c      	bhi.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004328:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800432c:	d02f      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0xdde>
 800432e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004332:	d826      	bhi.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004334:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004338:	d02b      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 800433a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800433e:	d820      	bhi.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004340:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004344:	d012      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004346:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800434a:	d81a      	bhi.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800434c:	2b00      	cmp	r3, #0
 800434e:	d022      	beq.n	8004396 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004350:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004354:	d115      	bne.n	8004382 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004356:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800435a:	3308      	adds	r3, #8
 800435c:	2100      	movs	r1, #0
 800435e:	4618      	mov	r0, r3
 8004360:	f000 fb14 	bl	800498c <RCCEx_PLL2_Config>
 8004364:	4603      	mov	r3, r0
 8004366:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800436a:	e015      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800436c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004370:	3328      	adds	r3, #40	; 0x28
 8004372:	2102      	movs	r1, #2
 8004374:	4618      	mov	r0, r3
 8004376:	f000 fbbb 	bl	8004af0 <RCCEx_PLL3_Config>
 800437a:	4603      	mov	r3, r0
 800437c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004380:	e00a      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004382:	2301      	movs	r3, #1
 8004384:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004388:	e006      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800438a:	bf00      	nop
 800438c:	e004      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800438e:	bf00      	nop
 8004390:	e002      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004392:	bf00      	nop
 8004394:	e000      	b.n	8004398 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004396:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004398:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10b      	bne.n	80043b8 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80043a0:	4bbb      	ldr	r3, [pc, #748]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 80043a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043a4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80043a8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043ac:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80043b0:	4ab7      	ldr	r2, [pc, #732]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 80043b2:	430b      	orrs	r3, r1
 80043b4:	6593      	str	r3, [r2, #88]	; 0x58
 80043b6:	e003      	b.n	80043c0 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043bc:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 80043c0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043c8:	f002 0308 	and.w	r3, r2, #8
 80043cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80043d0:	2300      	movs	r3, #0
 80043d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80043d6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80043da:	460b      	mov	r3, r1
 80043dc:	4313      	orrs	r3, r2
 80043de:	d01e      	beq.n	800441e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80043e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80043e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80043ec:	d10c      	bne.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80043ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043f2:	3328      	adds	r3, #40	; 0x28
 80043f4:	2102      	movs	r1, #2
 80043f6:	4618      	mov	r0, r3
 80043f8:	f000 fb7a 	bl	8004af0 <RCCEx_PLL3_Config>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d002      	beq.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004408:	4ba1      	ldr	r3, [pc, #644]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800440a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800440c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004410:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004414:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004418:	4a9d      	ldr	r2, [pc, #628]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800441a:	430b      	orrs	r3, r1
 800441c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800441e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004426:	f002 0310 	and.w	r3, r2, #16
 800442a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800442e:	2300      	movs	r3, #0
 8004430:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004434:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004438:	460b      	mov	r3, r1
 800443a:	4313      	orrs	r3, r2
 800443c:	d01e      	beq.n	800447c <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800443e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004442:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004446:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800444a:	d10c      	bne.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800444c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004450:	3328      	adds	r3, #40	; 0x28
 8004452:	2102      	movs	r1, #2
 8004454:	4618      	mov	r0, r3
 8004456:	f000 fb4b 	bl	8004af0 <RCCEx_PLL3_Config>
 800445a:	4603      	mov	r3, r0
 800445c:	2b00      	cmp	r3, #0
 800445e:	d002      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004466:	4b8a      	ldr	r3, [pc, #552]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8004468:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800446a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800446e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004472:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004476:	4a86      	ldr	r2, [pc, #536]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8004478:	430b      	orrs	r3, r1
 800447a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800447c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004484:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004488:	67bb      	str	r3, [r7, #120]	; 0x78
 800448a:	2300      	movs	r3, #0
 800448c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800448e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004492:	460b      	mov	r3, r1
 8004494:	4313      	orrs	r3, r2
 8004496:	d03e      	beq.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004498:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800449c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80044a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044a4:	d022      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 80044a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80044aa:	d81b      	bhi.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d003      	beq.n	80044b8 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 80044b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044b4:	d00b      	beq.n	80044ce <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 80044b6:	e015      	b.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044bc:	3308      	adds	r3, #8
 80044be:	2100      	movs	r1, #0
 80044c0:	4618      	mov	r0, r3
 80044c2:	f000 fa63 	bl	800498c <RCCEx_PLL2_Config>
 80044c6:	4603      	mov	r3, r0
 80044c8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80044cc:	e00f      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80044ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044d2:	3328      	adds	r3, #40	; 0x28
 80044d4:	2102      	movs	r1, #2
 80044d6:	4618      	mov	r0, r3
 80044d8:	f000 fb0a 	bl	8004af0 <RCCEx_PLL3_Config>
 80044dc:	4603      	mov	r3, r0
 80044de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80044e2:	e004      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80044ea:	e000      	b.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 80044ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044ee:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d10b      	bne.n	800450e <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80044f6:	4b66      	ldr	r3, [pc, #408]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 80044f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044fa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80044fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004502:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004506:	4a62      	ldr	r2, [pc, #392]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8004508:	430b      	orrs	r3, r1
 800450a:	6593      	str	r3, [r2, #88]	; 0x58
 800450c:	e003      	b.n	8004516 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800450e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004512:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004516:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800451a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800451e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004522:	673b      	str	r3, [r7, #112]	; 0x70
 8004524:	2300      	movs	r3, #0
 8004526:	677b      	str	r3, [r7, #116]	; 0x74
 8004528:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 800452c:	460b      	mov	r3, r1
 800452e:	4313      	orrs	r3, r2
 8004530:	d03b      	beq.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xffa>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004532:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004536:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800453a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800453e:	d01f      	beq.n	8004580 <HAL_RCCEx_PeriphCLKConfig+0xfd0>
 8004540:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004544:	d818      	bhi.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xfc8>
 8004546:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800454a:	d003      	beq.n	8004554 <HAL_RCCEx_PeriphCLKConfig+0xfa4>
 800454c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004550:	d007      	beq.n	8004562 <HAL_RCCEx_PeriphCLKConfig+0xfb2>
 8004552:	e011      	b.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xfc8>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004554:	4b4e      	ldr	r3, [pc, #312]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8004556:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004558:	4a4d      	ldr	r2, [pc, #308]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800455a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800455e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004560:	e00f      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xfd2>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004562:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004566:	3328      	adds	r3, #40	; 0x28
 8004568:	2101      	movs	r1, #1
 800456a:	4618      	mov	r0, r3
 800456c:	f000 fac0 	bl	8004af0 <RCCEx_PLL3_Config>
 8004570:	4603      	mov	r3, r0
 8004572:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004576:	e004      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xfd2>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800457e:	e000      	b.n	8004582 <HAL_RCCEx_PeriphCLKConfig+0xfd2>
        break;
 8004580:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004582:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004586:	2b00      	cmp	r3, #0
 8004588:	d10b      	bne.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0xff2>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800458a:	4b41      	ldr	r3, [pc, #260]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800458c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800458e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004592:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800459a:	4a3d      	ldr	r2, [pc, #244]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800459c:	430b      	orrs	r3, r1
 800459e:	6553      	str	r3, [r2, #84]	; 0x54
 80045a0:	e003      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0xffa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045a2:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80045a6:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80045aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80045b6:	66bb      	str	r3, [r7, #104]	; 0x68
 80045b8:	2300      	movs	r3, #0
 80045ba:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045bc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80045c0:	460b      	mov	r3, r1
 80045c2:	4313      	orrs	r3, r2
 80045c4:	d031      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x107a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80045c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d003      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x1028>
 80045d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80045d4:	d007      	beq.n	80045e6 <HAL_RCCEx_PeriphCLKConfig+0x1036>
 80045d6:	e011      	b.n	80045fc <HAL_RCCEx_PeriphCLKConfig+0x104c>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045d8:	4b2d      	ldr	r3, [pc, #180]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 80045da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045dc:	4a2c      	ldr	r2, [pc, #176]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 80045de:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80045e2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80045e4:	e00e      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x1054>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80045e6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045ea:	3308      	adds	r3, #8
 80045ec:	2102      	movs	r1, #2
 80045ee:	4618      	mov	r0, r3
 80045f0:	f000 f9cc 	bl	800498c <RCCEx_PLL2_Config>
 80045f4:	4603      	mov	r3, r0
 80045f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80045fa:	e003      	b.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x1054>

      default:
        ret = HAL_ERROR;
 80045fc:	2301      	movs	r3, #1
 80045fe:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004602:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004604:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004608:	2b00      	cmp	r3, #0
 800460a:	d10a      	bne.n	8004622 <HAL_RCCEx_PeriphCLKConfig+0x1072>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800460c:	4b20      	ldr	r3, [pc, #128]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800460e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004610:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004614:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004618:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800461a:	4a1d      	ldr	r2, [pc, #116]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800461c:	430b      	orrs	r3, r1
 800461e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004620:	e003      	b.n	800462a <HAL_RCCEx_PeriphCLKConfig+0x107a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004622:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004626:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800462a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800462e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004632:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004636:	663b      	str	r3, [r7, #96]	; 0x60
 8004638:	2300      	movs	r3, #0
 800463a:	667b      	str	r3, [r7, #100]	; 0x64
 800463c:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004640:	460b      	mov	r3, r1
 8004642:	4313      	orrs	r3, r2
 8004644:	d03b      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x110e>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004646:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800464a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800464e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004652:	d018      	beq.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x10d6>
 8004654:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004658:	d811      	bhi.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x10ce>
 800465a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800465e:	d014      	beq.n	800468a <HAL_RCCEx_PeriphCLKConfig+0x10da>
 8004660:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004664:	d80b      	bhi.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x10ce>
 8004666:	2b00      	cmp	r3, #0
 8004668:	d014      	beq.n	8004694 <HAL_RCCEx_PeriphCLKConfig+0x10e4>
 800466a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800466e:	d106      	bne.n	800467e <HAL_RCCEx_PeriphCLKConfig+0x10ce>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004670:	4b07      	ldr	r3, [pc, #28]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8004672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004674:	4a06      	ldr	r2, [pc, #24]	; (8004690 <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8004676:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800467a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800467c:	e00b      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x10e6>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800467e:	2301      	movs	r3, #1
 8004680:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004684:	e007      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x10e6>
        break;
 8004686:	bf00      	nop
 8004688:	e005      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x10e6>
        break;
 800468a:	bf00      	nop
 800468c:	e003      	b.n	8004696 <HAL_RCCEx_PeriphCLKConfig+0x10e6>
 800468e:	bf00      	nop
 8004690:	58024400 	.word	0x58024400
        break;
 8004694:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004696:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800469a:	2b00      	cmp	r3, #0
 800469c:	d10b      	bne.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x1106>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800469e:	4bba      	ldr	r3, [pc, #744]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 80046a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80046a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80046ae:	4ab6      	ldr	r2, [pc, #728]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 80046b0:	430b      	orrs	r3, r1
 80046b2:	6553      	str	r3, [r2, #84]	; 0x54
 80046b4:	e003      	b.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x110e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046b6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80046ba:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80046be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046c6:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 80046ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80046cc:	2300      	movs	r3, #0
 80046ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046d0:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 80046d4:	460b      	mov	r3, r1
 80046d6:	4313      	orrs	r3, r2
 80046d8:	d009      	beq.n	80046ee <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80046da:	4bab      	ldr	r3, [pc, #684]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 80046dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046de:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80046e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80046e8:	4aa7      	ldr	r2, [pc, #668]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 80046ea:	430b      	orrs	r3, r1
 80046ec:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80046ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f6:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80046fa:	653b      	str	r3, [r7, #80]	; 0x50
 80046fc:	2300      	movs	r3, #0
 80046fe:	657b      	str	r3, [r7, #84]	; 0x54
 8004700:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004704:	460b      	mov	r3, r1
 8004706:	4313      	orrs	r3, r2
 8004708:	d00a      	beq.n	8004720 <HAL_RCCEx_PeriphCLKConfig+0x1170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800470a:	4b9f      	ldr	r3, [pc, #636]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004712:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004716:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800471a:	4a9b      	ldr	r2, [pc, #620]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800471c:	430b      	orrs	r3, r1
 800471e:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004720:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004724:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004728:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800472c:	64bb      	str	r3, [r7, #72]	; 0x48
 800472e:	2300      	movs	r3, #0
 8004730:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004732:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004736:	460b      	mov	r3, r1
 8004738:	4313      	orrs	r3, r2
 800473a:	d009      	beq.n	8004750 <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800473c:	4b92      	ldr	r3, [pc, #584]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800473e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004740:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004744:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004748:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800474a:	4a8f      	ldr	r2, [pc, #572]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800474c:	430b      	orrs	r3, r1
 800474e:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004750:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004754:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004758:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800475c:	643b      	str	r3, [r7, #64]	; 0x40
 800475e:	2300      	movs	r3, #0
 8004760:	647b      	str	r3, [r7, #68]	; 0x44
 8004762:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004766:	460b      	mov	r3, r1
 8004768:	4313      	orrs	r3, r2
 800476a:	d00e      	beq.n	800478a <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800476c:	4b86      	ldr	r3, [pc, #536]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800476e:	691b      	ldr	r3, [r3, #16]
 8004770:	4a85      	ldr	r2, [pc, #532]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8004772:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004776:	6113      	str	r3, [r2, #16]
 8004778:	4b83      	ldr	r3, [pc, #524]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800477a:	6919      	ldr	r1, [r3, #16]
 800477c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004780:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004784:	4a80      	ldr	r2, [pc, #512]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8004786:	430b      	orrs	r3, r1
 8004788:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800478a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800478e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004792:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004796:	63bb      	str	r3, [r7, #56]	; 0x38
 8004798:	2300      	movs	r3, #0
 800479a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800479c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 80047a0:	460b      	mov	r3, r1
 80047a2:	4313      	orrs	r3, r2
 80047a4:	d009      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0x120a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80047a6:	4b78      	ldr	r3, [pc, #480]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 80047a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047aa:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80047ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b4:	4a74      	ldr	r2, [pc, #464]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 80047b6:	430b      	orrs	r3, r1
 80047b8:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80047ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047c2:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 80047c6:	633b      	str	r3, [r7, #48]	; 0x30
 80047c8:	2300      	movs	r3, #0
 80047ca:	637b      	str	r3, [r7, #52]	; 0x34
 80047cc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 80047d0:	460b      	mov	r3, r1
 80047d2:	4313      	orrs	r3, r2
 80047d4:	d00a      	beq.n	80047ec <HAL_RCCEx_PeriphCLKConfig+0x123c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80047d6:	4b6c      	ldr	r3, [pc, #432]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 80047d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047da:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 80047de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80047e6:	4a68      	ldr	r2, [pc, #416]	; (8004988 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 80047e8:	430b      	orrs	r3, r1
 80047ea:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80047ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047f4:	2100      	movs	r1, #0
 80047f6:	62b9      	str	r1, [r7, #40]	; 0x28
 80047f8:	f003 0301 	and.w	r3, r3, #1
 80047fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80047fe:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004802:	460b      	mov	r3, r1
 8004804:	4313      	orrs	r3, r2
 8004806:	d011      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x127c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004808:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800480c:	3308      	adds	r3, #8
 800480e:	2100      	movs	r1, #0
 8004810:	4618      	mov	r0, r3
 8004812:	f000 f8bb 	bl	800498c <RCCEx_PLL2_Config>
 8004816:	4603      	mov	r3, r0
 8004818:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800481c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004820:	2b00      	cmp	r3, #0
 8004822:	d003      	beq.n	800482c <HAL_RCCEx_PeriphCLKConfig+0x127c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004824:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004828:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800482c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004834:	2100      	movs	r1, #0
 8004836:	6239      	str	r1, [r7, #32]
 8004838:	f003 0302 	and.w	r3, r3, #2
 800483c:	627b      	str	r3, [r7, #36]	; 0x24
 800483e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8004842:	460b      	mov	r3, r1
 8004844:	4313      	orrs	r3, r2
 8004846:	d011      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x12bc>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004848:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800484c:	3308      	adds	r3, #8
 800484e:	2101      	movs	r1, #1
 8004850:	4618      	mov	r0, r3
 8004852:	f000 f89b 	bl	800498c <RCCEx_PLL2_Config>
 8004856:	4603      	mov	r3, r0
 8004858:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800485c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004860:	2b00      	cmp	r3, #0
 8004862:	d003      	beq.n	800486c <HAL_RCCEx_PeriphCLKConfig+0x12bc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004864:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004868:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800486c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004874:	2100      	movs	r1, #0
 8004876:	61b9      	str	r1, [r7, #24]
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	61fb      	str	r3, [r7, #28]
 800487e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8004882:	460b      	mov	r3, r1
 8004884:	4313      	orrs	r3, r2
 8004886:	d011      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x12fc>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004888:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800488c:	3308      	adds	r3, #8
 800488e:	2102      	movs	r1, #2
 8004890:	4618      	mov	r0, r3
 8004892:	f000 f87b 	bl	800498c <RCCEx_PLL2_Config>
 8004896:	4603      	mov	r3, r0
 8004898:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800489c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d003      	beq.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x12fc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048a4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80048a8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80048ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048b4:	2100      	movs	r1, #0
 80048b6:	6139      	str	r1, [r7, #16]
 80048b8:	f003 0308 	and.w	r3, r3, #8
 80048bc:	617b      	str	r3, [r7, #20]
 80048be:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80048c2:	460b      	mov	r3, r1
 80048c4:	4313      	orrs	r3, r2
 80048c6:	d011      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x133c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80048c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048cc:	3328      	adds	r3, #40	; 0x28
 80048ce:	2100      	movs	r1, #0
 80048d0:	4618      	mov	r0, r3
 80048d2:	f000 f90d 	bl	8004af0 <RCCEx_PLL3_Config>
 80048d6:	4603      	mov	r3, r0
 80048d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 80048dc:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d003      	beq.n	80048ec <HAL_RCCEx_PeriphCLKConfig+0x133c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048e4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80048e8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80048ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80048f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048f4:	2100      	movs	r1, #0
 80048f6:	60b9      	str	r1, [r7, #8]
 80048f8:	f003 0310 	and.w	r3, r3, #16
 80048fc:	60fb      	str	r3, [r7, #12]
 80048fe:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004902:	460b      	mov	r3, r1
 8004904:	4313      	orrs	r3, r2
 8004906:	d011      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x137c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004908:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800490c:	3328      	adds	r3, #40	; 0x28
 800490e:	2101      	movs	r1, #1
 8004910:	4618      	mov	r0, r3
 8004912:	f000 f8ed 	bl	8004af0 <RCCEx_PLL3_Config>
 8004916:	4603      	mov	r3, r0
 8004918:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800491c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004920:	2b00      	cmp	r3, #0
 8004922:	d003      	beq.n	800492c <HAL_RCCEx_PeriphCLKConfig+0x137c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004924:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004928:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800492c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004934:	2100      	movs	r1, #0
 8004936:	6039      	str	r1, [r7, #0]
 8004938:	f003 0320 	and.w	r3, r3, #32
 800493c:	607b      	str	r3, [r7, #4]
 800493e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004942:	460b      	mov	r3, r1
 8004944:	4313      	orrs	r3, r2
 8004946:	d011      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x13bc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004948:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800494c:	3328      	adds	r3, #40	; 0x28
 800494e:	2102      	movs	r1, #2
 8004950:	4618      	mov	r0, r3
 8004952:	f000 f8cd 	bl	8004af0 <RCCEx_PLL3_Config>
 8004956:	4603      	mov	r3, r0
 8004958:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 800495c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004960:	2b00      	cmp	r3, #0
 8004962:	d003      	beq.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x13bc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004964:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004968:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 800496c:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x13c8>
  {
    return HAL_OK;
 8004974:	2300      	movs	r3, #0
 8004976:	e000      	b.n	800497a <HAL_RCCEx_PeriphCLKConfig+0x13ca>
  }
  return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
}
 800497a:	4618      	mov	r0, r3
 800497c:	f507 7790 	add.w	r7, r7, #288	; 0x120
 8004980:	46bd      	mov	sp, r7
 8004982:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004986:	bf00      	nop
 8004988:	58024400 	.word	0x58024400

0800498c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004996:	2300      	movs	r3, #0
 8004998:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800499a:	4b53      	ldr	r3, [pc, #332]	; (8004ae8 <RCCEx_PLL2_Config+0x15c>)
 800499c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499e:	f003 0303 	and.w	r3, r3, #3
 80049a2:	2b03      	cmp	r3, #3
 80049a4:	d101      	bne.n	80049aa <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e099      	b.n	8004ade <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80049aa:	4b4f      	ldr	r3, [pc, #316]	; (8004ae8 <RCCEx_PLL2_Config+0x15c>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a4e      	ldr	r2, [pc, #312]	; (8004ae8 <RCCEx_PLL2_Config+0x15c>)
 80049b0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80049b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049b6:	f7fc f937 	bl	8000c28 <HAL_GetTick>
 80049ba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80049bc:	e008      	b.n	80049d0 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80049be:	f7fc f933 	bl	8000c28 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d901      	bls.n	80049d0 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e086      	b.n	8004ade <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80049d0:	4b45      	ldr	r3, [pc, #276]	; (8004ae8 <RCCEx_PLL2_Config+0x15c>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1f0      	bne.n	80049be <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 80049dc:	4b42      	ldr	r3, [pc, #264]	; (8004ae8 <RCCEx_PLL2_Config+0x15c>)
 80049de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e0:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	031b      	lsls	r3, r3, #12
 80049ea:	493f      	ldr	r1, [pc, #252]	; (8004ae8 <RCCEx_PLL2_Config+0x15c>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	628b      	str	r3, [r1, #40]	; 0x28
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	3b01      	subs	r3, #1
 80049f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	3b01      	subs	r3, #1
 8004a00:	025b      	lsls	r3, r3, #9
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	431a      	orrs	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	041b      	lsls	r3, r3, #16
 8004a0e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004a12:	431a      	orrs	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	061b      	lsls	r3, r3, #24
 8004a1c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004a20:	4931      	ldr	r1, [pc, #196]	; (8004ae8 <RCCEx_PLL2_Config+0x15c>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004a26:	4b30      	ldr	r3, [pc, #192]	; (8004ae8 <RCCEx_PLL2_Config+0x15c>)
 8004a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	492d      	ldr	r1, [pc, #180]	; (8004ae8 <RCCEx_PLL2_Config+0x15c>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004a38:	4b2b      	ldr	r3, [pc, #172]	; (8004ae8 <RCCEx_PLL2_Config+0x15c>)
 8004a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3c:	f023 0220 	bic.w	r2, r3, #32
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	4928      	ldr	r1, [pc, #160]	; (8004ae8 <RCCEx_PLL2_Config+0x15c>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004a4a:	4b27      	ldr	r3, [pc, #156]	; (8004ae8 <RCCEx_PLL2_Config+0x15c>)
 8004a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4e:	4a26      	ldr	r2, [pc, #152]	; (8004ae8 <RCCEx_PLL2_Config+0x15c>)
 8004a50:	f023 0310 	bic.w	r3, r3, #16
 8004a54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004a56:	4b24      	ldr	r3, [pc, #144]	; (8004ae8 <RCCEx_PLL2_Config+0x15c>)
 8004a58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a5a:	4b24      	ldr	r3, [pc, #144]	; (8004aec <RCCEx_PLL2_Config+0x160>)
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	69d2      	ldr	r2, [r2, #28]
 8004a62:	00d2      	lsls	r2, r2, #3
 8004a64:	4920      	ldr	r1, [pc, #128]	; (8004ae8 <RCCEx_PLL2_Config+0x15c>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004a6a:	4b1f      	ldr	r3, [pc, #124]	; (8004ae8 <RCCEx_PLL2_Config+0x15c>)
 8004a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6e:	4a1e      	ldr	r2, [pc, #120]	; (8004ae8 <RCCEx_PLL2_Config+0x15c>)
 8004a70:	f043 0310 	orr.w	r3, r3, #16
 8004a74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d106      	bne.n	8004a8a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004a7c:	4b1a      	ldr	r3, [pc, #104]	; (8004ae8 <RCCEx_PLL2_Config+0x15c>)
 8004a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a80:	4a19      	ldr	r2, [pc, #100]	; (8004ae8 <RCCEx_PLL2_Config+0x15c>)
 8004a82:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a88:	e00f      	b.n	8004aaa <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d106      	bne.n	8004a9e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004a90:	4b15      	ldr	r3, [pc, #84]	; (8004ae8 <RCCEx_PLL2_Config+0x15c>)
 8004a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a94:	4a14      	ldr	r2, [pc, #80]	; (8004ae8 <RCCEx_PLL2_Config+0x15c>)
 8004a96:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a9c:	e005      	b.n	8004aaa <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004a9e:	4b12      	ldr	r3, [pc, #72]	; (8004ae8 <RCCEx_PLL2_Config+0x15c>)
 8004aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa2:	4a11      	ldr	r2, [pc, #68]	; (8004ae8 <RCCEx_PLL2_Config+0x15c>)
 8004aa4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004aa8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004aaa:	4b0f      	ldr	r3, [pc, #60]	; (8004ae8 <RCCEx_PLL2_Config+0x15c>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a0e      	ldr	r2, [pc, #56]	; (8004ae8 <RCCEx_PLL2_Config+0x15c>)
 8004ab0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ab4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ab6:	f7fc f8b7 	bl	8000c28 <HAL_GetTick>
 8004aba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004abc:	e008      	b.n	8004ad0 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004abe:	f7fc f8b3 	bl	8000c28 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d901      	bls.n	8004ad0 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e006      	b.n	8004ade <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ad0:	4b05      	ldr	r3, [pc, #20]	; (8004ae8 <RCCEx_PLL2_Config+0x15c>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d0f0      	beq.n	8004abe <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	58024400 	.word	0x58024400
 8004aec:	ffff0007 	.word	0xffff0007

08004af0 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b084      	sub	sp, #16
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004afa:	2300      	movs	r3, #0
 8004afc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004afe:	4b53      	ldr	r3, [pc, #332]	; (8004c4c <RCCEx_PLL3_Config+0x15c>)
 8004b00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b02:	f003 0303 	and.w	r3, r3, #3
 8004b06:	2b03      	cmp	r3, #3
 8004b08:	d101      	bne.n	8004b0e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e099      	b.n	8004c42 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004b0e:	4b4f      	ldr	r3, [pc, #316]	; (8004c4c <RCCEx_PLL3_Config+0x15c>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a4e      	ldr	r2, [pc, #312]	; (8004c4c <RCCEx_PLL3_Config+0x15c>)
 8004b14:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004b1a:	f7fc f885 	bl	8000c28 <HAL_GetTick>
 8004b1e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b20:	e008      	b.n	8004b34 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004b22:	f7fc f881 	bl	8000c28 <HAL_GetTick>
 8004b26:	4602      	mov	r2, r0
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	1ad3      	subs	r3, r2, r3
 8004b2c:	2b02      	cmp	r3, #2
 8004b2e:	d901      	bls.n	8004b34 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	e086      	b.n	8004c42 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004b34:	4b45      	ldr	r3, [pc, #276]	; (8004c4c <RCCEx_PLL3_Config+0x15c>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1f0      	bne.n	8004b22 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004b40:	4b42      	ldr	r3, [pc, #264]	; (8004c4c <RCCEx_PLL3_Config+0x15c>)
 8004b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b44:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	051b      	lsls	r3, r3, #20
 8004b4e:	493f      	ldr	r1, [pc, #252]	; (8004c4c <RCCEx_PLL3_Config+0x15c>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	628b      	str	r3, [r1, #40]	; 0x28
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	3b01      	subs	r3, #1
 8004b5a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	689b      	ldr	r3, [r3, #8]
 8004b62:	3b01      	subs	r3, #1
 8004b64:	025b      	lsls	r3, r3, #9
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	431a      	orrs	r2, r3
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	68db      	ldr	r3, [r3, #12]
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	041b      	lsls	r3, r3, #16
 8004b72:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004b76:	431a      	orrs	r2, r3
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	691b      	ldr	r3, [r3, #16]
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	061b      	lsls	r3, r3, #24
 8004b80:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004b84:	4931      	ldr	r1, [pc, #196]	; (8004c4c <RCCEx_PLL3_Config+0x15c>)
 8004b86:	4313      	orrs	r3, r2
 8004b88:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004b8a:	4b30      	ldr	r3, [pc, #192]	; (8004c4c <RCCEx_PLL3_Config+0x15c>)
 8004b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b8e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	695b      	ldr	r3, [r3, #20]
 8004b96:	492d      	ldr	r1, [pc, #180]	; (8004c4c <RCCEx_PLL3_Config+0x15c>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004b9c:	4b2b      	ldr	r3, [pc, #172]	; (8004c4c <RCCEx_PLL3_Config+0x15c>)
 8004b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba0:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	699b      	ldr	r3, [r3, #24]
 8004ba8:	4928      	ldr	r1, [pc, #160]	; (8004c4c <RCCEx_PLL3_Config+0x15c>)
 8004baa:	4313      	orrs	r3, r2
 8004bac:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004bae:	4b27      	ldr	r3, [pc, #156]	; (8004c4c <RCCEx_PLL3_Config+0x15c>)
 8004bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bb2:	4a26      	ldr	r2, [pc, #152]	; (8004c4c <RCCEx_PLL3_Config+0x15c>)
 8004bb4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bb8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004bba:	4b24      	ldr	r3, [pc, #144]	; (8004c4c <RCCEx_PLL3_Config+0x15c>)
 8004bbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004bbe:	4b24      	ldr	r3, [pc, #144]	; (8004c50 <RCCEx_PLL3_Config+0x160>)
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	69d2      	ldr	r2, [r2, #28]
 8004bc6:	00d2      	lsls	r2, r2, #3
 8004bc8:	4920      	ldr	r1, [pc, #128]	; (8004c4c <RCCEx_PLL3_Config+0x15c>)
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004bce:	4b1f      	ldr	r3, [pc, #124]	; (8004c4c <RCCEx_PLL3_Config+0x15c>)
 8004bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bd2:	4a1e      	ldr	r2, [pc, #120]	; (8004c4c <RCCEx_PLL3_Config+0x15c>)
 8004bd4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004bd8:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d106      	bne.n	8004bee <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004be0:	4b1a      	ldr	r3, [pc, #104]	; (8004c4c <RCCEx_PLL3_Config+0x15c>)
 8004be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004be4:	4a19      	ldr	r2, [pc, #100]	; (8004c4c <RCCEx_PLL3_Config+0x15c>)
 8004be6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004bea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004bec:	e00f      	b.n	8004c0e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004bee:	683b      	ldr	r3, [r7, #0]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d106      	bne.n	8004c02 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004bf4:	4b15      	ldr	r3, [pc, #84]	; (8004c4c <RCCEx_PLL3_Config+0x15c>)
 8004bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bf8:	4a14      	ldr	r2, [pc, #80]	; (8004c4c <RCCEx_PLL3_Config+0x15c>)
 8004bfa:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004bfe:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c00:	e005      	b.n	8004c0e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004c02:	4b12      	ldr	r3, [pc, #72]	; (8004c4c <RCCEx_PLL3_Config+0x15c>)
 8004c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c06:	4a11      	ldr	r2, [pc, #68]	; (8004c4c <RCCEx_PLL3_Config+0x15c>)
 8004c08:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c0c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004c0e:	4b0f      	ldr	r3, [pc, #60]	; (8004c4c <RCCEx_PLL3_Config+0x15c>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a0e      	ldr	r2, [pc, #56]	; (8004c4c <RCCEx_PLL3_Config+0x15c>)
 8004c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c18:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c1a:	f7fc f805 	bl	8000c28 <HAL_GetTick>
 8004c1e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c20:	e008      	b.n	8004c34 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004c22:	f7fc f801 	bl	8000c28 <HAL_GetTick>
 8004c26:	4602      	mov	r2, r0
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	1ad3      	subs	r3, r2, r3
 8004c2c:	2b02      	cmp	r3, #2
 8004c2e:	d901      	bls.n	8004c34 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e006      	b.n	8004c42 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004c34:	4b05      	ldr	r3, [pc, #20]	; (8004c4c <RCCEx_PLL3_Config+0x15c>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d0f0      	beq.n	8004c22 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004c40:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c42:	4618      	mov	r0, r3
 8004c44:	3710      	adds	r7, #16
 8004c46:	46bd      	mov	sp, r7
 8004c48:	bd80      	pop	{r7, pc}
 8004c4a:	bf00      	nop
 8004c4c:	58024400 	.word	0x58024400
 8004c50:	ffff0007 	.word	0xffff0007

08004c54 <__libc_init_array>:
 8004c54:	b570      	push	{r4, r5, r6, lr}
 8004c56:	4d0d      	ldr	r5, [pc, #52]	; (8004c8c <__libc_init_array+0x38>)
 8004c58:	4c0d      	ldr	r4, [pc, #52]	; (8004c90 <__libc_init_array+0x3c>)
 8004c5a:	1b64      	subs	r4, r4, r5
 8004c5c:	10a4      	asrs	r4, r4, #2
 8004c5e:	2600      	movs	r6, #0
 8004c60:	42a6      	cmp	r6, r4
 8004c62:	d109      	bne.n	8004c78 <__libc_init_array+0x24>
 8004c64:	4d0b      	ldr	r5, [pc, #44]	; (8004c94 <__libc_init_array+0x40>)
 8004c66:	4c0c      	ldr	r4, [pc, #48]	; (8004c98 <__libc_init_array+0x44>)
 8004c68:	f000 f82e 	bl	8004cc8 <_init>
 8004c6c:	1b64      	subs	r4, r4, r5
 8004c6e:	10a4      	asrs	r4, r4, #2
 8004c70:	2600      	movs	r6, #0
 8004c72:	42a6      	cmp	r6, r4
 8004c74:	d105      	bne.n	8004c82 <__libc_init_array+0x2e>
 8004c76:	bd70      	pop	{r4, r5, r6, pc}
 8004c78:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c7c:	4798      	blx	r3
 8004c7e:	3601      	adds	r6, #1
 8004c80:	e7ee      	b.n	8004c60 <__libc_init_array+0xc>
 8004c82:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c86:	4798      	blx	r3
 8004c88:	3601      	adds	r6, #1
 8004c8a:	e7f2      	b.n	8004c72 <__libc_init_array+0x1e>
 8004c8c:	08004d4c 	.word	0x08004d4c
 8004c90:	08004d4c 	.word	0x08004d4c
 8004c94:	08004d4c 	.word	0x08004d4c
 8004c98:	08004d50 	.word	0x08004d50

08004c9c <memcpy>:
 8004c9c:	440a      	add	r2, r1
 8004c9e:	4291      	cmp	r1, r2
 8004ca0:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ca4:	d100      	bne.n	8004ca8 <memcpy+0xc>
 8004ca6:	4770      	bx	lr
 8004ca8:	b510      	push	{r4, lr}
 8004caa:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004cae:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004cb2:	4291      	cmp	r1, r2
 8004cb4:	d1f9      	bne.n	8004caa <memcpy+0xe>
 8004cb6:	bd10      	pop	{r4, pc}

08004cb8 <memset>:
 8004cb8:	4402      	add	r2, r0
 8004cba:	4603      	mov	r3, r0
 8004cbc:	4293      	cmp	r3, r2
 8004cbe:	d100      	bne.n	8004cc2 <memset+0xa>
 8004cc0:	4770      	bx	lr
 8004cc2:	f803 1b01 	strb.w	r1, [r3], #1
 8004cc6:	e7f9      	b.n	8004cbc <memset+0x4>

08004cc8 <_init>:
 8004cc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cca:	bf00      	nop
 8004ccc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cce:	bc08      	pop	{r3}
 8004cd0:	469e      	mov	lr, r3
 8004cd2:	4770      	bx	lr

08004cd4 <_fini>:
 8004cd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cd6:	bf00      	nop
 8004cd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004cda:	bc08      	pop	{r3}
 8004cdc:	469e      	mov	lr, r3
 8004cde:	4770      	bx	lr
