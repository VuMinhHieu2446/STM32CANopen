
loop_back.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000048e4  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  08004b7c  08004b7c  00014b7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08004be8  08004be8  00014be8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08004bec  08004bec  00014bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  24000000  08004bf0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          0000011c  24000010  08004c00  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  2400012c  08004c00  0002012c  2**0
                  ALLOC
  8 .ARM.attributes 0000002e  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000d7c0  00000000  00000000  0002003e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000018e3  00000000  00000000  0002d7fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 00000a58  00000000  00000000  0002f0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000009a0  00000000  00000000  0002fb40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  000347d1  00000000  00000000  000304e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   0000c209  00000000  00000000  00064cb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0015308d  00000000  00000000  00070eba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000050  00000000  00000000  001c3f47  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00002b1c  00000000  00000000  001c3f98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000010 	.word	0x24000010
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004b64 	.word	0x08004b64

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000014 	.word	0x24000014
 80002d4:	08004b64 	.word	0x08004b64

080002d8 <HAL_FDCAN_RxFifo0Callback>:
uint8_t               RxData[8];
int indx = 0;
uint32_t TxMailbox;

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 80002d8:	b580      	push	{r7, lr}
 80002da:	b082      	sub	sp, #8
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
 80002e0:	6039      	str	r1, [r7, #0]
  if((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET)
 80002e2:	683b      	ldr	r3, [r7, #0]
 80002e4:	f003 0301 	and.w	r3, r3, #1
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	d014      	beq.n	8000316 <HAL_FDCAN_RxFifo0Callback+0x3e>
  {
    /* Retreive Rx messages from RX FIFO0 */
    if (HAL_FDCAN_GetRxMessage(hfdcan, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 80002ec:	4b0c      	ldr	r3, [pc, #48]	; (8000320 <HAL_FDCAN_RxFifo0Callback+0x48>)
 80002ee:	4a0d      	ldr	r2, [pc, #52]	; (8000324 <HAL_FDCAN_RxFifo0Callback+0x4c>)
 80002f0:	2140      	movs	r1, #64	; 0x40
 80002f2:	6878      	ldr	r0, [r7, #4]
 80002f4:	f001 f80c 	bl	8001310 <HAL_FDCAN_GetRxMessage>
 80002f8:	4603      	mov	r3, r0
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	d001      	beq.n	8000302 <HAL_FDCAN_RxFifo0Callback+0x2a>
    {
    /* Reception Error */
    Error_Handler();
 80002fe:	f000 f9d1 	bl	80006a4 <Error_Handler>
    }
    if (HAL_FDCAN_ActivateNotification(hfdcan, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000302:	2200      	movs	r2, #0
 8000304:	2101      	movs	r1, #1
 8000306:	6878      	ldr	r0, [r7, #4]
 8000308:	f001 f970 	bl	80015ec <HAL_FDCAN_ActivateNotification>
 800030c:	4603      	mov	r3, r0
 800030e:	2b00      	cmp	r3, #0
 8000310:	d001      	beq.n	8000316 <HAL_FDCAN_RxFifo0Callback+0x3e>
    {
      /* Notification Error */
      Error_Handler();
 8000312:	f000 f9c7 	bl	80006a4 <Error_Handler>
    }
  }
}
 8000316:	bf00      	nop
 8000318:	3708      	adds	r7, #8
 800031a:	46bd      	mov	sp, r7
 800031c:	bd80      	pop	{r7, pc}
 800031e:	bf00      	nop
 8000320:	24000120 	.word	0x24000120
 8000324:	240000f0 	.word	0x240000f0

08000328 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800032c:	f000 fb44 	bl	80009b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000330:	f000 f862 	bl	80003f8 <SystemClock_Config>
//  	  sFilterConfig.FilterID1 = 0x601;	// Filter chi nhan ID 0x601 vao RxFIFO_0
//  	  sFilterConfig.FilterID2 = 0x601;
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000334:	f000 f960 	bl	80005f8 <MX_GPIO_Init>
  MX_FDCAN1_Init();
 8000338:	f000 f8dc 	bl	80004f4 <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  TxHeader.DataLength = FDCAN_DLC_BYTES_8;	// so byte data truyen di la 8
 800033c:	4b2a      	ldr	r3, [pc, #168]	; (80003e8 <main+0xc0>)
 800033e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000342:	60da      	str	r2, [r3, #12]
  TxHeader.IdType = FDCAN_STANDARD_ID;		// standard ID
 8000344:	4b28      	ldr	r3, [pc, #160]	; (80003e8 <main+0xc0>)
 8000346:	2200      	movs	r2, #0
 8000348:	605a      	str	r2, [r3, #4]
  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 800034a:	4b27      	ldr	r3, [pc, #156]	; (80003e8 <main+0xc0>)
 800034c:	2200      	movs	r2, #0
 800034e:	615a      	str	r2, [r3, #20]
  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;		//choose transmit frame
 8000350:	4b25      	ldr	r3, [pc, #148]	; (80003e8 <main+0xc0>)
 8000352:	2200      	movs	r2, #0
 8000354:	619a      	str	r2, [r3, #24]
  TxHeader.MessageMarker = 0;
 8000356:	4b24      	ldr	r3, [pc, #144]	; (80003e8 <main+0xc0>)
 8000358:	2200      	movs	r2, #0
 800035a:	621a      	str	r2, [r3, #32]
  TxHeader.Identifier = 0x601;				//Specific ID
 800035c:	4b22      	ldr	r3, [pc, #136]	; (80003e8 <main+0xc0>)
 800035e:	f240 6201 	movw	r2, #1537	; 0x601
 8000362:	601a      	str	r2, [r3, #0]
  TxHeader.TxFrameType = FDCAN_DATA_FRAME;				//Data_frame
 8000364:	4b20      	ldr	r3, [pc, #128]	; (80003e8 <main+0xc0>)
 8000366:	2200      	movs	r2, #0
 8000368:	609a      	str	r2, [r3, #8]
  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 800036a:	4b1f      	ldr	r3, [pc, #124]	; (80003e8 <main+0xc0>)
 800036c:	2200      	movs	r2, #0
 800036e:	61da      	str	r2, [r3, #28]
  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 8000370:	4b1d      	ldr	r3, [pc, #116]	; (80003e8 <main+0xc0>)
 8000372:	2200      	movs	r2, #0
 8000374:	611a      	str	r2, [r3, #16]

if(HAL_FDCAN_Start(&hfdcan1)!= HAL_OK)
 8000376:	481d      	ldr	r0, [pc, #116]	; (80003ec <main+0xc4>)
 8000378:	f000 ff44 	bl	8001204 <HAL_FDCAN_Start>
 800037c:	4603      	mov	r3, r0
 800037e:	2b00      	cmp	r3, #0
 8000380:	d001      	beq.n	8000386 <main+0x5e>
 {
	  Error_Handler();
 8000382:	f000 f98f 	bl	80006a4 <Error_Handler>
 }
 if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK)
 8000386:	2200      	movs	r2, #0
 8000388:	2101      	movs	r1, #1
 800038a:	4818      	ldr	r0, [pc, #96]	; (80003ec <main+0xc4>)
 800038c:	f001 f92e 	bl	80015ec <HAL_FDCAN_ActivateNotification>
 8000390:	4603      	mov	r3, r0
 8000392:	2b00      	cmp	r3, #0
 8000394:	d001      	beq.n	800039a <main+0x72>
 {
   /* Notification Error */
   Error_Handler();
 8000396:	f000 f985 	bl	80006a4 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  TxData[0] = 0x40;
 800039a:	4b15      	ldr	r3, [pc, #84]	; (80003f0 <main+0xc8>)
 800039c:	2240      	movs	r2, #64	; 0x40
 800039e:	701a      	strb	r2, [r3, #0]
	  TxData[1] = 0x64;
 80003a0:	4b13      	ldr	r3, [pc, #76]	; (80003f0 <main+0xc8>)
 80003a2:	2264      	movs	r2, #100	; 0x64
 80003a4:	705a      	strb	r2, [r3, #1]
	  TxData[2] = 0x60;
 80003a6:	4b12      	ldr	r3, [pc, #72]	; (80003f0 <main+0xc8>)
 80003a8:	2260      	movs	r2, #96	; 0x60
 80003aa:	709a      	strb	r2, [r3, #2]
	  TxData[3] = 0;
 80003ac:	4b10      	ldr	r3, [pc, #64]	; (80003f0 <main+0xc8>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	70da      	strb	r2, [r3, #3]
	  TxData[4] = 0x00;
 80003b2:	4b0f      	ldr	r3, [pc, #60]	; (80003f0 <main+0xc8>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	711a      	strb	r2, [r3, #4]
	  TxData[5] = 0x00;
 80003b8:	4b0d      	ldr	r3, [pc, #52]	; (80003f0 <main+0xc8>)
 80003ba:	2200      	movs	r2, #0
 80003bc:	715a      	strb	r2, [r3, #5]
	  TxData[6] = 0;
 80003be:	4b0c      	ldr	r3, [pc, #48]	; (80003f0 <main+0xc8>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	719a      	strb	r2, [r3, #6]
	  TxData[7] = 0;
 80003c4:	4b0a      	ldr	r3, [pc, #40]	; (80003f0 <main+0xc8>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	71da      	strb	r2, [r3, #7]
	  HAL_FDCAN_AddMessageToTxFifoQ(&hfdcan1, &TxHeader, TxData);
 80003ca:	4a09      	ldr	r2, [pc, #36]	; (80003f0 <main+0xc8>)
 80003cc:	4906      	ldr	r1, [pc, #24]	; (80003e8 <main+0xc0>)
 80003ce:	4807      	ldr	r0, [pc, #28]	; (80003ec <main+0xc4>)
 80003d0:	f000 ff43 	bl	800125a <HAL_FDCAN_AddMessageToTxFifoQ>
//	  HAL_FDCAN_AddMessageToTxBuffer(&hfdcan1, &Txheader, data, TxMailbox);
	  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_8);
 80003d4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003d8:	4806      	ldr	r0, [pc, #24]	; (80003f4 <main+0xcc>)
 80003da:	f002 f858 	bl	800248e <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 80003de:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80003e2:	f000 fb7b 	bl	8000adc <HAL_Delay>
	  TxData[0] = 0x40;
 80003e6:	e7d8      	b.n	800039a <main+0x72>
 80003e8:	240000cc 	.word	0x240000cc
 80003ec:	2400002c 	.word	0x2400002c
 80003f0:	24000118 	.word	0x24000118
 80003f4:	58020c00 	.word	0x58020c00

080003f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b09c      	sub	sp, #112	; 0x70
 80003fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80003fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000402:	224c      	movs	r2, #76	; 0x4c
 8000404:	2100      	movs	r1, #0
 8000406:	4618      	mov	r0, r3
 8000408:	f004 fba4 	bl	8004b54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800040c:	1d3b      	adds	r3, r7, #4
 800040e:	2220      	movs	r2, #32
 8000410:	2100      	movs	r1, #0
 8000412:	4618      	mov	r0, r3
 8000414:	f004 fb9e 	bl	8004b54 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000418:	2002      	movs	r0, #2
 800041a:	f002 f853 	bl	80024c4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800041e:	2300      	movs	r3, #0
 8000420:	603b      	str	r3, [r7, #0]
 8000422:	4b32      	ldr	r3, [pc, #200]	; (80004ec <SystemClock_Config+0xf4>)
 8000424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000426:	4a31      	ldr	r2, [pc, #196]	; (80004ec <SystemClock_Config+0xf4>)
 8000428:	f023 0301 	bic.w	r3, r3, #1
 800042c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800042e:	4b2f      	ldr	r3, [pc, #188]	; (80004ec <SystemClock_Config+0xf4>)
 8000430:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000432:	f003 0301 	and.w	r3, r3, #1
 8000436:	603b      	str	r3, [r7, #0]
 8000438:	4b2d      	ldr	r3, [pc, #180]	; (80004f0 <SystemClock_Config+0xf8>)
 800043a:	699b      	ldr	r3, [r3, #24]
 800043c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000440:	4a2b      	ldr	r2, [pc, #172]	; (80004f0 <SystemClock_Config+0xf8>)
 8000442:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000446:	6193      	str	r3, [r2, #24]
 8000448:	4b29      	ldr	r3, [pc, #164]	; (80004f0 <SystemClock_Config+0xf8>)
 800044a:	699b      	ldr	r3, [r3, #24]
 800044c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000450:	603b      	str	r3, [r7, #0]
 8000452:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000454:	bf00      	nop
 8000456:	4b26      	ldr	r3, [pc, #152]	; (80004f0 <SystemClock_Config+0xf8>)
 8000458:	699b      	ldr	r3, [r3, #24]
 800045a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800045e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000462:	d1f8      	bne.n	8000456 <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000464:	2302      	movs	r3, #2
 8000466:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000468:	2301      	movs	r3, #1
 800046a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800046c:	2340      	movs	r3, #64	; 0x40
 800046e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000470:	2302      	movs	r3, #2
 8000472:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000474:	2300      	movs	r3, #0
 8000476:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000478:	2304      	movs	r3, #4
 800047a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 9;
 800047c:	2309      	movs	r3, #9
 800047e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000480:	2302      	movs	r3, #2
 8000482:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000484:	2303      	movs	r3, #3
 8000486:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000488:	2302      	movs	r3, #2
 800048a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800048c:	230c      	movs	r3, #12
 800048e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000490:	2302      	movs	r3, #2
 8000492:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 3072;
 8000494:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8000498:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800049a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800049e:	4618      	mov	r0, r3
 80004a0:	f002 f84a 	bl	8002538 <HAL_RCC_OscConfig>
 80004a4:	4603      	mov	r3, r0
 80004a6:	2b00      	cmp	r3, #0
 80004a8:	d001      	beq.n	80004ae <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80004aa:	f000 f8fb 	bl	80006a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004ae:	233f      	movs	r3, #63	; 0x3f
 80004b0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80004b2:	2300      	movs	r3, #0
 80004b4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80004b6:	2300      	movs	r3, #0
 80004b8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80004ba:	2300      	movs	r3, #0
 80004bc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80004be:	2300      	movs	r3, #0
 80004c0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80004c2:	2300      	movs	r3, #0
 80004c4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80004c6:	2300      	movs	r3, #0
 80004c8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80004ca:	2300      	movs	r3, #0
 80004cc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80004ce:	1d3b      	adds	r3, r7, #4
 80004d0:	2101      	movs	r1, #1
 80004d2:	4618      	mov	r0, r3
 80004d4:	f002 fc8a 	bl	8002dec <HAL_RCC_ClockConfig>
 80004d8:	4603      	mov	r3, r0
 80004da:	2b00      	cmp	r3, #0
 80004dc:	d001      	beq.n	80004e2 <SystemClock_Config+0xea>
  {
    Error_Handler();
 80004de:	f000 f8e1 	bl	80006a4 <Error_Handler>
  }
}
 80004e2:	bf00      	nop
 80004e4:	3770      	adds	r7, #112	; 0x70
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}
 80004ea:	bf00      	nop
 80004ec:	58000400 	.word	0x58000400
 80004f0:	58024800 	.word	0x58024800

080004f4 <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b088      	sub	sp, #32
 80004f8:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80004fa:	4b3d      	ldr	r3, [pc, #244]	; (80005f0 <MX_FDCAN1_Init+0xfc>)
 80004fc:	4a3d      	ldr	r2, [pc, #244]	; (80005f4 <MX_FDCAN1_Init+0x100>)
 80004fe:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_NO_BRS;
 8000500:	4b3b      	ldr	r3, [pc, #236]	; (80005f0 <MX_FDCAN1_Init+0xfc>)
 8000502:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000506:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000508:	4b39      	ldr	r3, [pc, #228]	; (80005f0 <MX_FDCAN1_Init+0xfc>)
 800050a:	2200      	movs	r2, #0
 800050c:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = ENABLE;
 800050e:	4b38      	ldr	r3, [pc, #224]	; (80005f0 <MX_FDCAN1_Init+0xfc>)
 8000510:	2201      	movs	r2, #1
 8000512:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000514:	4b36      	ldr	r3, [pc, #216]	; (80005f0 <MX_FDCAN1_Init+0xfc>)
 8000516:	2200      	movs	r2, #0
 8000518:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800051a:	4b35      	ldr	r3, [pc, #212]	; (80005f0 <MX_FDCAN1_Init+0xfc>)
 800051c:	2200      	movs	r2, #0
 800051e:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000520:	4b33      	ldr	r3, [pc, #204]	; (80005f0 <MX_FDCAN1_Init+0xfc>)
 8000522:	2201      	movs	r2, #1
 8000524:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 7;
 8000526:	4b32      	ldr	r3, [pc, #200]	; (80005f0 <MX_FDCAN1_Init+0xfc>)
 8000528:	2207      	movs	r2, #7
 800052a:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 42;
 800052c:	4b30      	ldr	r3, [pc, #192]	; (80005f0 <MX_FDCAN1_Init+0xfc>)
 800052e:	222a      	movs	r2, #42	; 0x2a
 8000530:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 7;
 8000532:	4b2f      	ldr	r3, [pc, #188]	; (80005f0 <MX_FDCAN1_Init+0xfc>)
 8000534:	2207      	movs	r2, #7
 8000536:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 10;
 8000538:	4b2d      	ldr	r3, [pc, #180]	; (80005f0 <MX_FDCAN1_Init+0xfc>)
 800053a:	220a      	movs	r2, #10
 800053c:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800053e:	4b2c      	ldr	r3, [pc, #176]	; (80005f0 <MX_FDCAN1_Init+0xfc>)
 8000540:	2201      	movs	r2, #1
 8000542:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 3;
 8000544:	4b2a      	ldr	r3, [pc, #168]	; (80005f0 <MX_FDCAN1_Init+0xfc>)
 8000546:	2203      	movs	r2, #3
 8000548:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800054a:	4b29      	ldr	r3, [pc, #164]	; (80005f0 <MX_FDCAN1_Init+0xfc>)
 800054c:	2201      	movs	r2, #1
 800054e:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.MessageRAMOffset = 0;
 8000550:	4b27      	ldr	r3, [pc, #156]	; (80005f0 <MX_FDCAN1_Init+0xfc>)
 8000552:	2200      	movs	r2, #0
 8000554:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.StdFiltersNbr = 1;
 8000556:	4b26      	ldr	r3, [pc, #152]	; (80005f0 <MX_FDCAN1_Init+0xfc>)
 8000558:	2201      	movs	r2, #1
 800055a:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.ExtFiltersNbr = 0;
 800055c:	4b24      	ldr	r3, [pc, #144]	; (80005f0 <MX_FDCAN1_Init+0xfc>)
 800055e:	2200      	movs	r2, #0
 8000560:	63da      	str	r2, [r3, #60]	; 0x3c
  hfdcan1.Init.RxFifo0ElmtsNbr = 1;
 8000562:	4b23      	ldr	r3, [pc, #140]	; (80005f0 <MX_FDCAN1_Init+0xfc>)
 8000564:	2201      	movs	r2, #1
 8000566:	641a      	str	r2, [r3, #64]	; 0x40
  hfdcan1.Init.RxFifo0ElmtSize = FDCAN_DATA_BYTES_8;
 8000568:	4b21      	ldr	r3, [pc, #132]	; (80005f0 <MX_FDCAN1_Init+0xfc>)
 800056a:	2204      	movs	r2, #4
 800056c:	645a      	str	r2, [r3, #68]	; 0x44
  hfdcan1.Init.RxFifo1ElmtsNbr = 0;
 800056e:	4b20      	ldr	r3, [pc, #128]	; (80005f0 <MX_FDCAN1_Init+0xfc>)
 8000570:	2200      	movs	r2, #0
 8000572:	649a      	str	r2, [r3, #72]	; 0x48
  hfdcan1.Init.RxFifo1ElmtSize = FDCAN_DATA_BYTES_8;
 8000574:	4b1e      	ldr	r3, [pc, #120]	; (80005f0 <MX_FDCAN1_Init+0xfc>)
 8000576:	2204      	movs	r2, #4
 8000578:	64da      	str	r2, [r3, #76]	; 0x4c
  hfdcan1.Init.RxBuffersNbr = 0;
 800057a:	4b1d      	ldr	r3, [pc, #116]	; (80005f0 <MX_FDCAN1_Init+0xfc>)
 800057c:	2200      	movs	r2, #0
 800057e:	651a      	str	r2, [r3, #80]	; 0x50
  hfdcan1.Init.RxBufferSize = FDCAN_DATA_BYTES_8;
 8000580:	4b1b      	ldr	r3, [pc, #108]	; (80005f0 <MX_FDCAN1_Init+0xfc>)
 8000582:	2204      	movs	r2, #4
 8000584:	655a      	str	r2, [r3, #84]	; 0x54
  hfdcan1.Init.TxEventsNbr = 0;
 8000586:	4b1a      	ldr	r3, [pc, #104]	; (80005f0 <MX_FDCAN1_Init+0xfc>)
 8000588:	2200      	movs	r2, #0
 800058a:	659a      	str	r2, [r3, #88]	; 0x58
  hfdcan1.Init.TxBuffersNbr = 0;
 800058c:	4b18      	ldr	r3, [pc, #96]	; (80005f0 <MX_FDCAN1_Init+0xfc>)
 800058e:	2200      	movs	r2, #0
 8000590:	65da      	str	r2, [r3, #92]	; 0x5c
  hfdcan1.Init.TxFifoQueueElmtsNbr = 1;
 8000592:	4b17      	ldr	r3, [pc, #92]	; (80005f0 <MX_FDCAN1_Init+0xfc>)
 8000594:	2201      	movs	r2, #1
 8000596:	661a      	str	r2, [r3, #96]	; 0x60
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000598:	4b15      	ldr	r3, [pc, #84]	; (80005f0 <MX_FDCAN1_Init+0xfc>)
 800059a:	2200      	movs	r2, #0
 800059c:	665a      	str	r2, [r3, #100]	; 0x64
  hfdcan1.Init.TxElmtSize = FDCAN_DATA_BYTES_8;
 800059e:	4b14      	ldr	r3, [pc, #80]	; (80005f0 <MX_FDCAN1_Init+0xfc>)
 80005a0:	2204      	movs	r2, #4
 80005a2:	669a      	str	r2, [r3, #104]	; 0x68
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 80005a4:	4812      	ldr	r0, [pc, #72]	; (80005f0 <MX_FDCAN1_Init+0xfc>)
 80005a6:	f000 fbd9 	bl	8000d5c <HAL_FDCAN_Init>
 80005aa:	4603      	mov	r3, r0
 80005ac:	2b00      	cmp	r3, #0
 80005ae:	d001      	beq.n	80005b4 <MX_FDCAN1_Init+0xc0>
  {
    Error_Handler();
 80005b0:	f000 f878 	bl	80006a4 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */
FDCAN_FilterTypeDef sFilterConfig;

  sFilterConfig.IdType = FDCAN_STANDARD_ID;
 80005b4:	2300      	movs	r3, #0
 80005b6:	603b      	str	r3, [r7, #0]
  sFilterConfig.FilterIndex = 0;
 80005b8:	2300      	movs	r3, #0
 80005ba:	607b      	str	r3, [r7, #4]
  sFilterConfig.FilterType = FDCAN_FILTER_MASK;
 80005bc:	2302      	movs	r3, #2
 80005be:	60bb      	str	r3, [r7, #8]
  sFilterConfig.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 80005c0:	2301      	movs	r3, #1
 80005c2:	60fb      	str	r3, [r7, #12]
  sFilterConfig.FilterID1 = 0x582;
 80005c4:	f240 5382 	movw	r3, #1410	; 0x582
 80005c8:	613b      	str	r3, [r7, #16]
  sFilterConfig.FilterID2 = 0x7FF;
 80005ca:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80005ce:	617b      	str	r3, [r7, #20]
  sFilterConfig.RxBufferIndex = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	61bb      	str	r3, [r7, #24]
  if (HAL_FDCAN_ConfigFilter(&hfdcan1, &sFilterConfig) != HAL_OK)
 80005d4:	463b      	mov	r3, r7
 80005d6:	4619      	mov	r1, r3
 80005d8:	4805      	ldr	r0, [pc, #20]	; (80005f0 <MX_FDCAN1_Init+0xfc>)
 80005da:	f000 fd9d 	bl	8001118 <HAL_FDCAN_ConfigFilter>
 80005de:	4603      	mov	r3, r0
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d001      	beq.n	80005e8 <MX_FDCAN1_Init+0xf4>
  {
    /* Filter configuration Error */
    Error_Handler();
 80005e4:	f000 f85e 	bl	80006a4 <Error_Handler>
  	}
  }
  **/
  /* USER CODE END FDCAN1_Init 2 */

}
 80005e8:	bf00      	nop
 80005ea:	3720      	adds	r7, #32
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	2400002c 	.word	0x2400002c
 80005f4:	4000a000 	.word	0x4000a000

080005f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b088      	sub	sp, #32
 80005fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fe:	f107 030c 	add.w	r3, r7, #12
 8000602:	2200      	movs	r2, #0
 8000604:	601a      	str	r2, [r3, #0]
 8000606:	605a      	str	r2, [r3, #4]
 8000608:	609a      	str	r2, [r3, #8]
 800060a:	60da      	str	r2, [r3, #12]
 800060c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800060e:	4b23      	ldr	r3, [pc, #140]	; (800069c <MX_GPIO_Init+0xa4>)
 8000610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000614:	4a21      	ldr	r2, [pc, #132]	; (800069c <MX_GPIO_Init+0xa4>)
 8000616:	f043 0304 	orr.w	r3, r3, #4
 800061a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800061e:	4b1f      	ldr	r3, [pc, #124]	; (800069c <MX_GPIO_Init+0xa4>)
 8000620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000624:	f003 0304 	and.w	r3, r3, #4
 8000628:	60bb      	str	r3, [r7, #8]
 800062a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800062c:	4b1b      	ldr	r3, [pc, #108]	; (800069c <MX_GPIO_Init+0xa4>)
 800062e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000632:	4a1a      	ldr	r2, [pc, #104]	; (800069c <MX_GPIO_Init+0xa4>)
 8000634:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000638:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800063c:	4b17      	ldr	r3, [pc, #92]	; (800069c <MX_GPIO_Init+0xa4>)
 800063e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000642:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800064a:	4b14      	ldr	r3, [pc, #80]	; (800069c <MX_GPIO_Init+0xa4>)
 800064c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000650:	4a12      	ldr	r2, [pc, #72]	; (800069c <MX_GPIO_Init+0xa4>)
 8000652:	f043 0308 	orr.w	r3, r3, #8
 8000656:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800065a:	4b10      	ldr	r3, [pc, #64]	; (800069c <MX_GPIO_Init+0xa4>)
 800065c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000660:	f003 0308 	and.w	r3, r3, #8
 8000664:	603b      	str	r3, [r7, #0]
 8000666:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 8000668:	2200      	movs	r2, #0
 800066a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800066e:	480c      	ldr	r0, [pc, #48]	; (80006a0 <MX_GPIO_Init+0xa8>)
 8000670:	f001 fef4 	bl	800245c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000674:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000678:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067a:	2301      	movs	r3, #1
 800067c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067e:	2300      	movs	r3, #0
 8000680:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000682:	2300      	movs	r3, #0
 8000684:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000686:	f107 030c 	add.w	r3, r7, #12
 800068a:	4619      	mov	r1, r3
 800068c:	4804      	ldr	r0, [pc, #16]	; (80006a0 <MX_GPIO_Init+0xa8>)
 800068e:	f001 fd35 	bl	80020fc <HAL_GPIO_Init>

}
 8000692:	bf00      	nop
 8000694:	3720      	adds	r7, #32
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	58024400 	.word	0x58024400
 80006a0:	58020c00 	.word	0x58020c00

080006a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006a8:	b672      	cpsid	i
}
 80006aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006ac:	e7fe      	b.n	80006ac <Error_Handler+0x8>
	...

080006b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b083      	sub	sp, #12
 80006b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006b6:	4b0a      	ldr	r3, [pc, #40]	; (80006e0 <HAL_MspInit+0x30>)
 80006b8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006bc:	4a08      	ldr	r2, [pc, #32]	; (80006e0 <HAL_MspInit+0x30>)
 80006be:	f043 0302 	orr.w	r3, r3, #2
 80006c2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80006c6:	4b06      	ldr	r3, [pc, #24]	; (80006e0 <HAL_MspInit+0x30>)
 80006c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80006cc:	f003 0302 	and.w	r3, r3, #2
 80006d0:	607b      	str	r3, [r7, #4]
 80006d2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006d4:	bf00      	nop
 80006d6:	370c      	adds	r7, #12
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	58024400 	.word	0x58024400

080006e4 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b0ba      	sub	sp, #232	; 0xe8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006ec:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80006f0:	2200      	movs	r2, #0
 80006f2:	601a      	str	r2, [r3, #0]
 80006f4:	605a      	str	r2, [r3, #4]
 80006f6:	609a      	str	r2, [r3, #8]
 80006f8:	60da      	str	r2, [r3, #12]
 80006fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80006fc:	f107 0310 	add.w	r3, r7, #16
 8000700:	22c0      	movs	r2, #192	; 0xc0
 8000702:	2100      	movs	r1, #0
 8000704:	4618      	mov	r0, r3
 8000706:	f004 fa25 	bl	8004b54 <memset>
  if(hfdcan->Instance==FDCAN1)
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4a2f      	ldr	r2, [pc, #188]	; (80007cc <HAL_FDCAN_MspInit+0xe8>)
 8000710:	4293      	cmp	r3, r2
 8000712:	d156      	bne.n	80007c2 <HAL_FDCAN_MspInit+0xde>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000714:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000718:	f04f 0300 	mov.w	r3, #0
 800071c:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.FdcanClockSelection = RCC_FDCANCLKSOURCE_PLL;
 8000720:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000724:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000728:	f107 0310 	add.w	r3, r7, #16
 800072c:	4618      	mov	r0, r3
 800072e:	f002 fe8d 	bl	800344c <HAL_RCCEx_PeriphCLKConfig>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d001      	beq.n	800073c <HAL_FDCAN_MspInit+0x58>
    {
      Error_Handler();
 8000738:	f7ff ffb4 	bl	80006a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 800073c:	4b24      	ldr	r3, [pc, #144]	; (80007d0 <HAL_FDCAN_MspInit+0xec>)
 800073e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000742:	4a23      	ldr	r2, [pc, #140]	; (80007d0 <HAL_FDCAN_MspInit+0xec>)
 8000744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000748:	f8c2 30ec 	str.w	r3, [r2, #236]	; 0xec
 800074c:	4b20      	ldr	r3, [pc, #128]	; (80007d0 <HAL_FDCAN_MspInit+0xec>)
 800074e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
 8000752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000756:	60fb      	str	r3, [r7, #12]
 8000758:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800075a:	4b1d      	ldr	r3, [pc, #116]	; (80007d0 <HAL_FDCAN_MspInit+0xec>)
 800075c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000760:	4a1b      	ldr	r2, [pc, #108]	; (80007d0 <HAL_FDCAN_MspInit+0xec>)
 8000762:	f043 0308 	orr.w	r3, r3, #8
 8000766:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800076a:	4b19      	ldr	r3, [pc, #100]	; (80007d0 <HAL_FDCAN_MspInit+0xec>)
 800076c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000770:	f003 0308 	and.w	r3, r3, #8
 8000774:	60bb      	str	r3, [r7, #8]
 8000776:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PD0     ------> FDCAN1_RX
    PD1     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000778:	2303      	movs	r3, #3
 800077a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800077e:	2302      	movs	r3, #2
 8000780:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000784:	2300      	movs	r3, #0
 8000786:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078a:	2300      	movs	r3, #0
 800078c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000790:	2309      	movs	r3, #9
 8000792:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000796:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800079a:	4619      	mov	r1, r3
 800079c:	480d      	ldr	r0, [pc, #52]	; (80007d4 <HAL_FDCAN_MspInit+0xf0>)
 800079e:	f001 fcad 	bl	80020fc <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 80007a2:	2200      	movs	r2, #0
 80007a4:	2100      	movs	r1, #0
 80007a6:	2013      	movs	r0, #19
 80007a8:	f000 faa3 	bl	8000cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 80007ac:	2013      	movs	r0, #19
 80007ae:	f000 faba 	bl	8000d26 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 80007b2:	2200      	movs	r2, #0
 80007b4:	2100      	movs	r1, #0
 80007b6:	2015      	movs	r0, #21
 80007b8:	f000 fa9b 	bl	8000cf2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 80007bc:	2015      	movs	r0, #21
 80007be:	f000 fab2 	bl	8000d26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 80007c2:	bf00      	nop
 80007c4:	37e8      	adds	r7, #232	; 0xe8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	bf00      	nop
 80007cc:	4000a000 	.word	0x4000a000
 80007d0:	58024400 	.word	0x58024400
 80007d4:	58020c00 	.word	0x58020c00

080007d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80007dc:	e7fe      	b.n	80007dc <NMI_Handler+0x4>

080007de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007de:	b480      	push	{r7}
 80007e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007e2:	e7fe      	b.n	80007e2 <HardFault_Handler+0x4>

080007e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007e8:	e7fe      	b.n	80007e8 <MemManage_Handler+0x4>

080007ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007ea:	b480      	push	{r7}
 80007ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007ee:	e7fe      	b.n	80007ee <BusFault_Handler+0x4>

080007f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007f4:	e7fe      	b.n	80007f4 <UsageFault_Handler+0x4>

080007f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007f6:	b480      	push	{r7}
 80007f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007fa:	bf00      	nop
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr

08000804 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000804:	b480      	push	{r7}
 8000806:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000808:	bf00      	nop
 800080a:	46bd      	mov	sp, r7
 800080c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000810:	4770      	bx	lr

08000812 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000812:	b480      	push	{r7}
 8000814:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000816:	bf00      	nop
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr

08000820 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000820:	b580      	push	{r7, lr}
 8000822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000824:	f000 f93a 	bl	8000a9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}

0800082c <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000830:	4802      	ldr	r0, [pc, #8]	; (800083c <FDCAN1_IT0_IRQHandler+0x10>)
 8000832:	f000 ff55 	bl	80016e0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	2400002c 	.word	0x2400002c

08000840 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000844:	4802      	ldr	r0, [pc, #8]	; (8000850 <FDCAN1_IT1_IRQHandler+0x10>)
 8000846:	f000 ff4b 	bl	80016e0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	2400002c 	.word	0x2400002c

08000854 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000854:	b480      	push	{r7}
 8000856:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000858:	4b37      	ldr	r3, [pc, #220]	; (8000938 <SystemInit+0xe4>)
 800085a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800085e:	4a36      	ldr	r2, [pc, #216]	; (8000938 <SystemInit+0xe4>)
 8000860:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000864:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000868:	4b34      	ldr	r3, [pc, #208]	; (800093c <SystemInit+0xe8>)
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	f003 030f 	and.w	r3, r3, #15
 8000870:	2b06      	cmp	r3, #6
 8000872:	d807      	bhi.n	8000884 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000874:	4b31      	ldr	r3, [pc, #196]	; (800093c <SystemInit+0xe8>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f023 030f 	bic.w	r3, r3, #15
 800087c:	4a2f      	ldr	r2, [pc, #188]	; (800093c <SystemInit+0xe8>)
 800087e:	f043 0307 	orr.w	r3, r3, #7
 8000882:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000884:	4b2e      	ldr	r3, [pc, #184]	; (8000940 <SystemInit+0xec>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a2d      	ldr	r2, [pc, #180]	; (8000940 <SystemInit+0xec>)
 800088a:	f043 0301 	orr.w	r3, r3, #1
 800088e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000890:	4b2b      	ldr	r3, [pc, #172]	; (8000940 <SystemInit+0xec>)
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000896:	4b2a      	ldr	r3, [pc, #168]	; (8000940 <SystemInit+0xec>)
 8000898:	681a      	ldr	r2, [r3, #0]
 800089a:	4929      	ldr	r1, [pc, #164]	; (8000940 <SystemInit+0xec>)
 800089c:	4b29      	ldr	r3, [pc, #164]	; (8000944 <SystemInit+0xf0>)
 800089e:	4013      	ands	r3, r2
 80008a0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80008a2:	4b26      	ldr	r3, [pc, #152]	; (800093c <SystemInit+0xe8>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	f003 0308 	and.w	r3, r3, #8
 80008aa:	2b00      	cmp	r3, #0
 80008ac:	d007      	beq.n	80008be <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80008ae:	4b23      	ldr	r3, [pc, #140]	; (800093c <SystemInit+0xe8>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f023 030f 	bic.w	r3, r3, #15
 80008b6:	4a21      	ldr	r2, [pc, #132]	; (800093c <SystemInit+0xe8>)
 80008b8:	f043 0307 	orr.w	r3, r3, #7
 80008bc:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80008be:	4b20      	ldr	r3, [pc, #128]	; (8000940 <SystemInit+0xec>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80008c4:	4b1e      	ldr	r3, [pc, #120]	; (8000940 <SystemInit+0xec>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80008ca:	4b1d      	ldr	r3, [pc, #116]	; (8000940 <SystemInit+0xec>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80008d0:	4b1b      	ldr	r3, [pc, #108]	; (8000940 <SystemInit+0xec>)
 80008d2:	4a1d      	ldr	r2, [pc, #116]	; (8000948 <SystemInit+0xf4>)
 80008d4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80008d6:	4b1a      	ldr	r3, [pc, #104]	; (8000940 <SystemInit+0xec>)
 80008d8:	4a1c      	ldr	r2, [pc, #112]	; (800094c <SystemInit+0xf8>)
 80008da:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80008dc:	4b18      	ldr	r3, [pc, #96]	; (8000940 <SystemInit+0xec>)
 80008de:	4a1c      	ldr	r2, [pc, #112]	; (8000950 <SystemInit+0xfc>)
 80008e0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80008e2:	4b17      	ldr	r3, [pc, #92]	; (8000940 <SystemInit+0xec>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80008e8:	4b15      	ldr	r3, [pc, #84]	; (8000940 <SystemInit+0xec>)
 80008ea:	4a19      	ldr	r2, [pc, #100]	; (8000950 <SystemInit+0xfc>)
 80008ec:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80008ee:	4b14      	ldr	r3, [pc, #80]	; (8000940 <SystemInit+0xec>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80008f4:	4b12      	ldr	r3, [pc, #72]	; (8000940 <SystemInit+0xec>)
 80008f6:	4a16      	ldr	r2, [pc, #88]	; (8000950 <SystemInit+0xfc>)
 80008f8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80008fa:	4b11      	ldr	r3, [pc, #68]	; (8000940 <SystemInit+0xec>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000900:	4b0f      	ldr	r3, [pc, #60]	; (8000940 <SystemInit+0xec>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a0e      	ldr	r2, [pc, #56]	; (8000940 <SystemInit+0xec>)
 8000906:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800090a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800090c:	4b0c      	ldr	r3, [pc, #48]	; (8000940 <SystemInit+0xec>)
 800090e:	2200      	movs	r2, #0
 8000910:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000912:	4b10      	ldr	r3, [pc, #64]	; (8000954 <SystemInit+0x100>)
 8000914:	681a      	ldr	r2, [r3, #0]
 8000916:	4b10      	ldr	r3, [pc, #64]	; (8000958 <SystemInit+0x104>)
 8000918:	4013      	ands	r3, r2
 800091a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800091e:	d202      	bcs.n	8000926 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000920:	4b0e      	ldr	r3, [pc, #56]	; (800095c <SystemInit+0x108>)
 8000922:	2201      	movs	r2, #1
 8000924:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000926:	4b0e      	ldr	r3, [pc, #56]	; (8000960 <SystemInit+0x10c>)
 8000928:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800092c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800092e:	bf00      	nop
 8000930:	46bd      	mov	sp, r7
 8000932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000936:	4770      	bx	lr
 8000938:	e000ed00 	.word	0xe000ed00
 800093c:	52002000 	.word	0x52002000
 8000940:	58024400 	.word	0x58024400
 8000944:	eaf6ed7f 	.word	0xeaf6ed7f
 8000948:	02020200 	.word	0x02020200
 800094c:	01ff0000 	.word	0x01ff0000
 8000950:	01010280 	.word	0x01010280
 8000954:	5c001000 	.word	0x5c001000
 8000958:	ffff0000 	.word	0xffff0000
 800095c:	51008108 	.word	0x51008108
 8000960:	52004000 	.word	0x52004000

08000964 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000964:	f8df d034 	ldr.w	sp, [pc, #52]	; 800099c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000968:	f7ff ff74 	bl	8000854 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800096c:	480c      	ldr	r0, [pc, #48]	; (80009a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800096e:	490d      	ldr	r1, [pc, #52]	; (80009a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000970:	4a0d      	ldr	r2, [pc, #52]	; (80009a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000972:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000974:	e002      	b.n	800097c <LoopCopyDataInit>

08000976 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000976:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000978:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800097a:	3304      	adds	r3, #4

0800097c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800097c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800097e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000980:	d3f9      	bcc.n	8000976 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000982:	4a0a      	ldr	r2, [pc, #40]	; (80009ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000984:	4c0a      	ldr	r4, [pc, #40]	; (80009b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000986:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000988:	e001      	b.n	800098e <LoopFillZerobss>

0800098a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800098a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800098c:	3204      	adds	r2, #4

0800098e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800098e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000990:	d3fb      	bcc.n	800098a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000992:	f004 f8ad 	bl	8004af0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000996:	f7ff fcc7 	bl	8000328 <main>
  bx  lr
 800099a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800099c:	24060000 	.word	0x24060000
  ldr r0, =_sdata
 80009a0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80009a4:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 80009a8:	08004bf0 	.word	0x08004bf0
  ldr r2, =_sbss
 80009ac:	24000010 	.word	0x24000010
  ldr r4, =_ebss
 80009b0:	2400012c 	.word	0x2400012c

080009b4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009b4:	e7fe      	b.n	80009b4 <ADC3_IRQHandler>
	...

080009b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009be:	2003      	movs	r0, #3
 80009c0:	f000 f98c 	bl	8000cdc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80009c4:	f002 fbc8 	bl	8003158 <HAL_RCC_GetSysClockFreq>
 80009c8:	4602      	mov	r2, r0
 80009ca:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <HAL_Init+0x68>)
 80009cc:	699b      	ldr	r3, [r3, #24]
 80009ce:	0a1b      	lsrs	r3, r3, #8
 80009d0:	f003 030f 	and.w	r3, r3, #15
 80009d4:	4913      	ldr	r1, [pc, #76]	; (8000a24 <HAL_Init+0x6c>)
 80009d6:	5ccb      	ldrb	r3, [r1, r3]
 80009d8:	f003 031f 	and.w	r3, r3, #31
 80009dc:	fa22 f303 	lsr.w	r3, r2, r3
 80009e0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80009e2:	4b0f      	ldr	r3, [pc, #60]	; (8000a20 <HAL_Init+0x68>)
 80009e4:	699b      	ldr	r3, [r3, #24]
 80009e6:	f003 030f 	and.w	r3, r3, #15
 80009ea:	4a0e      	ldr	r2, [pc, #56]	; (8000a24 <HAL_Init+0x6c>)
 80009ec:	5cd3      	ldrb	r3, [r2, r3]
 80009ee:	f003 031f 	and.w	r3, r3, #31
 80009f2:	687a      	ldr	r2, [r7, #4]
 80009f4:	fa22 f303 	lsr.w	r3, r2, r3
 80009f8:	4a0b      	ldr	r2, [pc, #44]	; (8000a28 <HAL_Init+0x70>)
 80009fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80009fc:	4a0b      	ldr	r2, [pc, #44]	; (8000a2c <HAL_Init+0x74>)
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a02:	200f      	movs	r0, #15
 8000a04:	f000 f814 	bl	8000a30 <HAL_InitTick>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000a0e:	2301      	movs	r3, #1
 8000a10:	e002      	b.n	8000a18 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000a12:	f7ff fe4d 	bl	80006b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a16:	2300      	movs	r3, #0
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3708      	adds	r7, #8
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	58024400 	.word	0x58024400
 8000a24:	08004bc8 	.word	0x08004bc8
 8000a28:	24000004 	.word	0x24000004
 8000a2c:	24000000 	.word	0x24000000

08000a30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b082      	sub	sp, #8
 8000a34:	af00      	add	r7, sp, #0
 8000a36:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000a38:	4b15      	ldr	r3, [pc, #84]	; (8000a90 <HAL_InitTick+0x60>)
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d101      	bne.n	8000a44 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000a40:	2301      	movs	r3, #1
 8000a42:	e021      	b.n	8000a88 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000a44:	4b13      	ldr	r3, [pc, #76]	; (8000a94 <HAL_InitTick+0x64>)
 8000a46:	681a      	ldr	r2, [r3, #0]
 8000a48:	4b11      	ldr	r3, [pc, #68]	; (8000a90 <HAL_InitTick+0x60>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f000 f971 	bl	8000d42 <HAL_SYSTICK_Config>
 8000a60:	4603      	mov	r3, r0
 8000a62:	2b00      	cmp	r3, #0
 8000a64:	d001      	beq.n	8000a6a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000a66:	2301      	movs	r3, #1
 8000a68:	e00e      	b.n	8000a88 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	2b0f      	cmp	r3, #15
 8000a6e:	d80a      	bhi.n	8000a86 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a70:	2200      	movs	r2, #0
 8000a72:	6879      	ldr	r1, [r7, #4]
 8000a74:	f04f 30ff 	mov.w	r0, #4294967295
 8000a78:	f000 f93b 	bl	8000cf2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a7c:	4a06      	ldr	r2, [pc, #24]	; (8000a98 <HAL_InitTick+0x68>)
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a82:	2300      	movs	r3, #0
 8000a84:	e000      	b.n	8000a88 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000a86:	2301      	movs	r3, #1
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	3708      	adds	r7, #8
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	2400000c 	.word	0x2400000c
 8000a94:	24000000 	.word	0x24000000
 8000a98:	24000008 	.word	0x24000008

08000a9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000aa0:	4b06      	ldr	r3, [pc, #24]	; (8000abc <HAL_IncTick+0x20>)
 8000aa2:	781b      	ldrb	r3, [r3, #0]
 8000aa4:	461a      	mov	r2, r3
 8000aa6:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <HAL_IncTick+0x24>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4413      	add	r3, r2
 8000aac:	4a04      	ldr	r2, [pc, #16]	; (8000ac0 <HAL_IncTick+0x24>)
 8000aae:	6013      	str	r3, [r2, #0]
}
 8000ab0:	bf00      	nop
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop
 8000abc:	2400000c 	.word	0x2400000c
 8000ac0:	24000128 	.word	0x24000128

08000ac4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ac8:	4b03      	ldr	r3, [pc, #12]	; (8000ad8 <HAL_GetTick+0x14>)
 8000aca:	681b      	ldr	r3, [r3, #0]
}
 8000acc:	4618      	mov	r0, r3
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop
 8000ad8:	24000128 	.word	0x24000128

08000adc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b084      	sub	sp, #16
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ae4:	f7ff ffee 	bl	8000ac4 <HAL_GetTick>
 8000ae8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aee:	68fb      	ldr	r3, [r7, #12]
 8000af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000af4:	d005      	beq.n	8000b02 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000af6:	4b0a      	ldr	r3, [pc, #40]	; (8000b20 <HAL_Delay+0x44>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	461a      	mov	r2, r3
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	4413      	add	r3, r2
 8000b00:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b02:	bf00      	nop
 8000b04:	f7ff ffde 	bl	8000ac4 <HAL_GetTick>
 8000b08:	4602      	mov	r2, r0
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	1ad3      	subs	r3, r2, r3
 8000b0e:	68fa      	ldr	r2, [r7, #12]
 8000b10:	429a      	cmp	r2, r3
 8000b12:	d8f7      	bhi.n	8000b04 <HAL_Delay+0x28>
  {
  }
}
 8000b14:	bf00      	nop
 8000b16:	bf00      	nop
 8000b18:	3710      	adds	r7, #16
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	2400000c 	.word	0x2400000c

08000b24 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8000b28:	4b03      	ldr	r3, [pc, #12]	; (8000b38 <HAL_GetREVID+0x14>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	0c1b      	lsrs	r3, r3, #16
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	5c001000 	.word	0x5c001000

08000b3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b085      	sub	sp, #20
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	f003 0307 	and.w	r3, r3, #7
 8000b4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b4c:	4b0b      	ldr	r3, [pc, #44]	; (8000b7c <__NVIC_SetPriorityGrouping+0x40>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b52:	68ba      	ldr	r2, [r7, #8]
 8000b54:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b58:	4013      	ands	r3, r2
 8000b5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b60:	68bb      	ldr	r3, [r7, #8]
 8000b62:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000b64:	4b06      	ldr	r3, [pc, #24]	; (8000b80 <__NVIC_SetPriorityGrouping+0x44>)
 8000b66:	4313      	orrs	r3, r2
 8000b68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b6a:	4a04      	ldr	r2, [pc, #16]	; (8000b7c <__NVIC_SetPriorityGrouping+0x40>)
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	60d3      	str	r3, [r2, #12]
}
 8000b70:	bf00      	nop
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	e000ed00 	.word	0xe000ed00
 8000b80:	05fa0000 	.word	0x05fa0000

08000b84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b88:	4b04      	ldr	r3, [pc, #16]	; (8000b9c <__NVIC_GetPriorityGrouping+0x18>)
 8000b8a:	68db      	ldr	r3, [r3, #12]
 8000b8c:	0a1b      	lsrs	r3, r3, #8
 8000b8e:	f003 0307 	and.w	r3, r3, #7
}
 8000b92:	4618      	mov	r0, r3
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	e000ed00 	.word	0xe000ed00

08000ba0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000baa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	db0b      	blt.n	8000bca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000bb2:	88fb      	ldrh	r3, [r7, #6]
 8000bb4:	f003 021f 	and.w	r2, r3, #31
 8000bb8:	4907      	ldr	r1, [pc, #28]	; (8000bd8 <__NVIC_EnableIRQ+0x38>)
 8000bba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bbe:	095b      	lsrs	r3, r3, #5
 8000bc0:	2001      	movs	r0, #1
 8000bc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000bc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000bca:	bf00      	nop
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	e000e100 	.word	0xe000e100

08000bdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	4603      	mov	r3, r0
 8000be4:	6039      	str	r1, [r7, #0]
 8000be6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000be8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	db0a      	blt.n	8000c06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	b2da      	uxtb	r2, r3
 8000bf4:	490c      	ldr	r1, [pc, #48]	; (8000c28 <__NVIC_SetPriority+0x4c>)
 8000bf6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000bfa:	0112      	lsls	r2, r2, #4
 8000bfc:	b2d2      	uxtb	r2, r2
 8000bfe:	440b      	add	r3, r1
 8000c00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c04:	e00a      	b.n	8000c1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	b2da      	uxtb	r2, r3
 8000c0a:	4908      	ldr	r1, [pc, #32]	; (8000c2c <__NVIC_SetPriority+0x50>)
 8000c0c:	88fb      	ldrh	r3, [r7, #6]
 8000c0e:	f003 030f 	and.w	r3, r3, #15
 8000c12:	3b04      	subs	r3, #4
 8000c14:	0112      	lsls	r2, r2, #4
 8000c16:	b2d2      	uxtb	r2, r2
 8000c18:	440b      	add	r3, r1
 8000c1a:	761a      	strb	r2, [r3, #24]
}
 8000c1c:	bf00      	nop
 8000c1e:	370c      	adds	r7, #12
 8000c20:	46bd      	mov	sp, r7
 8000c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c26:	4770      	bx	lr
 8000c28:	e000e100 	.word	0xe000e100
 8000c2c:	e000ed00 	.word	0xe000ed00

08000c30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b089      	sub	sp, #36	; 0x24
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60f8      	str	r0, [r7, #12]
 8000c38:	60b9      	str	r1, [r7, #8]
 8000c3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	f003 0307 	and.w	r3, r3, #7
 8000c42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c44:	69fb      	ldr	r3, [r7, #28]
 8000c46:	f1c3 0307 	rsb	r3, r3, #7
 8000c4a:	2b04      	cmp	r3, #4
 8000c4c:	bf28      	it	cs
 8000c4e:	2304      	movcs	r3, #4
 8000c50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c52:	69fb      	ldr	r3, [r7, #28]
 8000c54:	3304      	adds	r3, #4
 8000c56:	2b06      	cmp	r3, #6
 8000c58:	d902      	bls.n	8000c60 <NVIC_EncodePriority+0x30>
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	3b03      	subs	r3, #3
 8000c5e:	e000      	b.n	8000c62 <NVIC_EncodePriority+0x32>
 8000c60:	2300      	movs	r3, #0
 8000c62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c64:	f04f 32ff 	mov.w	r2, #4294967295
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6e:	43da      	mvns	r2, r3
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	401a      	ands	r2, r3
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c78:	f04f 31ff 	mov.w	r1, #4294967295
 8000c7c:	697b      	ldr	r3, [r7, #20]
 8000c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c82:	43d9      	mvns	r1, r3
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c88:	4313      	orrs	r3, r2
         );
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3724      	adds	r7, #36	; 0x24
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
	...

08000c98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	3b01      	subs	r3, #1
 8000ca4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ca8:	d301      	bcc.n	8000cae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000caa:	2301      	movs	r3, #1
 8000cac:	e00f      	b.n	8000cce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cae:	4a0a      	ldr	r2, [pc, #40]	; (8000cd8 <SysTick_Config+0x40>)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	3b01      	subs	r3, #1
 8000cb4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cb6:	210f      	movs	r1, #15
 8000cb8:	f04f 30ff 	mov.w	r0, #4294967295
 8000cbc:	f7ff ff8e 	bl	8000bdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cc0:	4b05      	ldr	r3, [pc, #20]	; (8000cd8 <SysTick_Config+0x40>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cc6:	4b04      	ldr	r3, [pc, #16]	; (8000cd8 <SysTick_Config+0x40>)
 8000cc8:	2207      	movs	r2, #7
 8000cca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	e000e010 	.word	0xe000e010

08000cdc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b082      	sub	sp, #8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ce4:	6878      	ldr	r0, [r7, #4]
 8000ce6:	f7ff ff29 	bl	8000b3c <__NVIC_SetPriorityGrouping>
}
 8000cea:	bf00      	nop
 8000cec:	3708      	adds	r7, #8
 8000cee:	46bd      	mov	sp, r7
 8000cf0:	bd80      	pop	{r7, pc}

08000cf2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b086      	sub	sp, #24
 8000cf6:	af00      	add	r7, sp, #0
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	60b9      	str	r1, [r7, #8]
 8000cfc:	607a      	str	r2, [r7, #4]
 8000cfe:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000d00:	f7ff ff40 	bl	8000b84 <__NVIC_GetPriorityGrouping>
 8000d04:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d06:	687a      	ldr	r2, [r7, #4]
 8000d08:	68b9      	ldr	r1, [r7, #8]
 8000d0a:	6978      	ldr	r0, [r7, #20]
 8000d0c:	f7ff ff90 	bl	8000c30 <NVIC_EncodePriority>
 8000d10:	4602      	mov	r2, r0
 8000d12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000d16:	4611      	mov	r1, r2
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff ff5f 	bl	8000bdc <__NVIC_SetPriority>
}
 8000d1e:	bf00      	nop
 8000d20:	3718      	adds	r7, #24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}

08000d26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d26:	b580      	push	{r7, lr}
 8000d28:	b082      	sub	sp, #8
 8000d2a:	af00      	add	r7, sp, #0
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000d30:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000d34:	4618      	mov	r0, r3
 8000d36:	f7ff ff33 	bl	8000ba0 <__NVIC_EnableIRQ>
}
 8000d3a:	bf00      	nop
 8000d3c:	3708      	adds	r7, #8
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}

08000d42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d42:	b580      	push	{r7, lr}
 8000d44:	b082      	sub	sp, #8
 8000d46:	af00      	add	r7, sp, #0
 8000d48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d4a:	6878      	ldr	r0, [r7, #4]
 8000d4c:	f7ff ffa4 	bl	8000c98 <SysTick_Config>
 8000d50:	4603      	mov	r3, r0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
	...

08000d5c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	b098      	sub	sp, #96	; 0x60
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  const uint32_t CvtEltSize[] = {0, 0, 0, 0, 0, 1, 2, 3, 4, 0, 5, 0, 0, 0, 6, 0, 0, 0, 7};
 8000d64:	4a84      	ldr	r2, [pc, #528]	; (8000f78 <HAL_FDCAN_Init+0x21c>)
 8000d66:	f107 030c 	add.w	r3, r7, #12
 8000d6a:	4611      	mov	r1, r2
 8000d6c:	224c      	movs	r2, #76	; 0x4c
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f003 fee2 	bl	8004b38 <memcpy>

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d101      	bne.n	8000d7e <HAL_FDCAN_Init+0x22>
  {
    return HAL_ERROR;
 8000d7a:	2301      	movs	r3, #1
 8000d7c:	e1c6      	b.n	800110c <HAL_FDCAN_Init+0x3b0>
  }

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	4a7e      	ldr	r2, [pc, #504]	; (8000f7c <HAL_FDCAN_Init+0x220>)
 8000d84:	4293      	cmp	r3, r2
 8000d86:	d106      	bne.n	8000d96 <HAL_FDCAN_Init+0x3a>
  {
    hfdcan->ttcan = (TTCAN_TypeDef *)((uint32_t)hfdcan->Instance + 0x100U);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000d90:	461a      	mov	r2, r3
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	605a      	str	r2, [r3, #4]

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8000d9c:	b2db      	uxtb	r3, r3
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d106      	bne.n	8000db0 <HAL_FDCAN_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	2200      	movs	r2, #0
 8000da6:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8000daa:	6878      	ldr	r0, [r7, #4]
 8000dac:	f7ff fc9a 	bl	80006e4 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	699a      	ldr	r2, [r3, #24]
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f022 0210 	bic.w	r2, r2, #16
 8000dbe:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000dc0:	f7ff fe80 	bl	8000ac4 <HAL_GetTick>
 8000dc4:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000dc6:	e014      	b.n	8000df2 <HAL_FDCAN_Init+0x96>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000dc8:	f7ff fe7c 	bl	8000ac4 <HAL_GetTick>
 8000dcc:	4602      	mov	r2, r0
 8000dce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000dd0:	1ad3      	subs	r3, r2, r3
 8000dd2:	2b0a      	cmp	r3, #10
 8000dd4:	d90d      	bls.n	8000df2 <HAL_FDCAN_Init+0x96>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000ddc:	f043 0201 	orr.w	r2, r3, #1
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	2203      	movs	r2, #3
 8000dea:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8000dee:	2301      	movs	r3, #1
 8000df0:	e18c      	b.n	800110c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	699b      	ldr	r3, [r3, #24]
 8000df8:	f003 0308 	and.w	r3, r3, #8
 8000dfc:	2b08      	cmp	r3, #8
 8000dfe:	d0e3      	beq.n	8000dc8 <HAL_FDCAN_Init+0x6c>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	699a      	ldr	r2, [r3, #24]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	f042 0201 	orr.w	r2, r2, #1
 8000e0e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000e10:	f7ff fe58 	bl	8000ac4 <HAL_GetTick>
 8000e14:	65f8      	str	r0, [r7, #92]	; 0x5c

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000e16:	e014      	b.n	8000e42 <HAL_FDCAN_Init+0xe6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8000e18:	f7ff fe54 	bl	8000ac4 <HAL_GetTick>
 8000e1c:	4602      	mov	r2, r0
 8000e1e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000e20:	1ad3      	subs	r3, r2, r3
 8000e22:	2b0a      	cmp	r3, #10
 8000e24:	d90d      	bls.n	8000e42 <HAL_FDCAN_Init+0xe6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8000e2c:	f043 0201 	orr.w	r2, r3, #1
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	2203      	movs	r2, #3
 8000e3a:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

      return HAL_ERROR;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e164      	b.n	800110c <HAL_FDCAN_Init+0x3b0>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	699b      	ldr	r3, [r3, #24]
 8000e48:	f003 0301 	and.w	r3, r3, #1
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d0e3      	beq.n	8000e18 <HAL_FDCAN_Init+0xbc>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	699a      	ldr	r2, [r3, #24]
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f042 0202 	orr.w	r2, r2, #2
 8000e5e:	619a      	str	r2, [r3, #24]

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	7c1b      	ldrb	r3, [r3, #16]
 8000e64:	2b01      	cmp	r3, #1
 8000e66:	d108      	bne.n	8000e7a <HAL_FDCAN_Init+0x11e>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	699a      	ldr	r2, [r3, #24]
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	681b      	ldr	r3, [r3, #0]
 8000e72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e76:	619a      	str	r2, [r3, #24]
 8000e78:	e007      	b.n	8000e8a <HAL_FDCAN_Init+0x12e>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	699a      	ldr	r2, [r3, #24]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e88:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	7c5b      	ldrb	r3, [r3, #17]
 8000e8e:	2b01      	cmp	r3, #1
 8000e90:	d108      	bne.n	8000ea4 <HAL_FDCAN_Init+0x148>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	681b      	ldr	r3, [r3, #0]
 8000e96:	699a      	ldr	r2, [r3, #24]
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8000ea0:	619a      	str	r2, [r3, #24]
 8000ea2:	e007      	b.n	8000eb4 <HAL_FDCAN_Init+0x158>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	699a      	ldr	r2, [r3, #24]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8000eb2:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	7c9b      	ldrb	r3, [r3, #18]
 8000eb8:	2b01      	cmp	r3, #1
 8000eba:	d108      	bne.n	8000ece <HAL_FDCAN_Init+0x172>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	699a      	ldr	r2, [r3, #24]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000eca:	619a      	str	r2, [r3, #24]
 8000ecc:	e007      	b.n	8000ede <HAL_FDCAN_Init+0x182>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	699a      	ldr	r2, [r3, #24]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000edc:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	689a      	ldr	r2, [r3, #8]
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	430a      	orrs	r2, r1
 8000ef2:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	699a      	ldr	r2, [r3, #24]
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8000f02:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	691a      	ldr	r2, [r3, #16]
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f022 0210 	bic.w	r2, r2, #16
 8000f12:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	68db      	ldr	r3, [r3, #12]
 8000f18:	2b01      	cmp	r3, #1
 8000f1a:	d108      	bne.n	8000f2e <HAL_FDCAN_Init+0x1d2>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	699a      	ldr	r2, [r3, #24]
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	f042 0204 	orr.w	r2, r2, #4
 8000f2a:	619a      	str	r2, [r3, #24]
 8000f2c:	e030      	b.n	8000f90 <HAL_FDCAN_Init+0x234>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	68db      	ldr	r3, [r3, #12]
 8000f32:	2b00      	cmp	r3, #0
 8000f34:	d02c      	beq.n	8000f90 <HAL_FDCAN_Init+0x234>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	68db      	ldr	r3, [r3, #12]
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d020      	beq.n	8000f80 <HAL_FDCAN_Init+0x224>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	699a      	ldr	r2, [r3, #24]
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000f4c:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	691a      	ldr	r2, [r3, #16]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	f042 0210 	orr.w	r2, r2, #16
 8000f5c:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	68db      	ldr	r3, [r3, #12]
 8000f62:	2b03      	cmp	r3, #3
 8000f64:	d114      	bne.n	8000f90 <HAL_FDCAN_Init+0x234>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	699a      	ldr	r2, [r3, #24]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f042 0220 	orr.w	r2, r2, #32
 8000f74:	619a      	str	r2, [r3, #24]
 8000f76:	e00b      	b.n	8000f90 <HAL_FDCAN_Init+0x234>
 8000f78:	08004b7c 	.word	0x08004b7c
 8000f7c:	4000a000 	.word	0x4000a000
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	699a      	ldr	r2, [r3, #24]
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	f042 0220 	orr.w	r2, r2, #32
 8000f8e:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	699b      	ldr	r3, [r3, #24]
 8000f94:	3b01      	subs	r3, #1
 8000f96:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	69db      	ldr	r3, [r3, #28]
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000fa0:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	6a1b      	ldr	r3, [r3, #32]
 8000fa6:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8000fa8:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	695b      	ldr	r3, [r3, #20]
 8000fb0:	3b01      	subs	r3, #1
 8000fb2:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8000fb8:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8000fba:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	689b      	ldr	r3, [r3, #8]
 8000fc0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8000fc4:	d115      	bne.n	8000ff2 <HAL_FDCAN_Init+0x296>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fca:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fd0:	3b01      	subs	r3, #1
 8000fd2:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8000fd4:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)    | \
 8000fde:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)    | \
 8000fee:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos) | \
 8000ff0:	60da      	str	r2, [r3, #12]
  }

  if (hfdcan->Init.TxFifoQueueElmtsNbr > 0U)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d00a      	beq.n	8001010 <HAL_FDCAN_Init+0x2b4>
  {
    /* Select between Tx FIFO and Tx Queue operation modes */
    SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	430a      	orrs	r2, r1
 800100c:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
  }

  /* Configure Tx element size */
  if ((hfdcan->Init.TxBuffersNbr + hfdcan->Init.TxFifoQueueElmtsNbr) > 0U)
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001018:	4413      	add	r3, r2
 800101a:	2b00      	cmp	r3, #0
 800101c:	d011      	beq.n	8001042 <HAL_FDCAN_Init+0x2e6>
  {
    MODIFY_REG(hfdcan->Instance->TXESC, FDCAN_TXESC_TBDS, CvtEltSize[hfdcan->Init.TxElmtSize]);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
 8001026:	f023 0107 	bic.w	r1, r3, #7
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	3360      	adds	r3, #96	; 0x60
 8001032:	443b      	add	r3, r7
 8001034:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	430a      	orrs	r2, r1
 800103e:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
  }

  /* Configure Rx FIFO 0 element size */
  if (hfdcan->Init.RxFifo0ElmtsNbr > 0U)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001046:	2b00      	cmp	r3, #0
 8001048:	d011      	beq.n	800106e <HAL_FDCAN_Init+0x312>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F0DS, (CvtEltSize[hfdcan->Init.RxFifo0ElmtSize] << FDCAN_RXESC_F0DS_Pos));
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8001052:	f023 0107 	bic.w	r1, r3, #7
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800105a:	009b      	lsls	r3, r3, #2
 800105c:	3360      	adds	r3, #96	; 0x60
 800105e:	443b      	add	r3, r7
 8001060:	f853 2c54 	ldr.w	r2, [r3, #-84]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	430a      	orrs	r2, r1
 800106a:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx FIFO 1 element size */
  if (hfdcan->Init.RxFifo1ElmtsNbr > 0U)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001072:	2b00      	cmp	r3, #0
 8001074:	d012      	beq.n	800109c <HAL_FDCAN_Init+0x340>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_F1DS, (CvtEltSize[hfdcan->Init.RxFifo1ElmtSize] << FDCAN_RXESC_F1DS_Pos));
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 800107e:	f023 0170 	bic.w	r1, r3, #112	; 0x70
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001086:	009b      	lsls	r3, r3, #2
 8001088:	3360      	adds	r3, #96	; 0x60
 800108a:	443b      	add	r3, r7
 800108c:	f853 3c54 	ldr.w	r3, [r3, #-84]
 8001090:	011a      	lsls	r2, r3, #4
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	430a      	orrs	r2, r1
 8001098:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* Configure Rx buffer element size */
  if (hfdcan->Init.RxBuffersNbr > 0U)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d012      	beq.n	80010ca <HAL_FDCAN_Init+0x36e>
  {
    MODIFY_REG(hfdcan->Instance->RXESC, FDCAN_RXESC_RBDS, (CvtEltSize[hfdcan->Init.RxBufferSize] << FDCAN_RXESC_RBDS_Pos));
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80010ac:	f423 61e0 	bic.w	r1, r3, #1792	; 0x700
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80010b4:	009b      	lsls	r3, r3, #2
 80010b6:	3360      	adds	r3, #96	; 0x60
 80010b8:	443b      	add	r3, r7
 80010ba:	f853 3c54 	ldr.w	r3, [r3, #-84]
 80010be:	021a      	lsls	r2, r3, #8
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	430a      	orrs	r2, r1
 80010c6:	f8c3 20bc 	str.w	r2, [r3, #188]	; 0xbc
  }

  /* By default operation mode is set to Event-driven communication.
     If Time-triggered communication is needed, user should call the
     HAL_FDCAN_TT_ConfigOperation function just after the HAL_FDCAN_Init */
  if (hfdcan->Instance == FDCAN1)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a11      	ldr	r2, [pc, #68]	; (8001114 <HAL_FDCAN_Init+0x3b8>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d107      	bne.n	80010e4 <HAL_FDCAN_Init+0x388>
  {
    CLEAR_BIT(hfdcan->ttcan->TTOCF, FDCAN_TTOCF_OM);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	689a      	ldr	r2, [r3, #8]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	685b      	ldr	r3, [r3, #4]
 80010de:	f022 0203 	bic.w	r2, r2, #3
 80010e2:	609a      	str	r2, [r3, #8]
  }

  /* Initialize the Latest Tx FIFO/Queue request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	2200      	movs	r2, #0
 80010f0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2201      	movs	r2, #1
 80010f8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

  /* Calculate each RAM block address */
  status = FDCAN_CalcultateRamBlockAddresses(hfdcan);
 80010fc:	6878      	ldr	r0, [r7, #4]
 80010fe:	f000 fdf9 	bl	8001cf4 <FDCAN_CalcultateRamBlockAddresses>
 8001102:	4603      	mov	r3, r0
 8001104:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b

  /* Return function status */
  return status;
 8001108:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
}
 800110c:	4618      	mov	r0, r3
 800110e:	3760      	adds	r7, #96	; 0x60
 8001110:	46bd      	mov	sp, r7
 8001112:	bd80      	pop	{r7, pc}
 8001114:	4000a000 	.word	0x4000a000

08001118 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, FDCAN_FilterTypeDef *sFilterConfig)
{
 8001118:	b480      	push	{r7}
 800111a:	b087      	sub	sp, #28
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001128:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 800112a:	7bfb      	ldrb	r3, [r7, #15]
 800112c:	2b01      	cmp	r3, #1
 800112e:	d002      	beq.n	8001136 <HAL_FDCAN_ConfigFilter+0x1e>
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	2b02      	cmp	r3, #2
 8001134:	d157      	bne.n	80011e6 <HAL_FDCAN_ConfigFilter+0xce>
    {
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->RxBufferIndex, 63U));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->IsCalibrationMsg, 1U));
    }

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d12b      	bne.n	8001196 <HAL_FDCAN_ConfigFilter+0x7e>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
        assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 800113e:	683b      	ldr	r3, [r7, #0]
 8001140:	68db      	ldr	r3, [r3, #12]
 8001142:	2b07      	cmp	r3, #7
 8001144:	d10d      	bne.n	8001162 <HAL_FDCAN_ConfigFilter+0x4a>
      {
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
                           (sFilterConfig->FilterID1 << 16U)       |
 8001146:	683b      	ldr	r3, [r7, #0]
 8001148:	691b      	ldr	r3, [r3, #16]
 800114a:	041a      	lsls	r2, r3, #16
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	69db      	ldr	r3, [r3, #28]
 8001150:	021b      	lsls	r3, r3, #8
                           (sFilterConfig->FilterID1 << 16U)       |
 8001152:	431a      	orrs	r2, r3
                           sFilterConfig->RxBufferIndex);
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	699b      	ldr	r3, [r3, #24]
                           (sFilterConfig->IsCalibrationMsg << 8U) |
 8001158:	4313      	orrs	r3, r2
        FilterElementW1 = ((FDCAN_FILTER_TO_RXBUFFER << 27U)       |
 800115a:	f043 5360 	orr.w	r3, r3, #939524096	; 0x38000000
 800115e:	617b      	str	r3, [r7, #20]
 8001160:	e00e      	b.n	8001180 <HAL_FDCAN_ConfigFilter+0x68>
      }
      else
      {
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	079a      	lsls	r2, r3, #30
                           (sFilterConfig->FilterConfig << 27U) |
 8001168:	683b      	ldr	r3, [r7, #0]
 800116a:	68db      	ldr	r3, [r3, #12]
 800116c:	06db      	lsls	r3, r3, #27
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800116e:	431a      	orrs	r2, r3
                           (sFilterConfig->FilterID1 << 16U)    |
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	691b      	ldr	r3, [r3, #16]
 8001174:	041b      	lsls	r3, r3, #16
                           (sFilterConfig->FilterConfig << 27U) |
 8001176:	431a      	orrs	r2, r3
                           sFilterConfig->FilterID2);
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	695b      	ldr	r3, [r3, #20]
        FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 800117c:	4313      	orrs	r3, r2
 800117e:	617b      	str	r3, [r7, #20]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * 4U));
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001184:	683b      	ldr	r3, [r7, #0]
 8001186:	685b      	ldr	r3, [r3, #4]
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	4413      	add	r3, r2
 800118c:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	697a      	ldr	r2, [r7, #20]
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	e025      	b.n	80011e2 <HAL_FDCAN_ConfigFilter+0xca>
        assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
        assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));
      }

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	075a      	lsls	r2, r3, #29
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	691b      	ldr	r3, [r3, #16]
 80011a0:	4313      	orrs	r3, r2
 80011a2:	617b      	str	r3, [r7, #20]

      /* Build second word of filter element */
      if (sFilterConfig->FilterConfig == FDCAN_FILTER_TO_RXBUFFER)
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	2b07      	cmp	r3, #7
 80011aa:	d103      	bne.n	80011b4 <HAL_FDCAN_ConfigFilter+0x9c>
      {
        FilterElementW2 = sFilterConfig->RxBufferIndex;
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	699b      	ldr	r3, [r3, #24]
 80011b0:	613b      	str	r3, [r7, #16]
 80011b2:	e006      	b.n	80011c2 <HAL_FDCAN_ConfigFilter+0xaa>
      }
      else
      {
        FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	689b      	ldr	r3, [r3, #8]
 80011b8:	079a      	lsls	r2, r3, #30
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	695b      	ldr	r3, [r3, #20]
 80011be:	4313      	orrs	r3, r2
 80011c0:	613b      	str	r3, [r7, #16]
      }

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * 4U * 2U));
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	685b      	ldr	r3, [r3, #4]
 80011ca:	00db      	lsls	r3, r3, #3
 80011cc:	4413      	add	r3, r2
 80011ce:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	697a      	ldr	r2, [r7, #20]
 80011d4:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80011d6:	68bb      	ldr	r3, [r7, #8]
 80011d8:	3304      	adds	r3, #4
 80011da:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80011dc:	68bb      	ldr	r3, [r7, #8]
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80011e2:	2300      	movs	r3, #0
 80011e4:	e008      	b.n	80011f8 <HAL_FDCAN_ConfigFilter+0xe0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80011ec:	f043 0202 	orr.w	r2, r3, #2
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
  }
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	371c      	adds	r7, #28
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001204:	b480      	push	{r7}
 8001206:	b083      	sub	sp, #12
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001212:	b2db      	uxtb	r3, r3
 8001214:	2b01      	cmp	r3, #1
 8001216:	d111      	bne.n	800123c <HAL_FDCAN_Start+0x38>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	2202      	movs	r2, #2
 800121c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	699a      	ldr	r2, [r3, #24]
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f022 0201 	bic.w	r2, r2, #1
 800122e:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2200      	movs	r2, #0
 8001234:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Return function status */
    return HAL_OK;
 8001238:	2300      	movs	r3, #0
 800123a:	e008      	b.n	800124e <HAL_FDCAN_Start+0x4a>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001242:	f043 0204 	orr.w	r2, r3, #4
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
  }
}
 800124e:	4618      	mov	r0, r3
 8001250:	370c      	adds	r7, #12
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <HAL_FDCAN_AddMessageToTxFifoQ>:
  * @param  pTxHeader pointer to a FDCAN_TxHeaderTypeDef structure.
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_AddMessageToTxFifoQ(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData)
{
 800125a:	b580      	push	{r7, lr}
 800125c:	b086      	sub	sp, #24
 800125e:	af00      	add	r7, sp, #0
 8001260:	60f8      	str	r0, [r7, #12]
 8001262:	60b9      	str	r1, [r7, #8]
 8001264:	607a      	str	r2, [r7, #4]
  assert_param(IS_FDCAN_BRS(pTxHeader->BitRateSwitch));
  assert_param(IS_FDCAN_FDF(pTxHeader->FDFormat));
  assert_param(IS_FDCAN_EFC(pTxHeader->TxEventFifoControl));
  assert_param(IS_FDCAN_MAX_VALUE(pTxHeader->MessageMarker, 0xFFU));

  if (hfdcan->State == HAL_FDCAN_STATE_BUSY)
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d141      	bne.n	80012f6 <HAL_FDCAN_AddMessageToTxFifoQ+0x9c>
  {
    /* Check that the Tx FIFO/Queue has an allocated area into the RAM */
    if ((hfdcan->Instance->TXBC & FDCAN_TXBC_TFQS) == 0U)
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800127a:	f003 537c 	and.w	r3, r3, #1056964608	; 0x3f000000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d109      	bne.n	8001296 <HAL_FDCAN_AddMessageToTxFifoQ+0x3c>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001288:	f043 0220 	orr.w	r2, r3, #32
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	e038      	b.n	8001308 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }

    /* Check that the Tx FIFO/Queue is not full */
    if ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQF) != 0U)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 800129e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d009      	beq.n	80012ba <HAL_FDCAN_AddMessageToTxFifoQ+0x60>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_FULL;
 80012a6:	68fb      	ldr	r3, [r7, #12]
 80012a8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80012ac:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80012b0:	68fb      	ldr	r3, [r7, #12]
 80012b2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

      return HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	e026      	b.n	8001308 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
    }
    else
    {
      /* Retrieve the Tx FIFO PutIndex */
      PutIndex = ((hfdcan->Instance->TXFQS & FDCAN_TXFQS_TFQPI) >> FDCAN_TXFQS_TFQPI_Pos);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f8d3 30c4 	ldr.w	r3, [r3, #196]	; 0xc4
 80012c2:	0c1b      	lsrs	r3, r3, #16
 80012c4:	f003 031f 	and.w	r3, r3, #31
 80012c8:	617b      	str	r3, [r7, #20]

      /* Add the message to the Tx FIFO/Queue */
      FDCAN_CopyMessageToRAM(hfdcan, pTxHeader, pTxData, PutIndex);
 80012ca:	697b      	ldr	r3, [r7, #20]
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	68b9      	ldr	r1, [r7, #8]
 80012d0:	68f8      	ldr	r0, [r7, #12]
 80012d2:	f000 fe95 	bl	8002000 <FDCAN_CopyMessageToRAM>

      /* Activate the corresponding transmission request */
      hfdcan->Instance->TXBAR = ((uint32_t)1 << PutIndex);
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2101      	movs	r1, #1
 80012dc:	697a      	ldr	r2, [r7, #20]
 80012de:	fa01 f202 	lsl.w	r2, r1, r2
 80012e2:	f8c3 20d0 	str.w	r2, [r3, #208]	; 0xd0

      /* Store the Latest Tx FIFO/Queue Request Buffer Index */
      hfdcan->LatestTxFifoQRequest = ((uint32_t)1 << PutIndex);
 80012e6:	2201      	movs	r2, #1
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	409a      	lsls	r2, r3
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
    }

    /* Return function status */
    return HAL_OK;
 80012f2:	2300      	movs	r3, #0
 80012f4:	e008      	b.n	8001308 <HAL_FDCAN_AddMessageToTxFifoQ+0xae>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80012fc:	f043 0208 	orr.w	r2, r3, #8
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
  }
}
 8001308:	4618      	mov	r0, r3
 800130a:	3718      	adds	r7, #24
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}

08001310 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxHeader pointer to a FDCAN_RxHeaderTypeDef structure.
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation, FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001310:	b480      	push	{r7}
 8001312:	b08b      	sub	sp, #44	; 0x2c
 8001314:	af00      	add	r7, sp, #0
 8001316:	60f8      	str	r0, [r7, #12]
 8001318:	60b9      	str	r1, [r7, #8]
 800131a:	607a      	str	r2, [r7, #4]
 800131c:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8001328:	76fb      	strb	r3, [r7, #27]

  if (state == HAL_FDCAN_STATE_BUSY)
 800132a:	7efb      	ldrb	r3, [r7, #27]
 800132c:	2b02      	cmp	r3, #2
 800132e:	f040 814b 	bne.w	80015c8 <HAL_FDCAN_GetRxMessage+0x2b8>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001332:	68bb      	ldr	r3, [r7, #8]
 8001334:	2b40      	cmp	r3, #64	; 0x40
 8001336:	d14d      	bne.n	80013d4 <HAL_FDCAN_GetRxMessage+0xc4>
    {
      /* Check that the Rx FIFO 0 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0S) == 0U)
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001340:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001344:	2b00      	cmp	r3, #0
 8001346:	d109      	bne.n	800135c <HAL_FDCAN_GetRxMessage+0x4c>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800134e:	f043 0220 	orr.w	r2, r3, #32
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001358:	2301      	movs	r3, #1
 800135a:	e13e      	b.n	80015da <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 800135c:	68fb      	ldr	r3, [r7, #12]
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001364:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001368:	2b00      	cmp	r3, #0
 800136a:	d109      	bne.n	8001380 <HAL_FDCAN_GetRxMessage+0x70>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800136c:	68fb      	ldr	r3, [r7, #12]
 800136e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001372:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800137c:	2301      	movs	r3, #1
 800137e:	e12c      	b.n	80015da <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8001388:	0e1b      	lsrs	r3, r3, #24
 800138a:	f003 0301 	and.w	r3, r3, #1
 800138e:	2b01      	cmp	r3, #1
 8001390:	d10b      	bne.n	80013aa <HAL_FDCAN_GetRxMessage+0x9a>
        {
          if(((hfdcan->Instance->RXF0C & FDCAN_RXF0C_F0OM) >> FDCAN_RXF0C_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800139a:	0fdb      	lsrs	r3, r3, #31
 800139c:	f003 0301 	and.w	r3, r3, #1
 80013a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80013a4:	d101      	bne.n	80013aa <HAL_FDCAN_GetRxMessage+0x9a>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 80013a6:	2301      	movs	r3, #1
 80013a8:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index*/
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80013b2:	0a1b      	lsrs	r3, r3, #8
 80013b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80013b8:	69fa      	ldr	r2, [r7, #28]
 80013ba:	4413      	add	r3, r2
 80013bc:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * hfdcan->Init.RxFifo0ElmtSize * 4U));
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	69f9      	ldr	r1, [r7, #28]
 80013c8:	fb01 f303 	mul.w	r3, r1, r3
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	4413      	add	r3, r2
 80013d0:	627b      	str	r3, [r7, #36]	; 0x24
 80013d2:	e069      	b.n	80014a8 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	2b41      	cmp	r3, #65	; 0x41
 80013d8:	d14d      	bne.n	8001476 <HAL_FDCAN_GetRxMessage+0x166>
    {
      /* Check that the Rx FIFO 1 has an allocated area into the RAM */
      if ((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1S) == 0U)
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80013e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d109      	bne.n	80013fe <HAL_FDCAN_GetRxMessage+0xee>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80013f0:	f043 0220 	orr.w	r2, r3, #32
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 80013fa:	2301      	movs	r3, #1
 80013fc:	e0ed      	b.n	80015da <HAL_FDCAN_GetRxMessage+0x2ca>
      }

      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001406:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800140a:	2b00      	cmp	r3, #0
 800140c:	d109      	bne.n	8001422 <HAL_FDCAN_GetRxMessage+0x112>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001414:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e0db      	b.n	80015da <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on*/
        if(((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800142a:	0e1b      	lsrs	r3, r3, #24
 800142c:	f003 0301 	and.w	r3, r3, #1
 8001430:	2b01      	cmp	r3, #1
 8001432:	d10b      	bne.n	800144c <HAL_FDCAN_GetRxMessage+0x13c>
        {
          if(((hfdcan->Instance->RXF1C & FDCAN_RXF1C_F1OM) >> FDCAN_RXF1C_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800143c:	0fdb      	lsrs	r3, r3, #31
 800143e:	f003 0301 	and.w	r3, r3, #1
 8001442:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001446:	d101      	bne.n	800144c <HAL_FDCAN_GetRxMessage+0x13c>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001448:	2301      	movs	r3, #1
 800144a:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index*/
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 800144c:	68fb      	ldr	r3, [r7, #12]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8001454:	0a1b      	lsrs	r3, r3, #8
 8001456:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800145a:	69fa      	ldr	r2, [r7, #28]
 800145c:	4413      	add	r3, r2
 800145e:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * hfdcan->Init.RxFifo1ElmtSize * 4U));
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001468:	69f9      	ldr	r1, [r7, #28]
 800146a:	fb01 f303 	mul.w	r3, r1, r3
 800146e:	009b      	lsls	r3, r3, #2
 8001470:	4413      	add	r3, r2
 8001472:	627b      	str	r3, [r7, #36]	; 0x24
 8001474:	e018      	b.n	80014a8 <HAL_FDCAN_GetRxMessage+0x198>
      }
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Check that the selected buffer has an allocated area into the RAM */
      if (RxLocation >= hfdcan->Init.RxBuffersNbr)
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800147a:	68ba      	ldr	r2, [r7, #8]
 800147c:	429a      	cmp	r2, r3
 800147e:	d309      	bcc.n	8001494 <HAL_FDCAN_GetRxMessage+0x184>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001486:	f043 0220 	orr.w	r2, r3, #32
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

        return HAL_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e0a2      	b.n	80015da <HAL_FDCAN_GetRxMessage+0x2ca>
      }
      else
      {
        /* Calculate Rx buffer address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxBufferSA + (RxLocation * hfdcan->Init.RxBufferSize * 4U));
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800149c:	68b9      	ldr	r1, [r7, #8]
 800149e:	fb01 f303 	mul.w	r3, r1, r3
 80014a2:	009b      	lsls	r3, r3, #2
 80014a4:	4413      	add	r3, r2
 80014a6:	627b      	str	r3, [r7, #36]	; 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 80014a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 4280 	and.w	r2, r3, #1073741824	; 0x40000000
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	685b      	ldr	r3, [r3, #4]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d107      	bne.n	80014cc <HAL_FDCAN_GetRxMessage+0x1bc>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18);
 80014bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	0c9b      	lsrs	r3, r3, #18
 80014c2:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	601a      	str	r2, [r3, #0]
 80014ca:	e005      	b.n	80014d8 <HAL_FDCAN_GetRxMessage+0x1c8>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80014cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80014d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 5200 	and.w	r2, r3, #536870912	; 0x20000000
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80014e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80014f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f2:	3304      	adds	r3, #4
 80014f4:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80014f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	b29a      	uxth	r2, r3
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = (*RxAddress & FDCAN_ELEMENT_MASK_DLC);
 8001500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f403 2270 	and.w	r2, r3, #983040	; 0xf0000
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 800150c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 1280 	and.w	r2, r3, #1048576	; 0x100000
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f403 1200 	and.w	r2, r3, #2097152	; 0x200000
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24);
 8001524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	0e1b      	lsrs	r3, r3, #24
 800152a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31);
 8001532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	0fda      	lsrs	r2, r3, #31
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 800153c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800153e:	3304      	adds	r3, #4
 8001540:	627b      	str	r3, [r7, #36]	; 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 8001542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001544:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 8001546:	2300      	movs	r3, #0
 8001548:	623b      	str	r3, [r7, #32]
 800154a:	e00a      	b.n	8001562 <HAL_FDCAN_GetRxMessage+0x252>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 800154c:	697a      	ldr	r2, [r7, #20]
 800154e:	6a3b      	ldr	r3, [r7, #32]
 8001550:	441a      	add	r2, r3
 8001552:	6839      	ldr	r1, [r7, #0]
 8001554:	6a3b      	ldr	r3, [r7, #32]
 8001556:	440b      	add	r3, r1
 8001558:	7812      	ldrb	r2, [r2, #0]
 800155a:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength >> 16]; ByteCounter++)
 800155c:	6a3b      	ldr	r3, [r7, #32]
 800155e:	3301      	adds	r3, #1
 8001560:	623b      	str	r3, [r7, #32]
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	0c1b      	lsrs	r3, r3, #16
 8001568:	4a1f      	ldr	r2, [pc, #124]	; (80015e8 <HAL_FDCAN_GetRxMessage+0x2d8>)
 800156a:	5cd3      	ldrb	r3, [r2, r3]
 800156c:	461a      	mov	r2, r3
 800156e:	6a3b      	ldr	r3, [r7, #32]
 8001570:	4293      	cmp	r3, r2
 8001572:	d3eb      	bcc.n	800154c <HAL_FDCAN_GetRxMessage+0x23c>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	2b40      	cmp	r3, #64	; 0x40
 8001578:	d105      	bne.n	8001586 <HAL_FDCAN_GetRxMessage+0x276>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	69fa      	ldr	r2, [r7, #28]
 8001580:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
 8001584:	e01e      	b.n	80015c4 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else if (RxLocation == FDCAN_RX_FIFO1) /* Rx element is assigned to the Rx FIFO 1 */
 8001586:	68bb      	ldr	r3, [r7, #8]
 8001588:	2b41      	cmp	r3, #65	; 0x41
 800158a:	d105      	bne.n	8001598 <HAL_FDCAN_GetRxMessage+0x288>
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	69fa      	ldr	r2, [r7, #28]
 8001592:	f8c3 20b8 	str.w	r2, [r3, #184]	; 0xb8
 8001596:	e015      	b.n	80015c4 <HAL_FDCAN_GetRxMessage+0x2b4>
    }
    else /* Rx element is assigned to a dedicated Rx buffer */
    {
      /* Clear the New Data flag of the current Rx buffer */
      if (RxLocation < FDCAN_RX_BUFFER32)
 8001598:	68bb      	ldr	r3, [r7, #8]
 800159a:	2b1f      	cmp	r3, #31
 800159c:	d808      	bhi.n	80015b0 <HAL_FDCAN_GetRxMessage+0x2a0>
      {
        hfdcan->Instance->NDAT1 = ((uint32_t)1 << RxLocation);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	2101      	movs	r1, #1
 80015a4:	68ba      	ldr	r2, [r7, #8]
 80015a6:	fa01 f202 	lsl.w	r2, r1, r2
 80015aa:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 80015ae:	e009      	b.n	80015c4 <HAL_FDCAN_GetRxMessage+0x2b4>
      }
      else /* FDCAN_RX_BUFFER32 <= RxLocation <= FDCAN_RX_BUFFER63 */
      {
        hfdcan->Instance->NDAT2 = ((uint32_t)1 << (RxLocation & 0x1FU));
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	f003 021f 	and.w	r2, r3, #31
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	2101      	movs	r1, #1
 80015bc:	fa01 f202 	lsl.w	r2, r1, r2
 80015c0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }

    /* Return function status */
    return HAL_OK;
 80015c4:	2300      	movs	r3, #0
 80015c6:	e008      	b.n	80015da <HAL_FDCAN_GetRxMessage+0x2ca>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80015ce:	f043 0208 	orr.w	r2, r3, #8
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80015d8:	2301      	movs	r3, #1
  }
}
 80015da:	4618      	mov	r0, r3
 80015dc:	372c      	adds	r7, #44	; 0x2c
 80015de:	46bd      	mov	sp, r7
 80015e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e4:	4770      	bx	lr
 80015e6:	bf00      	nop
 80015e8:	08004bd8 	.word	0x08004bd8

080015ec <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_COMPLETE
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs, uint32_t BufferIndexes)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b087      	sub	sp, #28
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	60f8      	str	r0, [r7, #12]
 80015f4:	60b9      	str	r1, [r7, #8]
 80015f6:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80015fe:	75fb      	strb	r3, [r7, #23]

  /* Check function parameters */
  assert_param(IS_FDCAN_IT(ActiveITs));

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001600:	7dfb      	ldrb	r3, [r7, #23]
 8001602:	2b01      	cmp	r3, #1
 8001604:	d002      	beq.n	800160c <HAL_FDCAN_ActivateNotification+0x20>
 8001606:	7dfb      	ldrb	r3, [r7, #23]
 8001608:	2b02      	cmp	r3, #2
 800160a:	d155      	bne.n	80016b8 <HAL_FDCAN_ActivateNotification+0xcc>
  {
    /* Enable Interrupt lines */
    if ((ActiveITs & hfdcan->Instance->ILS) == 0U)
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	4013      	ands	r3, r2
 8001616:	2b00      	cmp	r3, #0
 8001618:	d108      	bne.n	800162c <HAL_FDCAN_ActivateNotification+0x40>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f042 0201 	orr.w	r2, r2, #1
 8001628:	65da      	str	r2, [r3, #92]	; 0x5c
 800162a:	e014      	b.n	8001656 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else if ((ActiveITs & hfdcan->Instance->ILS) == ActiveITs)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001632:	68bb      	ldr	r3, [r7, #8]
 8001634:	4013      	ands	r3, r2
 8001636:	68ba      	ldr	r2, [r7, #8]
 8001638:	429a      	cmp	r2, r3
 800163a:	d108      	bne.n	800164e <HAL_FDCAN_ActivateNotification+0x62>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f042 0202 	orr.w	r2, r2, #2
 800164a:	65da      	str	r2, [r3, #92]	; 0x5c
 800164c:	e003      	b.n	8001656 <HAL_FDCAN_ActivateNotification+0x6a>
    }
    else
    {
      /* Enable Interrupt lines 0 and 1 */
      hfdcan->Instance->ILE = (FDCAN_INTERRUPT_LINE0 | FDCAN_INTERRUPT_LINE1);
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	2203      	movs	r2, #3
 8001654:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800165c:	2b00      	cmp	r3, #0
 800165e:	d009      	beq.n	8001674 <HAL_FDCAN_ActivateNotification+0x88>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f8d3 10e0 	ldr.w	r1, [r3, #224]	; 0xe0
 8001668:	68fb      	ldr	r3, [r7, #12]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	687a      	ldr	r2, [r7, #4]
 800166e:	430a      	orrs	r2, r1
 8001670:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800167a:	2b00      	cmp	r3, #0
 800167c:	d009      	beq.n	8001692 <HAL_FDCAN_ActivateNotification+0xa6>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f8d3 10e4 	ldr.w	r1, [r3, #228]	; 0xe4
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	430a      	orrs	r2, r1
 800168e:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8001698:	68ba      	ldr	r2, [r7, #8]
 800169a:	4b0f      	ldr	r3, [pc, #60]	; (80016d8 <HAL_FDCAN_ActivateNotification+0xec>)
 800169c:	4013      	ands	r3, r2
 800169e:	68fa      	ldr	r2, [r7, #12]
 80016a0:	6812      	ldr	r2, [r2, #0]
 80016a2:	430b      	orrs	r3, r1
 80016a4:	6553      	str	r3, [r2, #84]	; 0x54
 80016a6:	4b0d      	ldr	r3, [pc, #52]	; (80016dc <HAL_FDCAN_ActivateNotification+0xf0>)
 80016a8:	695a      	ldr	r2, [r3, #20]
 80016aa:	68bb      	ldr	r3, [r7, #8]
 80016ac:	0f9b      	lsrs	r3, r3, #30
 80016ae:	490b      	ldr	r1, [pc, #44]	; (80016dc <HAL_FDCAN_ActivateNotification+0xf0>)
 80016b0:	4313      	orrs	r3, r2
 80016b2:	614b      	str	r3, [r1, #20]

    /* Return function status */
    return HAL_OK;
 80016b4:	2300      	movs	r3, #0
 80016b6:	e008      	b.n	80016ca <HAL_FDCAN_ActivateNotification+0xde>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80016be:	f043 0202 	orr.w	r2, r3, #2
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    return HAL_ERROR;
 80016c8:	2301      	movs	r3, #1
  }
}
 80016ca:	4618      	mov	r0, r3
 80016cc:	371c      	adds	r7, #28
 80016ce:	46bd      	mov	sp, r7
 80016d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop
 80016d8:	3fcfffff 	.word	0x3fcfffff
 80016dc:	4000a800 	.word	0x4000a800

080016e0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b096      	sub	sp, #88	; 0x58
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t itsourceIE;
  uint32_t itsourceTTIE;
  uint32_t itflagIR;
  uint32_t itflagTTIR;

  ClkCalibrationITs = (FDCAN_CCU->IR << 30);
 80016e8:	4b9a      	ldr	r3, [pc, #616]	; (8001954 <HAL_FDCAN_IRQHandler+0x274>)
 80016ea:	691b      	ldr	r3, [r3, #16]
 80016ec:	079b      	lsls	r3, r3, #30
 80016ee:	657b      	str	r3, [r7, #84]	; 0x54
  ClkCalibrationITs &= (FDCAN_CCU->IE << 30);
 80016f0:	4b98      	ldr	r3, [pc, #608]	; (8001954 <HAL_FDCAN_IRQHandler+0x274>)
 80016f2:	695b      	ldr	r3, [r3, #20]
 80016f4:	079b      	lsls	r3, r3, #30
 80016f6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80016f8:	4013      	ands	r3, r2
 80016fa:	657b      	str	r3, [r7, #84]	; 0x54
  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001702:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8001706:	653b      	str	r3, [r7, #80]	; 0x50
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800170e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001710:	4013      	ands	r3, r2
 8001712:	653b      	str	r3, [r7, #80]	; 0x50
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800171a:	f003 030f 	and.w	r3, r3, #15
 800171e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo0ITs &= hfdcan->Instance->IE;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001726:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001728:	4013      	ands	r3, r2
 800172a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001732:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001736:	64bb      	str	r3, [r7, #72]	; 0x48
  RxFifo1ITs &= hfdcan->Instance->IE;
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800173e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001740:	4013      	ands	r3, r2
 8001742:	64bb      	str	r3, [r7, #72]	; 0x48
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800174a:	f003 5371 	and.w	r3, r3, #1010827264	; 0x3c400000
 800174e:	647b      	str	r3, [r7, #68]	; 0x44
  Errors &= hfdcan->Instance->IE;
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001756:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8001758:	4013      	ands	r3, r2
 800175a:	647b      	str	r3, [r7, #68]	; 0x44
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001762:	f003 7360 	and.w	r3, r3, #58720256	; 0x3800000
 8001766:	643b      	str	r3, [r7, #64]	; 0x40
  ErrorStatusITs &= hfdcan->Instance->IE;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800176e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8001770:	4013      	ands	r3, r2
 8001772:	643b      	str	r3, [r7, #64]	; 0x40
  itsourceIE = hfdcan->Instance->IE;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800177a:	63fb      	str	r3, [r7, #60]	; 0x3c
  itflagIR = hfdcan->Instance->IR;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001782:	63bb      	str	r3, [r7, #56]	; 0x38

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 8001784:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001786:	0a1b      	lsrs	r3, r3, #8
 8001788:	f003 0301 	and.w	r3, r3, #1
 800178c:	2b00      	cmp	r3, #0
 800178e:	d010      	beq.n	80017b2 <HAL_FDCAN_IRQHandler+0xd2>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001792:	0a1b      	lsrs	r3, r3, #8
 8001794:	f003 0301 	and.w	r3, r3, #1
 8001798:	2b00      	cmp	r3, #0
 800179a:	d00a      	beq.n	80017b2 <HAL_FDCAN_IRQHandler+0xd2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80017a4:	651a      	str	r2, [r3, #80]	; 0x50
 80017a6:	4b6b      	ldr	r3, [pc, #428]	; (8001954 <HAL_FDCAN_IRQHandler+0x274>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f000 fa54 	bl	8001c5a <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 80017b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80017b4:	0a9b      	lsrs	r3, r3, #10
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d01d      	beq.n	80017fa <HAL_FDCAN_IRQHandler+0x11a>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 80017be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80017c0:	0a9b      	lsrs	r3, r3, #10
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d017      	beq.n	80017fa <HAL_FDCAN_IRQHandler+0x11a>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 80017d2:	637b      	str	r3, [r7, #52]	; 0x34
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 80017dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80017de:	4013      	ands	r3, r2
 80017e0:	637b      	str	r3, [r7, #52]	; 0x34

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017ea:	651a      	str	r2, [r3, #80]	; 0x50
 80017ec:	4b59      	ldr	r3, [pc, #356]	; (8001954 <HAL_FDCAN_IRQHandler+0x274>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80017f2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80017f4:	6878      	ldr	r0, [r7, #4]
 80017f6:	f000 fa07 	bl	8001c08 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Clock calibration unit interrupts management *****************************/
  if (ClkCalibrationITs != 0U)
 80017fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d00d      	beq.n	800181c <HAL_FDCAN_IRQHandler+0x13c>
  {
    /* Clear the Clock Calibration flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ClkCalibrationITs);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001806:	4b54      	ldr	r3, [pc, #336]	; (8001958 <HAL_FDCAN_IRQHandler+0x278>)
 8001808:	400b      	ands	r3, r1
 800180a:	6513      	str	r3, [r2, #80]	; 0x50
 800180c:	4a51      	ldr	r2, [pc, #324]	; (8001954 <HAL_FDCAN_IRQHandler+0x274>)
 800180e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001810:	0f9b      	lsrs	r3, r3, #30
 8001812:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
#else
    /* Clock Calibration Callback */
    HAL_FDCAN_ClockCalibrationCallback(hfdcan, ClkCalibrationITs);
 8001814:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8001816:	6878      	ldr	r0, [r7, #4]
 8001818:	f000 f9c0 	bl	8001b9c <HAL_FDCAN_ClockCalibrationCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 800181c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800181e:	2b00      	cmp	r3, #0
 8001820:	d00d      	beq.n	800183e <HAL_FDCAN_IRQHandler+0x15e>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001828:	4b4b      	ldr	r3, [pc, #300]	; (8001958 <HAL_FDCAN_IRQHandler+0x278>)
 800182a:	400b      	ands	r3, r1
 800182c:	6513      	str	r3, [r2, #80]	; 0x50
 800182e:	4a49      	ldr	r2, [pc, #292]	; (8001954 <HAL_FDCAN_IRQHandler+0x274>)
 8001830:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001832:	0f9b      	lsrs	r3, r3, #30
 8001834:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001836:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	f000 f9ba 	bl	8001bb2 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800183e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001840:	2b00      	cmp	r3, #0
 8001842:	d00d      	beq.n	8001860 <HAL_FDCAN_IRQHandler+0x180>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681a      	ldr	r2, [r3, #0]
 8001848:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800184a:	4b43      	ldr	r3, [pc, #268]	; (8001958 <HAL_FDCAN_IRQHandler+0x278>)
 800184c:	400b      	ands	r3, r1
 800184e:	6513      	str	r3, [r2, #80]	; 0x50
 8001850:	4a40      	ldr	r2, [pc, #256]	; (8001954 <HAL_FDCAN_IRQHandler+0x274>)
 8001852:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001854:	0f9b      	lsrs	r3, r3, #30
 8001856:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001858:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800185a:	6878      	ldr	r0, [r7, #4]
 800185c:	f7fe fd3c 	bl	80002d8 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001860:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001862:	2b00      	cmp	r3, #0
 8001864:	d00d      	beq.n	8001882 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800186c:	4b3a      	ldr	r3, [pc, #232]	; (8001958 <HAL_FDCAN_IRQHandler+0x278>)
 800186e:	400b      	ands	r3, r1
 8001870:	6513      	str	r3, [r2, #80]	; 0x50
 8001872:	4a38      	ldr	r2, [pc, #224]	; (8001954 <HAL_FDCAN_IRQHandler+0x274>)
 8001874:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001876:	0f9b      	lsrs	r3, r3, #30
 8001878:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800187a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800187c:	6878      	ldr	r0, [r7, #4]
 800187e:	f000 f9a3 	bl	8001bc8 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 8001882:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001884:	0adb      	lsrs	r3, r3, #11
 8001886:	f003 0301 	and.w	r3, r3, #1
 800188a:	2b00      	cmp	r3, #0
 800188c:	d010      	beq.n	80018b0 <HAL_FDCAN_IRQHandler+0x1d0>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 800188e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001890:	0adb      	lsrs	r3, r3, #11
 8001892:	f003 0301 	and.w	r3, r3, #1
 8001896:	2b00      	cmp	r3, #0
 8001898:	d00a      	beq.n	80018b0 <HAL_FDCAN_IRQHandler+0x1d0>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018a2:	651a      	str	r2, [r3, #80]	; 0x50
 80018a4:	4b2b      	ldr	r3, [pc, #172]	; (8001954 <HAL_FDCAN_IRQHandler+0x274>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f000 f997 	bl	8001bde <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TX_COMPLETE) != RESET)
 80018b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018b2:	0a5b      	lsrs	r3, r3, #9
 80018b4:	f003 0301 	and.w	r3, r3, #1
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d01d      	beq.n	80018f8 <HAL_FDCAN_IRQHandler+0x218>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80018bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80018be:	0a5b      	lsrs	r3, r3, #9
 80018c0:	f003 0301 	and.w	r3, r3, #1
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d017      	beq.n	80018f8 <HAL_FDCAN_IRQHandler+0x218>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80018d0:	633b      	str	r3, [r7, #48]	; 0x30
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80018da:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018dc:	4013      	ands	r3, r2
 80018de:	633b      	str	r3, [r7, #48]	; 0x30

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80018e8:	651a      	str	r2, [r3, #80]	; 0x50
 80018ea:	4b1a      	ldr	r3, [pc, #104]	; (8001954 <HAL_FDCAN_IRQHandler+0x274>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80018f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 f97d 	bl	8001bf2 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Rx Buffer New Message interrupt management *******************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RX_BUFFER_NEW_MESSAGE) != RESET)
 80018f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80018fa:	0cdb      	lsrs	r3, r3, #19
 80018fc:	f003 0301 	and.w	r3, r3, #1
 8001900:	2b00      	cmp	r3, #0
 8001902:	d010      	beq.n	8001926 <HAL_FDCAN_IRQHandler+0x246>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE) != RESET)
 8001904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001906:	0cdb      	lsrs	r3, r3, #19
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	2b00      	cmp	r3, #0
 800190e:	d00a      	beq.n	8001926 <HAL_FDCAN_IRQHandler+0x246>
    {
      /* Clear the Rx Buffer New Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_BUFFER_NEW_MESSAGE);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001918:	651a      	str	r2, [r3, #80]	; 0x50
 800191a:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <HAL_FDCAN_IRQHandler+0x274>)
 800191c:	2200      	movs	r2, #0
 800191e:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->RxBufferNewMessageCallback(hfdcan);
#else
      /* Rx Buffer New Message Callback */
      HAL_FDCAN_RxBufferNewMessageCallback(hfdcan);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f000 f97c 	bl	8001c1e <HAL_FDCAN_RxBufferNewMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001928:	0c1b      	lsrs	r3, r3, #16
 800192a:	f003 0301 	and.w	r3, r3, #1
 800192e:	2b00      	cmp	r3, #0
 8001930:	d016      	beq.n	8001960 <HAL_FDCAN_IRQHandler+0x280>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001932:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001934:	0c1b      	lsrs	r3, r3, #16
 8001936:	f003 0301 	and.w	r3, r3, #1
 800193a:	2b00      	cmp	r3, #0
 800193c:	d010      	beq.n	8001960 <HAL_FDCAN_IRQHandler+0x280>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001946:	651a      	str	r2, [r3, #80]	; 0x50
 8001948:	4b02      	ldr	r3, [pc, #8]	; (8001954 <HAL_FDCAN_IRQHandler+0x274>)
 800194a:	2200      	movs	r2, #0
 800194c:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800194e:	6878      	ldr	r0, [r7, #4]
 8001950:	e004      	b.n	800195c <HAL_FDCAN_IRQHandler+0x27c>
 8001952:	bf00      	nop
 8001954:	4000a800 	.word	0x4000a800
 8001958:	3fcfffff 	.word	0x3fcfffff
 800195c:	f000 f969 	bl	8001c32 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001960:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001962:	0c9b      	lsrs	r3, r3, #18
 8001964:	f003 0301 	and.w	r3, r3, #1
 8001968:	2b00      	cmp	r3, #0
 800196a:	d010      	beq.n	800198e <HAL_FDCAN_IRQHandler+0x2ae>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 800196c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800196e:	0c9b      	lsrs	r3, r3, #18
 8001970:	f003 0301 	and.w	r3, r3, #1
 8001974:	2b00      	cmp	r3, #0
 8001976:	d00a      	beq.n	800198e <HAL_FDCAN_IRQHandler+0x2ae>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001980:	651a      	str	r2, [r3, #80]	; 0x50
 8001982:	4b83      	ldr	r3, [pc, #524]	; (8001b90 <HAL_FDCAN_IRQHandler+0x4b0>)
 8001984:	2200      	movs	r2, #0
 8001986:	611a      	str	r2, [r3, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	f000 f95c 	bl	8001c46 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_IT_SOURCE(itsourceIE, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 800198e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001990:	0c5b      	lsrs	r3, r3, #17
 8001992:	f003 0301 	and.w	r3, r3, #1
 8001996:	2b00      	cmp	r3, #0
 8001998:	d015      	beq.n	80019c6 <HAL_FDCAN_IRQHandler+0x2e6>
  {
    if (FDCAN_CHECK_FLAG(itflagIR, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 800199a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800199c:	0c5b      	lsrs	r3, r3, #17
 800199e:	f003 0301 	and.w	r3, r3, #1
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d00f      	beq.n	80019c6 <HAL_FDCAN_IRQHandler+0x2e6>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80019ae:	651a      	str	r2, [r3, #80]	; 0x50
 80019b0:	4b77      	ldr	r3, [pc, #476]	; (8001b90 <HAL_FDCAN_IRQHandler+0x4b0>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	611a      	str	r2, [r3, #16]

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80019bc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80019c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d00d      	beq.n	80019e8 <HAL_FDCAN_IRQHandler+0x308>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80019d2:	4b70      	ldr	r3, [pc, #448]	; (8001b94 <HAL_FDCAN_IRQHandler+0x4b4>)
 80019d4:	400b      	ands	r3, r1
 80019d6:	6513      	str	r3, [r2, #80]	; 0x50
 80019d8:	4a6d      	ldr	r2, [pc, #436]	; (8001b90 <HAL_FDCAN_IRQHandler+0x4b0>)
 80019da:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80019dc:	0f9b      	lsrs	r3, r3, #30
 80019de:	6113      	str	r3, [r2, #16]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80019e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80019e2:	6878      	ldr	r0, [r7, #4]
 80019e4:	f000 f94d 	bl	8001c82 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80019e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d011      	beq.n	8001a12 <HAL_FDCAN_IRQHandler+0x332>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80019f4:	4b67      	ldr	r3, [pc, #412]	; (8001b94 <HAL_FDCAN_IRQHandler+0x4b4>)
 80019f6:	400b      	ands	r3, r1
 80019f8:	6513      	str	r3, [r2, #80]	; 0x50
 80019fa:	4a65      	ldr	r2, [pc, #404]	; (8001b90 <HAL_FDCAN_IRQHandler+0x4b0>)
 80019fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019fe:	0f9b      	lsrs	r3, r3, #30
 8001a00:	6113      	str	r3, [r2, #16]

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001a08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a0a:	431a      	orrs	r2, r3
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  }

  if (hfdcan->Instance == FDCAN1)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a60      	ldr	r2, [pc, #384]	; (8001b98 <HAL_FDCAN_IRQHandler+0x4b8>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	f040 80ac 	bne.w	8001b76 <HAL_FDCAN_IRQHandler+0x496>
  {
    if ((hfdcan->ttcan->TTOCF & FDCAN_TTOCF_OM) != 0U)
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	f003 0303 	and.w	r3, r3, #3
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f000 80a4 	beq.w	8001b76 <HAL_FDCAN_IRQHandler+0x496>
    {
      TTSchedSyncITs = hfdcan->ttcan->TTIR & FDCAN_TT_SCHEDULE_SYNC_MASK;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	6a1b      	ldr	r3, [r3, #32]
 8001a34:	f003 030f 	and.w	r3, r3, #15
 8001a38:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTSchedSyncITs &= hfdcan->ttcan->TTIE;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	685b      	ldr	r3, [r3, #4]
 8001a3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a40:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a42:	4013      	ands	r3, r2
 8001a44:	62fb      	str	r3, [r7, #44]	; 0x2c
      TTTimeMarkITs = hfdcan->ttcan->TTIR & FDCAN_TT_TIME_MARK_MASK;
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	6a1b      	ldr	r3, [r3, #32]
 8001a4c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8001a50:	62bb      	str	r3, [r7, #40]	; 0x28
      TTTimeMarkITs &= hfdcan->ttcan->TTIE;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	685b      	ldr	r3, [r3, #4]
 8001a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	62bb      	str	r3, [r7, #40]	; 0x28
      TTGlobTimeITs = hfdcan->ttcan->TTIR & FDCAN_TT_GLOBAL_TIME_MASK;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	6a1b      	ldr	r3, [r3, #32]
 8001a64:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001a68:	627b      	str	r3, [r7, #36]	; 0x24
      TTGlobTimeITs &= hfdcan->ttcan->TTIE;
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a72:	4013      	ands	r3, r2
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
      TTDistErrors = hfdcan->ttcan->TTIR & FDCAN_TT_DISTURBING_ERROR_MASK;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	6a1b      	ldr	r3, [r3, #32]
 8001a7c:	f403 43fc 	and.w	r3, r3, #32256	; 0x7e00
 8001a80:	623b      	str	r3, [r7, #32]
      TTDistErrors &= hfdcan->ttcan->TTIE;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a88:	6a3a      	ldr	r2, [r7, #32]
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	623b      	str	r3, [r7, #32]
      TTFatalErrors = hfdcan->ttcan->TTIR & FDCAN_TT_FATAL_ERROR_MASK;
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	f403 23f0 	and.w	r3, r3, #491520	; 0x78000
 8001a98:	61fb      	str	r3, [r7, #28]
      TTFatalErrors &= hfdcan->ttcan->TTIE;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	685b      	ldr	r3, [r3, #4]
 8001a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aa0:	69fa      	ldr	r2, [r7, #28]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	61fb      	str	r3, [r7, #28]
      itsourceTTIE = hfdcan->ttcan->TTIE;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001aac:	61bb      	str	r3, [r7, #24]
      itflagTTIR = hfdcan->ttcan->TTIR;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	6a1b      	ldr	r3, [r3, #32]
 8001ab4:	617b      	str	r3, [r7, #20]

      /* TT Schedule Synchronization interrupts management **********************/
      if (TTSchedSyncITs != 0U)
 8001ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d007      	beq.n	8001acc <HAL_FDCAN_IRQHandler+0x3ec>
      {
        /* Clear the TT Schedule Synchronization flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTSchedSyncITs);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	685b      	ldr	r3, [r3, #4]
 8001ac0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001ac2:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
#else
        /* TT Schedule Synchronization Callback */
        HAL_FDCAN_TT_ScheduleSyncCallback(hfdcan, TTSchedSyncITs);
 8001ac4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 f8e6 	bl	8001c98 <HAL_FDCAN_TT_ScheduleSyncCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Time Mark interrupts management *************************************/
      if (TTTimeMarkITs != 0U)
 8001acc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d007      	beq.n	8001ae2 <HAL_FDCAN_IRQHandler+0x402>
      {
        /* Clear the TT Time Mark flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTTimeMarkITs);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	685b      	ldr	r3, [r3, #4]
 8001ad6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001ad8:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
#else
        /* TT Time Mark Callback */
        HAL_FDCAN_TT_TimeMarkCallback(hfdcan, TTTimeMarkITs);
 8001ada:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001adc:	6878      	ldr	r0, [r7, #4]
 8001ade:	f000 f8e6 	bl	8001cae <HAL_FDCAN_TT_TimeMarkCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Stop Watch interrupt management *************************************/
      if (FDCAN_CHECK_IT_SOURCE(itsourceTTIE, FDCAN_TT_IT_STOP_WATCH) != RESET)
 8001ae2:	69bb      	ldr	r3, [r7, #24]
 8001ae4:	099b      	lsrs	r3, r3, #6
 8001ae6:	f003 0301 	and.w	r3, r3, #1
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	d01a      	beq.n	8001b24 <HAL_FDCAN_IRQHandler+0x444>
      {
        if (FDCAN_CHECK_FLAG(itflagTTIR, FDCAN_TT_FLAG_STOP_WATCH) != RESET)
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	099b      	lsrs	r3, r3, #6
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d014      	beq.n	8001b24 <HAL_FDCAN_IRQHandler+0x444>
        {
          /* Retrieve Stop watch Time and Cycle count */
          SWTime = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_SWV) >> FDCAN_TTCPT_SWV_Pos);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b00:	0c1b      	lsrs	r3, r3, #16
 8001b02:	b29b      	uxth	r3, r3
 8001b04:	613b      	str	r3, [r7, #16]
          SWCycleCount = ((hfdcan->ttcan->TTCPT & FDCAN_TTCPT_CCV) >> FDCAN_TTCPT_CCV_Pos);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b0c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001b10:	60fb      	str	r3, [r7, #12]

          /* Clear the TT Stop Watch flag */
          __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, FDCAN_TT_FLAG_STOP_WATCH);
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	685b      	ldr	r3, [r3, #4]
 8001b16:	2240      	movs	r2, #64	; 0x40
 8001b18:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hfdcan->TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
#else
          /* TT Stop Watch Callback */
          HAL_FDCAN_TT_StopWatchCallback(hfdcan, SWTime, SWCycleCount);
 8001b1a:	68fa      	ldr	r2, [r7, #12]
 8001b1c:	6939      	ldr	r1, [r7, #16]
 8001b1e:	6878      	ldr	r0, [r7, #4]
 8001b20:	f000 f8d0 	bl	8001cc4 <HAL_FDCAN_TT_StopWatchCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
        }
      }

      /* TT Global Time interrupts management ***********************************/
      if (TTGlobTimeITs != 0U)
 8001b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d007      	beq.n	8001b3a <HAL_FDCAN_IRQHandler+0x45a>
      {
        /* Clear the TT Global Time flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTGlobTimeITs);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b30:	621a      	str	r2, [r3, #32]
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hfdcan->TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
#else
        /* TT Global Time Callback */
        HAL_FDCAN_TT_GlobalTimeCallback(hfdcan, TTGlobTimeITs);
 8001b32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b34:	6878      	ldr	r0, [r7, #4]
 8001b36:	f000 f8d1 	bl	8001cdc <HAL_FDCAN_TT_GlobalTimeCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
      }

      /* TT Disturbing Error interrupts management ******************************/
      if (TTDistErrors != 0U)
 8001b3a:	6a3b      	ldr	r3, [r7, #32]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d00b      	beq.n	8001b58 <HAL_FDCAN_IRQHandler+0x478>
      {
        /* Clear the TT Disturbing Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTDistErrors);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	6a3a      	ldr	r2, [r7, #32]
 8001b46:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTDistErrors;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001b4e:	6a3b      	ldr	r3, [r7, #32]
 8001b50:	431a      	orrs	r2, r3
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }

      /* TT Fatal Error interrupts management ***********************************/
      if (TTFatalErrors != 0U)
 8001b58:	69fb      	ldr	r3, [r7, #28]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d00b      	beq.n	8001b76 <HAL_FDCAN_IRQHandler+0x496>
      {
        /* Clear the TT Fatal Error flags */
        __HAL_FDCAN_TT_CLEAR_FLAG(hfdcan, TTFatalErrors);
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	685b      	ldr	r3, [r3, #4]
 8001b62:	69fa      	ldr	r2, [r7, #28]
 8001b64:	621a      	str	r2, [r3, #32]

        /* Update error code */
        hfdcan->ErrorCode |= TTFatalErrors;
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	431a      	orrs	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
      }
    }
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d002      	beq.n	8001b86 <HAL_FDCAN_IRQHandler+0x4a6>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	f000 f874 	bl	8001c6e <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001b86:	bf00      	nop
 8001b88:	3758      	adds	r7, #88	; 0x58
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	4000a800 	.word	0x4000a800
 8001b94:	3fcfffff 	.word	0x3fcfffff
 8001b98:	4000a000 	.word	0x4000a000

08001b9c <HAL_FDCAN_ClockCalibrationCallback>:
  * @param  ClkCalibrationITs indicates which Clock Calibration interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Clock_Calibration_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ClockCalibrationCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ClkCalibrationITs)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
  UNUSED(ClkCalibrationITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ClockCalibrationCallback could be implemented in the user file
   */
}
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr

08001bb2 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001bb2:	b480      	push	{r7}
 8001bb4:	b083      	sub	sp, #12
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
 8001bba:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001bbc:	bf00      	nop
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bdc:	4770      	bx	lr

08001bde <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001bde:	b480      	push	{r7}
 8001be0:	b083      	sub	sp, #12
 8001be2:	af00      	add	r7, sp, #0
 8001be4:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001bfc:	bf00      	nop
 8001bfe:	370c      	adds	r7, #12
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr

08001c08 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001c12:	bf00      	nop
 8001c14:	370c      	adds	r7, #12
 8001c16:	46bd      	mov	sp, r7
 8001c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1c:	4770      	bx	lr

08001c1e <HAL_FDCAN_RxBufferNewMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_RxBufferNewMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c1e:	b480      	push	{r7}
 8001c20:	b083      	sub	sp, #12
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxBufferNewMessageCallback could be implemented in the user file
   */
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr

08001c32 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c32:	b480      	push	{r7}
 8001c34:	b083      	sub	sp, #12
 8001c36:	af00      	add	r7, sp, #0
 8001c38:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr

08001c46 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c46:	b480      	push	{r7}
 8001c48:	b083      	sub	sp, #12
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001c62:	bf00      	nop
 8001c64:	370c      	adds	r7, #12
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr

08001c6e <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001c76:	bf00      	nop
 8001c78:	370c      	adds	r7, #12
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr

08001c82 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001c82:	b480      	push	{r7}
 8001c84:	b083      	sub	sp, #12
 8001c86:	af00      	add	r7, sp, #0
 8001c88:	6078      	str	r0, [r7, #4]
 8001c8a:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001c8c:	bf00      	nop
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <HAL_FDCAN_TT_ScheduleSyncCallback>:
  * @param  TTSchedSyncITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTScheduleSynchronization_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_ScheduleSyncCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTSchedSyncITs)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
  UNUSED(TTSchedSyncITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_ScheduleSyncCallback could be implemented in the user file
   */
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <HAL_FDCAN_TT_TimeMarkCallback>:
  * @param  TTTimeMarkITs indicates which TT Schedule Synchronization interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTTimeMark_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_TimeMarkCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTTimeMarkITs)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
 8001cb6:	6039      	str	r1, [r7, #0]
  UNUSED(TTTimeMarkITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_TimeMarkCallback could be implemented in the user file
   */
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <HAL_FDCAN_TT_StopWatchCallback>:
  * @param  SWCycleCount Cycle count value captured together with SWTime.
  *         This parameter is a number between 0 and 0x3F.
  * @retval None
  */
__weak void HAL_FDCAN_TT_StopWatchCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t SWTime, uint32_t SWCycleCount)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	60f8      	str	r0, [r7, #12]
 8001ccc:	60b9      	str	r1, [r7, #8]
 8001cce:	607a      	str	r2, [r7, #4]
  UNUSED(SWCycleCount);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_StopWatchCallback could be implemented in the user file
   */
}
 8001cd0:	bf00      	nop
 8001cd2:	3714      	adds	r7, #20
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <HAL_FDCAN_TT_GlobalTimeCallback>:
  * @param  TTGlobTimeITs indicates which TT Global Time interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_TTGlobalTime_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TT_GlobalTimeCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TTGlobTimeITs)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  UNUSED(TTGlobTimeITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TT_GlobalTimeCallback could be implemented in the user file
   */
}
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf0:	4770      	bx	lr
	...

08001cf4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
 */
static HAL_StatusTypeDef FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	b085      	sub	sp, #20
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t StartAddress;

  StartAddress = hfdcan->Init.MessageRAMOffset;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d00:	60bb      	str	r3, [r7, #8]

  /* Standard filter list start address */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_FLSSA, (StartAddress << FDCAN_SIDFC_FLSSA_Pos));
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001d0a:	4ba7      	ldr	r3, [pc, #668]	; (8001fa8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	68ba      	ldr	r2, [r7, #8]
 8001d10:	0091      	lsls	r1, r2, #2
 8001d12:	687a      	ldr	r2, [r7, #4]
 8001d14:	6812      	ldr	r2, [r2, #0]
 8001d16:	430b      	orrs	r3, r1
 8001d18:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->SIDFC, FDCAN_SIDFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_SIDFC_LSS_Pos));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001d24:	f423 017f 	bic.w	r1, r3, #16711680	; 0xff0000
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d2c:	041a      	lsls	r2, r3, #16
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Extended filter list start address */
  StartAddress += hfdcan->Init.StdFiltersNbr;
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d3c:	68ba      	ldr	r2, [r7, #8]
 8001d3e:	4413      	add	r3, r2
 8001d40:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_FLESA, (StartAddress << FDCAN_XIDFC_FLESA_Pos));
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001d4a:	4b97      	ldr	r3, [pc, #604]	; (8001fa8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	68ba      	ldr	r2, [r7, #8]
 8001d50:	0091      	lsls	r1, r2, #2
 8001d52:	687a      	ldr	r2, [r7, #4]
 8001d54:	6812      	ldr	r2, [r2, #0]
 8001d56:	430b      	orrs	r3, r1
 8001d58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->XIDFC, FDCAN_XIDFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_XIDFC_LSE_Pos));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d64:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d6c:	041a      	lsls	r2, r3, #16
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	430a      	orrs	r2, r1
 8001d74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Rx FIFO 0 start address */
  StartAddress += (hfdcan->Init.ExtFiltersNbr * 2U);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	68ba      	ldr	r2, [r7, #8]
 8001d80:	4413      	add	r3, r2
 8001d82:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0SA, (StartAddress << FDCAN_RXF0C_F0SA_Pos));
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8001d8c:	4b86      	ldr	r3, [pc, #536]	; (8001fa8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001d8e:	4013      	ands	r3, r2
 8001d90:	68ba      	ldr	r2, [r7, #8]
 8001d92:	0091      	lsls	r1, r2, #2
 8001d94:	687a      	ldr	r2, [r7, #4]
 8001d96:	6812      	ldr	r2, [r2, #0]
 8001d98:	430b      	orrs	r3, r1
 8001d9a:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

  /* Rx FIFO 0 elements number */
  MODIFY_REG(hfdcan->Instance->RXF0C, FDCAN_RXF0C_F0S, (hfdcan->Init.RxFifo0ElmtsNbr << FDCAN_RXF0C_F0S_Pos));
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8001da6:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dae:	041a      	lsls	r2, r3, #16
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	430a      	orrs	r2, r1
 8001db6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

  /* Rx FIFO 1 start address */
  StartAddress += (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dbe:	687a      	ldr	r2, [r7, #4]
 8001dc0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001dc2:	fb02 f303 	mul.w	r3, r2, r3
 8001dc6:	68ba      	ldr	r2, [r7, #8]
 8001dc8:	4413      	add	r3, r2
 8001dca:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1SA, (StartAddress << FDCAN_RXF1C_F1SA_Pos));
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001dd4:	4b74      	ldr	r3, [pc, #464]	; (8001fa8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	68ba      	ldr	r2, [r7, #8]
 8001dda:	0091      	lsls	r1, r2, #2
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	6812      	ldr	r2, [r2, #0]
 8001de0:	430b      	orrs	r3, r1
 8001de2:	f8c2 30b0 	str.w	r3, [r2, #176]	; 0xb0

  /* Rx FIFO 1 elements number */
  MODIFY_REG(hfdcan->Instance->RXF1C, FDCAN_RXF1C_F1S, (hfdcan->Init.RxFifo1ElmtsNbr << FDCAN_RXF1C_F1S_Pos));
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8001dee:	f423 01fe 	bic.w	r1, r3, #8323072	; 0x7f0000
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001df6:	041a      	lsls	r2, r3, #16
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0

  /* Rx buffer list start address */
  StartAddress += (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001e0a:	fb02 f303 	mul.w	r3, r2, r3
 8001e0e:	68ba      	ldr	r2, [r7, #8]
 8001e10:	4413      	add	r3, r2
 8001e12:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->RXBC, FDCAN_RXBC_RBSA, (StartAddress << FDCAN_RXBC_RBSA_Pos));
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f8d3 20ac 	ldr.w	r2, [r3, #172]	; 0xac
 8001e1c:	4b62      	ldr	r3, [pc, #392]	; (8001fa8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e1e:	4013      	ands	r3, r2
 8001e20:	68ba      	ldr	r2, [r7, #8]
 8001e22:	0091      	lsls	r1, r2, #2
 8001e24:	687a      	ldr	r2, [r7, #4]
 8001e26:	6812      	ldr	r2, [r2, #0]
 8001e28:	430b      	orrs	r3, r1
 8001e2a:	f8c2 30ac 	str.w	r3, [r2, #172]	; 0xac

  /* Tx event FIFO start address */
  StartAddress += (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	6d52      	ldr	r2, [r2, #84]	; 0x54
 8001e36:	fb02 f303 	mul.w	r3, r2, r3
 8001e3a:	68ba      	ldr	r2, [r7, #8]
 8001e3c:	4413      	add	r3, r2
 8001e3e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFSA, (StartAddress << FDCAN_TXEFC_EFSA_Pos));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001e48:	4b57      	ldr	r3, [pc, #348]	; (8001fa8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	68ba      	ldr	r2, [r7, #8]
 8001e4e:	0091      	lsls	r1, r2, #2
 8001e50:	687a      	ldr	r2, [r7, #4]
 8001e52:	6812      	ldr	r2, [r2, #0]
 8001e54:	430b      	orrs	r3, r1
 8001e56:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0

  /* Tx event FIFO elements number */
  MODIFY_REG(hfdcan->Instance->TXEFC, FDCAN_TXEFC_EFS, (hfdcan->Init.TxEventsNbr << FDCAN_TXEFC_EFS_Pos));
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8001e62:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e6a:	041a      	lsls	r2, r3, #16
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	430a      	orrs	r2, r1
 8001e72:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0

  /* Tx buffer list start address */
  StartAddress += (hfdcan->Init.TxEventsNbr * 2U);
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	68ba      	ldr	r2, [r7, #8]
 8001e7e:	4413      	add	r3, r2
 8001e80:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TBSA, (StartAddress << FDCAN_TXBC_TBSA_Pos));
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001e8a:	4b47      	ldr	r3, [pc, #284]	; (8001fa8 <FDCAN_CalcultateRamBlockAddresses+0x2b4>)
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	68ba      	ldr	r2, [r7, #8]
 8001e90:	0091      	lsls	r1, r2, #2
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	6812      	ldr	r2, [r2, #0]
 8001e96:	430b      	orrs	r3, r1
 8001e98:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0

  /* Dedicated Tx buffers number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_NDTB, (hfdcan->Init.TxBuffersNbr << FDCAN_TXBC_NDTB_Pos));
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001ea4:	f423 117c 	bic.w	r1, r3, #4128768	; 0x3f0000
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eac:	041a      	lsls	r2, r3, #16
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Tx FIFO/queue elements number */
  MODIFY_REG(hfdcan->Instance->TXBC, FDCAN_TXBC_TFQS, (hfdcan->Init.TxFifoQueueElmtsNbr << FDCAN_TXBC_TFQS_Pos));
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001ec0:	f023 517c 	bic.w	r1, r3, #1056964608	; 0x3f000000
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ec8:	061a      	lsls	r2, r3, #24
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	430a      	orrs	r2, r1
 8001ed0:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  hfdcan->msgRam.StandardFilterSA = SRAMCAN_BASE + (hfdcan->Init.MessageRAMOffset * 4U);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001ed8:	4b34      	ldr	r3, [pc, #208]	; (8001fac <FDCAN_CalcultateRamBlockAddresses+0x2b8>)
 8001eda:	4413      	add	r3, r2
 8001edc:	009a      	lsls	r2, r3, #2
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	66da      	str	r2, [r3, #108]	; 0x6c
  hfdcan->msgRam.ExtendedFilterSA = hfdcan->msgRam.StandardFilterSA + (hfdcan->Init.StdFiltersNbr * 4U);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eea:	009b      	lsls	r3, r3, #2
 8001eec:	441a      	add	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	671a      	str	r2, [r3, #112]	; 0x70
  hfdcan->msgRam.RxFIFO0SA = hfdcan->msgRam.ExtendedFilterSA + (hfdcan->Init.ExtFiltersNbr * 2U * 4U);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001efa:	00db      	lsls	r3, r3, #3
 8001efc:	441a      	add	r2, r3
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	675a      	str	r2, [r3, #116]	; 0x74
  hfdcan->msgRam.RxFIFO1SA = hfdcan->msgRam.RxFIFO0SA + (hfdcan->Init.RxFifo0ElmtsNbr * hfdcan->Init.RxFifo0ElmtSize * 4U);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f0a:	6879      	ldr	r1, [r7, #4]
 8001f0c:	6c49      	ldr	r1, [r1, #68]	; 0x44
 8001f0e:	fb01 f303 	mul.w	r3, r1, r3
 8001f12:	009b      	lsls	r3, r3, #2
 8001f14:	441a      	add	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	679a      	str	r2, [r3, #120]	; 0x78
  hfdcan->msgRam.RxBufferSA = hfdcan->msgRam.RxFIFO1SA + (hfdcan->Init.RxFifo1ElmtsNbr * hfdcan->Init.RxFifo1ElmtSize * 4U);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f22:	6879      	ldr	r1, [r7, #4]
 8001f24:	6cc9      	ldr	r1, [r1, #76]	; 0x4c
 8001f26:	fb01 f303 	mul.w	r3, r1, r3
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	441a      	add	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	67da      	str	r2, [r3, #124]	; 0x7c
  hfdcan->msgRam.TxEventFIFOSA = hfdcan->msgRam.RxBufferSA + (hfdcan->Init.RxBuffersNbr * hfdcan->Init.RxBufferSize * 4U);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f3a:	6879      	ldr	r1, [r7, #4]
 8001f3c:	6d49      	ldr	r1, [r1, #84]	; 0x54
 8001f3e:	fb01 f303 	mul.w	r3, r1, r3
 8001f42:	009b      	lsls	r3, r3, #2
 8001f44:	441a      	add	r2, r3
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  hfdcan->msgRam.TxBufferSA = hfdcan->msgRam.TxEventFIFOSA + (hfdcan->Init.TxEventsNbr * 2U * 4U);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	441a      	add	r2, r3
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  hfdcan->msgRam.TxFIFOQSA = hfdcan->msgRam.TxBufferSA + (hfdcan->Init.TxBuffersNbr * hfdcan->Init.TxElmtSize * 4U);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f6a:	6879      	ldr	r1, [r7, #4]
 8001f6c:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001f6e:	fb01 f303 	mul.w	r3, r1, r3
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	441a      	add	r2, r3
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  hfdcan->msgRam.EndAddress = hfdcan->msgRam.TxFIFOQSA + (hfdcan->Init.TxFifoQueueElmtsNbr * hfdcan->Init.TxElmtSize * 4U);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	6e89      	ldr	r1, [r1, #104]	; 0x68
 8001f8a:	fb01 f303 	mul.w	r3, r1, r3
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	441a      	add	r2, r3
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  if (hfdcan->msgRam.EndAddress > FDCAN_MESSAGE_RAM_END_ADDRESS) /* Last address of the Message RAM */
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f9e:	4a04      	ldr	r2, [pc, #16]	; (8001fb0 <FDCAN_CalcultateRamBlockAddresses+0x2bc>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d915      	bls.n	8001fd0 <FDCAN_CalcultateRamBlockAddresses+0x2dc>
 8001fa4:	e006      	b.n	8001fb4 <FDCAN_CalcultateRamBlockAddresses+0x2c0>
 8001fa6:	bf00      	nop
 8001fa8:	ffff0003 	.word	0xffff0003
 8001fac:	10002b00 	.word	0x10002b00
 8001fb0:	4000d3fc 	.word	0x4000d3fc
  {
    /* Update error code.
       Message RAM overflow */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_PARAM;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8001fba:	f043 0220 	orr.w	r2, r3, #32
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

    /* Change FDCAN state */
    hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2203      	movs	r2, #3
 8001fc8:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98

    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e010      	b.n	8001ff2 <FDCAN_CalcultateRamBlockAddresses+0x2fe>
  }
  else
  {
    /* Flush the allocated Message RAM area */
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fd4:	60fb      	str	r3, [r7, #12]
 8001fd6:	e005      	b.n	8001fe4 <FDCAN_CalcultateRamBlockAddresses+0x2f0>
    {
      *(uint32_t *)(RAMcounter) = 0x00000000;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	2200      	movs	r2, #0
 8001fdc:	601a      	str	r2, [r3, #0]
    for (RAMcounter = hfdcan->msgRam.StandardFilterSA; RAMcounter < hfdcan->msgRam.EndAddress; RAMcounter += 4U)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	60fb      	str	r3, [r7, #12]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fea:	68fa      	ldr	r2, [r7, #12]
 8001fec:	429a      	cmp	r2, r3
 8001fee:	d3f3      	bcc.n	8001fd8 <FDCAN_CalcultateRamBlockAddresses+0x2e4>
    }
  }

  /* Return function status */
  return HAL_OK;
 8001ff0:	2300      	movs	r3, #0
}
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3714      	adds	r7, #20
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffc:	4770      	bx	lr
 8001ffe:	bf00      	nop

08002000 <FDCAN_CopyMessageToRAM>:
  * @param  pTxData pointer to a buffer containing the payload of the Tx frame.
  * @param  BufferIndex index of the buffer to be configured.
  * @retval HAL status
 */
static void FDCAN_CopyMessageToRAM(FDCAN_HandleTypeDef *hfdcan, FDCAN_TxHeaderTypeDef *pTxHeader, uint8_t *pTxData, uint32_t BufferIndex)
{
 8002000:	b480      	push	{r7}
 8002002:	b089      	sub	sp, #36	; 0x24
 8002004:	af00      	add	r7, sp, #0
 8002006:	60f8      	str	r0, [r7, #12]
 8002008:	60b9      	str	r1, [r7, #8]
 800200a:	607a      	str	r2, [r7, #4]
 800200c:	603b      	str	r3, [r7, #0]
  uint32_t TxElementW2;
  uint32_t *TxAddress;
  uint32_t ByteCounter;

  /* Build first word of Tx header element */
  if (pTxHeader->IdType == FDCAN_STANDARD_ID)
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b00      	cmp	r3, #0
 8002014:	d10a      	bne.n	800202c <FDCAN_CopyMessageToRAM+0x2c>
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002016:	68bb      	ldr	r3, [r7, #8]
 8002018:	691a      	ldr	r2, [r3, #16]
                   FDCAN_STANDARD_ID |
                   pTxHeader->TxFrameType |
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	689b      	ldr	r3, [r3, #8]
                   FDCAN_STANDARD_ID |
 800201e:	431a      	orrs	r2, r3
                   (pTxHeader->Identifier << 18));
 8002020:	68bb      	ldr	r3, [r7, #8]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	049b      	lsls	r3, r3, #18
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 8002026:	4313      	orrs	r3, r2
 8002028:	61fb      	str	r3, [r7, #28]
 800202a:	e00a      	b.n	8002042 <FDCAN_CopyMessageToRAM+0x42>
  }
  else /* pTxHeader->IdType == FDCAN_EXTENDED_ID */
  {
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800202c:	68bb      	ldr	r3, [r7, #8]
 800202e:	691a      	ldr	r2, [r3, #16]
                   FDCAN_EXTENDED_ID |
                   pTxHeader->TxFrameType |
 8002030:	68bb      	ldr	r3, [r7, #8]
 8002032:	689b      	ldr	r3, [r3, #8]
                   FDCAN_EXTENDED_ID |
 8002034:	431a      	orrs	r2, r3
                   pTxHeader->Identifier);
 8002036:	68bb      	ldr	r3, [r7, #8]
 8002038:	681b      	ldr	r3, [r3, #0]
                   pTxHeader->TxFrameType |
 800203a:	4313      	orrs	r3, r2
    TxElementW1 = (pTxHeader->ErrorStateIndicator |
 800203c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002040:	61fb      	str	r3, [r7, #28]
  }

  /* Build second word of Tx header element */
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	6a1b      	ldr	r3, [r3, #32]
 8002046:	061a      	lsls	r2, r3, #24
                 pTxHeader->TxEventFifoControl |
 8002048:	68bb      	ldr	r3, [r7, #8]
 800204a:	69db      	ldr	r3, [r3, #28]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800204c:	431a      	orrs	r2, r3
                 pTxHeader->FDFormat |
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	699b      	ldr	r3, [r3, #24]
                 pTxHeader->TxEventFifoControl |
 8002052:	431a      	orrs	r2, r3
                 pTxHeader->BitRateSwitch |
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	695b      	ldr	r3, [r3, #20]
                 pTxHeader->FDFormat |
 8002058:	431a      	orrs	r2, r3
                 pTxHeader->DataLength);
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	68db      	ldr	r3, [r3, #12]
  TxElementW2 = ((pTxHeader->MessageMarker << 24) |
 800205e:	4313      	orrs	r3, r2
 8002060:	613b      	str	r3, [r7, #16]

  /* Calculate Tx element address */
  TxAddress = (uint32_t *)(hfdcan->msgRam.TxBufferSA + (BufferIndex * hfdcan->Init.TxElmtSize * 4U));
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800206c:	6839      	ldr	r1, [r7, #0]
 800206e:	fb01 f303 	mul.w	r3, r1, r3
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	4413      	add	r3, r2
 8002076:	61bb      	str	r3, [r7, #24]

  /* Write Tx element header to the message RAM */
  *TxAddress = TxElementW1;
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	69fa      	ldr	r2, [r7, #28]
 800207c:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800207e:	69bb      	ldr	r3, [r7, #24]
 8002080:	3304      	adds	r3, #4
 8002082:	61bb      	str	r3, [r7, #24]
  *TxAddress = TxElementW2;
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	693a      	ldr	r2, [r7, #16]
 8002088:	601a      	str	r2, [r3, #0]
  TxAddress++;
 800208a:	69bb      	ldr	r3, [r7, #24]
 800208c:	3304      	adds	r3, #4
 800208e:	61bb      	str	r3, [r7, #24]

  /* Write Tx payload to the message RAM */
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 8002090:	2300      	movs	r3, #0
 8002092:	617b      	str	r3, [r7, #20]
 8002094:	e020      	b.n	80020d8 <FDCAN_CopyMessageToRAM+0xd8>
  {
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 8002096:	697b      	ldr	r3, [r7, #20]
 8002098:	3303      	adds	r3, #3
 800209a:	687a      	ldr	r2, [r7, #4]
 800209c:	4413      	add	r3, r2
 800209e:	781b      	ldrb	r3, [r3, #0]
 80020a0:	061a      	lsls	r2, r3, #24
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	3302      	adds	r3, #2
 80020a6:	6879      	ldr	r1, [r7, #4]
 80020a8:	440b      	add	r3, r1
 80020aa:	781b      	ldrb	r3, [r3, #0]
 80020ac:	041b      	lsls	r3, r3, #16
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80020ae:	431a      	orrs	r2, r3
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	3301      	adds	r3, #1
 80020b4:	6879      	ldr	r1, [r7, #4]
 80020b6:	440b      	add	r3, r1
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	021b      	lsls	r3, r3, #8
                  ((uint32_t)pTxData[ByteCounter + 2U] << 16) |
 80020bc:	4313      	orrs	r3, r2
                  (uint32_t)pTxData[ByteCounter]);
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	697a      	ldr	r2, [r7, #20]
 80020c2:	440a      	add	r2, r1
 80020c4:	7812      	ldrb	r2, [r2, #0]
                  ((uint32_t)pTxData[ByteCounter + 1U] << 8) |
 80020c6:	431a      	orrs	r2, r3
    *TxAddress = (((uint32_t)pTxData[ByteCounter + 3U] << 24) |
 80020c8:	69bb      	ldr	r3, [r7, #24]
 80020ca:	601a      	str	r2, [r3, #0]
    TxAddress++;
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	3304      	adds	r3, #4
 80020d0:	61bb      	str	r3, [r7, #24]
  for (ByteCounter = 0; ByteCounter < DLCtoBytes[pTxHeader->DataLength >> 16]; ByteCounter += 4U)
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	3304      	adds	r3, #4
 80020d6:	617b      	str	r3, [r7, #20]
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	0c1b      	lsrs	r3, r3, #16
 80020de:	4a06      	ldr	r2, [pc, #24]	; (80020f8 <FDCAN_CopyMessageToRAM+0xf8>)
 80020e0:	5cd3      	ldrb	r3, [r2, r3]
 80020e2:	461a      	mov	r2, r3
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d3d5      	bcc.n	8002096 <FDCAN_CopyMessageToRAM+0x96>
  }
}
 80020ea:	bf00      	nop
 80020ec:	bf00      	nop
 80020ee:	3724      	adds	r7, #36	; 0x24
 80020f0:	46bd      	mov	sp, r7
 80020f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f6:	4770      	bx	lr
 80020f8:	08004bd8 	.word	0x08004bd8

080020fc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b089      	sub	sp, #36	; 0x24
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002106:	2300      	movs	r3, #0
 8002108:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800210a:	4b89      	ldr	r3, [pc, #548]	; (8002330 <HAL_GPIO_Init+0x234>)
 800210c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800210e:	e194      	b.n	800243a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	2101      	movs	r1, #1
 8002116:	69fb      	ldr	r3, [r7, #28]
 8002118:	fa01 f303 	lsl.w	r3, r1, r3
 800211c:	4013      	ands	r3, r2
 800211e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002120:	693b      	ldr	r3, [r7, #16]
 8002122:	2b00      	cmp	r3, #0
 8002124:	f000 8186 	beq.w	8002434 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	f003 0303 	and.w	r3, r3, #3
 8002130:	2b01      	cmp	r3, #1
 8002132:	d005      	beq.n	8002140 <HAL_GPIO_Init+0x44>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	685b      	ldr	r3, [r3, #4]
 8002138:	f003 0303 	and.w	r3, r3, #3
 800213c:	2b02      	cmp	r3, #2
 800213e:	d130      	bne.n	80021a2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	689b      	ldr	r3, [r3, #8]
 8002144:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002146:	69fb      	ldr	r3, [r7, #28]
 8002148:	005b      	lsls	r3, r3, #1
 800214a:	2203      	movs	r2, #3
 800214c:	fa02 f303 	lsl.w	r3, r2, r3
 8002150:	43db      	mvns	r3, r3
 8002152:	69ba      	ldr	r2, [r7, #24]
 8002154:	4013      	ands	r3, r2
 8002156:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	68da      	ldr	r2, [r3, #12]
 800215c:	69fb      	ldr	r3, [r7, #28]
 800215e:	005b      	lsls	r3, r3, #1
 8002160:	fa02 f303 	lsl.w	r3, r2, r3
 8002164:	69ba      	ldr	r2, [r7, #24]
 8002166:	4313      	orrs	r3, r2
 8002168:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	69ba      	ldr	r2, [r7, #24]
 800216e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002176:	2201      	movs	r2, #1
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	fa02 f303 	lsl.w	r3, r2, r3
 800217e:	43db      	mvns	r3, r3
 8002180:	69ba      	ldr	r2, [r7, #24]
 8002182:	4013      	ands	r3, r2
 8002184:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	685b      	ldr	r3, [r3, #4]
 800218a:	091b      	lsrs	r3, r3, #4
 800218c:	f003 0201 	and.w	r2, r3, #1
 8002190:	69fb      	ldr	r3, [r7, #28]
 8002192:	fa02 f303 	lsl.w	r3, r2, r3
 8002196:	69ba      	ldr	r2, [r7, #24]
 8002198:	4313      	orrs	r3, r2
 800219a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	69ba      	ldr	r2, [r7, #24]
 80021a0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f003 0303 	and.w	r3, r3, #3
 80021aa:	2b03      	cmp	r3, #3
 80021ac:	d017      	beq.n	80021de <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80021b4:	69fb      	ldr	r3, [r7, #28]
 80021b6:	005b      	lsls	r3, r3, #1
 80021b8:	2203      	movs	r2, #3
 80021ba:	fa02 f303 	lsl.w	r3, r2, r3
 80021be:	43db      	mvns	r3, r3
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	4013      	ands	r3, r2
 80021c4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	689a      	ldr	r2, [r3, #8]
 80021ca:	69fb      	ldr	r3, [r7, #28]
 80021cc:	005b      	lsls	r3, r3, #1
 80021ce:	fa02 f303 	lsl.w	r3, r2, r3
 80021d2:	69ba      	ldr	r2, [r7, #24]
 80021d4:	4313      	orrs	r3, r2
 80021d6:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	69ba      	ldr	r2, [r7, #24]
 80021dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	f003 0303 	and.w	r3, r3, #3
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d123      	bne.n	8002232 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	08da      	lsrs	r2, r3, #3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	3208      	adds	r2, #8
 80021f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80021f8:	69fb      	ldr	r3, [r7, #28]
 80021fa:	f003 0307 	and.w	r3, r3, #7
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	220f      	movs	r2, #15
 8002202:	fa02 f303 	lsl.w	r3, r2, r3
 8002206:	43db      	mvns	r3, r3
 8002208:	69ba      	ldr	r2, [r7, #24]
 800220a:	4013      	ands	r3, r2
 800220c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	691a      	ldr	r2, [r3, #16]
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	f003 0307 	and.w	r3, r3, #7
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	fa02 f303 	lsl.w	r3, r2, r3
 800221e:	69ba      	ldr	r2, [r7, #24]
 8002220:	4313      	orrs	r3, r2
 8002222:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	08da      	lsrs	r2, r3, #3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	3208      	adds	r2, #8
 800222c:	69b9      	ldr	r1, [r7, #24]
 800222e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002238:	69fb      	ldr	r3, [r7, #28]
 800223a:	005b      	lsls	r3, r3, #1
 800223c:	2203      	movs	r2, #3
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	43db      	mvns	r3, r3
 8002244:	69ba      	ldr	r2, [r7, #24]
 8002246:	4013      	ands	r3, r2
 8002248:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f003 0203 	and.w	r2, r3, #3
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	fa02 f303 	lsl.w	r3, r2, r3
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	4313      	orrs	r3, r2
 800225e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800226e:	2b00      	cmp	r3, #0
 8002270:	f000 80e0 	beq.w	8002434 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002274:	4b2f      	ldr	r3, [pc, #188]	; (8002334 <HAL_GPIO_Init+0x238>)
 8002276:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800227a:	4a2e      	ldr	r2, [pc, #184]	; (8002334 <HAL_GPIO_Init+0x238>)
 800227c:	f043 0302 	orr.w	r3, r3, #2
 8002280:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002284:	4b2b      	ldr	r3, [pc, #172]	; (8002334 <HAL_GPIO_Init+0x238>)
 8002286:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	60fb      	str	r3, [r7, #12]
 8002290:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002292:	4a29      	ldr	r2, [pc, #164]	; (8002338 <HAL_GPIO_Init+0x23c>)
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	089b      	lsrs	r3, r3, #2
 8002298:	3302      	adds	r3, #2
 800229a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800229e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80022a0:	69fb      	ldr	r3, [r7, #28]
 80022a2:	f003 0303 	and.w	r3, r3, #3
 80022a6:	009b      	lsls	r3, r3, #2
 80022a8:	220f      	movs	r2, #15
 80022aa:	fa02 f303 	lsl.w	r3, r2, r3
 80022ae:	43db      	mvns	r3, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4013      	ands	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	4a20      	ldr	r2, [pc, #128]	; (800233c <HAL_GPIO_Init+0x240>)
 80022ba:	4293      	cmp	r3, r2
 80022bc:	d052      	beq.n	8002364 <HAL_GPIO_Init+0x268>
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4a1f      	ldr	r2, [pc, #124]	; (8002340 <HAL_GPIO_Init+0x244>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d031      	beq.n	800232a <HAL_GPIO_Init+0x22e>
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	4a1e      	ldr	r2, [pc, #120]	; (8002344 <HAL_GPIO_Init+0x248>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d02b      	beq.n	8002326 <HAL_GPIO_Init+0x22a>
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	4a1d      	ldr	r2, [pc, #116]	; (8002348 <HAL_GPIO_Init+0x24c>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d025      	beq.n	8002322 <HAL_GPIO_Init+0x226>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	4a1c      	ldr	r2, [pc, #112]	; (800234c <HAL_GPIO_Init+0x250>)
 80022da:	4293      	cmp	r3, r2
 80022dc:	d01f      	beq.n	800231e <HAL_GPIO_Init+0x222>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	4a1b      	ldr	r2, [pc, #108]	; (8002350 <HAL_GPIO_Init+0x254>)
 80022e2:	4293      	cmp	r3, r2
 80022e4:	d019      	beq.n	800231a <HAL_GPIO_Init+0x21e>
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	4a1a      	ldr	r2, [pc, #104]	; (8002354 <HAL_GPIO_Init+0x258>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d013      	beq.n	8002316 <HAL_GPIO_Init+0x21a>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4a19      	ldr	r2, [pc, #100]	; (8002358 <HAL_GPIO_Init+0x25c>)
 80022f2:	4293      	cmp	r3, r2
 80022f4:	d00d      	beq.n	8002312 <HAL_GPIO_Init+0x216>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	4a18      	ldr	r2, [pc, #96]	; (800235c <HAL_GPIO_Init+0x260>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d007      	beq.n	800230e <HAL_GPIO_Init+0x212>
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	4a17      	ldr	r2, [pc, #92]	; (8002360 <HAL_GPIO_Init+0x264>)
 8002302:	4293      	cmp	r3, r2
 8002304:	d101      	bne.n	800230a <HAL_GPIO_Init+0x20e>
 8002306:	2309      	movs	r3, #9
 8002308:	e02d      	b.n	8002366 <HAL_GPIO_Init+0x26a>
 800230a:	230a      	movs	r3, #10
 800230c:	e02b      	b.n	8002366 <HAL_GPIO_Init+0x26a>
 800230e:	2308      	movs	r3, #8
 8002310:	e029      	b.n	8002366 <HAL_GPIO_Init+0x26a>
 8002312:	2307      	movs	r3, #7
 8002314:	e027      	b.n	8002366 <HAL_GPIO_Init+0x26a>
 8002316:	2306      	movs	r3, #6
 8002318:	e025      	b.n	8002366 <HAL_GPIO_Init+0x26a>
 800231a:	2305      	movs	r3, #5
 800231c:	e023      	b.n	8002366 <HAL_GPIO_Init+0x26a>
 800231e:	2304      	movs	r3, #4
 8002320:	e021      	b.n	8002366 <HAL_GPIO_Init+0x26a>
 8002322:	2303      	movs	r3, #3
 8002324:	e01f      	b.n	8002366 <HAL_GPIO_Init+0x26a>
 8002326:	2302      	movs	r3, #2
 8002328:	e01d      	b.n	8002366 <HAL_GPIO_Init+0x26a>
 800232a:	2301      	movs	r3, #1
 800232c:	e01b      	b.n	8002366 <HAL_GPIO_Init+0x26a>
 800232e:	bf00      	nop
 8002330:	58000080 	.word	0x58000080
 8002334:	58024400 	.word	0x58024400
 8002338:	58000400 	.word	0x58000400
 800233c:	58020000 	.word	0x58020000
 8002340:	58020400 	.word	0x58020400
 8002344:	58020800 	.word	0x58020800
 8002348:	58020c00 	.word	0x58020c00
 800234c:	58021000 	.word	0x58021000
 8002350:	58021400 	.word	0x58021400
 8002354:	58021800 	.word	0x58021800
 8002358:	58021c00 	.word	0x58021c00
 800235c:	58022000 	.word	0x58022000
 8002360:	58022400 	.word	0x58022400
 8002364:	2300      	movs	r3, #0
 8002366:	69fa      	ldr	r2, [r7, #28]
 8002368:	f002 0203 	and.w	r2, r2, #3
 800236c:	0092      	lsls	r2, r2, #2
 800236e:	4093      	lsls	r3, r2
 8002370:	69ba      	ldr	r2, [r7, #24]
 8002372:	4313      	orrs	r3, r2
 8002374:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002376:	4938      	ldr	r1, [pc, #224]	; (8002458 <HAL_GPIO_Init+0x35c>)
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	089b      	lsrs	r3, r3, #2
 800237c:	3302      	adds	r3, #2
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002384:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	43db      	mvns	r3, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4013      	ands	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	685b      	ldr	r3, [r3, #4]
 800239a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80023aa:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023ae:	69bb      	ldr	r3, [r7, #24]
 80023b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80023b2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	43db      	mvns	r3, r3
 80023be:	69ba      	ldr	r2, [r7, #24]
 80023c0:	4013      	ands	r3, r2
 80023c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d003      	beq.n	80023d8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	693b      	ldr	r3, [r7, #16]
 80023d4:	4313      	orrs	r3, r2
 80023d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 80023d8:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 80023dc:	69bb      	ldr	r3, [r7, #24]
 80023de:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	685b      	ldr	r3, [r3, #4]
 80023e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80023e6:	693b      	ldr	r3, [r7, #16]
 80023e8:	43db      	mvns	r3, r3
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4013      	ands	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d003      	beq.n	8002404 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	693b      	ldr	r3, [r7, #16]
 8002400:	4313      	orrs	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	43db      	mvns	r3, r3
 8002414:	69ba      	ldr	r2, [r7, #24]
 8002416:	4013      	ands	r3, r2
 8002418:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d003      	beq.n	800242e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	4313      	orrs	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800242e:	697b      	ldr	r3, [r7, #20]
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	3301      	adds	r3, #1
 8002438:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800243a:	683b      	ldr	r3, [r7, #0]
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	69fb      	ldr	r3, [r7, #28]
 8002440:	fa22 f303 	lsr.w	r3, r2, r3
 8002444:	2b00      	cmp	r3, #0
 8002446:	f47f ae63 	bne.w	8002110 <HAL_GPIO_Init+0x14>
  }
}
 800244a:	bf00      	nop
 800244c:	bf00      	nop
 800244e:	3724      	adds	r7, #36	; 0x24
 8002450:	46bd      	mov	sp, r7
 8002452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002456:	4770      	bx	lr
 8002458:	58000400 	.word	0x58000400

0800245c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
 8002464:	460b      	mov	r3, r1
 8002466:	807b      	strh	r3, [r7, #2]
 8002468:	4613      	mov	r3, r2
 800246a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800246c:	787b      	ldrb	r3, [r7, #1]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002472:	887a      	ldrh	r2, [r7, #2]
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002478:	e003      	b.n	8002482 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800247a:	887b      	ldrh	r3, [r7, #2]
 800247c:	041a      	lsls	r2, r3, #16
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	619a      	str	r2, [r3, #24]
}
 8002482:	bf00      	nop
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800248e:	b480      	push	{r7}
 8002490:	b085      	sub	sp, #20
 8002492:	af00      	add	r7, sp, #0
 8002494:	6078      	str	r0, [r7, #4]
 8002496:	460b      	mov	r3, r1
 8002498:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80024a0:	887a      	ldrh	r2, [r7, #2]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	4013      	ands	r3, r2
 80024a6:	041a      	lsls	r2, r3, #16
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	43d9      	mvns	r1, r3
 80024ac:	887b      	ldrh	r3, [r7, #2]
 80024ae:	400b      	ands	r3, r1
 80024b0:	431a      	orrs	r2, r3
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	619a      	str	r2, [r3, #24]
}
 80024b6:	bf00      	nop
 80024b8:	3714      	adds	r7, #20
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
	...

080024c4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b084      	sub	sp, #16
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80024cc:	4b19      	ldr	r3, [pc, #100]	; (8002534 <HAL_PWREx_ConfigSupply+0x70>)
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	2b04      	cmp	r3, #4
 80024d6:	d00a      	beq.n	80024ee <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80024d8:	4b16      	ldr	r3, [pc, #88]	; (8002534 <HAL_PWREx_ConfigSupply+0x70>)
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	f003 0307 	and.w	r3, r3, #7
 80024e0:	687a      	ldr	r2, [r7, #4]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	d001      	beq.n	80024ea <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e01f      	b.n	800252a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 80024ea:	2300      	movs	r3, #0
 80024ec:	e01d      	b.n	800252a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 80024ee:	4b11      	ldr	r3, [pc, #68]	; (8002534 <HAL_PWREx_ConfigSupply+0x70>)
 80024f0:	68db      	ldr	r3, [r3, #12]
 80024f2:	f023 0207 	bic.w	r2, r3, #7
 80024f6:	490f      	ldr	r1, [pc, #60]	; (8002534 <HAL_PWREx_ConfigSupply+0x70>)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	4313      	orrs	r3, r2
 80024fc:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 80024fe:	f7fe fae1 	bl	8000ac4 <HAL_GetTick>
 8002502:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002504:	e009      	b.n	800251a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002506:	f7fe fadd 	bl	8000ac4 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002514:	d901      	bls.n	800251a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e007      	b.n	800252a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800251a:	4b06      	ldr	r3, [pc, #24]	; (8002534 <HAL_PWREx_ConfigSupply+0x70>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002522:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002526:	d1ee      	bne.n	8002506 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	58024800 	.word	0x58024800

08002538 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b08c      	sub	sp, #48	; 0x30
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d102      	bne.n	800254c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	f000 bc48 	b.w	8002ddc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	2b00      	cmp	r3, #0
 8002556:	f000 8088 	beq.w	800266a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800255a:	4b99      	ldr	r3, [pc, #612]	; (80027c0 <HAL_RCC_OscConfig+0x288>)
 800255c:	691b      	ldr	r3, [r3, #16]
 800255e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002562:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002564:	4b96      	ldr	r3, [pc, #600]	; (80027c0 <HAL_RCC_OscConfig+0x288>)
 8002566:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002568:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800256a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800256c:	2b10      	cmp	r3, #16
 800256e:	d007      	beq.n	8002580 <HAL_RCC_OscConfig+0x48>
 8002570:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002572:	2b18      	cmp	r3, #24
 8002574:	d111      	bne.n	800259a <HAL_RCC_OscConfig+0x62>
 8002576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002578:	f003 0303 	and.w	r3, r3, #3
 800257c:	2b02      	cmp	r3, #2
 800257e:	d10c      	bne.n	800259a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002580:	4b8f      	ldr	r3, [pc, #572]	; (80027c0 <HAL_RCC_OscConfig+0x288>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d06d      	beq.n	8002668 <HAL_RCC_OscConfig+0x130>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d169      	bne.n	8002668 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	f000 bc21 	b.w	8002ddc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025a2:	d106      	bne.n	80025b2 <HAL_RCC_OscConfig+0x7a>
 80025a4:	4b86      	ldr	r3, [pc, #536]	; (80027c0 <HAL_RCC_OscConfig+0x288>)
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	4a85      	ldr	r2, [pc, #532]	; (80027c0 <HAL_RCC_OscConfig+0x288>)
 80025aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ae:	6013      	str	r3, [r2, #0]
 80025b0:	e02e      	b.n	8002610 <HAL_RCC_OscConfig+0xd8>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	685b      	ldr	r3, [r3, #4]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10c      	bne.n	80025d4 <HAL_RCC_OscConfig+0x9c>
 80025ba:	4b81      	ldr	r3, [pc, #516]	; (80027c0 <HAL_RCC_OscConfig+0x288>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a80      	ldr	r2, [pc, #512]	; (80027c0 <HAL_RCC_OscConfig+0x288>)
 80025c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025c4:	6013      	str	r3, [r2, #0]
 80025c6:	4b7e      	ldr	r3, [pc, #504]	; (80027c0 <HAL_RCC_OscConfig+0x288>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a7d      	ldr	r2, [pc, #500]	; (80027c0 <HAL_RCC_OscConfig+0x288>)
 80025cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	e01d      	b.n	8002610 <HAL_RCC_OscConfig+0xd8>
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	685b      	ldr	r3, [r3, #4]
 80025d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025dc:	d10c      	bne.n	80025f8 <HAL_RCC_OscConfig+0xc0>
 80025de:	4b78      	ldr	r3, [pc, #480]	; (80027c0 <HAL_RCC_OscConfig+0x288>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a77      	ldr	r2, [pc, #476]	; (80027c0 <HAL_RCC_OscConfig+0x288>)
 80025e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025e8:	6013      	str	r3, [r2, #0]
 80025ea:	4b75      	ldr	r3, [pc, #468]	; (80027c0 <HAL_RCC_OscConfig+0x288>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	4a74      	ldr	r2, [pc, #464]	; (80027c0 <HAL_RCC_OscConfig+0x288>)
 80025f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025f4:	6013      	str	r3, [r2, #0]
 80025f6:	e00b      	b.n	8002610 <HAL_RCC_OscConfig+0xd8>
 80025f8:	4b71      	ldr	r3, [pc, #452]	; (80027c0 <HAL_RCC_OscConfig+0x288>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	4a70      	ldr	r2, [pc, #448]	; (80027c0 <HAL_RCC_OscConfig+0x288>)
 80025fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002602:	6013      	str	r3, [r2, #0]
 8002604:	4b6e      	ldr	r3, [pc, #440]	; (80027c0 <HAL_RCC_OscConfig+0x288>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a6d      	ldr	r2, [pc, #436]	; (80027c0 <HAL_RCC_OscConfig+0x288>)
 800260a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800260e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	685b      	ldr	r3, [r3, #4]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d013      	beq.n	8002640 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002618:	f7fe fa54 	bl	8000ac4 <HAL_GetTick>
 800261c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800261e:	e008      	b.n	8002632 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002620:	f7fe fa50 	bl	8000ac4 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	2b64      	cmp	r3, #100	; 0x64
 800262c:	d901      	bls.n	8002632 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800262e:	2303      	movs	r3, #3
 8002630:	e3d4      	b.n	8002ddc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002632:	4b63      	ldr	r3, [pc, #396]	; (80027c0 <HAL_RCC_OscConfig+0x288>)
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263a:	2b00      	cmp	r3, #0
 800263c:	d0f0      	beq.n	8002620 <HAL_RCC_OscConfig+0xe8>
 800263e:	e014      	b.n	800266a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002640:	f7fe fa40 	bl	8000ac4 <HAL_GetTick>
 8002644:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002646:	e008      	b.n	800265a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002648:	f7fe fa3c 	bl	8000ac4 <HAL_GetTick>
 800264c:	4602      	mov	r2, r0
 800264e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002650:	1ad3      	subs	r3, r2, r3
 8002652:	2b64      	cmp	r3, #100	; 0x64
 8002654:	d901      	bls.n	800265a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002656:	2303      	movs	r3, #3
 8002658:	e3c0      	b.n	8002ddc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800265a:	4b59      	ldr	r3, [pc, #356]	; (80027c0 <HAL_RCC_OscConfig+0x288>)
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002662:	2b00      	cmp	r3, #0
 8002664:	d1f0      	bne.n	8002648 <HAL_RCC_OscConfig+0x110>
 8002666:	e000      	b.n	800266a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002668:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0302 	and.w	r3, r3, #2
 8002672:	2b00      	cmp	r3, #0
 8002674:	f000 80ca 	beq.w	800280c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002678:	4b51      	ldr	r3, [pc, #324]	; (80027c0 <HAL_RCC_OscConfig+0x288>)
 800267a:	691b      	ldr	r3, [r3, #16]
 800267c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002680:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002682:	4b4f      	ldr	r3, [pc, #316]	; (80027c0 <HAL_RCC_OscConfig+0x288>)
 8002684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002686:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002688:	6a3b      	ldr	r3, [r7, #32]
 800268a:	2b00      	cmp	r3, #0
 800268c:	d007      	beq.n	800269e <HAL_RCC_OscConfig+0x166>
 800268e:	6a3b      	ldr	r3, [r7, #32]
 8002690:	2b18      	cmp	r3, #24
 8002692:	d156      	bne.n	8002742 <HAL_RCC_OscConfig+0x20a>
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	f003 0303 	and.w	r3, r3, #3
 800269a:	2b00      	cmp	r3, #0
 800269c:	d151      	bne.n	8002742 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800269e:	4b48      	ldr	r3, [pc, #288]	; (80027c0 <HAL_RCC_OscConfig+0x288>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f003 0304 	and.w	r3, r3, #4
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d005      	beq.n	80026b6 <HAL_RCC_OscConfig+0x17e>
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d101      	bne.n	80026b6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80026b2:	2301      	movs	r3, #1
 80026b4:	e392      	b.n	8002ddc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80026b6:	4b42      	ldr	r3, [pc, #264]	; (80027c0 <HAL_RCC_OscConfig+0x288>)
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f023 0219 	bic.w	r2, r3, #25
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	68db      	ldr	r3, [r3, #12]
 80026c2:	493f      	ldr	r1, [pc, #252]	; (80027c0 <HAL_RCC_OscConfig+0x288>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026c8:	f7fe f9fc 	bl	8000ac4 <HAL_GetTick>
 80026cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026ce:	e008      	b.n	80026e2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026d0:	f7fe f9f8 	bl	8000ac4 <HAL_GetTick>
 80026d4:	4602      	mov	r2, r0
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	1ad3      	subs	r3, r2, r3
 80026da:	2b02      	cmp	r3, #2
 80026dc:	d901      	bls.n	80026e2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80026de:	2303      	movs	r3, #3
 80026e0:	e37c      	b.n	8002ddc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80026e2:	4b37      	ldr	r3, [pc, #220]	; (80027c0 <HAL_RCC_OscConfig+0x288>)
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f003 0304 	and.w	r3, r3, #4
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d0f0      	beq.n	80026d0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ee:	f7fe fa19 	bl	8000b24 <HAL_GetREVID>
 80026f2:	4603      	mov	r3, r0
 80026f4:	f241 0203 	movw	r2, #4099	; 0x1003
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d817      	bhi.n	800272c <HAL_RCC_OscConfig+0x1f4>
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	691b      	ldr	r3, [r3, #16]
 8002700:	2b40      	cmp	r3, #64	; 0x40
 8002702:	d108      	bne.n	8002716 <HAL_RCC_OscConfig+0x1de>
 8002704:	4b2e      	ldr	r3, [pc, #184]	; (80027c0 <HAL_RCC_OscConfig+0x288>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800270c:	4a2c      	ldr	r2, [pc, #176]	; (80027c0 <HAL_RCC_OscConfig+0x288>)
 800270e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002712:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002714:	e07a      	b.n	800280c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002716:	4b2a      	ldr	r3, [pc, #168]	; (80027c0 <HAL_RCC_OscConfig+0x288>)
 8002718:	685b      	ldr	r3, [r3, #4]
 800271a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	031b      	lsls	r3, r3, #12
 8002724:	4926      	ldr	r1, [pc, #152]	; (80027c0 <HAL_RCC_OscConfig+0x288>)
 8002726:	4313      	orrs	r3, r2
 8002728:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800272a:	e06f      	b.n	800280c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800272c:	4b24      	ldr	r3, [pc, #144]	; (80027c0 <HAL_RCC_OscConfig+0x288>)
 800272e:	685b      	ldr	r3, [r3, #4]
 8002730:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	061b      	lsls	r3, r3, #24
 800273a:	4921      	ldr	r1, [pc, #132]	; (80027c0 <HAL_RCC_OscConfig+0x288>)
 800273c:	4313      	orrs	r3, r2
 800273e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002740:	e064      	b.n	800280c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d047      	beq.n	80027da <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800274a:	4b1d      	ldr	r3, [pc, #116]	; (80027c0 <HAL_RCC_OscConfig+0x288>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f023 0219 	bic.w	r2, r3, #25
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	491a      	ldr	r1, [pc, #104]	; (80027c0 <HAL_RCC_OscConfig+0x288>)
 8002758:	4313      	orrs	r3, r2
 800275a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800275c:	f7fe f9b2 	bl	8000ac4 <HAL_GetTick>
 8002760:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002762:	e008      	b.n	8002776 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002764:	f7fe f9ae 	bl	8000ac4 <HAL_GetTick>
 8002768:	4602      	mov	r2, r0
 800276a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d901      	bls.n	8002776 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e332      	b.n	8002ddc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002776:	4b12      	ldr	r3, [pc, #72]	; (80027c0 <HAL_RCC_OscConfig+0x288>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0304 	and.w	r3, r3, #4
 800277e:	2b00      	cmp	r3, #0
 8002780:	d0f0      	beq.n	8002764 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002782:	f7fe f9cf 	bl	8000b24 <HAL_GetREVID>
 8002786:	4603      	mov	r3, r0
 8002788:	f241 0203 	movw	r2, #4099	; 0x1003
 800278c:	4293      	cmp	r3, r2
 800278e:	d819      	bhi.n	80027c4 <HAL_RCC_OscConfig+0x28c>
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	691b      	ldr	r3, [r3, #16]
 8002794:	2b40      	cmp	r3, #64	; 0x40
 8002796:	d108      	bne.n	80027aa <HAL_RCC_OscConfig+0x272>
 8002798:	4b09      	ldr	r3, [pc, #36]	; (80027c0 <HAL_RCC_OscConfig+0x288>)
 800279a:	685b      	ldr	r3, [r3, #4]
 800279c:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80027a0:	4a07      	ldr	r2, [pc, #28]	; (80027c0 <HAL_RCC_OscConfig+0x288>)
 80027a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027a6:	6053      	str	r3, [r2, #4]
 80027a8:	e030      	b.n	800280c <HAL_RCC_OscConfig+0x2d4>
 80027aa:	4b05      	ldr	r3, [pc, #20]	; (80027c0 <HAL_RCC_OscConfig+0x288>)
 80027ac:	685b      	ldr	r3, [r3, #4]
 80027ae:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	691b      	ldr	r3, [r3, #16]
 80027b6:	031b      	lsls	r3, r3, #12
 80027b8:	4901      	ldr	r1, [pc, #4]	; (80027c0 <HAL_RCC_OscConfig+0x288>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	604b      	str	r3, [r1, #4]
 80027be:	e025      	b.n	800280c <HAL_RCC_OscConfig+0x2d4>
 80027c0:	58024400 	.word	0x58024400
 80027c4:	4b9a      	ldr	r3, [pc, #616]	; (8002a30 <HAL_RCC_OscConfig+0x4f8>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	691b      	ldr	r3, [r3, #16]
 80027d0:	061b      	lsls	r3, r3, #24
 80027d2:	4997      	ldr	r1, [pc, #604]	; (8002a30 <HAL_RCC_OscConfig+0x4f8>)
 80027d4:	4313      	orrs	r3, r2
 80027d6:	604b      	str	r3, [r1, #4]
 80027d8:	e018      	b.n	800280c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027da:	4b95      	ldr	r3, [pc, #596]	; (8002a30 <HAL_RCC_OscConfig+0x4f8>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	4a94      	ldr	r2, [pc, #592]	; (8002a30 <HAL_RCC_OscConfig+0x4f8>)
 80027e0:	f023 0301 	bic.w	r3, r3, #1
 80027e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027e6:	f7fe f96d 	bl	8000ac4 <HAL_GetTick>
 80027ea:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80027ec:	e008      	b.n	8002800 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027ee:	f7fe f969 	bl	8000ac4 <HAL_GetTick>
 80027f2:	4602      	mov	r2, r0
 80027f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027f6:	1ad3      	subs	r3, r2, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e2ed      	b.n	8002ddc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002800:	4b8b      	ldr	r3, [pc, #556]	; (8002a30 <HAL_RCC_OscConfig+0x4f8>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 0304 	and.w	r3, r3, #4
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1f0      	bne.n	80027ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f003 0310 	and.w	r3, r3, #16
 8002814:	2b00      	cmp	r3, #0
 8002816:	f000 80a9 	beq.w	800296c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800281a:	4b85      	ldr	r3, [pc, #532]	; (8002a30 <HAL_RCC_OscConfig+0x4f8>)
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002822:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002824:	4b82      	ldr	r3, [pc, #520]	; (8002a30 <HAL_RCC_OscConfig+0x4f8>)
 8002826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002828:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	2b08      	cmp	r3, #8
 800282e:	d007      	beq.n	8002840 <HAL_RCC_OscConfig+0x308>
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	2b18      	cmp	r3, #24
 8002834:	d13a      	bne.n	80028ac <HAL_RCC_OscConfig+0x374>
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	f003 0303 	and.w	r3, r3, #3
 800283c:	2b01      	cmp	r3, #1
 800283e:	d135      	bne.n	80028ac <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002840:	4b7b      	ldr	r3, [pc, #492]	; (8002a30 <HAL_RCC_OscConfig+0x4f8>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002848:	2b00      	cmp	r3, #0
 800284a:	d005      	beq.n	8002858 <HAL_RCC_OscConfig+0x320>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	69db      	ldr	r3, [r3, #28]
 8002850:	2b80      	cmp	r3, #128	; 0x80
 8002852:	d001      	beq.n	8002858 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e2c1      	b.n	8002ddc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002858:	f7fe f964 	bl	8000b24 <HAL_GetREVID>
 800285c:	4603      	mov	r3, r0
 800285e:	f241 0203 	movw	r2, #4099	; 0x1003
 8002862:	4293      	cmp	r3, r2
 8002864:	d817      	bhi.n	8002896 <HAL_RCC_OscConfig+0x35e>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	2b20      	cmp	r3, #32
 800286c:	d108      	bne.n	8002880 <HAL_RCC_OscConfig+0x348>
 800286e:	4b70      	ldr	r3, [pc, #448]	; (8002a30 <HAL_RCC_OscConfig+0x4f8>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002876:	4a6e      	ldr	r2, [pc, #440]	; (8002a30 <HAL_RCC_OscConfig+0x4f8>)
 8002878:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800287c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800287e:	e075      	b.n	800296c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002880:	4b6b      	ldr	r3, [pc, #428]	; (8002a30 <HAL_RCC_OscConfig+0x4f8>)
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	6a1b      	ldr	r3, [r3, #32]
 800288c:	069b      	lsls	r3, r3, #26
 800288e:	4968      	ldr	r1, [pc, #416]	; (8002a30 <HAL_RCC_OscConfig+0x4f8>)
 8002890:	4313      	orrs	r3, r2
 8002892:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002894:	e06a      	b.n	800296c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002896:	4b66      	ldr	r3, [pc, #408]	; (8002a30 <HAL_RCC_OscConfig+0x4f8>)
 8002898:	68db      	ldr	r3, [r3, #12]
 800289a:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6a1b      	ldr	r3, [r3, #32]
 80028a2:	061b      	lsls	r3, r3, #24
 80028a4:	4962      	ldr	r1, [pc, #392]	; (8002a30 <HAL_RCC_OscConfig+0x4f8>)
 80028a6:	4313      	orrs	r3, r2
 80028a8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80028aa:	e05f      	b.n	800296c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	69db      	ldr	r3, [r3, #28]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d042      	beq.n	800293a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80028b4:	4b5e      	ldr	r3, [pc, #376]	; (8002a30 <HAL_RCC_OscConfig+0x4f8>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a5d      	ldr	r2, [pc, #372]	; (8002a30 <HAL_RCC_OscConfig+0x4f8>)
 80028ba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80028be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028c0:	f7fe f900 	bl	8000ac4 <HAL_GetTick>
 80028c4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028c6:	e008      	b.n	80028da <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80028c8:	f7fe f8fc 	bl	8000ac4 <HAL_GetTick>
 80028cc:	4602      	mov	r2, r0
 80028ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028d0:	1ad3      	subs	r3, r2, r3
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d901      	bls.n	80028da <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80028d6:	2303      	movs	r3, #3
 80028d8:	e280      	b.n	8002ddc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80028da:	4b55      	ldr	r3, [pc, #340]	; (8002a30 <HAL_RCC_OscConfig+0x4f8>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0f0      	beq.n	80028c8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80028e6:	f7fe f91d 	bl	8000b24 <HAL_GetREVID>
 80028ea:	4603      	mov	r3, r0
 80028ec:	f241 0203 	movw	r2, #4099	; 0x1003
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d817      	bhi.n	8002924 <HAL_RCC_OscConfig+0x3ec>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6a1b      	ldr	r3, [r3, #32]
 80028f8:	2b20      	cmp	r3, #32
 80028fa:	d108      	bne.n	800290e <HAL_RCC_OscConfig+0x3d6>
 80028fc:	4b4c      	ldr	r3, [pc, #304]	; (8002a30 <HAL_RCC_OscConfig+0x4f8>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8002904:	4a4a      	ldr	r2, [pc, #296]	; (8002a30 <HAL_RCC_OscConfig+0x4f8>)
 8002906:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800290a:	6053      	str	r3, [r2, #4]
 800290c:	e02e      	b.n	800296c <HAL_RCC_OscConfig+0x434>
 800290e:	4b48      	ldr	r3, [pc, #288]	; (8002a30 <HAL_RCC_OscConfig+0x4f8>)
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6a1b      	ldr	r3, [r3, #32]
 800291a:	069b      	lsls	r3, r3, #26
 800291c:	4944      	ldr	r1, [pc, #272]	; (8002a30 <HAL_RCC_OscConfig+0x4f8>)
 800291e:	4313      	orrs	r3, r2
 8002920:	604b      	str	r3, [r1, #4]
 8002922:	e023      	b.n	800296c <HAL_RCC_OscConfig+0x434>
 8002924:	4b42      	ldr	r3, [pc, #264]	; (8002a30 <HAL_RCC_OscConfig+0x4f8>)
 8002926:	68db      	ldr	r3, [r3, #12]
 8002928:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	061b      	lsls	r3, r3, #24
 8002932:	493f      	ldr	r1, [pc, #252]	; (8002a30 <HAL_RCC_OscConfig+0x4f8>)
 8002934:	4313      	orrs	r3, r2
 8002936:	60cb      	str	r3, [r1, #12]
 8002938:	e018      	b.n	800296c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800293a:	4b3d      	ldr	r3, [pc, #244]	; (8002a30 <HAL_RCC_OscConfig+0x4f8>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a3c      	ldr	r2, [pc, #240]	; (8002a30 <HAL_RCC_OscConfig+0x4f8>)
 8002940:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002944:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002946:	f7fe f8bd 	bl	8000ac4 <HAL_GetTick>
 800294a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800294c:	e008      	b.n	8002960 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800294e:	f7fe f8b9 	bl	8000ac4 <HAL_GetTick>
 8002952:	4602      	mov	r2, r0
 8002954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002956:	1ad3      	subs	r3, r2, r3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d901      	bls.n	8002960 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800295c:	2303      	movs	r3, #3
 800295e:	e23d      	b.n	8002ddc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002960:	4b33      	ldr	r3, [pc, #204]	; (8002a30 <HAL_RCC_OscConfig+0x4f8>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002968:	2b00      	cmp	r3, #0
 800296a:	d1f0      	bne.n	800294e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f003 0308 	and.w	r3, r3, #8
 8002974:	2b00      	cmp	r3, #0
 8002976:	d036      	beq.n	80029e6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	695b      	ldr	r3, [r3, #20]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d019      	beq.n	80029b4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002980:	4b2b      	ldr	r3, [pc, #172]	; (8002a30 <HAL_RCC_OscConfig+0x4f8>)
 8002982:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002984:	4a2a      	ldr	r2, [pc, #168]	; (8002a30 <HAL_RCC_OscConfig+0x4f8>)
 8002986:	f043 0301 	orr.w	r3, r3, #1
 800298a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800298c:	f7fe f89a 	bl	8000ac4 <HAL_GetTick>
 8002990:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002992:	e008      	b.n	80029a6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002994:	f7fe f896 	bl	8000ac4 <HAL_GetTick>
 8002998:	4602      	mov	r2, r0
 800299a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800299c:	1ad3      	subs	r3, r2, r3
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d901      	bls.n	80029a6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80029a2:	2303      	movs	r3, #3
 80029a4:	e21a      	b.n	8002ddc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80029a6:	4b22      	ldr	r3, [pc, #136]	; (8002a30 <HAL_RCC_OscConfig+0x4f8>)
 80029a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029aa:	f003 0302 	and.w	r3, r3, #2
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d0f0      	beq.n	8002994 <HAL_RCC_OscConfig+0x45c>
 80029b2:	e018      	b.n	80029e6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029b4:	4b1e      	ldr	r3, [pc, #120]	; (8002a30 <HAL_RCC_OscConfig+0x4f8>)
 80029b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029b8:	4a1d      	ldr	r2, [pc, #116]	; (8002a30 <HAL_RCC_OscConfig+0x4f8>)
 80029ba:	f023 0301 	bic.w	r3, r3, #1
 80029be:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029c0:	f7fe f880 	bl	8000ac4 <HAL_GetTick>
 80029c4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029c6:	e008      	b.n	80029da <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029c8:	f7fe f87c 	bl	8000ac4 <HAL_GetTick>
 80029cc:	4602      	mov	r2, r0
 80029ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	2b02      	cmp	r3, #2
 80029d4:	d901      	bls.n	80029da <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80029d6:	2303      	movs	r3, #3
 80029d8:	e200      	b.n	8002ddc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80029da:	4b15      	ldr	r3, [pc, #84]	; (8002a30 <HAL_RCC_OscConfig+0x4f8>)
 80029dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029de:	f003 0302 	and.w	r3, r3, #2
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d1f0      	bne.n	80029c8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f003 0320 	and.w	r3, r3, #32
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d039      	beq.n	8002a66 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d01c      	beq.n	8002a34 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80029fa:	4b0d      	ldr	r3, [pc, #52]	; (8002a30 <HAL_RCC_OscConfig+0x4f8>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a0c      	ldr	r2, [pc, #48]	; (8002a30 <HAL_RCC_OscConfig+0x4f8>)
 8002a00:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002a04:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a06:	f7fe f85d 	bl	8000ac4 <HAL_GetTick>
 8002a0a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a0c:	e008      	b.n	8002a20 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a0e:	f7fe f859 	bl	8000ac4 <HAL_GetTick>
 8002a12:	4602      	mov	r2, r0
 8002a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a16:	1ad3      	subs	r3, r2, r3
 8002a18:	2b02      	cmp	r3, #2
 8002a1a:	d901      	bls.n	8002a20 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002a1c:	2303      	movs	r3, #3
 8002a1e:	e1dd      	b.n	8002ddc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002a20:	4b03      	ldr	r3, [pc, #12]	; (8002a30 <HAL_RCC_OscConfig+0x4f8>)
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d0f0      	beq.n	8002a0e <HAL_RCC_OscConfig+0x4d6>
 8002a2c:	e01b      	b.n	8002a66 <HAL_RCC_OscConfig+0x52e>
 8002a2e:	bf00      	nop
 8002a30:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002a34:	4b9b      	ldr	r3, [pc, #620]	; (8002ca4 <HAL_RCC_OscConfig+0x76c>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a9a      	ldr	r2, [pc, #616]	; (8002ca4 <HAL_RCC_OscConfig+0x76c>)
 8002a3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002a3e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002a40:	f7fe f840 	bl	8000ac4 <HAL_GetTick>
 8002a44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a46:	e008      	b.n	8002a5a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002a48:	f7fe f83c 	bl	8000ac4 <HAL_GetTick>
 8002a4c:	4602      	mov	r2, r0
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	1ad3      	subs	r3, r2, r3
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d901      	bls.n	8002a5a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8002a56:	2303      	movs	r3, #3
 8002a58:	e1c0      	b.n	8002ddc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8002a5a:	4b92      	ldr	r3, [pc, #584]	; (8002ca4 <HAL_RCC_OscConfig+0x76c>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d1f0      	bne.n	8002a48 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f003 0304 	and.w	r3, r3, #4
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	f000 8081 	beq.w	8002b76 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002a74:	4b8c      	ldr	r3, [pc, #560]	; (8002ca8 <HAL_RCC_OscConfig+0x770>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a8b      	ldr	r2, [pc, #556]	; (8002ca8 <HAL_RCC_OscConfig+0x770>)
 8002a7a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a7e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002a80:	f7fe f820 	bl	8000ac4 <HAL_GetTick>
 8002a84:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a88:	f7fe f81c 	bl	8000ac4 <HAL_GetTick>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b64      	cmp	r3, #100	; 0x64
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e1a0      	b.n	8002ddc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002a9a:	4b83      	ldr	r3, [pc, #524]	; (8002ca8 <HAL_RCC_OscConfig+0x770>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d0f0      	beq.n	8002a88 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	689b      	ldr	r3, [r3, #8]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d106      	bne.n	8002abc <HAL_RCC_OscConfig+0x584>
 8002aae:	4b7d      	ldr	r3, [pc, #500]	; (8002ca4 <HAL_RCC_OscConfig+0x76c>)
 8002ab0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab2:	4a7c      	ldr	r2, [pc, #496]	; (8002ca4 <HAL_RCC_OscConfig+0x76c>)
 8002ab4:	f043 0301 	orr.w	r3, r3, #1
 8002ab8:	6713      	str	r3, [r2, #112]	; 0x70
 8002aba:	e02d      	b.n	8002b18 <HAL_RCC_OscConfig+0x5e0>
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	689b      	ldr	r3, [r3, #8]
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d10c      	bne.n	8002ade <HAL_RCC_OscConfig+0x5a6>
 8002ac4:	4b77      	ldr	r3, [pc, #476]	; (8002ca4 <HAL_RCC_OscConfig+0x76c>)
 8002ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ac8:	4a76      	ldr	r2, [pc, #472]	; (8002ca4 <HAL_RCC_OscConfig+0x76c>)
 8002aca:	f023 0301 	bic.w	r3, r3, #1
 8002ace:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad0:	4b74      	ldr	r3, [pc, #464]	; (8002ca4 <HAL_RCC_OscConfig+0x76c>)
 8002ad2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ad4:	4a73      	ldr	r2, [pc, #460]	; (8002ca4 <HAL_RCC_OscConfig+0x76c>)
 8002ad6:	f023 0304 	bic.w	r3, r3, #4
 8002ada:	6713      	str	r3, [r2, #112]	; 0x70
 8002adc:	e01c      	b.n	8002b18 <HAL_RCC_OscConfig+0x5e0>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	689b      	ldr	r3, [r3, #8]
 8002ae2:	2b05      	cmp	r3, #5
 8002ae4:	d10c      	bne.n	8002b00 <HAL_RCC_OscConfig+0x5c8>
 8002ae6:	4b6f      	ldr	r3, [pc, #444]	; (8002ca4 <HAL_RCC_OscConfig+0x76c>)
 8002ae8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aea:	4a6e      	ldr	r2, [pc, #440]	; (8002ca4 <HAL_RCC_OscConfig+0x76c>)
 8002aec:	f043 0304 	orr.w	r3, r3, #4
 8002af0:	6713      	str	r3, [r2, #112]	; 0x70
 8002af2:	4b6c      	ldr	r3, [pc, #432]	; (8002ca4 <HAL_RCC_OscConfig+0x76c>)
 8002af4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af6:	4a6b      	ldr	r2, [pc, #428]	; (8002ca4 <HAL_RCC_OscConfig+0x76c>)
 8002af8:	f043 0301 	orr.w	r3, r3, #1
 8002afc:	6713      	str	r3, [r2, #112]	; 0x70
 8002afe:	e00b      	b.n	8002b18 <HAL_RCC_OscConfig+0x5e0>
 8002b00:	4b68      	ldr	r3, [pc, #416]	; (8002ca4 <HAL_RCC_OscConfig+0x76c>)
 8002b02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b04:	4a67      	ldr	r2, [pc, #412]	; (8002ca4 <HAL_RCC_OscConfig+0x76c>)
 8002b06:	f023 0301 	bic.w	r3, r3, #1
 8002b0a:	6713      	str	r3, [r2, #112]	; 0x70
 8002b0c:	4b65      	ldr	r3, [pc, #404]	; (8002ca4 <HAL_RCC_OscConfig+0x76c>)
 8002b0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b10:	4a64      	ldr	r2, [pc, #400]	; (8002ca4 <HAL_RCC_OscConfig+0x76c>)
 8002b12:	f023 0304 	bic.w	r3, r3, #4
 8002b16:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d015      	beq.n	8002b4c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b20:	f7fd ffd0 	bl	8000ac4 <HAL_GetTick>
 8002b24:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b26:	e00a      	b.n	8002b3e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b28:	f7fd ffcc 	bl	8000ac4 <HAL_GetTick>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e14e      	b.n	8002ddc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002b3e:	4b59      	ldr	r3, [pc, #356]	; (8002ca4 <HAL_RCC_OscConfig+0x76c>)
 8002b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d0ee      	beq.n	8002b28 <HAL_RCC_OscConfig+0x5f0>
 8002b4a:	e014      	b.n	8002b76 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b4c:	f7fd ffba 	bl	8000ac4 <HAL_GetTick>
 8002b50:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b52:	e00a      	b.n	8002b6a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b54:	f7fd ffb6 	bl	8000ac4 <HAL_GetTick>
 8002b58:	4602      	mov	r2, r0
 8002b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5c:	1ad3      	subs	r3, r2, r3
 8002b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d901      	bls.n	8002b6a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e138      	b.n	8002ddc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002b6a:	4b4e      	ldr	r3, [pc, #312]	; (8002ca4 <HAL_RCC_OscConfig+0x76c>)
 8002b6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1ee      	bne.n	8002b54 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	f000 812d 	beq.w	8002dda <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002b80:	4b48      	ldr	r3, [pc, #288]	; (8002ca4 <HAL_RCC_OscConfig+0x76c>)
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002b88:	2b18      	cmp	r3, #24
 8002b8a:	f000 80bd 	beq.w	8002d08 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b92:	2b02      	cmp	r3, #2
 8002b94:	f040 809e 	bne.w	8002cd4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b98:	4b42      	ldr	r3, [pc, #264]	; (8002ca4 <HAL_RCC_OscConfig+0x76c>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4a41      	ldr	r2, [pc, #260]	; (8002ca4 <HAL_RCC_OscConfig+0x76c>)
 8002b9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002ba2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ba4:	f7fd ff8e 	bl	8000ac4 <HAL_GetTick>
 8002ba8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002baa:	e008      	b.n	8002bbe <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bac:	f7fd ff8a 	bl	8000ac4 <HAL_GetTick>
 8002bb0:	4602      	mov	r2, r0
 8002bb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bb4:	1ad3      	subs	r3, r2, r3
 8002bb6:	2b02      	cmp	r3, #2
 8002bb8:	d901      	bls.n	8002bbe <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8002bba:	2303      	movs	r3, #3
 8002bbc:	e10e      	b.n	8002ddc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002bbe:	4b39      	ldr	r3, [pc, #228]	; (8002ca4 <HAL_RCC_OscConfig+0x76c>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1f0      	bne.n	8002bac <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002bca:	4b36      	ldr	r3, [pc, #216]	; (8002ca4 <HAL_RCC_OscConfig+0x76c>)
 8002bcc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bce:	4b37      	ldr	r3, [pc, #220]	; (8002cac <HAL_RCC_OscConfig+0x774>)
 8002bd0:	4013      	ands	r3, r2
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8002bd6:	687a      	ldr	r2, [r7, #4]
 8002bd8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8002bda:	0112      	lsls	r2, r2, #4
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	4931      	ldr	r1, [pc, #196]	; (8002ca4 <HAL_RCC_OscConfig+0x76c>)
 8002be0:	4313      	orrs	r3, r2
 8002be2:	628b      	str	r3, [r1, #40]	; 0x28
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be8:	3b01      	subs	r3, #1
 8002bea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bf2:	3b01      	subs	r3, #1
 8002bf4:	025b      	lsls	r3, r3, #9
 8002bf6:	b29b      	uxth	r3, r3
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	041b      	lsls	r3, r3, #16
 8002c02:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8002c06:	431a      	orrs	r2, r3
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c0c:	3b01      	subs	r3, #1
 8002c0e:	061b      	lsls	r3, r3, #24
 8002c10:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8002c14:	4923      	ldr	r1, [pc, #140]	; (8002ca4 <HAL_RCC_OscConfig+0x76c>)
 8002c16:	4313      	orrs	r3, r2
 8002c18:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8002c1a:	4b22      	ldr	r3, [pc, #136]	; (8002ca4 <HAL_RCC_OscConfig+0x76c>)
 8002c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c1e:	4a21      	ldr	r2, [pc, #132]	; (8002ca4 <HAL_RCC_OscConfig+0x76c>)
 8002c20:	f023 0301 	bic.w	r3, r3, #1
 8002c24:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002c26:	4b1f      	ldr	r3, [pc, #124]	; (8002ca4 <HAL_RCC_OscConfig+0x76c>)
 8002c28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c2a:	4b21      	ldr	r3, [pc, #132]	; (8002cb0 <HAL_RCC_OscConfig+0x778>)
 8002c2c:	4013      	ands	r3, r2
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002c32:	00d2      	lsls	r2, r2, #3
 8002c34:	491b      	ldr	r1, [pc, #108]	; (8002ca4 <HAL_RCC_OscConfig+0x76c>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8002c3a:	4b1a      	ldr	r3, [pc, #104]	; (8002ca4 <HAL_RCC_OscConfig+0x76c>)
 8002c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3e:	f023 020c 	bic.w	r2, r3, #12
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	4917      	ldr	r1, [pc, #92]	; (8002ca4 <HAL_RCC_OscConfig+0x76c>)
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002c4c:	4b15      	ldr	r3, [pc, #84]	; (8002ca4 <HAL_RCC_OscConfig+0x76c>)
 8002c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c50:	f023 0202 	bic.w	r2, r3, #2
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c58:	4912      	ldr	r1, [pc, #72]	; (8002ca4 <HAL_RCC_OscConfig+0x76c>)
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002c5e:	4b11      	ldr	r3, [pc, #68]	; (8002ca4 <HAL_RCC_OscConfig+0x76c>)
 8002c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c62:	4a10      	ldr	r2, [pc, #64]	; (8002ca4 <HAL_RCC_OscConfig+0x76c>)
 8002c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c68:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002c6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ca4 <HAL_RCC_OscConfig+0x76c>)
 8002c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6e:	4a0d      	ldr	r2, [pc, #52]	; (8002ca4 <HAL_RCC_OscConfig+0x76c>)
 8002c70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c74:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8002c76:	4b0b      	ldr	r3, [pc, #44]	; (8002ca4 <HAL_RCC_OscConfig+0x76c>)
 8002c78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c7a:	4a0a      	ldr	r2, [pc, #40]	; (8002ca4 <HAL_RCC_OscConfig+0x76c>)
 8002c7c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c80:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002c82:	4b08      	ldr	r3, [pc, #32]	; (8002ca4 <HAL_RCC_OscConfig+0x76c>)
 8002c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c86:	4a07      	ldr	r2, [pc, #28]	; (8002ca4 <HAL_RCC_OscConfig+0x76c>)
 8002c88:	f043 0301 	orr.w	r3, r3, #1
 8002c8c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c8e:	4b05      	ldr	r3, [pc, #20]	; (8002ca4 <HAL_RCC_OscConfig+0x76c>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4a04      	ldr	r2, [pc, #16]	; (8002ca4 <HAL_RCC_OscConfig+0x76c>)
 8002c94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c9a:	f7fd ff13 	bl	8000ac4 <HAL_GetTick>
 8002c9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ca0:	e011      	b.n	8002cc6 <HAL_RCC_OscConfig+0x78e>
 8002ca2:	bf00      	nop
 8002ca4:	58024400 	.word	0x58024400
 8002ca8:	58024800 	.word	0x58024800
 8002cac:	fffffc0c 	.word	0xfffffc0c
 8002cb0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cb4:	f7fd ff06 	bl	8000ac4 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d901      	bls.n	8002cc6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8002cc2:	2303      	movs	r3, #3
 8002cc4:	e08a      	b.n	8002ddc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002cc6:	4b47      	ldr	r3, [pc, #284]	; (8002de4 <HAL_RCC_OscConfig+0x8ac>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d0f0      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x77c>
 8002cd2:	e082      	b.n	8002dda <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd4:	4b43      	ldr	r3, [pc, #268]	; (8002de4 <HAL_RCC_OscConfig+0x8ac>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a42      	ldr	r2, [pc, #264]	; (8002de4 <HAL_RCC_OscConfig+0x8ac>)
 8002cda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cde:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce0:	f7fd fef0 	bl	8000ac4 <HAL_GetTick>
 8002ce4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ce8:	f7fd feec 	bl	8000ac4 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e070      	b.n	8002ddc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002cfa:	4b3a      	ldr	r3, [pc, #232]	; (8002de4 <HAL_RCC_OscConfig+0x8ac>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d1f0      	bne.n	8002ce8 <HAL_RCC_OscConfig+0x7b0>
 8002d06:	e068      	b.n	8002dda <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8002d08:	4b36      	ldr	r3, [pc, #216]	; (8002de4 <HAL_RCC_OscConfig+0x8ac>)
 8002d0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d0c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8002d0e:	4b35      	ldr	r3, [pc, #212]	; (8002de4 <HAL_RCC_OscConfig+0x8ac>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d12:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d18:	2b01      	cmp	r3, #1
 8002d1a:	d031      	beq.n	8002d80 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	f003 0203 	and.w	r2, r3, #3
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d26:	429a      	cmp	r2, r3
 8002d28:	d12a      	bne.n	8002d80 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d2a:	693b      	ldr	r3, [r7, #16]
 8002d2c:	091b      	lsrs	r3, r3, #4
 8002d2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d122      	bne.n	8002d80 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d44:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d11a      	bne.n	8002d80 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	0a5b      	lsrs	r3, r3, #9
 8002d4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d56:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002d58:	429a      	cmp	r2, r3
 8002d5a:	d111      	bne.n	8002d80 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d5c:	68fb      	ldr	r3, [r7, #12]
 8002d5e:	0c1b      	lsrs	r3, r3, #16
 8002d60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d68:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d108      	bne.n	8002d80 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	0e1b      	lsrs	r3, r3, #24
 8002d72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d7a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	d001      	beq.n	8002d84 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e02b      	b.n	8002ddc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002d84:	4b17      	ldr	r3, [pc, #92]	; (8002de4 <HAL_RCC_OscConfig+0x8ac>)
 8002d86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002d88:	08db      	lsrs	r3, r3, #3
 8002d8a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002d8e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d01f      	beq.n	8002dda <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002d9a:	4b12      	ldr	r3, [pc, #72]	; (8002de4 <HAL_RCC_OscConfig+0x8ac>)
 8002d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d9e:	4a11      	ldr	r2, [pc, #68]	; (8002de4 <HAL_RCC_OscConfig+0x8ac>)
 8002da0:	f023 0301 	bic.w	r3, r3, #1
 8002da4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002da6:	f7fd fe8d 	bl	8000ac4 <HAL_GetTick>
 8002daa:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002dac:	bf00      	nop
 8002dae:	f7fd fe89 	bl	8000ac4 <HAL_GetTick>
 8002db2:	4602      	mov	r2, r0
 8002db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db6:	4293      	cmp	r3, r2
 8002db8:	d0f9      	beq.n	8002dae <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002dba:	4b0a      	ldr	r3, [pc, #40]	; (8002de4 <HAL_RCC_OscConfig+0x8ac>)
 8002dbc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dbe:	4b0a      	ldr	r3, [pc, #40]	; (8002de8 <HAL_RCC_OscConfig+0x8b0>)
 8002dc0:	4013      	ands	r3, r2
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002dc6:	00d2      	lsls	r2, r2, #3
 8002dc8:	4906      	ldr	r1, [pc, #24]	; (8002de4 <HAL_RCC_OscConfig+0x8ac>)
 8002dca:	4313      	orrs	r3, r2
 8002dcc:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002dce:	4b05      	ldr	r3, [pc, #20]	; (8002de4 <HAL_RCC_OscConfig+0x8ac>)
 8002dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd2:	4a04      	ldr	r2, [pc, #16]	; (8002de4 <HAL_RCC_OscConfig+0x8ac>)
 8002dd4:	f043 0301 	orr.w	r3, r3, #1
 8002dd8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002dda:	2300      	movs	r3, #0
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3730      	adds	r7, #48	; 0x30
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}
 8002de4:	58024400 	.word	0x58024400
 8002de8:	ffff0007 	.word	0xffff0007

08002dec <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b086      	sub	sp, #24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d101      	bne.n	8002e00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	e19c      	b.n	800313a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e00:	4b8a      	ldr	r3, [pc, #552]	; (800302c <HAL_RCC_ClockConfig+0x240>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 030f 	and.w	r3, r3, #15
 8002e08:	683a      	ldr	r2, [r7, #0]
 8002e0a:	429a      	cmp	r2, r3
 8002e0c:	d910      	bls.n	8002e30 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e0e:	4b87      	ldr	r3, [pc, #540]	; (800302c <HAL_RCC_ClockConfig+0x240>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f023 020f 	bic.w	r2, r3, #15
 8002e16:	4985      	ldr	r1, [pc, #532]	; (800302c <HAL_RCC_ClockConfig+0x240>)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e1e:	4b83      	ldr	r3, [pc, #524]	; (800302c <HAL_RCC_ClockConfig+0x240>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 030f 	and.w	r3, r3, #15
 8002e26:	683a      	ldr	r2, [r7, #0]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d001      	beq.n	8002e30 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e184      	b.n	800313a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0304 	and.w	r3, r3, #4
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d010      	beq.n	8002e5e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	691a      	ldr	r2, [r3, #16]
 8002e40:	4b7b      	ldr	r3, [pc, #492]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002e42:	699b      	ldr	r3, [r3, #24]
 8002e44:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e48:	429a      	cmp	r2, r3
 8002e4a:	d908      	bls.n	8002e5e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002e4c:	4b78      	ldr	r3, [pc, #480]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002e4e:	699b      	ldr	r3, [r3, #24]
 8002e50:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	691b      	ldr	r3, [r3, #16]
 8002e58:	4975      	ldr	r1, [pc, #468]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0308 	and.w	r3, r3, #8
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d010      	beq.n	8002e8c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	695a      	ldr	r2, [r3, #20]
 8002e6e:	4b70      	ldr	r3, [pc, #448]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d908      	bls.n	8002e8c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002e7a:	4b6d      	ldr	r3, [pc, #436]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	695b      	ldr	r3, [r3, #20]
 8002e86:	496a      	ldr	r1, [pc, #424]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002e88:	4313      	orrs	r3, r2
 8002e8a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0310 	and.w	r3, r3, #16
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d010      	beq.n	8002eba <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	699a      	ldr	r2, [r3, #24]
 8002e9c:	4b64      	ldr	r3, [pc, #400]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002e9e:	69db      	ldr	r3, [r3, #28]
 8002ea0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d908      	bls.n	8002eba <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002ea8:	4b61      	ldr	r3, [pc, #388]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002eaa:	69db      	ldr	r3, [r3, #28]
 8002eac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	495e      	ldr	r1, [pc, #376]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0320 	and.w	r3, r3, #32
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d010      	beq.n	8002ee8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69da      	ldr	r2, [r3, #28]
 8002eca:	4b59      	ldr	r3, [pc, #356]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d908      	bls.n	8002ee8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002ed6:	4b56      	ldr	r3, [pc, #344]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	4953      	ldr	r1, [pc, #332]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d010      	beq.n	8002f16 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	68da      	ldr	r2, [r3, #12]
 8002ef8:	4b4d      	ldr	r3, [pc, #308]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002efa:	699b      	ldr	r3, [r3, #24]
 8002efc:	f003 030f 	and.w	r3, r3, #15
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d908      	bls.n	8002f16 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002f04:	4b4a      	ldr	r3, [pc, #296]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002f06:	699b      	ldr	r3, [r3, #24]
 8002f08:	f023 020f 	bic.w	r2, r3, #15
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	4947      	ldr	r1, [pc, #284]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002f12:	4313      	orrs	r3, r2
 8002f14:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0301 	and.w	r3, r3, #1
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d055      	beq.n	8002fce <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002f22:	4b43      	ldr	r3, [pc, #268]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	689b      	ldr	r3, [r3, #8]
 8002f2e:	4940      	ldr	r1, [pc, #256]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	2b02      	cmp	r3, #2
 8002f3a:	d107      	bne.n	8002f4c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002f3c:	4b3c      	ldr	r3, [pc, #240]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d121      	bne.n	8002f8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f48:	2301      	movs	r3, #1
 8002f4a:	e0f6      	b.n	800313a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	2b03      	cmp	r3, #3
 8002f52:	d107      	bne.n	8002f64 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002f54:	4b36      	ldr	r3, [pc, #216]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d115      	bne.n	8002f8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f60:	2301      	movs	r3, #1
 8002f62:	e0ea      	b.n	800313a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d107      	bne.n	8002f7c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002f6c:	4b30      	ldr	r3, [pc, #192]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d109      	bne.n	8002f8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e0de      	b.n	800313a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f7c:	4b2c      	ldr	r3, [pc, #176]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0304 	and.w	r3, r3, #4
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d101      	bne.n	8002f8c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002f88:	2301      	movs	r3, #1
 8002f8a:	e0d6      	b.n	800313a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002f8c:	4b28      	ldr	r3, [pc, #160]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002f8e:	691b      	ldr	r3, [r3, #16]
 8002f90:	f023 0207 	bic.w	r2, r3, #7
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	685b      	ldr	r3, [r3, #4]
 8002f98:	4925      	ldr	r1, [pc, #148]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f9e:	f7fd fd91 	bl	8000ac4 <HAL_GetTick>
 8002fa2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fa4:	e00a      	b.n	8002fbc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002fa6:	f7fd fd8d 	bl	8000ac4 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d901      	bls.n	8002fbc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002fb8:	2303      	movs	r3, #3
 8002fba:	e0be      	b.n	800313a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002fbc:	4b1c      	ldr	r3, [pc, #112]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002fbe:	691b      	ldr	r3, [r3, #16]
 8002fc0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	429a      	cmp	r2, r3
 8002fcc:	d1eb      	bne.n	8002fa6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d010      	beq.n	8002ffc <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	68da      	ldr	r2, [r3, #12]
 8002fde:	4b14      	ldr	r3, [pc, #80]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	f003 030f 	and.w	r3, r3, #15
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	d208      	bcs.n	8002ffc <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002fea:	4b11      	ldr	r3, [pc, #68]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002fec:	699b      	ldr	r3, [r3, #24]
 8002fee:	f023 020f 	bic.w	r2, r3, #15
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	68db      	ldr	r3, [r3, #12]
 8002ff6:	490e      	ldr	r1, [pc, #56]	; (8003030 <HAL_RCC_ClockConfig+0x244>)
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ffc:	4b0b      	ldr	r3, [pc, #44]	; (800302c <HAL_RCC_ClockConfig+0x240>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 030f 	and.w	r3, r3, #15
 8003004:	683a      	ldr	r2, [r7, #0]
 8003006:	429a      	cmp	r2, r3
 8003008:	d214      	bcs.n	8003034 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800300a:	4b08      	ldr	r3, [pc, #32]	; (800302c <HAL_RCC_ClockConfig+0x240>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f023 020f 	bic.w	r2, r3, #15
 8003012:	4906      	ldr	r1, [pc, #24]	; (800302c <HAL_RCC_ClockConfig+0x240>)
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	4313      	orrs	r3, r2
 8003018:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800301a:	4b04      	ldr	r3, [pc, #16]	; (800302c <HAL_RCC_ClockConfig+0x240>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f003 030f 	and.w	r3, r3, #15
 8003022:	683a      	ldr	r2, [r7, #0]
 8003024:	429a      	cmp	r2, r3
 8003026:	d005      	beq.n	8003034 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e086      	b.n	800313a <HAL_RCC_ClockConfig+0x34e>
 800302c:	52002000 	.word	0x52002000
 8003030:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f003 0304 	and.w	r3, r3, #4
 800303c:	2b00      	cmp	r3, #0
 800303e:	d010      	beq.n	8003062 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	691a      	ldr	r2, [r3, #16]
 8003044:	4b3f      	ldr	r3, [pc, #252]	; (8003144 <HAL_RCC_ClockConfig+0x358>)
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800304c:	429a      	cmp	r2, r3
 800304e:	d208      	bcs.n	8003062 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003050:	4b3c      	ldr	r3, [pc, #240]	; (8003144 <HAL_RCC_ClockConfig+0x358>)
 8003052:	699b      	ldr	r3, [r3, #24]
 8003054:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	691b      	ldr	r3, [r3, #16]
 800305c:	4939      	ldr	r1, [pc, #228]	; (8003144 <HAL_RCC_ClockConfig+0x358>)
 800305e:	4313      	orrs	r3, r2
 8003060:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0308 	and.w	r3, r3, #8
 800306a:	2b00      	cmp	r3, #0
 800306c:	d010      	beq.n	8003090 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	695a      	ldr	r2, [r3, #20]
 8003072:	4b34      	ldr	r3, [pc, #208]	; (8003144 <HAL_RCC_ClockConfig+0x358>)
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800307a:	429a      	cmp	r2, r3
 800307c:	d208      	bcs.n	8003090 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800307e:	4b31      	ldr	r3, [pc, #196]	; (8003144 <HAL_RCC_ClockConfig+0x358>)
 8003080:	69db      	ldr	r3, [r3, #28]
 8003082:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	695b      	ldr	r3, [r3, #20]
 800308a:	492e      	ldr	r1, [pc, #184]	; (8003144 <HAL_RCC_ClockConfig+0x358>)
 800308c:	4313      	orrs	r3, r2
 800308e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f003 0310 	and.w	r3, r3, #16
 8003098:	2b00      	cmp	r3, #0
 800309a:	d010      	beq.n	80030be <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	699a      	ldr	r2, [r3, #24]
 80030a0:	4b28      	ldr	r3, [pc, #160]	; (8003144 <HAL_RCC_ClockConfig+0x358>)
 80030a2:	69db      	ldr	r3, [r3, #28]
 80030a4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d208      	bcs.n	80030be <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80030ac:	4b25      	ldr	r3, [pc, #148]	; (8003144 <HAL_RCC_ClockConfig+0x358>)
 80030ae:	69db      	ldr	r3, [r3, #28]
 80030b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	4922      	ldr	r1, [pc, #136]	; (8003144 <HAL_RCC_ClockConfig+0x358>)
 80030ba:	4313      	orrs	r3, r2
 80030bc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f003 0320 	and.w	r3, r3, #32
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d010      	beq.n	80030ec <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	69da      	ldr	r2, [r3, #28]
 80030ce:	4b1d      	ldr	r3, [pc, #116]	; (8003144 <HAL_RCC_ClockConfig+0x358>)
 80030d0:	6a1b      	ldr	r3, [r3, #32]
 80030d2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d208      	bcs.n	80030ec <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80030da:	4b1a      	ldr	r3, [pc, #104]	; (8003144 <HAL_RCC_ClockConfig+0x358>)
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	69db      	ldr	r3, [r3, #28]
 80030e6:	4917      	ldr	r1, [pc, #92]	; (8003144 <HAL_RCC_ClockConfig+0x358>)
 80030e8:	4313      	orrs	r3, r2
 80030ea:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80030ec:	f000 f834 	bl	8003158 <HAL_RCC_GetSysClockFreq>
 80030f0:	4602      	mov	r2, r0
 80030f2:	4b14      	ldr	r3, [pc, #80]	; (8003144 <HAL_RCC_ClockConfig+0x358>)
 80030f4:	699b      	ldr	r3, [r3, #24]
 80030f6:	0a1b      	lsrs	r3, r3, #8
 80030f8:	f003 030f 	and.w	r3, r3, #15
 80030fc:	4912      	ldr	r1, [pc, #72]	; (8003148 <HAL_RCC_ClockConfig+0x35c>)
 80030fe:	5ccb      	ldrb	r3, [r1, r3]
 8003100:	f003 031f 	and.w	r3, r3, #31
 8003104:	fa22 f303 	lsr.w	r3, r2, r3
 8003108:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800310a:	4b0e      	ldr	r3, [pc, #56]	; (8003144 <HAL_RCC_ClockConfig+0x358>)
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	f003 030f 	and.w	r3, r3, #15
 8003112:	4a0d      	ldr	r2, [pc, #52]	; (8003148 <HAL_RCC_ClockConfig+0x35c>)
 8003114:	5cd3      	ldrb	r3, [r2, r3]
 8003116:	f003 031f 	and.w	r3, r3, #31
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	fa22 f303 	lsr.w	r3, r2, r3
 8003120:	4a0a      	ldr	r2, [pc, #40]	; (800314c <HAL_RCC_ClockConfig+0x360>)
 8003122:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003124:	4a0a      	ldr	r2, [pc, #40]	; (8003150 <HAL_RCC_ClockConfig+0x364>)
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800312a:	4b0a      	ldr	r3, [pc, #40]	; (8003154 <HAL_RCC_ClockConfig+0x368>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	4618      	mov	r0, r3
 8003130:	f7fd fc7e 	bl	8000a30 <HAL_InitTick>
 8003134:	4603      	mov	r3, r0
 8003136:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003138:	7bfb      	ldrb	r3, [r7, #15]
}
 800313a:	4618      	mov	r0, r3
 800313c:	3718      	adds	r7, #24
 800313e:	46bd      	mov	sp, r7
 8003140:	bd80      	pop	{r7, pc}
 8003142:	bf00      	nop
 8003144:	58024400 	.word	0x58024400
 8003148:	08004bc8 	.word	0x08004bc8
 800314c:	24000004 	.word	0x24000004
 8003150:	24000000 	.word	0x24000000
 8003154:	24000008 	.word	0x24000008

08003158 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003158:	b480      	push	{r7}
 800315a:	b089      	sub	sp, #36	; 0x24
 800315c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800315e:	4bb3      	ldr	r3, [pc, #716]	; (800342c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003160:	691b      	ldr	r3, [r3, #16]
 8003162:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003166:	2b18      	cmp	r3, #24
 8003168:	f200 8155 	bhi.w	8003416 <HAL_RCC_GetSysClockFreq+0x2be>
 800316c:	a201      	add	r2, pc, #4	; (adr r2, 8003174 <HAL_RCC_GetSysClockFreq+0x1c>)
 800316e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003172:	bf00      	nop
 8003174:	080031d9 	.word	0x080031d9
 8003178:	08003417 	.word	0x08003417
 800317c:	08003417 	.word	0x08003417
 8003180:	08003417 	.word	0x08003417
 8003184:	08003417 	.word	0x08003417
 8003188:	08003417 	.word	0x08003417
 800318c:	08003417 	.word	0x08003417
 8003190:	08003417 	.word	0x08003417
 8003194:	080031ff 	.word	0x080031ff
 8003198:	08003417 	.word	0x08003417
 800319c:	08003417 	.word	0x08003417
 80031a0:	08003417 	.word	0x08003417
 80031a4:	08003417 	.word	0x08003417
 80031a8:	08003417 	.word	0x08003417
 80031ac:	08003417 	.word	0x08003417
 80031b0:	08003417 	.word	0x08003417
 80031b4:	08003205 	.word	0x08003205
 80031b8:	08003417 	.word	0x08003417
 80031bc:	08003417 	.word	0x08003417
 80031c0:	08003417 	.word	0x08003417
 80031c4:	08003417 	.word	0x08003417
 80031c8:	08003417 	.word	0x08003417
 80031cc:	08003417 	.word	0x08003417
 80031d0:	08003417 	.word	0x08003417
 80031d4:	0800320b 	.word	0x0800320b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80031d8:	4b94      	ldr	r3, [pc, #592]	; (800342c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0320 	and.w	r3, r3, #32
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d009      	beq.n	80031f8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80031e4:	4b91      	ldr	r3, [pc, #580]	; (800342c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	08db      	lsrs	r3, r3, #3
 80031ea:	f003 0303 	and.w	r3, r3, #3
 80031ee:	4a90      	ldr	r2, [pc, #576]	; (8003430 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031f0:	fa22 f303 	lsr.w	r3, r2, r3
 80031f4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80031f6:	e111      	b.n	800341c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80031f8:	4b8d      	ldr	r3, [pc, #564]	; (8003430 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80031fa:	61bb      	str	r3, [r7, #24]
      break;
 80031fc:	e10e      	b.n	800341c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80031fe:	4b8d      	ldr	r3, [pc, #564]	; (8003434 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003200:	61bb      	str	r3, [r7, #24]
      break;
 8003202:	e10b      	b.n	800341c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003204:	4b8c      	ldr	r3, [pc, #560]	; (8003438 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003206:	61bb      	str	r3, [r7, #24]
      break;
 8003208:	e108      	b.n	800341c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800320a:	4b88      	ldr	r3, [pc, #544]	; (800342c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800320c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800320e:	f003 0303 	and.w	r3, r3, #3
 8003212:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003214:	4b85      	ldr	r3, [pc, #532]	; (800342c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003218:	091b      	lsrs	r3, r3, #4
 800321a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800321e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003220:	4b82      	ldr	r3, [pc, #520]	; (800342c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800322a:	4b80      	ldr	r3, [pc, #512]	; (800342c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800322c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800322e:	08db      	lsrs	r3, r3, #3
 8003230:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003234:	68fa      	ldr	r2, [r7, #12]
 8003236:	fb02 f303 	mul.w	r3, r2, r3
 800323a:	ee07 3a90 	vmov	s15, r3
 800323e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003242:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	2b00      	cmp	r3, #0
 800324a:	f000 80e1 	beq.w	8003410 <HAL_RCC_GetSysClockFreq+0x2b8>
 800324e:	697b      	ldr	r3, [r7, #20]
 8003250:	2b02      	cmp	r3, #2
 8003252:	f000 8083 	beq.w	800335c <HAL_RCC_GetSysClockFreq+0x204>
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	2b02      	cmp	r3, #2
 800325a:	f200 80a1 	bhi.w	80033a0 <HAL_RCC_GetSysClockFreq+0x248>
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d003      	beq.n	800326c <HAL_RCC_GetSysClockFreq+0x114>
 8003264:	697b      	ldr	r3, [r7, #20]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d056      	beq.n	8003318 <HAL_RCC_GetSysClockFreq+0x1c0>
 800326a:	e099      	b.n	80033a0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800326c:	4b6f      	ldr	r3, [pc, #444]	; (800342c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f003 0320 	and.w	r3, r3, #32
 8003274:	2b00      	cmp	r3, #0
 8003276:	d02d      	beq.n	80032d4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003278:	4b6c      	ldr	r3, [pc, #432]	; (800342c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	08db      	lsrs	r3, r3, #3
 800327e:	f003 0303 	and.w	r3, r3, #3
 8003282:	4a6b      	ldr	r2, [pc, #428]	; (8003430 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003284:	fa22 f303 	lsr.w	r3, r2, r3
 8003288:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	ee07 3a90 	vmov	s15, r3
 8003290:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	ee07 3a90 	vmov	s15, r3
 800329a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800329e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032a2:	4b62      	ldr	r3, [pc, #392]	; (800342c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032aa:	ee07 3a90 	vmov	s15, r3
 80032ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032b2:	ed97 6a02 	vldr	s12, [r7, #8]
 80032b6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800343c <HAL_RCC_GetSysClockFreq+0x2e4>
 80032ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80032be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80032c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80032c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80032ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032ce:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80032d2:	e087      	b.n	80033e4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80032d4:	693b      	ldr	r3, [r7, #16]
 80032d6:	ee07 3a90 	vmov	s15, r3
 80032da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032de:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003440 <HAL_RCC_GetSysClockFreq+0x2e8>
 80032e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80032e6:	4b51      	ldr	r3, [pc, #324]	; (800342c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ee:	ee07 3a90 	vmov	s15, r3
 80032f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80032f6:	ed97 6a02 	vldr	s12, [r7, #8]
 80032fa:	eddf 5a50 	vldr	s11, [pc, #320]	; 800343c <HAL_RCC_GetSysClockFreq+0x2e4>
 80032fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003306:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800330a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800330e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003312:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003316:	e065      	b.n	80033e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	ee07 3a90 	vmov	s15, r3
 800331e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003322:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003444 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003326:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800332a:	4b40      	ldr	r3, [pc, #256]	; (800342c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800332c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800332e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003332:	ee07 3a90 	vmov	s15, r3
 8003336:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800333a:	ed97 6a02 	vldr	s12, [r7, #8]
 800333e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800343c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003342:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003346:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800334a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800334e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003356:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800335a:	e043      	b.n	80033e4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	ee07 3a90 	vmov	s15, r3
 8003362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003366:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003448 <HAL_RCC_GetSysClockFreq+0x2f0>
 800336a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800336e:	4b2f      	ldr	r3, [pc, #188]	; (800342c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003376:	ee07 3a90 	vmov	s15, r3
 800337a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800337e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003382:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800343c <HAL_RCC_GetSysClockFreq+0x2e4>
 8003386:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800338a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800338e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003392:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003396:	ee67 7a27 	vmul.f32	s15, s14, s15
 800339a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800339e:	e021      	b.n	80033e4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80033a0:	693b      	ldr	r3, [r7, #16]
 80033a2:	ee07 3a90 	vmov	s15, r3
 80033a6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80033aa:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003444 <HAL_RCC_GetSysClockFreq+0x2ec>
 80033ae:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80033b2:	4b1e      	ldr	r3, [pc, #120]	; (800342c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80033ba:	ee07 3a90 	vmov	s15, r3
 80033be:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80033c2:	ed97 6a02 	vldr	s12, [r7, #8]
 80033c6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800343c <HAL_RCC_GetSysClockFreq+0x2e4>
 80033ca:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80033ce:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80033d2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80033d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80033da:	ee67 7a27 	vmul.f32	s15, s14, s15
 80033de:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80033e2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80033e4:	4b11      	ldr	r3, [pc, #68]	; (800342c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80033e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e8:	0a5b      	lsrs	r3, r3, #9
 80033ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80033ee:	3301      	adds	r3, #1
 80033f0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	ee07 3a90 	vmov	s15, r3
 80033f8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80033fc:	edd7 6a07 	vldr	s13, [r7, #28]
 8003400:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003404:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003408:	ee17 3a90 	vmov	r3, s15
 800340c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800340e:	e005      	b.n	800341c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003410:	2300      	movs	r3, #0
 8003412:	61bb      	str	r3, [r7, #24]
      break;
 8003414:	e002      	b.n	800341c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003416:	4b07      	ldr	r3, [pc, #28]	; (8003434 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003418:	61bb      	str	r3, [r7, #24]
      break;
 800341a:	bf00      	nop
  }

  return sysclockfreq;
 800341c:	69bb      	ldr	r3, [r7, #24]
}
 800341e:	4618      	mov	r0, r3
 8003420:	3724      	adds	r7, #36	; 0x24
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	58024400 	.word	0x58024400
 8003430:	03d09000 	.word	0x03d09000
 8003434:	003d0900 	.word	0x003d0900
 8003438:	017d7840 	.word	0x017d7840
 800343c:	46000000 	.word	0x46000000
 8003440:	4c742400 	.word	0x4c742400
 8003444:	4a742400 	.word	0x4a742400
 8003448:	4bbebc20 	.word	0x4bbebc20

0800344c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800344c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003450:	b0c8      	sub	sp, #288	; 0x120
 8003452:	af00      	add	r7, sp, #0
 8003454:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003458:	2300      	movs	r3, #0
 800345a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800345e:	2300      	movs	r3, #0
 8003460:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003464:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800346c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003470:	2500      	movs	r5, #0
 8003472:	ea54 0305 	orrs.w	r3, r4, r5
 8003476:	d049      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003478:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800347c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800347e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003482:	d02f      	beq.n	80034e4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003484:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003488:	d828      	bhi.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 800348a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800348e:	d01a      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003490:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003494:	d822      	bhi.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003496:	2b00      	cmp	r3, #0
 8003498:	d003      	beq.n	80034a2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800349a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800349e:	d007      	beq.n	80034b0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80034a0:	e01c      	b.n	80034dc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80034a2:	4bb8      	ldr	r3, [pc, #736]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034a6:	4ab7      	ldr	r2, [pc, #732]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80034ac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80034ae:	e01a      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80034b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034b4:	3308      	adds	r3, #8
 80034b6:	2102      	movs	r1, #2
 80034b8:	4618      	mov	r0, r3
 80034ba:	f001 f9b5 	bl	8004828 <RCCEx_PLL2_Config>
 80034be:	4603      	mov	r3, r0
 80034c0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80034c4:	e00f      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80034c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034ca:	3328      	adds	r3, #40	; 0x28
 80034cc:	2102      	movs	r1, #2
 80034ce:	4618      	mov	r0, r3
 80034d0:	f001 fa5c 	bl	800498c <RCCEx_PLL3_Config>
 80034d4:	4603      	mov	r3, r0
 80034d6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80034da:	e004      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034dc:	2301      	movs	r3, #1
 80034de:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80034e2:	e000      	b.n	80034e6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80034e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80034e6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d10a      	bne.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80034ee:	4ba5      	ldr	r3, [pc, #660]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034f2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80034f6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80034fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034fc:	4aa1      	ldr	r2, [pc, #644]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034fe:	430b      	orrs	r3, r1
 8003500:	6513      	str	r3, [r2, #80]	; 0x50
 8003502:	e003      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003504:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003508:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800350c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003514:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003518:	f04f 0900 	mov.w	r9, #0
 800351c:	ea58 0309 	orrs.w	r3, r8, r9
 8003520:	d047      	beq.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003522:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003526:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003528:	2b04      	cmp	r3, #4
 800352a:	d82a      	bhi.n	8003582 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800352c:	a201      	add	r2, pc, #4	; (adr r2, 8003534 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800352e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003532:	bf00      	nop
 8003534:	08003549 	.word	0x08003549
 8003538:	08003557 	.word	0x08003557
 800353c:	0800356d 	.word	0x0800356d
 8003540:	0800358b 	.word	0x0800358b
 8003544:	0800358b 	.word	0x0800358b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003548:	4b8e      	ldr	r3, [pc, #568]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800354a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354c:	4a8d      	ldr	r2, [pc, #564]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800354e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003552:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003554:	e01a      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003556:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800355a:	3308      	adds	r3, #8
 800355c:	2100      	movs	r1, #0
 800355e:	4618      	mov	r0, r3
 8003560:	f001 f962 	bl	8004828 <RCCEx_PLL2_Config>
 8003564:	4603      	mov	r3, r0
 8003566:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800356a:	e00f      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800356c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003570:	3328      	adds	r3, #40	; 0x28
 8003572:	2100      	movs	r1, #0
 8003574:	4618      	mov	r0, r3
 8003576:	f001 fa09 	bl	800498c <RCCEx_PLL3_Config>
 800357a:	4603      	mov	r3, r0
 800357c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003580:	e004      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003582:	2301      	movs	r3, #1
 8003584:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003588:	e000      	b.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800358a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800358c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003590:	2b00      	cmp	r3, #0
 8003592:	d10a      	bne.n	80035aa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003594:	4b7b      	ldr	r3, [pc, #492]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003598:	f023 0107 	bic.w	r1, r3, #7
 800359c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035a2:	4a78      	ldr	r2, [pc, #480]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035a4:	430b      	orrs	r3, r1
 80035a6:	6513      	str	r3, [r2, #80]	; 0x50
 80035a8:	e003      	b.n	80035b2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80035ae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80035b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ba:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80035be:	f04f 0b00 	mov.w	fp, #0
 80035c2:	ea5a 030b 	orrs.w	r3, sl, fp
 80035c6:	d04c      	beq.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80035c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80035cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035d2:	d030      	beq.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80035d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035d8:	d829      	bhi.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80035da:	2bc0      	cmp	r3, #192	; 0xc0
 80035dc:	d02d      	beq.n	800363a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80035de:	2bc0      	cmp	r3, #192	; 0xc0
 80035e0:	d825      	bhi.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80035e2:	2b80      	cmp	r3, #128	; 0x80
 80035e4:	d018      	beq.n	8003618 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80035e6:	2b80      	cmp	r3, #128	; 0x80
 80035e8:	d821      	bhi.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d002      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80035ee:	2b40      	cmp	r3, #64	; 0x40
 80035f0:	d007      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80035f2:	e01c      	b.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035f4:	4b63      	ldr	r3, [pc, #396]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035f8:	4a62      	ldr	r2, [pc, #392]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80035fa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035fe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003600:	e01c      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003602:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003606:	3308      	adds	r3, #8
 8003608:	2100      	movs	r1, #0
 800360a:	4618      	mov	r0, r3
 800360c:	f001 f90c 	bl	8004828 <RCCEx_PLL2_Config>
 8003610:	4603      	mov	r3, r0
 8003612:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003616:	e011      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003618:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800361c:	3328      	adds	r3, #40	; 0x28
 800361e:	2100      	movs	r1, #0
 8003620:	4618      	mov	r0, r3
 8003622:	f001 f9b3 	bl	800498c <RCCEx_PLL3_Config>
 8003626:	4603      	mov	r3, r0
 8003628:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800362c:	e006      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003634:	e002      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003636:	bf00      	nop
 8003638:	e000      	b.n	800363c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800363a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800363c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003640:	2b00      	cmp	r3, #0
 8003642:	d10a      	bne.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003644:	4b4f      	ldr	r3, [pc, #316]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003646:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003648:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 800364c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003650:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003652:	4a4c      	ldr	r2, [pc, #304]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003654:	430b      	orrs	r3, r1
 8003656:	6513      	str	r3, [r2, #80]	; 0x50
 8003658:	e003      	b.n	8003662 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800365a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800365e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003662:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800366a:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800366e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8003672:	2300      	movs	r3, #0
 8003674:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8003678:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 800367c:	460b      	mov	r3, r1
 800367e:	4313      	orrs	r3, r2
 8003680:	d053      	beq.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003682:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003686:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800368a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800368e:	d035      	beq.n	80036fc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8003690:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003694:	d82e      	bhi.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003696:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800369a:	d031      	beq.n	8003700 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800369c:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80036a0:	d828      	bhi.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80036a2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036a6:	d01a      	beq.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x292>
 80036a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80036ac:	d822      	bhi.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d003      	beq.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80036b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036b6:	d007      	beq.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80036b8:	e01c      	b.n	80036f4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036ba:	4b32      	ldr	r3, [pc, #200]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036be:	4a31      	ldr	r2, [pc, #196]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80036c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036c6:	e01c      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80036c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036cc:	3308      	adds	r3, #8
 80036ce:	2100      	movs	r1, #0
 80036d0:	4618      	mov	r0, r3
 80036d2:	f001 f8a9 	bl	8004828 <RCCEx_PLL2_Config>
 80036d6:	4603      	mov	r3, r0
 80036d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80036dc:	e011      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80036e2:	3328      	adds	r3, #40	; 0x28
 80036e4:	2100      	movs	r1, #0
 80036e6:	4618      	mov	r0, r3
 80036e8:	f001 f950 	bl	800498c <RCCEx_PLL3_Config>
 80036ec:	4603      	mov	r3, r0
 80036ee:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80036f2:	e006      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80036f4:	2301      	movs	r3, #1
 80036f6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80036fa:	e002      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80036fc:	bf00      	nop
 80036fe:	e000      	b.n	8003702 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003700:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003702:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003706:	2b00      	cmp	r3, #0
 8003708:	d10b      	bne.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800370a:	4b1e      	ldr	r3, [pc, #120]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800370c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370e:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8003712:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003716:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 800371a:	4a1a      	ldr	r2, [pc, #104]	; (8003784 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800371c:	430b      	orrs	r3, r1
 800371e:	6593      	str	r3, [r2, #88]	; 0x58
 8003720:	e003      	b.n	800372a <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003722:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003726:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800372a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800372e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003732:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8003736:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800373a:	2300      	movs	r3, #0
 800373c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8003740:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8003744:	460b      	mov	r3, r1
 8003746:	4313      	orrs	r3, r2
 8003748:	d056      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800374a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800374e:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003752:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003756:	d038      	beq.n	80037ca <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8003758:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800375c:	d831      	bhi.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800375e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003762:	d034      	beq.n	80037ce <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003764:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003768:	d82b      	bhi.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800376a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800376e:	d01d      	beq.n	80037ac <HAL_RCCEx_PeriphCLKConfig+0x360>
 8003770:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003774:	d825      	bhi.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003776:	2b00      	cmp	r3, #0
 8003778:	d006      	beq.n	8003788 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800377a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800377e:	d00a      	beq.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8003780:	e01f      	b.n	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003782:	bf00      	nop
 8003784:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003788:	4ba2      	ldr	r3, [pc, #648]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800378a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800378c:	4aa1      	ldr	r2, [pc, #644]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800378e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003792:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003794:	e01c      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003796:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800379a:	3308      	adds	r3, #8
 800379c:	2100      	movs	r1, #0
 800379e:	4618      	mov	r0, r3
 80037a0:	f001 f842 	bl	8004828 <RCCEx_PLL2_Config>
 80037a4:	4603      	mov	r3, r0
 80037a6:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80037aa:	e011      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80037ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037b0:	3328      	adds	r3, #40	; 0x28
 80037b2:	2100      	movs	r1, #0
 80037b4:	4618      	mov	r0, r3
 80037b6:	f001 f8e9 	bl	800498c <RCCEx_PLL3_Config>
 80037ba:	4603      	mov	r3, r0
 80037bc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80037c0:	e006      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80037c8:	e002      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80037ca:	bf00      	nop
 80037cc:	e000      	b.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80037ce:	bf00      	nop
    }

    if (ret == HAL_OK)
 80037d0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d10b      	bne.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80037d8:	4b8e      	ldr	r3, [pc, #568]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037dc:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80037e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037e4:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80037e8:	4a8a      	ldr	r2, [pc, #552]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037ea:	430b      	orrs	r3, r1
 80037ec:	6593      	str	r3, [r2, #88]	; 0x58
 80037ee:	e003      	b.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037f0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80037f4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80037f8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80037fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003800:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8003804:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003808:	2300      	movs	r3, #0
 800380a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800380e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003812:	460b      	mov	r3, r1
 8003814:	4313      	orrs	r3, r2
 8003816:	d03a      	beq.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8003818:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800381c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800381e:	2b30      	cmp	r3, #48	; 0x30
 8003820:	d01f      	beq.n	8003862 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8003822:	2b30      	cmp	r3, #48	; 0x30
 8003824:	d819      	bhi.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8003826:	2b20      	cmp	r3, #32
 8003828:	d00c      	beq.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800382a:	2b20      	cmp	r3, #32
 800382c:	d815      	bhi.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800382e:	2b00      	cmp	r3, #0
 8003830:	d019      	beq.n	8003866 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8003832:	2b10      	cmp	r3, #16
 8003834:	d111      	bne.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003836:	4b77      	ldr	r3, [pc, #476]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003838:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383a:	4a76      	ldr	r2, [pc, #472]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800383c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003840:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003842:	e011      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003844:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003848:	3308      	adds	r3, #8
 800384a:	2102      	movs	r1, #2
 800384c:	4618      	mov	r0, r3
 800384e:	f000 ffeb 	bl	8004828 <RCCEx_PLL2_Config>
 8003852:	4603      	mov	r3, r0
 8003854:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8003858:	e006      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003860:	e002      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003862:	bf00      	nop
 8003864:	e000      	b.n	8003868 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003866:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003868:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800386c:	2b00      	cmp	r3, #0
 800386e:	d10a      	bne.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8003870:	4b68      	ldr	r3, [pc, #416]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003872:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003874:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003878:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800387c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800387e:	4a65      	ldr	r2, [pc, #404]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003880:	430b      	orrs	r3, r1
 8003882:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003884:	e003      	b.n	800388e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003886:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800388a:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800388e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003892:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003896:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 800389a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800389e:	2300      	movs	r3, #0
 80038a0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80038a4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80038a8:	460b      	mov	r3, r1
 80038aa:	4313      	orrs	r3, r2
 80038ac:	d051      	beq.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80038ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038b8:	d035      	beq.n	8003926 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80038ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80038be:	d82e      	bhi.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80038c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80038c4:	d031      	beq.n	800392a <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80038c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80038ca:	d828      	bhi.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80038cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038d0:	d01a      	beq.n	8003908 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80038d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80038d6:	d822      	bhi.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d003      	beq.n	80038e4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80038dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038e0:	d007      	beq.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80038e2:	e01c      	b.n	800391e <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038e4:	4b4b      	ldr	r3, [pc, #300]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e8:	4a4a      	ldr	r2, [pc, #296]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80038ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80038f0:	e01c      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80038f6:	3308      	adds	r3, #8
 80038f8:	2100      	movs	r1, #0
 80038fa:	4618      	mov	r0, r3
 80038fc:	f000 ff94 	bl	8004828 <RCCEx_PLL2_Config>
 8003900:	4603      	mov	r3, r0
 8003902:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8003906:	e011      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003908:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800390c:	3328      	adds	r3, #40	; 0x28
 800390e:	2100      	movs	r1, #0
 8003910:	4618      	mov	r0, r3
 8003912:	f001 f83b 	bl	800498c <RCCEx_PLL3_Config>
 8003916:	4603      	mov	r3, r0
 8003918:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800391c:	e006      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003924:	e002      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8003926:	bf00      	nop
 8003928:	e000      	b.n	800392c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800392a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800392c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003930:	2b00      	cmp	r3, #0
 8003932:	d10a      	bne.n	800394a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8003934:	4b37      	ldr	r3, [pc, #220]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003936:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003938:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 800393c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003940:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003942:	4a34      	ldr	r2, [pc, #208]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003944:	430b      	orrs	r3, r1
 8003946:	6513      	str	r3, [r2, #80]	; 0x50
 8003948:	e003      	b.n	8003952 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800394a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800394e:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8003952:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003956:	e9d3 2300 	ldrd	r2, r3, [r3]
 800395a:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 800395e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003962:	2300      	movs	r3, #0
 8003964:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003968:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800396c:	460b      	mov	r3, r1
 800396e:	4313      	orrs	r3, r2
 8003970:	d056      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8003972:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003976:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003978:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800397c:	d033      	beq.n	80039e6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800397e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003982:	d82c      	bhi.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003984:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003988:	d02f      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800398a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800398e:	d826      	bhi.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003990:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003994:	d02b      	beq.n	80039ee <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003996:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800399a:	d820      	bhi.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x592>
 800399c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039a0:	d012      	beq.n	80039c8 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80039a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80039a6:	d81a      	bhi.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x592>
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d022      	beq.n	80039f2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80039ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039b0:	d115      	bne.n	80039de <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039b6:	3308      	adds	r3, #8
 80039b8:	2101      	movs	r1, #1
 80039ba:	4618      	mov	r0, r3
 80039bc:	f000 ff34 	bl	8004828 <RCCEx_PLL2_Config>
 80039c0:	4603      	mov	r3, r0
 80039c2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80039c6:	e015      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80039cc:	3328      	adds	r3, #40	; 0x28
 80039ce:	2101      	movs	r1, #1
 80039d0:	4618      	mov	r0, r3
 80039d2:	f000 ffdb 	bl	800498c <RCCEx_PLL3_Config>
 80039d6:	4603      	mov	r3, r0
 80039d8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80039dc:	e00a      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 80039e4:	e006      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80039e6:	bf00      	nop
 80039e8:	e004      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80039ea:	bf00      	nop
 80039ec:	e002      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80039ee:	bf00      	nop
 80039f0:	e000      	b.n	80039f4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80039f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80039f4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d10d      	bne.n	8003a18 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 80039fc:	4b05      	ldr	r3, [pc, #20]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80039fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a00:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8003a04:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003a0a:	4a02      	ldr	r2, [pc, #8]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003a0c:	430b      	orrs	r3, r1
 8003a0e:	6513      	str	r3, [r2, #80]	; 0x50
 8003a10:	e006      	b.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8003a12:	bf00      	nop
 8003a14:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a18:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003a1c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8003a20:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a28:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8003a2c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003a30:	2300      	movs	r3, #0
 8003a32:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8003a36:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	d055      	beq.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8003a40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a44:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003a48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a4c:	d033      	beq.n	8003ab6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8003a4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a52:	d82c      	bhi.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003a54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a58:	d02f      	beq.n	8003aba <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8003a5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a5e:	d826      	bhi.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003a60:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a64:	d02b      	beq.n	8003abe <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003a66:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003a6a:	d820      	bhi.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003a6c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a70:	d012      	beq.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8003a72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a76:	d81a      	bhi.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d022      	beq.n	8003ac2 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003a7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003a80:	d115      	bne.n	8003aae <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003a82:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a86:	3308      	adds	r3, #8
 8003a88:	2101      	movs	r1, #1
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 fecc 	bl	8004828 <RCCEx_PLL2_Config>
 8003a90:	4603      	mov	r3, r0
 8003a92:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003a96:	e015      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003a98:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003a9c:	3328      	adds	r3, #40	; 0x28
 8003a9e:	2101      	movs	r1, #1
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	f000 ff73 	bl	800498c <RCCEx_PLL3_Config>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003aac:	e00a      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003ab4:	e006      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003ab6:	bf00      	nop
 8003ab8:	e004      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003aba:	bf00      	nop
 8003abc:	e002      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003abe:	bf00      	nop
 8003ac0:	e000      	b.n	8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003ac2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003ac4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10b      	bne.n	8003ae4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003acc:	4ba3      	ldr	r3, [pc, #652]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ace:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ad0:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003ad4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ad8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003adc:	4a9f      	ldr	r2, [pc, #636]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ade:	430b      	orrs	r3, r1
 8003ae0:	6593      	str	r3, [r2, #88]	; 0x58
 8003ae2:	e003      	b.n	8003aec <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ae4:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ae8:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003aec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003af4:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003af8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003afc:	2300      	movs	r3, #0
 8003afe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8003b02:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003b06:	460b      	mov	r3, r1
 8003b08:	4313      	orrs	r3, r2
 8003b0a:	d037      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8003b0c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b16:	d00e      	beq.n	8003b36 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8003b18:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003b1c:	d816      	bhi.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x700>
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d018      	beq.n	8003b54 <HAL_RCCEx_PeriphCLKConfig+0x708>
 8003b22:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003b26:	d111      	bne.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003b28:	4b8c      	ldr	r3, [pc, #560]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b2c:	4a8b      	ldr	r2, [pc, #556]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b32:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003b34:	e00f      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003b36:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b3a:	3308      	adds	r3, #8
 8003b3c:	2101      	movs	r1, #1
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f000 fe72 	bl	8004828 <RCCEx_PLL2_Config>
 8003b44:	4603      	mov	r3, r0
 8003b46:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8003b4a:	e004      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003b52:	e000      	b.n	8003b56 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8003b54:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003b56:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d10a      	bne.n	8003b74 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003b5e:	4b7f      	ldr	r3, [pc, #508]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003b62:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003b66:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003b6c:	4a7b      	ldr	r2, [pc, #492]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003b6e:	430b      	orrs	r3, r1
 8003b70:	6513      	str	r3, [r2, #80]	; 0x50
 8003b72:	e003      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b74:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003b78:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003b7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b84:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003b88:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003b92:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8003b96:	460b      	mov	r3, r1
 8003b98:	4313      	orrs	r3, r2
 8003b9a:	d039      	beq.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003b9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ba0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003ba2:	2b03      	cmp	r3, #3
 8003ba4:	d81c      	bhi.n	8003be0 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003ba6:	a201      	add	r2, pc, #4	; (adr r2, 8003bac <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003ba8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bac:	08003be9 	.word	0x08003be9
 8003bb0:	08003bbd 	.word	0x08003bbd
 8003bb4:	08003bcb 	.word	0x08003bcb
 8003bb8:	08003be9 	.word	0x08003be9
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003bbc:	4b67      	ldr	r3, [pc, #412]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bc0:	4a66      	ldr	r2, [pc, #408]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003bc8:	e00f      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003bca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bce:	3308      	adds	r3, #8
 8003bd0:	2102      	movs	r1, #2
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f000 fe28 	bl	8004828 <RCCEx_PLL2_Config>
 8003bd8:	4603      	mov	r3, r0
 8003bda:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003bde:	e004      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8003be0:	2301      	movs	r3, #1
 8003be2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003be6:	e000      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003be8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003bea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d10a      	bne.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8003bf2:	4b5a      	ldr	r3, [pc, #360]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf6:	f023 0103 	bic.w	r1, r3, #3
 8003bfa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c00:	4a56      	ldr	r2, [pc, #344]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c02:	430b      	orrs	r3, r1
 8003c04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c06:	e003      	b.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c08:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c0c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003c10:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c18:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8003c1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003c20:	2300      	movs	r3, #0
 8003c22:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003c26:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	f000 809f 	beq.w	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c32:	4b4b      	ldr	r3, [pc, #300]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4a4a      	ldr	r2, [pc, #296]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003c38:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c3c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003c3e:	f7fc ff41 	bl	8000ac4 <HAL_GetTick>
 8003c42:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c46:	e00b      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c48:	f7fc ff3c 	bl	8000ac4 <HAL_GetTick>
 8003c4c:	4602      	mov	r2, r0
 8003c4e:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003c52:	1ad3      	subs	r3, r2, r3
 8003c54:	2b64      	cmp	r3, #100	; 0x64
 8003c56:	d903      	bls.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003c5e:	e005      	b.n	8003c6c <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003c60:	4b3f      	ldr	r3, [pc, #252]	; (8003d60 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d0ed      	beq.n	8003c48 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003c6c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d179      	bne.n	8003d68 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003c74:	4b39      	ldr	r3, [pc, #228]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c76:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c78:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003c7c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003c80:	4053      	eors	r3, r2
 8003c82:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d015      	beq.n	8003cb6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c8a:	4b34      	ldr	r3, [pc, #208]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c92:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c96:	4b31      	ldr	r3, [pc, #196]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c9a:	4a30      	ldr	r2, [pc, #192]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003c9c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ca0:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003ca2:	4b2e      	ldr	r3, [pc, #184]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ca4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ca6:	4a2d      	ldr	r2, [pc, #180]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ca8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cac:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003cae:	4a2b      	ldr	r2, [pc, #172]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cb0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cb4:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003cb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003cba:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003cbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cc2:	d118      	bne.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc4:	f7fc fefe 	bl	8000ac4 <HAL_GetTick>
 8003cc8:	f8c7 0118 	str.w	r0, [r7, #280]	; 0x118

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003ccc:	e00d      	b.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cce:	f7fc fef9 	bl	8000ac4 <HAL_GetTick>
 8003cd2:	4602      	mov	r2, r0
 8003cd4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8003cd8:	1ad2      	subs	r2, r2, r3
 8003cda:	f241 3388 	movw	r3, #5000	; 0x1388
 8003cde:	429a      	cmp	r2, r3
 8003ce0:	d903      	bls.n	8003cea <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003ce2:	2303      	movs	r3, #3
 8003ce4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
            break;
 8003ce8:	e005      	b.n	8003cf6 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003cea:	4b1c      	ldr	r3, [pc, #112]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0eb      	beq.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003cf6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d129      	bne.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003cfe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d02:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d0e:	d10e      	bne.n	8003d2e <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003d10:	4b12      	ldr	r3, [pc, #72]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003d18:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d1c:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d20:	091a      	lsrs	r2, r3, #4
 8003d22:	4b10      	ldr	r3, [pc, #64]	; (8003d64 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003d24:	4013      	ands	r3, r2
 8003d26:	4a0d      	ldr	r2, [pc, #52]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d28:	430b      	orrs	r3, r1
 8003d2a:	6113      	str	r3, [r2, #16]
 8003d2c:	e005      	b.n	8003d3a <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003d2e:	4b0b      	ldr	r3, [pc, #44]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d30:	691b      	ldr	r3, [r3, #16]
 8003d32:	4a0a      	ldr	r2, [pc, #40]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d34:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003d38:	6113      	str	r3, [r2, #16]
 8003d3a:	4b08      	ldr	r3, [pc, #32]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d3c:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003d3e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d42:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003d46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d4a:	4a04      	ldr	r2, [pc, #16]	; (8003d5c <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003d4c:	430b      	orrs	r3, r1
 8003d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003d50:	e00e      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003d52:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d56:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
 8003d5a:	e009      	b.n	8003d70 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003d5c:	58024400 	.word	0x58024400
 8003d60:	58024800 	.word	0x58024800
 8003d64:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d68:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003d6c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003d70:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d78:	f002 0301 	and.w	r3, r2, #1
 8003d7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d80:	2300      	movs	r3, #0
 8003d82:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003d86:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003d8a:	460b      	mov	r3, r1
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	f000 8089 	beq.w	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003d92:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003d96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d98:	2b28      	cmp	r3, #40	; 0x28
 8003d9a:	d86b      	bhi.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003d9c:	a201      	add	r2, pc, #4	; (adr r2, 8003da4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003da2:	bf00      	nop
 8003da4:	08003e7d 	.word	0x08003e7d
 8003da8:	08003e75 	.word	0x08003e75
 8003dac:	08003e75 	.word	0x08003e75
 8003db0:	08003e75 	.word	0x08003e75
 8003db4:	08003e75 	.word	0x08003e75
 8003db8:	08003e75 	.word	0x08003e75
 8003dbc:	08003e75 	.word	0x08003e75
 8003dc0:	08003e75 	.word	0x08003e75
 8003dc4:	08003e49 	.word	0x08003e49
 8003dc8:	08003e75 	.word	0x08003e75
 8003dcc:	08003e75 	.word	0x08003e75
 8003dd0:	08003e75 	.word	0x08003e75
 8003dd4:	08003e75 	.word	0x08003e75
 8003dd8:	08003e75 	.word	0x08003e75
 8003ddc:	08003e75 	.word	0x08003e75
 8003de0:	08003e75 	.word	0x08003e75
 8003de4:	08003e5f 	.word	0x08003e5f
 8003de8:	08003e75 	.word	0x08003e75
 8003dec:	08003e75 	.word	0x08003e75
 8003df0:	08003e75 	.word	0x08003e75
 8003df4:	08003e75 	.word	0x08003e75
 8003df8:	08003e75 	.word	0x08003e75
 8003dfc:	08003e75 	.word	0x08003e75
 8003e00:	08003e75 	.word	0x08003e75
 8003e04:	08003e7d 	.word	0x08003e7d
 8003e08:	08003e75 	.word	0x08003e75
 8003e0c:	08003e75 	.word	0x08003e75
 8003e10:	08003e75 	.word	0x08003e75
 8003e14:	08003e75 	.word	0x08003e75
 8003e18:	08003e75 	.word	0x08003e75
 8003e1c:	08003e75 	.word	0x08003e75
 8003e20:	08003e75 	.word	0x08003e75
 8003e24:	08003e7d 	.word	0x08003e7d
 8003e28:	08003e75 	.word	0x08003e75
 8003e2c:	08003e75 	.word	0x08003e75
 8003e30:	08003e75 	.word	0x08003e75
 8003e34:	08003e75 	.word	0x08003e75
 8003e38:	08003e75 	.word	0x08003e75
 8003e3c:	08003e75 	.word	0x08003e75
 8003e40:	08003e75 	.word	0x08003e75
 8003e44:	08003e7d 	.word	0x08003e7d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003e48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e4c:	3308      	adds	r3, #8
 8003e4e:	2101      	movs	r1, #1
 8003e50:	4618      	mov	r0, r3
 8003e52:	f000 fce9 	bl	8004828 <RCCEx_PLL2_Config>
 8003e56:	4603      	mov	r3, r0
 8003e58:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003e5c:	e00f      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003e5e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e62:	3328      	adds	r3, #40	; 0x28
 8003e64:	2101      	movs	r1, #1
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 fd90 	bl	800498c <RCCEx_PLL3_Config>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003e72:	e004      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003e7a:	e000      	b.n	8003e7e <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003e7c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e7e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d10a      	bne.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003e86:	4bbf      	ldr	r3, [pc, #764]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e8a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003e8e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003e92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e94:	4abb      	ldr	r2, [pc, #748]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e96:	430b      	orrs	r3, r1
 8003e98:	6553      	str	r3, [r2, #84]	; 0x54
 8003e9a:	e003      	b.n	8003ea4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e9c:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003ea0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003ea4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eac:	f002 0302 	and.w	r3, r2, #2
 8003eb0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003eba:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	4313      	orrs	r3, r2
 8003ec2:	d041      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003ec4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ec8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003eca:	2b05      	cmp	r3, #5
 8003ecc:	d824      	bhi.n	8003f18 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003ece:	a201      	add	r2, pc, #4	; (adr r2, 8003ed4 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003ed0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ed4:	08003f21 	.word	0x08003f21
 8003ed8:	08003eed 	.word	0x08003eed
 8003edc:	08003f03 	.word	0x08003f03
 8003ee0:	08003f21 	.word	0x08003f21
 8003ee4:	08003f21 	.word	0x08003f21
 8003ee8:	08003f21 	.word	0x08003f21
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003eec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ef0:	3308      	adds	r3, #8
 8003ef2:	2101      	movs	r1, #1
 8003ef4:	4618      	mov	r0, r3
 8003ef6:	f000 fc97 	bl	8004828 <RCCEx_PLL2_Config>
 8003efa:	4603      	mov	r3, r0
 8003efc:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003f00:	e00f      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003f02:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f06:	3328      	adds	r3, #40	; 0x28
 8003f08:	2101      	movs	r1, #1
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f000 fd3e 	bl	800498c <RCCEx_PLL3_Config>
 8003f10:	4603      	mov	r3, r0
 8003f12:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003f16:	e004      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003f18:	2301      	movs	r3, #1
 8003f1a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003f1e:	e000      	b.n	8003f22 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003f20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f22:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d10a      	bne.n	8003f40 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003f2a:	4b96      	ldr	r3, [pc, #600]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f2e:	f023 0107 	bic.w	r1, r3, #7
 8003f32:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f36:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003f38:	4a92      	ldr	r2, [pc, #584]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f3a:	430b      	orrs	r3, r1
 8003f3c:	6553      	str	r3, [r2, #84]	; 0x54
 8003f3e:	e003      	b.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f40:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003f44:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003f48:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f50:	f002 0304 	and.w	r3, r2, #4
 8003f54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003f58:	2300      	movs	r3, #0
 8003f5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003f5e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003f62:	460b      	mov	r3, r1
 8003f64:	4313      	orrs	r3, r2
 8003f66:	d044      	beq.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003f68:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f6c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f70:	2b05      	cmp	r3, #5
 8003f72:	d825      	bhi.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003f74:	a201      	add	r2, pc, #4	; (adr r2, 8003f7c <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003f76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f7a:	bf00      	nop
 8003f7c:	08003fc9 	.word	0x08003fc9
 8003f80:	08003f95 	.word	0x08003f95
 8003f84:	08003fab 	.word	0x08003fab
 8003f88:	08003fc9 	.word	0x08003fc9
 8003f8c:	08003fc9 	.word	0x08003fc9
 8003f90:	08003fc9 	.word	0x08003fc9
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003f94:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003f98:	3308      	adds	r3, #8
 8003f9a:	2101      	movs	r1, #1
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f000 fc43 	bl	8004828 <RCCEx_PLL2_Config>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003fa8:	e00f      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003faa:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fae:	3328      	adds	r3, #40	; 0x28
 8003fb0:	2101      	movs	r1, #1
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f000 fcea 	bl	800498c <RCCEx_PLL3_Config>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003fbe:	e004      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8003fc6:	e000      	b.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003fc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fca:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d10b      	bne.n	8003fea <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003fd2:	4b6c      	ldr	r3, [pc, #432]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd6:	f023 0107 	bic.w	r1, r3, #7
 8003fda:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003fde:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003fe2:	4a68      	ldr	r2, [pc, #416]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003fe4:	430b      	orrs	r3, r1
 8003fe6:	6593      	str	r3, [r2, #88]	; 0x58
 8003fe8:	e003      	b.n	8003ff2 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fea:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8003fee:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003ff2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8003ff6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ffa:	f002 0320 	and.w	r3, r2, #32
 8003ffe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004002:	2300      	movs	r3, #0
 8004004:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004008:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 800400c:	460b      	mov	r3, r1
 800400e:	4313      	orrs	r3, r2
 8004010:	d055      	beq.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004012:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800401e:	d033      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8004020:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004024:	d82c      	bhi.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004026:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800402a:	d02f      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0xc40>
 800402c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004030:	d826      	bhi.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8004032:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004036:	d02b      	beq.n	8004090 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8004038:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800403c:	d820      	bhi.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800403e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004042:	d012      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8004044:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004048:	d81a      	bhi.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800404a:	2b00      	cmp	r3, #0
 800404c:	d022      	beq.n	8004094 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 800404e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004052:	d115      	bne.n	8004080 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004054:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004058:	3308      	adds	r3, #8
 800405a:	2100      	movs	r1, #0
 800405c:	4618      	mov	r0, r3
 800405e:	f000 fbe3 	bl	8004828 <RCCEx_PLL2_Config>
 8004062:	4603      	mov	r3, r0
 8004064:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004068:	e015      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800406a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800406e:	3328      	adds	r3, #40	; 0x28
 8004070:	2102      	movs	r1, #2
 8004072:	4618      	mov	r0, r3
 8004074:	f000 fc8a 	bl	800498c <RCCEx_PLL3_Config>
 8004078:	4603      	mov	r3, r0
 800407a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800407e:	e00a      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004080:	2301      	movs	r3, #1
 8004082:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004086:	e006      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004088:	bf00      	nop
 800408a:	e004      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800408c:	bf00      	nop
 800408e:	e002      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004090:	bf00      	nop
 8004092:	e000      	b.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004094:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004096:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800409a:	2b00      	cmp	r3, #0
 800409c:	d10b      	bne.n	80040b6 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800409e:	4b39      	ldr	r3, [pc, #228]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040a2:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80040a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ae:	4a35      	ldr	r2, [pc, #212]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80040b0:	430b      	orrs	r3, r1
 80040b2:	6553      	str	r3, [r2, #84]	; 0x54
 80040b4:	e003      	b.n	80040be <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80040b6:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80040ba:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80040be:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040c6:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80040ca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80040ce:	2300      	movs	r3, #0
 80040d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80040d4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 80040d8:	460b      	mov	r3, r1
 80040da:	4313      	orrs	r3, r2
 80040dc:	d058      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80040de:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80040e2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040e6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80040ea:	d033      	beq.n	8004154 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80040ec:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80040f0:	d82c      	bhi.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80040f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040f6:	d02f      	beq.n	8004158 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80040f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80040fc:	d826      	bhi.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80040fe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004102:	d02b      	beq.n	800415c <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004104:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004108:	d820      	bhi.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 800410a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800410e:	d012      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004110:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004114:	d81a      	bhi.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004116:	2b00      	cmp	r3, #0
 8004118:	d022      	beq.n	8004160 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 800411a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800411e:	d115      	bne.n	800414c <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004120:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004124:	3308      	adds	r3, #8
 8004126:	2100      	movs	r1, #0
 8004128:	4618      	mov	r0, r3
 800412a:	f000 fb7d 	bl	8004828 <RCCEx_PLL2_Config>
 800412e:	4603      	mov	r3, r0
 8004130:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004134:	e015      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004136:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800413a:	3328      	adds	r3, #40	; 0x28
 800413c:	2102      	movs	r1, #2
 800413e:	4618      	mov	r0, r3
 8004140:	f000 fc24 	bl	800498c <RCCEx_PLL3_Config>
 8004144:	4603      	mov	r3, r0
 8004146:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800414a:	e00a      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004152:	e006      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004154:	bf00      	nop
 8004156:	e004      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004158:	bf00      	nop
 800415a:	e002      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800415c:	bf00      	nop
 800415e:	e000      	b.n	8004162 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004160:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004162:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004166:	2b00      	cmp	r3, #0
 8004168:	d10e      	bne.n	8004188 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800416a:	4b06      	ldr	r3, [pc, #24]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800416c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800416e:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004172:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004176:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800417a:	4a02      	ldr	r2, [pc, #8]	; (8004184 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800417c:	430b      	orrs	r3, r1
 800417e:	6593      	str	r3, [r2, #88]	; 0x58
 8004180:	e006      	b.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004182:	bf00      	nop
 8004184:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004188:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800418c:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004190:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004194:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004198:	f002 0380 	and.w	r3, r2, #128	; 0x80
 800419c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80041a0:	2300      	movs	r3, #0
 80041a2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80041a6:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 80041aa:	460b      	mov	r3, r1
 80041ac:	4313      	orrs	r3, r2
 80041ae:	d055      	beq.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80041b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041b4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80041b8:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80041bc:	d033      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 80041be:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 80041c2:	d82c      	bhi.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80041c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041c8:	d02f      	beq.n	800422a <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80041ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041ce:	d826      	bhi.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80041d0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80041d4:	d02b      	beq.n	800422e <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80041d6:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80041da:	d820      	bhi.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80041dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041e0:	d012      	beq.n	8004208 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80041e2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80041e6:	d81a      	bhi.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d022      	beq.n	8004232 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80041ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041f0:	d115      	bne.n	800421e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80041f2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80041f6:	3308      	adds	r3, #8
 80041f8:	2100      	movs	r1, #0
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 fb14 	bl	8004828 <RCCEx_PLL2_Config>
 8004200:	4603      	mov	r3, r0
 8004202:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004206:	e015      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004208:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800420c:	3328      	adds	r3, #40	; 0x28
 800420e:	2102      	movs	r1, #2
 8004210:	4618      	mov	r0, r3
 8004212:	f000 fbbb 	bl	800498c <RCCEx_PLL3_Config>
 8004216:	4603      	mov	r3, r0
 8004218:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800421c:	e00a      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800421e:	2301      	movs	r3, #1
 8004220:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004224:	e006      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004226:	bf00      	nop
 8004228:	e004      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800422a:	bf00      	nop
 800422c:	e002      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800422e:	bf00      	nop
 8004230:	e000      	b.n	8004234 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004232:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004234:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004238:	2b00      	cmp	r3, #0
 800423a:	d10b      	bne.n	8004254 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800423c:	4bbb      	ldr	r3, [pc, #748]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800423e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004240:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004244:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004248:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800424c:	4ab7      	ldr	r2, [pc, #732]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800424e:	430b      	orrs	r3, r1
 8004250:	6593      	str	r3, [r2, #88]	; 0x58
 8004252:	e003      	b.n	800425c <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004254:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004258:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800425c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004264:	f002 0308 	and.w	r3, r2, #8
 8004268:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800426c:	2300      	movs	r3, #0
 800426e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004272:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004276:	460b      	mov	r3, r1
 8004278:	4313      	orrs	r3, r2
 800427a:	d01e      	beq.n	80042ba <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800427c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004280:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004288:	d10c      	bne.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800428a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800428e:	3328      	adds	r3, #40	; 0x28
 8004290:	2102      	movs	r1, #2
 8004292:	4618      	mov	r0, r3
 8004294:	f000 fb7a 	bl	800498c <RCCEx_PLL3_Config>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d002      	beq.n	80042a4 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800429e:	2301      	movs	r3, #1
 80042a0:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80042a4:	4ba1      	ldr	r3, [pc, #644]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 80042a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80042ac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042b4:	4a9d      	ldr	r2, [pc, #628]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 80042b6:	430b      	orrs	r3, r1
 80042b8:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80042ba:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c2:	f002 0310 	and.w	r3, r2, #16
 80042c6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80042ca:	2300      	movs	r3, #0
 80042cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80042d0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80042d4:	460b      	mov	r3, r1
 80042d6:	4313      	orrs	r3, r2
 80042d8:	d01e      	beq.n	8004318 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80042da:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80042e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042e6:	d10c      	bne.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80042e8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80042ec:	3328      	adds	r3, #40	; 0x28
 80042ee:	2102      	movs	r1, #2
 80042f0:	4618      	mov	r0, r3
 80042f2:	f000 fb4b 	bl	800498c <RCCEx_PLL3_Config>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d002      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004302:	4b8a      	ldr	r3, [pc, #552]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8004304:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004306:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800430a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800430e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004312:	4a86      	ldr	r2, [pc, #536]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8004314:	430b      	orrs	r3, r1
 8004316:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004318:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800431c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004320:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004324:	67bb      	str	r3, [r7, #120]	; 0x78
 8004326:	2300      	movs	r3, #0
 8004328:	67fb      	str	r3, [r7, #124]	; 0x7c
 800432a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 800432e:	460b      	mov	r3, r1
 8004330:	4313      	orrs	r3, r2
 8004332:	d03e      	beq.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004334:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004338:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800433c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004340:	d022      	beq.n	8004388 <HAL_RCCEx_PeriphCLKConfig+0xf3c>
 8004342:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004346:	d81b      	bhi.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8004348:	2b00      	cmp	r3, #0
 800434a:	d003      	beq.n	8004354 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 800434c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004350:	d00b      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0xf1e>
 8004352:	e015      	b.n	8004380 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004354:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004358:	3308      	adds	r3, #8
 800435a:	2100      	movs	r1, #0
 800435c:	4618      	mov	r0, r3
 800435e:	f000 fa63 	bl	8004828 <RCCEx_PLL2_Config>
 8004362:	4603      	mov	r3, r0
 8004364:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004368:	e00f      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xf3e>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800436a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800436e:	3328      	adds	r3, #40	; 0x28
 8004370:	2102      	movs	r1, #2
 8004372:	4618      	mov	r0, r3
 8004374:	f000 fb0a 	bl	800498c <RCCEx_PLL3_Config>
 8004378:	4603      	mov	r3, r0
 800437a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800437e:	e004      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004380:	2301      	movs	r3, #1
 8004382:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004386:	e000      	b.n	800438a <HAL_RCCEx_PeriphCLKConfig+0xf3e>
        break;
 8004388:	bf00      	nop
    }

    if (ret == HAL_OK)
 800438a:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800438e:	2b00      	cmp	r3, #0
 8004390:	d10b      	bne.n	80043aa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004392:	4b66      	ldr	r3, [pc, #408]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8004394:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004396:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800439a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800439e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80043a2:	4a62      	ldr	r2, [pc, #392]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 80043a4:	430b      	orrs	r3, r1
 80043a6:	6593      	str	r3, [r2, #88]	; 0x58
 80043a8:	e003      	b.n	80043b2 <HAL_RCCEx_PeriphCLKConfig+0xf66>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80043aa:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80043ae:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80043b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ba:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 80043be:	673b      	str	r3, [r7, #112]	; 0x70
 80043c0:	2300      	movs	r3, #0
 80043c2:	677b      	str	r3, [r7, #116]	; 0x74
 80043c4:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80043c8:	460b      	mov	r3, r1
 80043ca:	4313      	orrs	r3, r2
 80043cc:	d03b      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xffa>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80043ce:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80043d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043d6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80043da:	d01f      	beq.n	800441c <HAL_RCCEx_PeriphCLKConfig+0xfd0>
 80043dc:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80043e0:	d818      	bhi.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xfc8>
 80043e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80043e6:	d003      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0xfa4>
 80043e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043ec:	d007      	beq.n	80043fe <HAL_RCCEx_PeriphCLKConfig+0xfb2>
 80043ee:	e011      	b.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0xfc8>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043f0:	4b4e      	ldr	r3, [pc, #312]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 80043f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043f4:	4a4d      	ldr	r2, [pc, #308]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 80043f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043fa:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80043fc:	e00f      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0xfd2>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80043fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004402:	3328      	adds	r3, #40	; 0x28
 8004404:	2101      	movs	r1, #1
 8004406:	4618      	mov	r0, r3
 8004408:	f000 fac0 	bl	800498c <RCCEx_PLL3_Config>
 800440c:	4603      	mov	r3, r0
 800440e:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* USB clock source configuration done later after clock selection check */
        break;
 8004412:	e004      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0xfd2>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800441a:	e000      	b.n	800441e <HAL_RCCEx_PeriphCLKConfig+0xfd2>
        break;
 800441c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800441e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10b      	bne.n	800443e <HAL_RCCEx_PeriphCLKConfig+0xff2>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004426:	4b41      	ldr	r3, [pc, #260]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8004428:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800442a:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800442e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004436:	4a3d      	ldr	r2, [pc, #244]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8004438:	430b      	orrs	r3, r1
 800443a:	6553      	str	r3, [r2, #84]	; 0x54
 800443c:	e003      	b.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0xffa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800443e:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004442:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004446:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800444a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800444e:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004452:	66bb      	str	r3, [r7, #104]	; 0x68
 8004454:	2300      	movs	r3, #0
 8004456:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004458:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 800445c:	460b      	mov	r3, r1
 800445e:	4313      	orrs	r3, r2
 8004460:	d031      	beq.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x107a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004462:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004468:	2b00      	cmp	r3, #0
 800446a:	d003      	beq.n	8004474 <HAL_RCCEx_PeriphCLKConfig+0x1028>
 800446c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004470:	d007      	beq.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x1036>
 8004472:	e011      	b.n	8004498 <HAL_RCCEx_PeriphCLKConfig+0x104c>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004474:	4b2d      	ldr	r3, [pc, #180]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8004476:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004478:	4a2c      	ldr	r2, [pc, #176]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800447a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800447e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004480:	e00e      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1054>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004482:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004486:	3308      	adds	r3, #8
 8004488:	2102      	movs	r1, #2
 800448a:	4618      	mov	r0, r3
 800448c:	f000 f9cc 	bl	8004828 <RCCEx_PLL2_Config>
 8004490:	4603      	mov	r3, r0
 8004492:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004496:	e003      	b.n	80044a0 <HAL_RCCEx_PeriphCLKConfig+0x1054>

      default:
        ret = HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 800449e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044a0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d10a      	bne.n	80044be <HAL_RCCEx_PeriphCLKConfig+0x1072>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80044a8:	4b20      	ldr	r3, [pc, #128]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 80044aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80044b0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044b6:	4a1d      	ldr	r2, [pc, #116]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 80044b8:	430b      	orrs	r3, r1
 80044ba:	64d3      	str	r3, [r2, #76]	; 0x4c
 80044bc:	e003      	b.n	80044c6 <HAL_RCCEx_PeriphCLKConfig+0x107a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044be:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80044c2:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80044c6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044ce:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80044d2:	663b      	str	r3, [r7, #96]	; 0x60
 80044d4:	2300      	movs	r3, #0
 80044d6:	667b      	str	r3, [r7, #100]	; 0x64
 80044d8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80044dc:	460b      	mov	r3, r1
 80044de:	4313      	orrs	r3, r2
 80044e0:	d03b      	beq.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x110e>
  {

    switch (PeriphClkInit->RngClockSelection)
 80044e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80044e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80044ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044ee:	d018      	beq.n	8004522 <HAL_RCCEx_PeriphCLKConfig+0x10d6>
 80044f0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80044f4:	d811      	bhi.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x10ce>
 80044f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80044fa:	d014      	beq.n	8004526 <HAL_RCCEx_PeriphCLKConfig+0x10da>
 80044fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004500:	d80b      	bhi.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x10ce>
 8004502:	2b00      	cmp	r3, #0
 8004504:	d014      	beq.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x10e4>
 8004506:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800450a:	d106      	bne.n	800451a <HAL_RCCEx_PeriphCLKConfig+0x10ce>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800450c:	4b07      	ldr	r3, [pc, #28]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 800450e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004510:	4a06      	ldr	r2, [pc, #24]	; (800452c <HAL_RCCEx_PeriphCLKConfig+0x10e0>)
 8004512:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004516:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004518:	e00b      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x10e6>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
        break;
 8004520:	e007      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x10e6>
        break;
 8004522:	bf00      	nop
 8004524:	e005      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x10e6>
        break;
 8004526:	bf00      	nop
 8004528:	e003      	b.n	8004532 <HAL_RCCEx_PeriphCLKConfig+0x10e6>
 800452a:	bf00      	nop
 800452c:	58024400 	.word	0x58024400
        break;
 8004530:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004532:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10b      	bne.n	8004552 <HAL_RCCEx_PeriphCLKConfig+0x1106>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800453a:	4bba      	ldr	r3, [pc, #744]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800453c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800453e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004542:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004546:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800454a:	4ab6      	ldr	r2, [pc, #728]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800454c:	430b      	orrs	r3, r1
 800454e:	6553      	str	r3, [r2, #84]	; 0x54
 8004550:	e003      	b.n	800455a <HAL_RCCEx_PeriphCLKConfig+0x110e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004552:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004556:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800455a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800455e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004562:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004566:	65bb      	str	r3, [r7, #88]	; 0x58
 8004568:	2300      	movs	r3, #0
 800456a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800456c:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004570:	460b      	mov	r3, r1
 8004572:	4313      	orrs	r3, r2
 8004574:	d009      	beq.n	800458a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004576:	4bab      	ldr	r3, [pc, #684]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8004578:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800457a:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800457e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004584:	4aa7      	ldr	r2, [pc, #668]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8004586:	430b      	orrs	r3, r1
 8004588:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800458a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800458e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004592:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004596:	653b      	str	r3, [r7, #80]	; 0x50
 8004598:	2300      	movs	r3, #0
 800459a:	657b      	str	r3, [r7, #84]	; 0x54
 800459c:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80045a0:	460b      	mov	r3, r1
 80045a2:	4313      	orrs	r3, r2
 80045a4:	d00a      	beq.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x1170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80045a6:	4b9f      	ldr	r3, [pc, #636]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 80045a8:	691b      	ldr	r3, [r3, #16]
 80045aa:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80045ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045b2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80045b6:	4a9b      	ldr	r2, [pc, #620]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 80045b8:	430b      	orrs	r3, r1
 80045ba:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80045bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045c4:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80045c8:	64bb      	str	r3, [r7, #72]	; 0x48
 80045ca:	2300      	movs	r3, #0
 80045cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045ce:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80045d2:	460b      	mov	r3, r1
 80045d4:	4313      	orrs	r3, r2
 80045d6:	d009      	beq.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80045d8:	4b92      	ldr	r3, [pc, #584]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 80045da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80045dc:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80045e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045e6:	4a8f      	ldr	r2, [pc, #572]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 80045e8:	430b      	orrs	r3, r1
 80045ea:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80045ec:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80045f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045f4:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80045f8:	643b      	str	r3, [r7, #64]	; 0x40
 80045fa:	2300      	movs	r3, #0
 80045fc:	647b      	str	r3, [r7, #68]	; 0x44
 80045fe:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004602:	460b      	mov	r3, r1
 8004604:	4313      	orrs	r3, r2
 8004606:	d00e      	beq.n	8004626 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004608:	4b86      	ldr	r3, [pc, #536]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800460a:	691b      	ldr	r3, [r3, #16]
 800460c:	4a85      	ldr	r2, [pc, #532]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 800460e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004612:	6113      	str	r3, [r2, #16]
 8004614:	4b83      	ldr	r3, [pc, #524]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8004616:	6919      	ldr	r1, [r3, #16]
 8004618:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800461c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004620:	4a80      	ldr	r2, [pc, #512]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8004622:	430b      	orrs	r3, r1
 8004624:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004626:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800462a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800462e:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004632:	63bb      	str	r3, [r7, #56]	; 0x38
 8004634:	2300      	movs	r3, #0
 8004636:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004638:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800463c:	460b      	mov	r3, r1
 800463e:	4313      	orrs	r3, r2
 8004640:	d009      	beq.n	8004656 <HAL_RCCEx_PeriphCLKConfig+0x120a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004642:	4b78      	ldr	r3, [pc, #480]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8004644:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004646:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800464a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800464e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004650:	4a74      	ldr	r2, [pc, #464]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8004652:	430b      	orrs	r3, r1
 8004654:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004656:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800465a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800465e:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004662:	633b      	str	r3, [r7, #48]	; 0x30
 8004664:	2300      	movs	r3, #0
 8004666:	637b      	str	r3, [r7, #52]	; 0x34
 8004668:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800466c:	460b      	mov	r3, r1
 800466e:	4313      	orrs	r3, r2
 8004670:	d00a      	beq.n	8004688 <HAL_RCCEx_PeriphCLKConfig+0x123c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004672:	4b6c      	ldr	r3, [pc, #432]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8004674:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004676:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800467a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800467e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004682:	4a68      	ldr	r2, [pc, #416]	; (8004824 <HAL_RCCEx_PeriphCLKConfig+0x13d8>)
 8004684:	430b      	orrs	r3, r1
 8004686:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8004688:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800468c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004690:	2100      	movs	r1, #0
 8004692:	62b9      	str	r1, [r7, #40]	; 0x28
 8004694:	f003 0301 	and.w	r3, r3, #1
 8004698:	62fb      	str	r3, [r7, #44]	; 0x2c
 800469a:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800469e:	460b      	mov	r3, r1
 80046a0:	4313      	orrs	r3, r2
 80046a2:	d011      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x127c>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80046a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046a8:	3308      	adds	r3, #8
 80046aa:	2100      	movs	r1, #0
 80046ac:	4618      	mov	r0, r3
 80046ae:	f000 f8bb 	bl	8004828 <RCCEx_PLL2_Config>
 80046b2:	4603      	mov	r3, r0
 80046b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80046b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d003      	beq.n	80046c8 <HAL_RCCEx_PeriphCLKConfig+0x127c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80046c4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80046c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046d0:	2100      	movs	r1, #0
 80046d2:	6239      	str	r1, [r7, #32]
 80046d4:	f003 0302 	and.w	r3, r3, #2
 80046d8:	627b      	str	r3, [r7, #36]	; 0x24
 80046da:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80046de:	460b      	mov	r3, r1
 80046e0:	4313      	orrs	r3, r2
 80046e2:	d011      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x12bc>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80046e8:	3308      	adds	r3, #8
 80046ea:	2101      	movs	r1, #1
 80046ec:	4618      	mov	r0, r3
 80046ee:	f000 f89b 	bl	8004828 <RCCEx_PLL2_Config>
 80046f2:	4603      	mov	r3, r0
 80046f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80046f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d003      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x12bc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004700:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004704:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8004708:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800470c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004710:	2100      	movs	r1, #0
 8004712:	61b9      	str	r1, [r7, #24]
 8004714:	f003 0304 	and.w	r3, r3, #4
 8004718:	61fb      	str	r3, [r7, #28]
 800471a:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800471e:	460b      	mov	r3, r1
 8004720:	4313      	orrs	r3, r2
 8004722:	d011      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004724:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004728:	3308      	adds	r3, #8
 800472a:	2102      	movs	r1, #2
 800472c:	4618      	mov	r0, r3
 800472e:	f000 f87b 	bl	8004828 <RCCEx_PLL2_Config>
 8004732:	4603      	mov	r3, r0
 8004734:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 8004738:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800473c:	2b00      	cmp	r3, #0
 800473e:	d003      	beq.n	8004748 <HAL_RCCEx_PeriphCLKConfig+0x12fc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004740:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004744:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8004748:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800474c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004750:	2100      	movs	r1, #0
 8004752:	6139      	str	r1, [r7, #16]
 8004754:	f003 0308 	and.w	r3, r3, #8
 8004758:	617b      	str	r3, [r7, #20]
 800475a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800475e:	460b      	mov	r3, r1
 8004760:	4313      	orrs	r3, r2
 8004762:	d011      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x133c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004764:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8004768:	3328      	adds	r3, #40	; 0x28
 800476a:	2100      	movs	r1, #0
 800476c:	4618      	mov	r0, r3
 800476e:	f000 f90d 	bl	800498c <RCCEx_PLL3_Config>
 8004772:	4603      	mov	r3, r0
 8004774:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
  
    if (ret == HAL_OK)
 8004778:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800477c:	2b00      	cmp	r3, #0
 800477e:	d003      	beq.n	8004788 <HAL_RCCEx_PeriphCLKConfig+0x133c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004780:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004784:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8004788:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800478c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004790:	2100      	movs	r1, #0
 8004792:	60b9      	str	r1, [r7, #8]
 8004794:	f003 0310 	and.w	r3, r3, #16
 8004798:	60fb      	str	r3, [r7, #12]
 800479a:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800479e:	460b      	mov	r3, r1
 80047a0:	4313      	orrs	r3, r2
 80047a2:	d011      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x137c>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80047a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047a8:	3328      	adds	r3, #40	; 0x28
 80047aa:	2101      	movs	r1, #1
 80047ac:	4618      	mov	r0, r3
 80047ae:	f000 f8ed 	bl	800498c <RCCEx_PLL3_Config>
 80047b2:	4603      	mov	r3, r0
 80047b4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80047b8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d003      	beq.n	80047c8 <HAL_RCCEx_PeriphCLKConfig+0x137c>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047c0:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80047c4:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 80047c8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047d0:	2100      	movs	r1, #0
 80047d2:	6039      	str	r1, [r7, #0]
 80047d4:	f003 0320 	and.w	r3, r3, #32
 80047d8:	607b      	str	r3, [r7, #4]
 80047da:	e9d7 1200 	ldrd	r1, r2, [r7]
 80047de:	460b      	mov	r3, r1
 80047e0:	4313      	orrs	r3, r2
 80047e2:	d011      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x13bc>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80047e4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80047e8:	3328      	adds	r3, #40	; 0x28
 80047ea:	2102      	movs	r1, #2
 80047ec:	4618      	mov	r0, r3
 80047ee:	f000 f8cd 	bl	800498c <RCCEx_PLL3_Config>
 80047f2:	4603      	mov	r3, r0
 80047f4:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
    
    if (ret == HAL_OK)
 80047f8:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d003      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x13bc>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004800:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8004804:	f887 311e 	strb.w	r3, [r7, #286]	; 0x11e
    } 
  }

  if (status == HAL_OK)
 8004808:	f897 311e 	ldrb.w	r3, [r7, #286]	; 0x11e
 800480c:	2b00      	cmp	r3, #0
 800480e:	d101      	bne.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x13c8>
  {
    return HAL_OK;
 8004810:	2300      	movs	r3, #0
 8004812:	e000      	b.n	8004816 <HAL_RCCEx_PeriphCLKConfig+0x13ca>
  }
  return HAL_ERROR;
 8004814:	2301      	movs	r3, #1
}
 8004816:	4618      	mov	r0, r3
 8004818:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800481c:	46bd      	mov	sp, r7
 800481e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004822:	bf00      	nop
 8004824:	58024400 	.word	0x58024400

08004828 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b084      	sub	sp, #16
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
 8004830:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004832:	2300      	movs	r3, #0
 8004834:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004836:	4b53      	ldr	r3, [pc, #332]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 8004838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483a:	f003 0303 	and.w	r3, r3, #3
 800483e:	2b03      	cmp	r3, #3
 8004840:	d101      	bne.n	8004846 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e099      	b.n	800497a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004846:	4b4f      	ldr	r3, [pc, #316]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a4e      	ldr	r2, [pc, #312]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 800484c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004850:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004852:	f7fc f937 	bl	8000ac4 <HAL_GetTick>
 8004856:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004858:	e008      	b.n	800486c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800485a:	f7fc f933 	bl	8000ac4 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	2b02      	cmp	r3, #2
 8004866:	d901      	bls.n	800486c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004868:	2303      	movs	r3, #3
 800486a:	e086      	b.n	800497a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800486c:	4b45      	ldr	r3, [pc, #276]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004874:	2b00      	cmp	r3, #0
 8004876:	d1f0      	bne.n	800485a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004878:	4b42      	ldr	r3, [pc, #264]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 800487a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800487c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	031b      	lsls	r3, r3, #12
 8004886:	493f      	ldr	r1, [pc, #252]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 8004888:	4313      	orrs	r3, r2
 800488a:	628b      	str	r3, [r1, #40]	; 0x28
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	3b01      	subs	r3, #1
 8004892:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	3b01      	subs	r3, #1
 800489c:	025b      	lsls	r3, r3, #9
 800489e:	b29b      	uxth	r3, r3
 80048a0:	431a      	orrs	r2, r3
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	3b01      	subs	r3, #1
 80048a8:	041b      	lsls	r3, r3, #16
 80048aa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80048ae:	431a      	orrs	r2, r3
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	691b      	ldr	r3, [r3, #16]
 80048b4:	3b01      	subs	r3, #1
 80048b6:	061b      	lsls	r3, r3, #24
 80048b8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80048bc:	4931      	ldr	r1, [pc, #196]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 80048be:	4313      	orrs	r3, r2
 80048c0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80048c2:	4b30      	ldr	r3, [pc, #192]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 80048c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048c6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	695b      	ldr	r3, [r3, #20]
 80048ce:	492d      	ldr	r1, [pc, #180]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80048d4:	4b2b      	ldr	r3, [pc, #172]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 80048d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048d8:	f023 0220 	bic.w	r2, r3, #32
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	699b      	ldr	r3, [r3, #24]
 80048e0:	4928      	ldr	r1, [pc, #160]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 80048e2:	4313      	orrs	r3, r2
 80048e4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80048e6:	4b27      	ldr	r3, [pc, #156]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 80048e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048ea:	4a26      	ldr	r2, [pc, #152]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 80048ec:	f023 0310 	bic.w	r3, r3, #16
 80048f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80048f2:	4b24      	ldr	r3, [pc, #144]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 80048f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80048f6:	4b24      	ldr	r3, [pc, #144]	; (8004988 <RCCEx_PLL2_Config+0x160>)
 80048f8:	4013      	ands	r3, r2
 80048fa:	687a      	ldr	r2, [r7, #4]
 80048fc:	69d2      	ldr	r2, [r2, #28]
 80048fe:	00d2      	lsls	r2, r2, #3
 8004900:	4920      	ldr	r1, [pc, #128]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 8004902:	4313      	orrs	r3, r2
 8004904:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004906:	4b1f      	ldr	r3, [pc, #124]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 8004908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800490a:	4a1e      	ldr	r2, [pc, #120]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 800490c:	f043 0310 	orr.w	r3, r3, #16
 8004910:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d106      	bne.n	8004926 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004918:	4b1a      	ldr	r3, [pc, #104]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 800491a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491c:	4a19      	ldr	r2, [pc, #100]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 800491e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004922:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004924:	e00f      	b.n	8004946 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	2b01      	cmp	r3, #1
 800492a:	d106      	bne.n	800493a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800492c:	4b15      	ldr	r3, [pc, #84]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 800492e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004930:	4a14      	ldr	r2, [pc, #80]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 8004932:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004936:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004938:	e005      	b.n	8004946 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800493a:	4b12      	ldr	r3, [pc, #72]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 800493c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800493e:	4a11      	ldr	r2, [pc, #68]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 8004940:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004944:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004946:	4b0f      	ldr	r3, [pc, #60]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a0e      	ldr	r2, [pc, #56]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 800494c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004950:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004952:	f7fc f8b7 	bl	8000ac4 <HAL_GetTick>
 8004956:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004958:	e008      	b.n	800496c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800495a:	f7fc f8b3 	bl	8000ac4 <HAL_GetTick>
 800495e:	4602      	mov	r2, r0
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	2b02      	cmp	r3, #2
 8004966:	d901      	bls.n	800496c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	e006      	b.n	800497a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800496c:	4b05      	ldr	r3, [pc, #20]	; (8004984 <RCCEx_PLL2_Config+0x15c>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d0f0      	beq.n	800495a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004978:	7bfb      	ldrb	r3, [r7, #15]
}
 800497a:	4618      	mov	r0, r3
 800497c:	3710      	adds	r7, #16
 800497e:	46bd      	mov	sp, r7
 8004980:	bd80      	pop	{r7, pc}
 8004982:	bf00      	nop
 8004984:	58024400 	.word	0x58024400
 8004988:	ffff0007 	.word	0xffff0007

0800498c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004996:	2300      	movs	r3, #0
 8004998:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800499a:	4b53      	ldr	r3, [pc, #332]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 800499c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800499e:	f003 0303 	and.w	r3, r3, #3
 80049a2:	2b03      	cmp	r3, #3
 80049a4:	d101      	bne.n	80049aa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e099      	b.n	8004ade <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 80049aa:	4b4f      	ldr	r3, [pc, #316]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a4e      	ldr	r2, [pc, #312]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 80049b0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049b4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80049b6:	f7fc f885 	bl	8000ac4 <HAL_GetTick>
 80049ba:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80049bc:	e008      	b.n	80049d0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80049be:	f7fc f881 	bl	8000ac4 <HAL_GetTick>
 80049c2:	4602      	mov	r2, r0
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	1ad3      	subs	r3, r2, r3
 80049c8:	2b02      	cmp	r3, #2
 80049ca:	d901      	bls.n	80049d0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e086      	b.n	8004ade <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80049d0:	4b45      	ldr	r3, [pc, #276]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d1f0      	bne.n	80049be <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80049dc:	4b42      	ldr	r3, [pc, #264]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 80049de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049e0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	051b      	lsls	r3, r3, #20
 80049ea:	493f      	ldr	r1, [pc, #252]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 80049ec:	4313      	orrs	r3, r2
 80049ee:	628b      	str	r3, [r1, #40]	; 0x28
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	685b      	ldr	r3, [r3, #4]
 80049f4:	3b01      	subs	r3, #1
 80049f6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	3b01      	subs	r3, #1
 8004a00:	025b      	lsls	r3, r3, #9
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	431a      	orrs	r2, r3
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	3b01      	subs	r3, #1
 8004a0c:	041b      	lsls	r3, r3, #16
 8004a0e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004a12:	431a      	orrs	r2, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	691b      	ldr	r3, [r3, #16]
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	061b      	lsls	r3, r3, #24
 8004a1c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004a20:	4931      	ldr	r1, [pc, #196]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004a26:	4b30      	ldr	r3, [pc, #192]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 8004a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a2a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	492d      	ldr	r1, [pc, #180]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004a38:	4b2b      	ldr	r3, [pc, #172]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 8004a3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a3c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	699b      	ldr	r3, [r3, #24]
 8004a44:	4928      	ldr	r1, [pc, #160]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004a4a:	4b27      	ldr	r3, [pc, #156]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 8004a4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a4e:	4a26      	ldr	r2, [pc, #152]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 8004a50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a54:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004a56:	4b24      	ldr	r3, [pc, #144]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 8004a58:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a5a:	4b24      	ldr	r3, [pc, #144]	; (8004aec <RCCEx_PLL3_Config+0x160>)
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	69d2      	ldr	r2, [r2, #28]
 8004a62:	00d2      	lsls	r2, r2, #3
 8004a64:	4920      	ldr	r1, [pc, #128]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 8004a66:	4313      	orrs	r3, r2
 8004a68:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004a6a:	4b1f      	ldr	r3, [pc, #124]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 8004a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a6e:	4a1e      	ldr	r2, [pc, #120]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 8004a70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a74:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d106      	bne.n	8004a8a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004a7c:	4b1a      	ldr	r3, [pc, #104]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 8004a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a80:	4a19      	ldr	r2, [pc, #100]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 8004a82:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004a86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a88:	e00f      	b.n	8004aaa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d106      	bne.n	8004a9e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004a90:	4b15      	ldr	r3, [pc, #84]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 8004a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a94:	4a14      	ldr	r2, [pc, #80]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 8004a96:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004a9a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004a9c:	e005      	b.n	8004aaa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004a9e:	4b12      	ldr	r3, [pc, #72]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 8004aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aa2:	4a11      	ldr	r2, [pc, #68]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 8004aa4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004aa8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004aaa:	4b0f      	ldr	r3, [pc, #60]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a0e      	ldr	r2, [pc, #56]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 8004ab0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ab4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ab6:	f7fc f805 	bl	8000ac4 <HAL_GetTick>
 8004aba:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004abc:	e008      	b.n	8004ad0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004abe:	f7fc f801 	bl	8000ac4 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b02      	cmp	r3, #2
 8004aca:	d901      	bls.n	8004ad0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e006      	b.n	8004ade <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004ad0:	4b05      	ldr	r3, [pc, #20]	; (8004ae8 <RCCEx_PLL3_Config+0x15c>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d0f0      	beq.n	8004abe <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004adc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ade:	4618      	mov	r0, r3
 8004ae0:	3710      	adds	r7, #16
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	58024400 	.word	0x58024400
 8004aec:	ffff0007 	.word	0xffff0007

08004af0 <__libc_init_array>:
 8004af0:	b570      	push	{r4, r5, r6, lr}
 8004af2:	4d0d      	ldr	r5, [pc, #52]	; (8004b28 <__libc_init_array+0x38>)
 8004af4:	4c0d      	ldr	r4, [pc, #52]	; (8004b2c <__libc_init_array+0x3c>)
 8004af6:	1b64      	subs	r4, r4, r5
 8004af8:	10a4      	asrs	r4, r4, #2
 8004afa:	2600      	movs	r6, #0
 8004afc:	42a6      	cmp	r6, r4
 8004afe:	d109      	bne.n	8004b14 <__libc_init_array+0x24>
 8004b00:	4d0b      	ldr	r5, [pc, #44]	; (8004b30 <__libc_init_array+0x40>)
 8004b02:	4c0c      	ldr	r4, [pc, #48]	; (8004b34 <__libc_init_array+0x44>)
 8004b04:	f000 f82e 	bl	8004b64 <_init>
 8004b08:	1b64      	subs	r4, r4, r5
 8004b0a:	10a4      	asrs	r4, r4, #2
 8004b0c:	2600      	movs	r6, #0
 8004b0e:	42a6      	cmp	r6, r4
 8004b10:	d105      	bne.n	8004b1e <__libc_init_array+0x2e>
 8004b12:	bd70      	pop	{r4, r5, r6, pc}
 8004b14:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b18:	4798      	blx	r3
 8004b1a:	3601      	adds	r6, #1
 8004b1c:	e7ee      	b.n	8004afc <__libc_init_array+0xc>
 8004b1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b22:	4798      	blx	r3
 8004b24:	3601      	adds	r6, #1
 8004b26:	e7f2      	b.n	8004b0e <__libc_init_array+0x1e>
 8004b28:	08004be8 	.word	0x08004be8
 8004b2c:	08004be8 	.word	0x08004be8
 8004b30:	08004be8 	.word	0x08004be8
 8004b34:	08004bec 	.word	0x08004bec

08004b38 <memcpy>:
 8004b38:	440a      	add	r2, r1
 8004b3a:	4291      	cmp	r1, r2
 8004b3c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b40:	d100      	bne.n	8004b44 <memcpy+0xc>
 8004b42:	4770      	bx	lr
 8004b44:	b510      	push	{r4, lr}
 8004b46:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b4a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b4e:	4291      	cmp	r1, r2
 8004b50:	d1f9      	bne.n	8004b46 <memcpy+0xe>
 8004b52:	bd10      	pop	{r4, pc}

08004b54 <memset>:
 8004b54:	4402      	add	r2, r0
 8004b56:	4603      	mov	r3, r0
 8004b58:	4293      	cmp	r3, r2
 8004b5a:	d100      	bne.n	8004b5e <memset+0xa>
 8004b5c:	4770      	bx	lr
 8004b5e:	f803 1b01 	strb.w	r1, [r3], #1
 8004b62:	e7f9      	b.n	8004b58 <memset+0x4>

08004b64 <_init>:
 8004b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b66:	bf00      	nop
 8004b68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b6a:	bc08      	pop	{r3}
 8004b6c:	469e      	mov	lr, r3
 8004b6e:	4770      	bx	lr

08004b70 <_fini>:
 8004b70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b72:	bf00      	nop
 8004b74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b76:	bc08      	pop	{r3}
 8004b78:	469e      	mov	lr, r3
 8004b7a:	4770      	bx	lr
